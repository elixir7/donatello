
donatello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d654  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0800d7f8  0800d7f8  0001d7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de7c  0800de7c  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800de7c  0800de7c  0001de7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de84  0800de84  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de84  0800de84  0001de84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de88  0800de88  0001de88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800de8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006978  200002cc  0800e158  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20006c44  0800e158  00026c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014326  00000000  00000000  0002033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000403e  00000000  00000000  00034665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  000386a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de5  00000000  00000000  00039940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b106  00000000  00000000  0003a725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001747a  00000000  00000000  0005582b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092690  00000000  00000000  0006cca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cb8  00000000  00000000  000ff338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00104ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d7dc 	.word	0x0800d7dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800d7dc 	.word	0x0800d7dc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <embeddedCliDefaultConfig+0x40>)
 8000eda:	2240      	movs	r2, #64	; 0x40
 8000edc:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <embeddedCliDefaultConfig+0x40>)
 8000ee0:	2240      	movs	r2, #64	; 0x40
 8000ee2:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <embeddedCliDefaultConfig+0x40>)
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <embeddedCliDefaultConfig+0x40>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <embeddedCliDefaultConfig+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <embeddedCliDefaultConfig+0x40>)
 8000ef8:	2208      	movs	r2, #8
 8000efa:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <embeddedCliDefaultConfig+0x40>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <embeddedCliDefaultConfig+0x40>)
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <embeddedCliDefaultConfig+0x44>)
 8000f06:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <embeddedCliDefaultConfig+0x40>)
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	200002e8 	.word	0x200002e8
 8000f18:	0800d7fc 	.word	0x0800d7fc

08000f1c <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	895b      	ldrh	r3, [r3, #10]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	889b      	ldrh	r3, [r3, #4]
 8000f32:	3303      	adds	r3, #3
 8000f34:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	88db      	ldrh	r3, [r3, #6]
 8000f3a:	3303      	adds	r3, #3
 8000f3c:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8000f3e:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	891b      	ldrh	r3, [r3, #8]
 8000f44:	3303      	adds	r3, #3
 8000f46:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8000f48:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8000f4a:	89fa      	ldrh	r2, [r7, #14]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	3303      	adds	r3, #3
 8000f56:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8000f58:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	3303      	adds	r3, #3
 8000f5e:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8000f60:	4413      	add	r3, r2
 8000f62:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	b29b      	uxth	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b088      	sub	sp, #32
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	895b      	ldrh	r3, [r3, #10]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ffc5 	bl	8000f1c <embeddedCliRequiredSize>
 8000f92:	4603      	mov	r3, r0
 8000f94:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 8000f96:	2300      	movs	r3, #0
 8000f98:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10f      	bne.n	8000fc2 <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 8000fa2:	6938      	ldr	r0, [r7, #16]
 8000fa4:	f009 fcf4 	bl	800a990 <malloc>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <embeddedCliNew+0x46>
            return NULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e092      	b.n	80010e2 <embeddedCliNew+0x16c>
        allocated = true;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	77fb      	strb	r3, [r7, #31]
 8000fc0:	e007      	b.n	8000fd2 <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	8a1b      	ldrh	r3, [r3, #16]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d901      	bls.n	8000fd2 <embeddedCliNew+0x5c>
        return NULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e087      	b.n	80010e2 <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	2100      	movs	r1, #0
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f00a fc5b 	bl	800b898 <memset>

    cli = (EmbeddedCli *) buf;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3310      	adds	r3, #16
 8000fea:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3334      	adds	r3, #52	; 0x34
 8000ff6:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	889b      	ldrh	r3, [r3, #4]
 8001008:	3303      	adds	r3, #3
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	88db      	ldrh	r3, [r3, #6]
 800101e:	3303      	adds	r3, #3
 8001020:	f023 0303 	bic.w	r3, r3, #3
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 8001030:	8afa      	ldrh	r2, [r7, #22]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	3303      	adds	r3, #3
 800103c:	f023 0303 	bic.w	r3, r3, #3
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 800104c:	8afb      	ldrh	r3, [r7, #22]
 800104e:	3303      	adds	r3, #3
 8001050:	f023 0303 	bic.w	r3, r3, #3
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	891a      	ldrh	r2, [r3, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8001068:	7ffb      	ldrb	r3, [r7, #31]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d008      	beq.n	8001080 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	b2da      	uxtb	r2, r3
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    if (config->enableAutoComplete)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7c9b      	ldrb	r3, [r3, #18]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800108e:	f043 0320 	orr.w	r3, r3, #32
 8001092:	b2da      	uxtb	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	889a      	ldrh	r2, [r3, #4]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2200      	movs	r2, #0
 80010a6:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2200      	movs	r2, #0
 80010ac:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	88da      	ldrh	r2, [r3, #6]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	845a      	strh	r2, [r3, #34]	; 0x22
    impl->bindingsCount = 0;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	2200      	movs	r2, #0
 80010ba:	859a      	strh	r2, [r3, #44]	; 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	895b      	ldrh	r3, [r3, #10]
 80010c0:	2201      	movs	r2, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    impl->lastChar = '\0';
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    impl->invitation = config->invitation;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 80010da:	69b8      	ldr	r0, [r7, #24]
 80010dc:	f000 fc3c 	bl	8001958 <initInternalBindings>

    return cli;
 80010e0:	69bb      	ldr	r3, [r7, #24]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <embeddedCliReceiveChar>:

EmbeddedCli *embeddedCliNewDefault(void) {
    return embeddedCliNew(embeddedCliDefaultConfig());
}

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3310      	adds	r3, #16
 8001100:	78fa      	ldrb	r2, [r7, #3]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f000 ffca 	bl	800209e <fifoBufPush>
 800110a:	4603      	mov	r3, r0
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d008      	beq.n	8001128 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	b2da      	uxtb	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    }
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d06c      	beq.n	800121a <embeddedCliProcess+0xea>
        return;

    PREPARE_IMPL(cli);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60fb      	str	r3, [r7, #12]
//    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
//        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
//        writeToOutput(cli, impl->invitation);
//    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8001146:	e045      	b.n	80011d4 <embeddedCliProcess+0xa4>
        char c = fifoBufPop(&impl->rxBuffer);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3310      	adds	r3, #16
 800114c:	4618      	mov	r0, r3
 800114e:	f000 ff7e 	bl	800204e <fifoBufPop>
 8001152:	4603      	mov	r3, r0
 8001154:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <embeddedCliProcess+0x40>
            onEscapedInput(cli, c);
 8001164:	7afb      	ldrb	r3, [r7, #11]
 8001166:	4619      	mov	r1, r3
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fa17 	bl	800159c <onEscapedInput>
 800116e:	e02a      	b.n	80011c6 <embeddedCliProcess+0x96>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001176:	2b1b      	cmp	r3, #27
 8001178:	d10c      	bne.n	8001194 <embeddedCliProcess+0x64>
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	2b5b      	cmp	r3, #91	; 0x5b
 800117e:	d109      	bne.n	8001194 <embeddedCliProcess+0x64>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	b2da      	uxtb	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001192:	e018      	b.n	80011c6 <embeddedCliProcess+0x96>
        } else if (isControlChar(c)) {
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 ff01 	bl	8001f9e <isControlChar>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <embeddedCliProcess+0x7e>
            onControlInput(cli, c);
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	4619      	mov	r1, r3
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fa54 	bl	8001654 <onControlInput>
 80011ac:	e00b      	b.n	80011c6 <embeddedCliProcess+0x96>
        } else if (isDisplayableChar(c)) {
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 ff14 	bl	8001fde <isDisplayableChar>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <embeddedCliProcess+0x96>
            onCharInput(cli, c);
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fa17 	bl	80015f4 <onCharInput>
        }

        printLiveAutocompletion(cli);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fdb1 	bl	8001d2e <printLiveAutocompletion>

        impl->lastChar = c;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	7afa      	ldrb	r2, [r7, #11]
 80011d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3310      	adds	r3, #16
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 ff17 	bl	800200c <fifoBufAvailable>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1b1      	bne.n	8001148 <embeddedCliProcess+0x18>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d014      	beq.n	800121c <embeddedCliProcess+0xec>
        impl->cmdSize = 0;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	8c12      	ldrh	r2, [r2, #32]
 8001200:	4413      	add	r3, r2
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	b2da      	uxtb	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001218:	e000      	b.n	800121c <embeddedCliProcess+0xec>
        return;
 800121a:	bf00      	nop
    }
}
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 8001222:	b084      	sub	sp, #16
 8001224:	b4b0      	push	{r4, r5, r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001230:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001242:	429a      	cmp	r2, r3
 8001244:	d101      	bne.n	800124a <embeddedCliAddBinding+0x28>
        return false;
 8001246:	2300      	movs	r3, #0
 8001248:	e017      	b.n	800127a <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001252:	4619      	mov	r1, r3
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	461d      	mov	r5, r3
 8001260:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001270:	3301      	adds	r3, #1
 8001272:	b29a      	uxth	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	859a      	strh	r2, [r3, #44]	; 0x2c
    return true;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bcb0      	pop	{r4, r5, r7}
 8001282:	b004      	add	sp, #16
 8001284:	4770      	bx	lr
	...

08001288 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d031      	beq.n	80012fe <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fe22 	bl	8001ef8 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fe50 	bl	8001f5c <writeToOutput>
    writeToOutput(cli, lineBreak);
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <embeddedCliPrint+0x80>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fe4a 	bl	8001f5c <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d114      	bne.n	8001300 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fe3d 	bl	8001f5c <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4619      	mov	r1, r3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 fe37 	bl	8001f5c <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8c1a      	ldrh	r2, [r3, #32]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	861a      	strh	r2, [r3, #48]	; 0x30

        printLiveAutocompletion(cli);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fd19 	bl	8001d2e <printLiveAutocompletion>
 80012fc:	e000      	b.n	8001300 <embeddedCliPrint+0x78>
        return;
 80012fe:	bf00      	nop
    }
}
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000

0800130c <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d066      	beq.n	80013e8 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 800131a:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <embeddedCliTokenizeArgs+0xe4>)
 800131c:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 800131e:	2300      	movs	r3, #0
 8001320:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8001322:	2300      	movs	r3, #0
 8001324:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]

    int i = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 800132e:	e047      	b.n	80013c0 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8001336:	7fbb      	ldrb	r3, [r7, #30]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 800133c:	2300      	movs	r3, #0
 800133e:	77bb      	strb	r3, [r7, #30]
 8001340:	e029      	b.n	8001396 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8001342:	7cfb      	ldrb	r3, [r7, #19]
 8001344:	2b5c      	cmp	r3, #92	; 0x5c
 8001346:	d102      	bne.n	800134e <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8001348:	2301      	movs	r3, #1
 800134a:	77bb      	strb	r3, [r7, #30]
            continue;
 800134c:	e038      	b.n	80013c0 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 800134e:	7cfb      	ldrb	r3, [r7, #19]
 8001350:	2b22      	cmp	r3, #34	; 0x22
 8001352:	d110      	bne.n	8001376 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf14      	ite	ne
 800135a:	2301      	movne	r3, #1
 800135c:	2300      	moveq	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	77fb      	strb	r3, [r7, #31]
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8001370:	2300      	movs	r3, #0
 8001372:	74fb      	strb	r3, [r7, #19]
 8001374:	e00f      	b.n	8001396 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8001376:	7ffb      	ldrb	r3, [r7, #31]
 8001378:	f083 0301 	eor.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <embeddedCliTokenizeArgs+0x8a>
 8001382:	7cfb      	ldrb	r3, [r7, #19]
 8001384:	4619      	mov	r1, r3
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f00a fa8e 	bl	800b8a8 <strchr>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8001392:	2300      	movs	r3, #0
 8001394:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8001396:	7cfb      	ldrb	r3, [r7, #19]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d109      	bne.n	80013b0 <embeddedCliTokenizeArgs+0xa4>
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dd0e      	ble.n	80013c0 <embeddedCliTokenizeArgs+0xb4>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d007      	beq.n	80013c0 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	7cfa      	ldrb	r2, [r7, #19]
 80013b8:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3301      	adds	r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	74fb      	strb	r3, [r7, #19]
 80013ca:	7cfb      	ldrb	r3, [r7, #19]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1af      	bne.n	8001330 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	3301      	adds	r3, #1
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	e000      	b.n	80013ea <embeddedCliTokenizeArgs+0xde>
        return;
 80013e8:	bf00      	nop
}
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	0800d800 	.word	0x0800d800

080013f4 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	4619      	mov	r1, r3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 ff51 	bl	80022ac <getTokenPosition>
 800140a:	4603      	mov	r3, r0
 800140c:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001414:	4293      	cmp	r3, r2
 8001416:	d003      	beq.n	8001420 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8001418:	89fb      	ldrh	r3, [r7, #14]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	e000      	b.n	8001422 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	4619      	mov	r1, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 ff36 	bl	80022ac <getTokenPosition>
 8001440:	4603      	mov	r3, r0
 8001442:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144a:	4293      	cmp	r3, r2
 800144c:	d003      	beq.n	8001456 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	e000      	b.n	8001458 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <embeddedCliGetTokenCount+0x16>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <embeddedCliGetTokenCount+0x1a>
        return 0;
 8001476:	2300      	movs	r3, #0
 8001478:	e019      	b.n	80014ae <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 800147e:	2301      	movs	r3, #1
 8001480:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3301      	adds	r3, #1
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	3301      	adds	r3, #1
 80014a0:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 80014a8:	e7eb      	b.n	8001482 <embeddedCliGetTokenCount+0x22>
                break;
 80014aa:	bf00      	nop
    }

    return tokenCount;
 80014ac:	897b      	ldrh	r3, [r7, #10]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	899b      	ldrh	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d05c      	beq.n	8001590 <navigateHistory+0xd4>
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	895a      	ldrh	r2, [r3, #10]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	899b      	ldrh	r3, [r3, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d053      	beq.n	8001590 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	f083 0301 	eor.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	895b      	ldrh	r3, [r3, #10]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d049      	beq.n	8001590 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fcfb 	bl	8001ef8 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4619      	mov	r1, r3
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fd27 	bl	8001f5c <writeToOutput>

    if (navigateUp)
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <navigateHistory+0x66>
        ++impl->history.current;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	895b      	ldrh	r3, [r3, #10]
 8001518:	3301      	adds	r3, #1
 800151a:	b29a      	uxth	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	815a      	strh	r2, [r3, #10]
 8001520:	e005      	b.n	800152e <navigateHistory+0x72>
    else
        --impl->history.current;
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	895b      	ldrh	r3, [r3, #10]
 8001526:	3b01      	subs	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1d1a      	adds	r2, r3, #4
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	895b      	ldrh	r3, [r3, #10]
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f000 fe3e 	bl	80021ba <historyGet>
 800153e:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <navigateHistory+0x8e>
        item = "";
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <navigateHistory+0xdc>)
 8001548:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f7fe fea8 	bl	80002a0 <strlen>
 8001550:	4603      	mov	r3, r0
 8001552:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	89fa      	ldrh	r2, [r7, #14]
 800155a:	6979      	ldr	r1, [r7, #20]
 800155c:	4618      	mov	r0, r3
 800155e:	f00a fa38 	bl	800b9d2 <memcpy>
    impl->cmdBuffer[len] = '\0';
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	69da      	ldr	r2, [r3, #28]
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	4413      	add	r3, r2
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	89fa      	ldrh	r2, [r7, #14]
 8001572:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	4619      	mov	r1, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fcee 	bl	8001f5c <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	8c1a      	ldrh	r2, [r3, #32]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	861a      	strh	r2, [r3, #48]	; 0x30

    printLiveAutocompletion(cli);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fbd0 	bl	8001d2e <printLiveAutocompletion>
 800158e:	e000      	b.n	8001592 <navigateHistory+0xd6>
        return;
 8001590:	bf00      	nop
}
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0800d804 	.word	0x0800d804

0800159c <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	2b3f      	cmp	r3, #63	; 0x3f
 80015b2:	d91b      	bls.n	80015ec <onEscapedInput+0x50>
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	2b7e      	cmp	r3, #126	; 0x7e
 80015b8:	d818      	bhi.n	80015ec <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80015c0:	f023 0308 	bic.w	r3, r3, #8
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (c == 'A' || c == 'B') {
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	2b41      	cmp	r3, #65	; 0x41
 80015d0:	d002      	beq.n	80015d8 <onEscapedInput+0x3c>
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	2b42      	cmp	r3, #66	; 0x42
 80015d6:	d109      	bne.n	80015ec <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b41      	cmp	r3, #65	; 0x41
 80015dc:	bf0c      	ite	eq
 80015de:	2301      	moveq	r3, #1
 80015e0:	2300      	movne	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff68 	bl	80014bc <navigateHistory>
        }
    }
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8c1b      	ldrh	r3, [r3, #32]
 800160a:	3302      	adds	r3, #2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001610:	4293      	cmp	r3, r2
 8001612:	da1a      	bge.n	800164a <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	8c12      	ldrh	r2, [r2, #32]
 800161c:	4413      	add	r3, r2
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8c1b      	ldrh	r3, [r3, #32]
 8001626:	3301      	adds	r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	8c12      	ldrh	r2, [r2, #32]
 8001636:	4413      	add	r3, r2
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	4611      	mov	r1, r2
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
 8001648:	e000      	b.n	800164c <onCharInput+0x58>
        return;
 800164a:	bf00      	nop
}
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800166c:	2b0d      	cmp	r3, #13
 800166e:	d102      	bne.n	8001676 <onControlInput+0x22>
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b0a      	cmp	r3, #10
 8001674:	d062      	beq.n	800173c <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 800167c:	2b0a      	cmp	r3, #10
 800167e:	d102      	bne.n	8001686 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	2b0d      	cmp	r3, #13
 8001684:	d05a      	beq.n	800173c <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	2b0d      	cmp	r3, #13
 800168a:	d002      	beq.n	8001692 <onControlInput+0x3e>
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	2b0a      	cmp	r3, #10
 8001690:	d126      	bne.n	80016e0 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fba6 	bl	8001de4 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8001698:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <onControlInput+0xf0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fc5c 	bl	8001f5c <writeToOutput>

        if (impl->cmdSize > 0)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8c1b      	ldrh	r3, [r3, #32]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <onControlInput+0x5e>
            parseCommand(cli);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f84b 	bl	8001748 <parseCommand>
        impl->cmdSize = 0;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	8c12      	ldrh	r2, [r2, #32]
 80016c0:	4413      	add	r3, r2
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	861a      	strh	r2, [r3, #48]	; 0x30
        impl->history.current = 0;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fc3f 	bl	8001f5c <writeToOutput>
 80016de:	e02e      	b.n	800173e <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d002      	beq.n	80016ec <onControlInput+0x98>
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ea:	d120      	bne.n	800172e <onControlInput+0xda>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8c1b      	ldrh	r3, [r3, #32]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01c      	beq.n	800172e <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2108      	movs	r1, #8
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2120      	movs	r1, #32
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2108      	movs	r1, #8
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8c1b      	ldrh	r3, [r3, #32]
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	8c12      	ldrh	r2, [r2, #32]
 8001726:	4413      	add	r3, r2
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e007      	b.n	800173e <onControlInput+0xea>
    } else if (c == '\t') {
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d104      	bne.n	800173e <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fb55 	bl	8001de4 <onAutocompleteRequest>
 800173a:	e000      	b.n	800173e <onControlInput+0xea>
        return;
 800173c:	bf00      	nop
    }

}
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000000 	.word	0x20000000

08001748 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b08f      	sub	sp, #60	; 0x3c
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 800175c:	2300      	movs	r3, #0
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
 8001760:	e00d      	b.n	800177e <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	69da      	ldr	r2, [r3, #28]
 8001766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001768:	4413      	add	r3, r2
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b20      	cmp	r3, #32
 800176e:	d003      	beq.n	8001778 <parseCommand+0x30>
            isEmpty = false;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8001776:	e008      	b.n	800178a <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	3301      	adds	r3, #1
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	8c1b      	ldrh	r3, [r3, #32]
 8001782:	461a      	mov	r2, r3
 8001784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001786:	4293      	cmp	r3, r2
 8001788:	dbeb      	blt.n	8001762 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 800178a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 80dc 	bne.w	800194c <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	1d1a      	adds	r2, r3, #4
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	4619      	mov	r1, r3
 800179e:	4610      	mov	r0, r2
 80017a0:	f000 fca7 	bl	80020f2 <historyPut>

    char *cmdName = NULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *cmdArgs = NULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
    bool nameFinished = false;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
 80017b6:	e030      	b.n	800181a <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d10f      	bne.n	80017ea <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	4413      	add	r3, r2
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 80017dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d018      	beq.n	8001814 <parseCommand+0xcc>
                nameFinished = true;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017e8:	e014      	b.n	8001814 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	69da      	ldr	r2, [r3, #28]
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	4413      	add	r3, r2
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017fa:	e00b      	b.n	8001814 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d108      	bne.n	8001814 <parseCommand+0xcc>
 8001802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	4413      	add	r3, r2
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	3301      	adds	r3, #1
 8001818:	623b      	str	r3, [r7, #32]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	8c1b      	ldrh	r3, [r3, #32]
 800181e:	461a      	mov	r2, r3
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	4293      	cmp	r3, r2
 8001824:	dbc8      	blt.n	80017b8 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	8c1b      	ldrh	r3, [r3, #32]
 800182e:	3301      	adds	r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8001836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8089 	beq.w	8001950 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e054      	b.n	80018ee <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800185a:	f7fe fcc1 	bl	80001e0 <strcmp>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d141      	bne.n	80018e8 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d040      	beq.n	80018fc <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	7a1b      	ldrb	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8001890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001892:	f7ff fd3b 	bl	800130c <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800189c:	f043 0310 	orr.w	r3, r3, #16
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	691c      	ldr	r4, [r3, #16]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	461a      	mov	r2, r3
 80018ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80018da:	f023 0310 	bic.w	r3, r3, #16
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            return;
 80018e6:	e034      	b.n	8001952 <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	3301      	adds	r3, #1
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80018f2:	461a      	mov	r2, r3
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	4293      	cmp	r3, r2
 80018f8:	dba4      	blt.n	8001844 <parseCommand+0xfc>
 80018fa:	e000      	b.n	80018fe <parseCommand+0x1b6>
                break;
 80018fc:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d01d      	beq.n	8001942 <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001914:	f043 0310 	orr.w	r3, r3, #16
 8001918:	b2da      	uxtb	r2, r3
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        cli->onCommand(cli, &command);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f107 020c 	add.w	r2, r7, #12
 8001928:	4611      	mov	r1, r2
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001934:	f023 0310 	bic.w	r3, r3, #16
 8001938:	b2da      	uxtb	r2, r3
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001940:	e007      	b.n	8001952 <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8001942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f913 	bl	8001b70 <onUnknownCommand>
 800194a:	e002      	b.n	8001952 <parseCommand+0x20a>
        return;
 800194c:	bf00      	nop
 800194e:	e000      	b.n	8001952 <parseCommand+0x20a>
        return;
 8001950:	bf00      	nop
    }
}
 8001952:	373c      	adds	r7, #60	; 0x3c
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}

08001958 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af02      	add	r7, sp, #8
 800195e:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <initInternalBindings+0x3c>)
 8001962:	f107 040c 	add.w	r4, r7, #12
 8001966:	461d      	mov	r5, r3
 8001968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800196a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800196c:	682b      	ldr	r3, [r5, #0]
 800196e:	6023      	str	r3, [r4, #0]
            "Print list of commands",
            true,
            NULL,
            onHelp
    };
    embeddedCliAddBinding(cli, b);
 8001970:	466a      	mov	r2, sp
 8001972:	f107 0318 	add.w	r3, r7, #24
 8001976:	e893 0003 	ldmia.w	r3, {r0, r1}
 800197a:	e882 0003 	stmia.w	r2, {r0, r1}
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fc4c 	bl	8001222 <embeddedCliAddBinding>
}
 800198a:	bf00      	nop
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bdb0      	pop	{r4, r5, r7, pc}
 8001992:	bf00      	nop
 8001994:	0800d828 	.word	0x0800d828

08001998 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 80019b2:	496b      	ldr	r1, [pc, #428]	; (8001b60 <onHelp+0x1c8>)
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 fad1 	bl	8001f5c <writeToOutput>
        writeToOutput(cli, lineBreak);
 80019ba:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <onHelp+0x1cc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 facb 	bl	8001f5c <writeToOutput>
        return;
 80019c6:	e0c8      	b.n	8001b5a <onHelp+0x1c2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 80019c8:	68b8      	ldr	r0, [r7, #8]
 80019ca:	f7ff fd49 	bl	8001460 <embeddedCliGetTokenCount>
 80019ce:	4603      	mov	r3, r0
 80019d0:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 80019d2:	8b7b      	ldrh	r3, [r7, #26]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d146      	bne.n	8001a66 <onHelp+0xce>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019dc:	e03c      	b.n	8001a58 <onHelp+0xc0>
            writeToOutput(cli, " * ");
 80019de:	4962      	ldr	r1, [pc, #392]	; (8001b68 <onHelp+0x1d0>)
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fabb 	bl	8001f5c <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 faae 	bl	8001f5c <writeToOutput>
            writeToOutput(cli, lineBreak);
 8001a00:	4b58      	ldr	r3, [pc, #352]	; (8001b64 <onHelp+0x1cc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 faa8 	bl	8001f5c <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d017      	beq.n	8001a52 <onHelp+0xba>
                cli->writeChar(cli, '\t');
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2109      	movs	r1, #9
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 fa8b 	bl	8001f5c <writeToOutput>
                writeToOutput(cli, lineBreak);
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <onHelp+0x1cc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fa85 	bl	8001f5c <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	3301      	adds	r3, #1
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a60:	4293      	cmp	r3, r2
 8001a62:	dbbc      	blt.n	80019de <onHelp+0x46>
 8001a64:	e079      	b.n	8001b5a <onHelp+0x1c2>
            }
        }
    } else if (tokenCount == 1) {
 8001a66:	8b7b      	ldrh	r3, [r7, #26]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d16c      	bne.n	8001b46 <onHelp+0x1ae>
        // try find command
        const char *helpStr = NULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8001a70:	2101      	movs	r1, #1
 8001a72:	68b8      	ldr	r0, [r7, #8]
 8001a74:	f7ff fcbe 	bl	80013f4 <embeddedCliGetToken>
 8001a78:	6178      	str	r0, [r7, #20]
        bool found = false;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	e020      	b.n	8001ac8 <onHelp+0x130>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a8a:	6a3a      	ldr	r2, [r7, #32]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6979      	ldr	r1, [r7, #20]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fba0 	bl	80001e0 <strcmp>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <onHelp+0x12a>
                helpStr = impl->bindings[i].help;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aaa:	6a3a      	ldr	r2, [r7, #32]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
                found = true;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8001ac0:	e008      	b.n	8001ad4 <onHelp+0x13c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001acc:	461a      	mov	r2, r3
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	dbd8      	blt.n	8001a86 <onHelp+0xee>
            }
        }
        if (found && helpStr != NULL) {
 8001ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <onHelp+0x186>
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d01d      	beq.n	8001b1e <onHelp+0x186>
            writeToOutput(cli, " * ");
 8001ae2:	4921      	ldr	r1, [pc, #132]	; (8001b68 <onHelp+0x1d0>)
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 fa39 	bl	8001f5c <writeToOutput>
            writeToOutput(cli, cmdName);
 8001aea:	6979      	ldr	r1, [r7, #20]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 fa35 	bl	8001f5c <writeToOutput>
            writeToOutput(cli, lineBreak);
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <onHelp+0x1cc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 fa2f 	bl	8001f5c <writeToOutput>
            cli->writeChar(cli, '\t');
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2109      	movs	r1, #9
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8001b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fa26 	bl	8001f5c <writeToOutput>
            writeToOutput(cli, lineBreak);
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <onHelp+0x1cc>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fa20 	bl	8001f5c <writeToOutput>
 8001b1c:	e01d      	b.n	8001b5a <onHelp+0x1c2>
        } else if (found) {
 8001b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <onHelp+0x1a4>
            writeToOutput(cli, "Help is not available");
 8001b26:	490e      	ldr	r1, [pc, #56]	; (8001b60 <onHelp+0x1c8>)
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fa17 	bl	8001f5c <writeToOutput>
            writeToOutput(cli, lineBreak);
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <onHelp+0x1cc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 fa11 	bl	8001f5c <writeToOutput>
 8001b3a:	e00e      	b.n	8001b5a <onHelp+0x1c2>
        } else {
            onUnknownCommand(cli, cmdName);
 8001b3c:	6979      	ldr	r1, [r7, #20]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f816 	bl	8001b70 <onUnknownCommand>
 8001b44:	e009      	b.n	8001b5a <onHelp+0x1c2>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8001b46:	4909      	ldr	r1, [pc, #36]	; (8001b6c <onHelp+0x1d4>)
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fa07 	bl	8001f5c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <onHelp+0x1cc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4619      	mov	r1, r3
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fa01 	bl	8001f5c <writeToOutput>
    }
}
 8001b5a:	3730      	adds	r7, #48	; 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	0800d83c 	.word	0x0800d83c
 8001b64:	20000000 	.word	0x20000000
 8001b68:	0800d854 	.word	0x0800d854
 8001b6c:	0800d858 	.word	0x0800d858

08001b70 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8001b7a:	490b      	ldr	r1, [pc, #44]	; (8001ba8 <onUnknownCommand+0x38>)
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f9ed 	bl	8001f5c <writeToOutput>
    writeToOutput(cli, name);
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f9e9 	bl	8001f5c <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <onUnknownCommand+0x3c>)
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f9e5 	bl	8001f5c <writeToOutput>
    writeToOutput(cli, lineBreak);
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <onUnknownCommand+0x40>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4619      	mov	r1, r3
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f9df 	bl	8001f5c <writeToOutput>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	0800d888 	.word	0x0800d888
 8001bac:	0800d89c 	.word	0x0800d89c
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08e      	sub	sp, #56	; 0x38
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	82bb      	strh	r3, [r7, #20]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7fe fb67 	bl	80002a0 <strlen>
 8001bd2:	6278      	str	r0, [r7, #36]	; 0x24

    PREPARE_IMPL(cli);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <getAutocompletedCommand+0x34>
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d108      	bne.n	8001bfa <getAutocompletedCommand+0x46>
        return cmd;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bf4:	e882 0003 	stmia.w	r2, {r0, r1}
 8001bf8:	e095      	b.n	8001d26 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfe:	e083      	b.n	8001d08 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8001c14:	69f8      	ldr	r0, [r7, #28]
 8001c16:	f7fe fb43 	bl	80002a0 <strlen>
 8001c1a:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c22:	4413      	add	r3, r2
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2c:	440b      	add	r3, r1
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d35e      	bcc.n	8001cfc <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c48:	e010      	b.n	8001c6c <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4e:	4413      	add	r3, r2
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	69f9      	ldr	r1, [r7, #28]
 8001c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c56:	440b      	add	r3, r1
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d003      	beq.n	8001c66 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                break;
 8001c64:	e006      	b.n	8001c74 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8001c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c68:	3301      	adds	r3, #1
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d3ea      	bcc.n	8001c4a <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8001c74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c78:	f083 0301 	eor.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d13e      	bne.n	8001d00 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c88:	4413      	add	r3, r2
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c92:	440b      	add	r3, r1
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8001c9c:	8afb      	ldrh	r3, [r7, #22]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <getAutocompletedCommand+0xf8>
 8001ca2:	8abb      	ldrh	r3, [r7, #20]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d202      	bcs.n	8001cb2 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8001cb2:	8afb      	ldrh	r3, [r7, #22]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8001cba:	8afb      	ldrh	r3, [r7, #22]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d102      	bne.n	8001cc6 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	613b      	str	r3, [r7, #16]
            continue;
 8001cc4:	e01d      	b.n	8001d02 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	8c1b      	ldrh	r3, [r3, #32]
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ccc:	e010      	b.n	8001cf0 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	69f9      	ldr	r1, [r7, #28]
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	440b      	add	r3, r1
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d003      	beq.n	8001cea <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	82bb      	strh	r3, [r7, #20]
                break;
 8001ce8:	e00b      	b.n	8001d02 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	3301      	adds	r3, #1
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf0:	8abb      	ldrh	r3, [r7, #20]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d3e9      	bcc.n	8001cce <getAutocompletedCommand+0x11a>
 8001cfa:	e002      	b.n	8001d02 <getAutocompletedCommand+0x14e>
            continue;
 8001cfc:	bf00      	nop
 8001cfe:	e000      	b.n	8001d02 <getAutocompletedCommand+0x14e>
            continue;
 8001d00:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8001d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d04:	3301      	adds	r3, #1
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f6ff af75 	blt.w	8001c00 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d22:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	3738      	adds	r7, #56	; 0x38
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b088      	sub	sp, #32
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d048      	beq.n	8001ddc <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff2d 	bl	8001bb4 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8001d5a:	8a7b      	ldrh	r3, [r7, #18]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	8c1b      	ldrh	r3, [r3, #32]
 8001d64:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	8c1b      	ldrh	r3, [r3, #32]
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	e00b      	b.n	8001d86 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68f9      	ldr	r1, [r7, #12]
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	440a      	add	r2, r1
 8001d78:	7812      	ldrb	r2, [r2, #0]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	8a3b      	ldrh	r3, [r7, #16]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d3ee      	bcc.n	8001d6e <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8001d90:	8a3b      	ldrh	r3, [r7, #16]
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	e007      	b.n	8001da6 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	3301      	adds	r3, #1
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001daa:	461a      	mov	r2, r3
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d3f1      	bcc.n	8001d96 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8001db2:	8a3a      	ldrh	r2, [r7, #16]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	861a      	strh	r2, [r3, #48]	; 0x30
    cli->writeChar(cli, '\r');
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	210d      	movs	r1, #13
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8c7 	bl	8001f5c <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8c1 	bl	8001f5c <writeToOutput>
 8001dda:	e000      	b.n	8001dde <printLiveAutocompletion+0xb0>
        return;
 8001ddc:	bf00      	nop
}
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fed9 	bl	8001bb4 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8001e02:	8a7b      	ldrh	r3, [r7, #18]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d071      	beq.n	8001eec <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8001e08:	8a7b      	ldrh	r3, [r7, #18]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d004      	beq.n	8001e18 <onAutocompleteRequest+0x34>
 8001e0e:	8a3a      	ldrh	r2, [r7, #16]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	8c1b      	ldrh	r3, [r3, #32]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d92a      	bls.n	8001e6e <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	8a3a      	ldrh	r2, [r7, #16]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f009 fdd6 	bl	800b9d2 <memcpy>
        if (cmd.candidateCount == 1) {
 8001e26:	8a7b      	ldrh	r3, [r7, #18]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d109      	bne.n	8001e40 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	8a3a      	ldrh	r2, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	2220      	movs	r2, #32
 8001e36:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8001e38:	8a3b      	ldrh	r3, [r7, #16]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	8a3a      	ldrh	r2, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	8c12      	ldrh	r2, [r2, #32]
 8001e54:	4413      	add	r3, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f87f 	bl	8001f5c <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8001e5e:	8a3a      	ldrh	r2, [r7, #16]
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	8c1a      	ldrh	r2, [r3, #32]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	861a      	strh	r2, [r3, #48]	; 0x30
        return;
 8001e6c:	e03f      	b.n	8001eee <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f842 	bl	8001ef8 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	e021      	b.n	8001ebe <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	4413      	add	r3, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d014      	beq.n	8001eb6 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 8001ea0:	6979      	ldr	r1, [r7, #20]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f85a 	bl	8001f5c <writeToOutput>
        writeToOutput(cli, lineBreak);
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <onAutocompleteRequest+0x110>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f854 	bl	8001f5c <writeToOutput>
 8001eb4:	e000      	b.n	8001eb8 <onAutocompleteRequest+0xd4>
            continue;
 8001eb6:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	dbd7      	blt.n	8001e7a <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f843 	bl	8001f5c <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4619      	mov	r1, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f83d 	bl	8001f5c <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	8c1a      	ldrh	r2, [r3, #32]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	861a      	strh	r2, [r3, #48]	; 0x30
 8001eea:	e000      	b.n	8001eee <onAutocompleteRequest+0x10a>
        return;
 8001eec:	bf00      	nop
}
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001f0a:	461c      	mov	r4, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe f9c5 	bl	80002a0 <strlen>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4423      	add	r3, r4
 8001f1a:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	210d      	movs	r1, #13
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e007      	b.n	8001f3c <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2120      	movs	r1, #32
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d3f3      	bcc.n	8001f2c <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	210d      	movs	r1, #13
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	4798      	blx	r3
    impl->inputLineLength = 0;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2200      	movs	r2, #0
 8001f52:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd90      	pop	{r4, r7, pc}

08001f5c <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f7fe f99a 	bl	80002a0 <strlen>
 8001f6c:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	e00b      	b.n	8001f8c <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	440a      	add	r2, r1
 8001f7e:	7812      	ldrb	r2, [r2, #0]
 8001f80:	4611      	mov	r1, r2
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3ef      	bcc.n	8001f74 <writeToOutput+0x18>
    }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <isControlChar>:

static bool isControlChar(char c) {
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	2b0d      	cmp	r3, #13
 8001fac:	d00b      	beq.n	8001fc6 <isControlChar+0x28>
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	2b0a      	cmp	r3, #10
 8001fb2:	d008      	beq.n	8001fc6 <isControlChar+0x28>
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d005      	beq.n	8001fc6 <isControlChar+0x28>
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	d002      	beq.n	8001fc6 <isControlChar+0x28>
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8001fc4:	d101      	bne.n	8001fca <isControlChar+0x2c>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <isControlChar+0x2e>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b1f      	cmp	r3, #31
 8001fec:	d904      	bls.n	8001ff8 <isDisplayableChar+0x1a>
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	2b7e      	cmp	r3, #126	; 0x7e
 8001ff2:	d801      	bhi.n	8001ff8 <isDisplayableChar+0x1a>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <isDisplayableChar+0x1c>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	88da      	ldrh	r2, [r3, #6]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	889b      	ldrh	r3, [r3, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d306      	bcc.n	800202e <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	88da      	ldrh	r2, [r3, #6]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	889b      	ldrh	r3, [r3, #4]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	b29b      	uxth	r3, r3
 800202c:	e009      	b.n	8002042 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	891a      	ldrh	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	889b      	ldrh	r3, [r3, #4]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	b29a      	uxth	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	88db      	ldrh	r3, [r3, #6]
 800203e:	4413      	add	r3, r2
 8002040:	b29b      	uxth	r3, r3
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	889a      	ldrh	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	88db      	ldrh	r3, [r3, #6]
 8002062:	429a      	cmp	r2, r3
 8002064:	d014      	beq.n	8002090 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	8892      	ldrh	r2, [r2, #4]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	889b      	ldrh	r3, [r3, #4]
 8002078:	3301      	adds	r3, #1
 800207a:	b29b      	uxth	r3, r3
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	8912      	ldrh	r2, [r2, #8]
 8002080:	fbb3 f1f2 	udiv	r1, r3, r2
 8002084:	fb01 f202 	mul.w	r2, r1, r2
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	88db      	ldrh	r3, [r3, #6]
 80020ae:	3301      	adds	r3, #1
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	8912      	ldrh	r2, [r2, #8]
 80020b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80020ba:	fb01 f202 	mul.w	r2, r1, r2
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	889b      	ldrh	r3, [r3, #4]
 80020c6:	89fa      	ldrh	r2, [r7, #14]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d00b      	beq.n	80020e4 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	88d2      	ldrh	r2, [r2, #6]
 80020d4:	4413      	add	r3, r2
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	89fa      	ldrh	r2, [r7, #14]
 80020de:	80da      	strh	r2, [r3, #6]
        return true;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <fifoBufPush+0x48>
    }
    return false;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b088      	sub	sp, #32
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f7fe f8cf 	bl	80002a0 <strlen>
 8002102:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	889b      	ldrh	r3, [r3, #4]
 8002108:	461a      	mov	r2, r3
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	3301      	adds	r3, #1
 800210e:	429a      	cmp	r2, r3
 8002110:	d201      	bcs.n	8002116 <historyPut+0x24>
        return false;
 8002112:	2300      	movs	r3, #0
 8002114:	e04d      	b.n	80021b2 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f86a 	bl	80021f2 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 800211e:	e024      	b.n	800216a <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	891b      	ldrh	r3, [r3, #8]
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f847 	bl	80021ba <historyGet>
 800212c:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7fe f8b6 	bl	80002a0 <strlen>
 8002134:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	461a      	mov	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	3301      	adds	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	889b      	ldrh	r3, [r3, #4]
 800214c:	461a      	mov	r2, r3
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	3301      	adds	r3, #1
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	429a      	cmp	r2, r3
 800215c:	d20a      	bcs.n	8002174 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	891b      	ldrh	r3, [r3, #8]
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	891b      	ldrh	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1d6      	bne.n	8002120 <historyPut+0x2e>
 8002172:	e000      	b.n	8002176 <historyPut+0x84>
            break;
 8002174:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	891b      	ldrh	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3301      	adds	r3, #1
 8002186:	18d0      	adds	r0, r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	4619      	mov	r1, r3
 8002190:	f009 fb68 	bl	800b864 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	3301      	adds	r3, #1
 800219c:	461a      	mov	r2, r3
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	f009 fc17 	bl	800b9d2 <memcpy>
    ++history->itemsCount;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	891b      	ldrh	r3, [r3, #8]
 80021a8:	3301      	adds	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	811a      	strh	r2, [r3, #8]

    return true;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <historyGet+0x1c>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	891b      	ldrh	r3, [r3, #8]
 80021d0:	887a      	ldrh	r2, [r7, #2]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d901      	bls.n	80021da <historyGet+0x20>
        return NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e007      	b.n	80021ea <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	887a      	ldrh	r2, [r7, #2]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f906 	bl	80013f4 <embeddedCliGetToken>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d04c      	beq.n	800229c <historyRemove+0xaa>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	891b      	ldrh	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d048      	beq.n	800229c <historyRemove+0xaa>
        return;
    char *item = NULL;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 800220e:	2301      	movs	r3, #1
 8002210:	827b      	strh	r3, [r7, #18]
 8002212:	e013      	b.n	800223c <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	8a7a      	ldrh	r2, [r7, #18]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff f904 	bl	800142a <embeddedCliGetTokenVariable>
 8002222:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8002224:	6839      	ldr	r1, [r7, #0]
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f7fd ffda 	bl	80001e0 <strcmp>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <historyRemove+0x56>
            break;
        }
        item = NULL;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8002236:	8a7b      	ldrh	r3, [r7, #18]
 8002238:	3301      	adds	r3, #1
 800223a:	827b      	strh	r3, [r7, #18]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	891b      	ldrh	r3, [r3, #8]
 8002240:	8a7a      	ldrh	r2, [r7, #18]
 8002242:	429a      	cmp	r2, r3
 8002244:	d9e6      	bls.n	8002214 <historyRemove+0x22>
 8002246:	e000      	b.n	800224a <historyRemove+0x58>
            break;
 8002248:	bf00      	nop
    }
    if (item == NULL)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d027      	beq.n	80022a0 <historyRemove+0xae>
        return;

    --history->itemsCount;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	891b      	ldrh	r3, [r3, #8]
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 800225c:	8a7a      	ldrh	r2, [r7, #18]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	891b      	ldrh	r3, [r3, #8]
 8002262:	3301      	adds	r3, #1
 8002264:	429a      	cmp	r2, r3
 8002266:	d01d      	beq.n	80022a4 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8002268:	6978      	ldr	r0, [r7, #20]
 800226a:	f7fe f819 	bl	80002a0 <strlen>
 800226e:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	889b      	ldrh	r3, [r3, #4]
 8002274:	4619      	mov	r1, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3301      	adds	r3, #1
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	441a      	add	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	1acb      	subs	r3, r1, r3
 8002286:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3301      	adds	r3, #1
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4413      	add	r3, r2
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	4619      	mov	r1, r3
 8002294:	6978      	ldr	r0, [r7, #20]
 8002296:	f009 fae5 	bl	800b864 <memmove>
 800229a:	e004      	b.n	80022a6 <historyRemove+0xb4>
        return;
 800229c:	bf00      	nop
 800229e:	e002      	b.n	80022a6 <historyRemove+0xb4>
        return;
 80022a0:	bf00      	nop
 80022a2:	e000      	b.n	80022a6 <historyRemove+0xb4>
        return;
 80022a4:	bf00      	nop
}
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <getTokenPosition+0x18>
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 80022c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c8:	e028      	b.n	800231c <getTokenPosition+0x70>
    uint16_t i = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 80022d2:	89ba      	ldrh	r2, [r7, #12]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d013      	beq.n	8002302 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 80022da:	89fb      	ldrh	r3, [r7, #14]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <getTokenPosition+0x4e>
            ++tokenCount;
 80022e6:	89bb      	ldrh	r3, [r7, #12]
 80022e8:	3301      	adds	r3, #1
 80022ea:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 80022ec:	89fb      	ldrh	r3, [r7, #14]
 80022ee:	3301      	adds	r3, #1
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	3301      	adds	r3, #1
 80022fe:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8002300:	e7e7      	b.n	80022d2 <getTokenPosition+0x26>
            break;
 8002302:	bf00      	nop
 8002304:	e000      	b.n	8002308 <getTokenPosition+0x5c>
                break;
 8002306:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <getTokenPosition+0x6c>
        return i;
 8002314:	89fb      	ldrh	r3, [r7, #14]
 8002316:	e001      	b.n	800231c <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8002318:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <s_cli_clear>:

static bool cli_is_ready = false; // Disable usage if cli isn't initialised


//============ Private function implementation ===============
void s_cli_clear(EmbeddedCli *cli, char *args, void *context){
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
	cli_printf("\033[2J\033[0;0H"); // Clear screen => Set Cursor to start, will automatically add invitation character
 8002334:	4803      	ldr	r0, [pc, #12]	; (8002344 <s_cli_clear+0x1c>)
 8002336:	f000 f983 	bl	8002640 <cli_printf>
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	0800d8d0 	.word	0x0800d8d0

08002348 <cli_write_char>:

static void cli_write_char(EmbeddedCli *embeddedCli, char c) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	70fb      	strb	r3, [r7, #3]
	rtos_add_tx(c);
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fa90 	bl	800287c <rtos_add_tx>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <get_led>:


static void get_led(EmbeddedCli *cli, char *args, void *context) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 8002370:	2101      	movs	r1, #1
 8002372:	68b8      	ldr	r0, [r7, #8]
 8002374:	f7ff f83e 	bl	80013f4 <embeddedCliGetToken>
 8002378:	6178      	str	r0, [r7, #20]
    const char *arg2 = embeddedCliGetToken(args, 2);
 800237a:	2102      	movs	r1, #2
 800237c:	68b8      	ldr	r0, [r7, #8]
 800237e:	f7ff f839 	bl	80013f4 <embeddedCliGetToken>
 8002382:	6138      	str	r0, [r7, #16]
    if (arg1 == NULL || arg2 == NULL) {
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <get_led+0x2c>
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d103      	bne.n	8002398 <get_led+0x34>
        cli_printf("usage: get-led [arg1] [arg2]");
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <get_led+0x44>)
 8002392:	f000 f955 	bl	8002640 <cli_printf>
        return;
 8002396:	e004      	b.n	80023a2 <get_led+0x3e>
    }
    // Make sure to check if 'args' != NULL, printf's '%s' formatting does not like a null pointer.
    cli_printf("LED with args: %s and %s", arg1, arg2);
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	6979      	ldr	r1, [r7, #20]
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <get_led+0x48>)
 800239e:	f000 f94f 	bl	8002640 <cli_printf>
}
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	0800d8dc 	.word	0x0800d8dc
 80023ac:	0800d8fc 	.word	0x0800d8fc

080023b0 <set_led>:

static void set_led(EmbeddedCli *cli, char *args, void *context) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
	const char *arg1 = embeddedCliGetToken(args, 1);
 80023bc:	2101      	movs	r1, #1
 80023be:	68b8      	ldr	r0, [r7, #8]
 80023c0:	f7ff f818 	bl	80013f4 <embeddedCliGetToken>
 80023c4:	6178      	str	r0, [r7, #20]
	if ( !strcmp(arg1,"1") || !strcmp(arg1,"true")){
 80023c6:	4918      	ldr	r1, [pc, #96]	; (8002428 <set_led+0x78>)
 80023c8:	6978      	ldr	r0, [r7, #20]
 80023ca:	f7fd ff09 	bl	80001e0 <strcmp>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <set_led+0x32>
 80023d4:	4915      	ldr	r1, [pc, #84]	; (800242c <set_led+0x7c>)
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f7fd ff02 	bl	80001e0 <strcmp>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <set_led+0x3e>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80023e2:	2201      	movs	r2, #1
 80023e4:	2101      	movs	r1, #1
 80023e6:	4812      	ldr	r0, [pc, #72]	; (8002430 <set_led+0x80>)
 80023e8:	f000 ffd4 	bl	8003394 <HAL_GPIO_WritePin>
 80023ec:	e017      	b.n	800241e <set_led+0x6e>
	} else if (!strcmp(arg1,"0") || !strcmp(arg1,"false")){
 80023ee:	4911      	ldr	r1, [pc, #68]	; (8002434 <set_led+0x84>)
 80023f0:	6978      	ldr	r0, [r7, #20]
 80023f2:	f7fd fef5 	bl	80001e0 <strcmp>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <set_led+0x5a>
 80023fc:	490e      	ldr	r1, [pc, #56]	; (8002438 <set_led+0x88>)
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7fd feee 	bl	80001e0 <strcmp>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d105      	bne.n	8002416 <set_led+0x66>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800240a:	2200      	movs	r2, #0
 800240c:	2101      	movs	r1, #1
 800240e:	4808      	ldr	r0, [pc, #32]	; (8002430 <set_led+0x80>)
 8002410:	f000 ffc0 	bl	8003394 <HAL_GPIO_WritePin>
 8002414:	e003      	b.n	800241e <set_led+0x6e>
	} else{
		cli_printf("Set LED with args: [1/0] or [true/false]");
 8002416:	4809      	ldr	r0, [pc, #36]	; (800243c <set_led+0x8c>)
 8002418:	f000 f912 	bl	8002640 <cli_printf>
	}
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	0800d918 	.word	0x0800d918
 800242c:	0800d91c 	.word	0x0800d91c
 8002430:	40020000 	.word	0x40020000
 8002434:	0800d924 	.word	0x0800d924
 8002438:	0800d928 	.word	0x0800d928
 800243c:	0800d930 	.word	0x0800d930

08002440 <toggle_led>:

static void toggle_led(EmbeddedCli *cli, char *args, void *context) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800244c:	2101      	movs	r1, #1
 800244e:	4803      	ldr	r0, [pc, #12]	; (800245c <toggle_led+0x1c>)
 8002450:	f000 ffb9 	bl	80033c6 <HAL_GPIO_TogglePin>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40020000 	.word	0x40020000

08002460 <cli_init>:

// ==================== Global function implementation ==========================


void cli_init(void){
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b0b2      	sub	sp, #200	; 0xc8
 8002464:	af02      	add	r7, sp, #8
	EmbeddedCliConfig *config = embeddedCliDefaultConfig();
 8002466:	f7fe fd35 	bl	8000ed4 <embeddedCliDefaultConfig>
 800246a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
	config->cliBuffer 			= cliBuffer;
 800246e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002472:	4a5c      	ldr	r2, [pc, #368]	; (80025e4 <cli_init+0x184>)
 8002474:	60da      	str	r2, [r3, #12]
	config->cliBufferSize 		= CLI_BUFFER_SIZE;
 8002476:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800247a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800247e:	821a      	strh	r2, [r3, #16]
	config->rxBufferSize 		= CLI_RX_BUFFER_SIZE;
 8002480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002484:	2210      	movs	r2, #16
 8002486:	809a      	strh	r2, [r3, #4]
	config->cmdBufferSize 		= CLI_CMD_BUFFER_SIZE;
 8002488:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800248c:	2220      	movs	r2, #32
 800248e:	80da      	strh	r2, [r3, #6]
	config->historyBufferSize 	= CLI_HISTORY_SIZE;
 8002490:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002494:	2220      	movs	r2, #32
 8002496:	811a      	strh	r2, [r3, #8]
	config->maxBindingCount 	= CLI_MAX_BINDING_COUNT;
 8002498:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800249c:	2220      	movs	r2, #32
 800249e:	815a      	strh	r2, [r3, #10]
	config->enableAutoComplete =  true;
 80024a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024a4:	2201      	movs	r2, #1
 80024a6:	749a      	strb	r2, [r3, #18]


	// Create new CLI instance
	cli = embeddedCliNew(config);
 80024a8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80024ac:	f7fe fd63 	bl	8000f76 <embeddedCliNew>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <cli_init+0x188>)
 80024b4:	6013      	str	r3, [r2, #0]
	// Please increase the 'CLI_BUFFER_SIZE' in header file.
	// Or decrease max binding / history size.
	// You can get required buffer size by calling
	// uint16_t requiredSize = embeddedCliRequiredSize(config);
	// Then check it's value in debugger
	if (cli == NULL){
 80024b6:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <cli_init+0x188>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d128      	bne.n	8002510 <cli_init+0xb0>
		char error_buffer[100] = {0};
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	2260      	movs	r2, #96	; 0x60
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f009 f9e5 	bl	800b898 <memset>
		uint16_t size = embeddedCliRequiredSize(config);
 80024ce:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80024d2:	f7fe fd23 	bl	8000f1c <embeddedCliRequiredSize>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
		uint16_t len = sprintf(error_buffer, "CLI could not be created, required size: %ud", size);
 80024dc:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80024e0:	463b      	mov	r3, r7
 80024e2:	4942      	ldr	r1, [pc, #264]	; (80025ec <cli_init+0x18c>)
 80024e4:	4618      	mov	r0, r3
 80024e6:	f009 f88b 	bl	800b600 <siprintf>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
		uint16_t res = CDC_Transmit_FS((uint8_t *) error_buffer, len);
 80024f0:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 80024f4:	463b      	mov	r3, r7
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f007 fdf7 	bl	800a0ec <CDC_Transmit_FS>
 80024fe:	4603      	mov	r3, r0
 8002500:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		if (res != USBD_OK){
 8002504:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <cli_init+0xb0>
			HardFault_Handler();
 800250c:	f000 fadc 	bl	8002ac8 <HardFault_Handler>
		}
	}

	// Assign character write function
	cli->writeChar = cli_write_char;
 8002510:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <cli_init+0x188>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a36      	ldr	r2, [pc, #216]	; (80025f0 <cli_init+0x190>)
 8002516:	601a      	str	r2, [r3, #0]

	// Un-comment to add a non-default reaction to unbound commands.
	//cli->onCommand = onCliCommand;

	// Add all the initial command bindings
	CliCommandBinding clear_binding = {
 8002518:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <cli_init+0x194>)
 800251a:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800251e:	461d      	mov	r5, r3
 8002520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002524:	682b      	ldr	r3, [r5, #0]
 8002526:	6023      	str	r3, [r4, #0]
			.help = "Clears the console",
			.tokenizeArgs = true,
			.context = NULL,
			.binding = s_cli_clear
	};
	CliCommandBinding led_get_binding = {
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <cli_init+0x198>)
 800252a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800252e:	461d      	mov	r5, r3
 8002530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	6023      	str	r3, [r4, #0]
			.help = "Get led status",
			.tokenizeArgs = true,
			.context = NULL,
			.binding = get_led
	};
	CliCommandBinding led_set_binding = {
 8002538:	4b30      	ldr	r3, [pc, #192]	; (80025fc <cli_init+0x19c>)
 800253a:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800253e:	461d      	mov	r5, r3
 8002540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	6023      	str	r3, [r4, #0]
			.help = "Set led state",
			.tokenizeArgs = true,
			.context = NULL,
			.binding = set_led
	};
	CliCommandBinding led_toggle_binding = {
 8002548:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <cli_init+0x1a0>)
 800254a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800254e:	461d      	mov	r5, r3
 8002550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	6023      	str	r3, [r4, #0]
			.help = "Toggle led state",
			.tokenizeArgs = true,
			.context = NULL,
			.binding = toggle_led
	};
	embeddedCliAddBinding(cli, clear_binding);
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <cli_init+0x188>)
 800255a:	681c      	ldr	r4, [r3, #0]
 800255c:	466a      	mov	r2, sp
 800255e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002562:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002566:	e882 0003 	stmia.w	r2, {r0, r1}
 800256a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800256e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002570:	4620      	mov	r0, r4
 8002572:	f7fe fe56 	bl	8001222 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, led_get_binding);
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <cli_init+0x188>)
 8002578:	681c      	ldr	r4, [r3, #0]
 800257a:	466a      	mov	r2, sp
 800257c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002580:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002584:	e882 0003 	stmia.w	r2, {r0, r1}
 8002588:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800258c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258e:	4620      	mov	r0, r4
 8002590:	f7fe fe47 	bl	8001222 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, led_set_binding);
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <cli_init+0x188>)
 8002596:	681c      	ldr	r4, [r3, #0]
 8002598:	466a      	mov	r2, sp
 800259a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800259e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025a2:	e882 0003 	stmia.w	r2, {r0, r1}
 80025a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7fe fe38 	bl	8001222 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, led_toggle_binding);
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <cli_init+0x188>)
 80025b4:	681c      	ldr	r4, [r3, #0]
 80025b6:	466a      	mov	r2, sp
 80025b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80025c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ca:	4620      	mov	r0, r4
 80025cc:	f7fe fe29 	bl	8001222 <embeddedCliAddBinding>


	// Init the CLI with blank screen
	cli_clear();
 80025d0:	f000 f874 	bl	80026bc <cli_clear>

	// CLI has now been initialized, set bool to true to enable usage
	cli_is_ready = true;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <cli_init+0x1a4>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	37c0      	adds	r7, #192	; 0xc0
 80025de:	46bd      	mov	sp, r7
 80025e0:	bdb0      	pop	{r4, r5, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000300 	.word	0x20000300
 80025e8:	200002fc 	.word	0x200002fc
 80025ec:	0800d95c 	.word	0x0800d95c
 80025f0:	08002349 	.word	0x08002349
 80025f4:	0800d9a8 	.word	0x0800d9a8
 80025f8:	0800d9d4 	.word	0x0800d9d4
 80025fc:	0800da00 	.word	0x0800da00
 8002600:	0800da34 	.word	0x0800da34
 8002604:	20000b00 	.word	0x20000b00

08002608 <cli_receive_byte>:


void cli_receive_byte(uint8_t c){
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
	if (!cli_is_ready){
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <cli_receive_byte+0x30>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	f083 0301 	eor.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <cli_receive_byte+0x28>
		return;
	}

	embeddedCliReceiveChar(cli, c);
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <cli_receive_byte+0x34>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	79fa      	ldrb	r2, [r7, #7]
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fd5e 	bl	80010ea <embeddedCliReceiveChar>
 800262e:	e000      	b.n	8002632 <cli_receive_byte+0x2a>
		return;
 8002630:	bf00      	nop
}
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000b00 	.word	0x20000b00
 800263c:	200002fc 	.word	0x200002fc

08002640 <cli_printf>:


// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(const char *format, ...) {
 8002640:	b40f      	push	{r0, r1, r2, r3}
 8002642:	b580      	push	{r7, lr}
 8002644:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8002648:	af00      	add	r7, sp, #0
    char buffer[CLI_PRINTF_BUFFER_SIZE];

    // Format the string using snprintf
    va_list args;
    va_start(args, format);
 800264a:	f207 422c 	addw	r2, r7, #1068	; 0x42c
 800264e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002652:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8002656:	601a      	str	r2, [r3, #0]
    int length = vsnprintf(buffer, sizeof(buffer), format, args);
 8002658:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800265c:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8002660:	1d38      	adds	r0, r7, #4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8002668:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800266c:	f009 f856 	bl	800b71c <vsniprintf>
 8002670:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
    va_end(args);

    // Check if string fitted in buffer else print error to stderr
    if (length < 0) {
 8002674:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002678:	2b00      	cmp	r3, #0
 800267a:	da01      	bge.n	8002680 <cli_printf+0x40>
    	Error_Handler(); // print out error?
 800267c:	f000 f9e8 	bl	8002a50 <Error_Handler>
    }

    // Call embeddedCliPrint with the formatted string
    embeddedCliPrint(cli, buffer);
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <cli_printf+0x60>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	1d3a      	adds	r2, r7, #4
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fdfd 	bl	8001288 <embeddedCliPrint>
}
 800268e:	bf00      	nop
 8002690:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8002694:	46bd      	mov	sp, r7
 8002696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800269a:	b004      	add	sp, #16
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	200002fc 	.word	0x200002fc

080026a4 <cli_process>:


/**
 * Wrapper for running handle function
 */
void cli_process(void){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <cli_process+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fd3f 	bl	8001130 <embeddedCliProcess>
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200002fc 	.word	0x200002fc

080026bc <cli_clear>:

/**
 * Wrapper for clearing termi~nal
 */
void cli_clear(void){
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	s_cli_clear(cli, NULL, NULL);
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <cli_clear+0x18>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fe2d 	bl	8002328 <s_cli_clear>
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200002fc 	.word	0x200002fc

080026d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <vApplicationGetIdleTaskMemory+0x2c>)
 80026e8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <vApplicationGetIdleTaskMemory+0x30>)
 80026ee:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000f3c 	.word	0x20000f3c
 8002708:	20000f90 	.word	0x20000f90

0800270c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800270c:	b5b0      	push	{r4, r5, r7, lr}
 800270e:	b08e      	sub	sp, #56	; 0x38
 8002710:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 128);
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <MX_FREERTOS_Init+0x58>)
 8002714:	f107 041c 	add.w	r4, r7, #28
 8002718:	461d      	mov	r5, r3
 800271a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002726:	f107 031c 	add.w	r3, r7, #28
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f006 f9c4 	bl	8008aba <osThreadCreate>
 8002732:	4603      	mov	r3, r0
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <MX_FREERTOS_Init+0x5c>)
 8002736:	6013      	str	r3, [r2, #0]

  /* definition and creation of cliTask */
  osThreadDef(cliTask, StartCLITask, osPriorityLow, 0, 2056);
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <MX_FREERTOS_Init+0x60>)
 800273a:	463c      	mov	r4, r7
 800273c:	461d      	mov	r5, r3
 800273e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002742:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cliTaskHandle = osThreadCreate(osThread(cliTask), NULL);
 800274a:	463b      	mov	r3, r7
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f006 f9b3 	bl	8008aba <osThreadCreate>
 8002754:	4603      	mov	r3, r0
 8002756:	4a06      	ldr	r2, [pc, #24]	; (8002770 <MX_FREERTOS_Init+0x64>)
 8002758:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800275a:	bf00      	nop
 800275c:	3738      	adds	r7, #56	; 0x38
 800275e:	46bd      	mov	sp, r7
 8002760:	bdb0      	pop	{r4, r5, r7, pc}
 8002762:	bf00      	nop
 8002764:	0800da54 	.word	0x0800da54
 8002768:	20000f34 	.word	0x20000f34
 800276c:	0800da78 	.word	0x0800da78
 8002770:	20000f38 	.word	0x20000f38

08002774 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800277c:	f007 fbe6 	bl	8009f4c <MX_USB_DEVICE_Init>
	{
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//		k += 0.1;
//		x = 10*cos(k);
//		y = 10*sin(k);
		osDelay(50);
 8002780:	2032      	movs	r0, #50	; 0x32
 8002782:	f006 f9e6 	bl	8008b52 <osDelay>
 8002786:	e7fb      	b.n	8002780 <StartDefaultTask+0xc>

08002788 <StartCLITask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCLITask */
void StartCLITask(void const * argument)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCLITask */

	/* USER CODE BEGIN StartLoggigTask */
	cli_init();
 8002790:	f7ff fe66 	bl	8002460 <cli_init>
		// 1. Handle received characters that have been placed in Que by CDC_Receive interrupt
		// 2. Handle outgoing characters that have been placed in a Que
		// 3. CLI Process

		// Handle all received characters
		for(int i = 0; i < i_rx; i++){
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e009      	b.n	80027ae <StartCLITask+0x26>
			cli_receive_byte(rx_buffer[i]);
 800279a:	4a19      	ldr	r2, [pc, #100]	; (8002800 <StartCLITask+0x78>)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff30 	bl	8002608 <cli_receive_byte>
		for(int i = 0; i < i_rx; i++){
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <StartCLITask+0x7c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4293      	cmp	r3, r2
 80027b8:	dbef      	blt.n	800279a <StartCLITask+0x12>
		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80027ba:	2210      	movs	r2, #16
 80027bc:	2100      	movs	r1, #0
 80027be:	4810      	ldr	r0, [pc, #64]	; (8002800 <StartCLITask+0x78>)
 80027c0:	f009 f86a 	bl	800b898 <memset>
		i_rx = 0;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <StartCLITask+0x7c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]


		// Handle outgoing characters
		uint8_t res = CDC_Transmit_FS(tx_buffer, i_tx);
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <StartCLITask+0x80>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4619      	mov	r1, r3
 80027d2:	480e      	ldr	r0, [pc, #56]	; (800280c <StartCLITask+0x84>)
 80027d4:	f007 fc8a 	bl	800a0ec <CDC_Transmit_FS>
 80027d8:	4603      	mov	r3, r0
 80027da:	72fb      	strb	r3, [r7, #11]
		if (res == USBD_OK){
 80027dc:	7afb      	ldrb	r3, [r7, #11]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d108      	bne.n	80027f4 <StartCLITask+0x6c>
			memset(tx_buffer, 0, sizeof(tx_buffer));
 80027e2:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80027e6:	2100      	movs	r1, #0
 80027e8:	4808      	ldr	r0, [pc, #32]	; (800280c <StartCLITask+0x84>)
 80027ea:	f009 f855 	bl	800b898 <memset>
			i_tx = 0;
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <StartCLITask+0x80>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
		}


		cli_process();
 80027f4:	f7ff ff56 	bl	80026a4 <cli_process>

//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		osDelay(50);
 80027f8:	2032      	movs	r0, #50	; 0x32
 80027fa:	f006 f9aa 	bl	8008b52 <osDelay>
	{
 80027fe:	e7c9      	b.n	8002794 <StartCLITask+0xc>
 8002800:	20000b04 	.word	0x20000b04
 8002804:	20000b14 	.word	0x20000b14
 8002808:	20000f30 	.word	0x20000f30
 800280c:	20000b18 	.word	0x20000b18

08002810 <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END StartCLITask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
    button = !button;
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_GPIO_EXTI_Callback+0x34>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f083 0301 	eor.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_GPIO_EXTI_Callback+0x34>)
 8002836:	701a      	strb	r2, [r3, #0]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	20000f31 	.word	0x20000f31

08002848 <rtos_add_rx>:

void rtos_add_rx(uint8_t c){
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
	rx_buffer[i_rx++] = c;
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <rtos_add_rx+0x2c>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	b2d1      	uxtb	r1, r2
 800285a:	4a06      	ldr	r2, [pc, #24]	; (8002874 <rtos_add_rx+0x2c>)
 800285c:	7011      	strb	r1, [r2, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	4a05      	ldr	r2, [pc, #20]	; (8002878 <rtos_add_rx+0x30>)
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	5453      	strb	r3, [r2, r1]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000b14 	.word	0x20000b14
 8002878:	20000b04 	.word	0x20000b04

0800287c <rtos_add_tx>:



void rtos_add_tx(uint8_t c){
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
	tx_buffer[i_tx++] = c;
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <rtos_add_tx+0x2c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	b2d1      	uxtb	r1, r2
 800288e:	4a06      	ldr	r2, [pc, #24]	; (80028a8 <rtos_add_tx+0x2c>)
 8002890:	7011      	strb	r1, [r2, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	4a05      	ldr	r2, [pc, #20]	; (80028ac <rtos_add_tx+0x30>)
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	5453      	strb	r3, [r2, r1]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000f30 	.word	0x20000f30
 80028ac:	20000b18 	.word	0x20000b18

080028b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <MX_GPIO_Init+0xa8>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a22      	ldr	r2, [pc, #136]	; (8002958 <MX_GPIO_Init+0xa8>)
 80028d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <MX_GPIO_Init+0xa8>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <MX_GPIO_Init+0xa8>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a1b      	ldr	r2, [pc, #108]	; (8002958 <MX_GPIO_Init+0xa8>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <MX_GPIO_Init+0xa8>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	2101      	movs	r1, #1
 8002902:	4816      	ldr	r0, [pc, #88]	; (800295c <MX_GPIO_Init+0xac>)
 8002904:	f000 fd46 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002908:	2301      	movs	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290c:	2301      	movs	r3, #1
 800290e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002918:	f107 030c 	add.w	r3, r7, #12
 800291c:	4619      	mov	r1, r3
 800291e:	480f      	ldr	r0, [pc, #60]	; (800295c <MX_GPIO_Init+0xac>)
 8002920:	f000 fbb4 	bl	800308c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002924:	2308      	movs	r3, #8
 8002926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002928:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800292c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800292e:	2301      	movs	r3, #1
 8002930:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	4619      	mov	r1, r3
 8002938:	4808      	ldr	r0, [pc, #32]	; (800295c <MX_GPIO_Init+0xac>)
 800293a:	f000 fba7 	bl	800308c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2105      	movs	r1, #5
 8002942:	2009      	movs	r0, #9
 8002944:	f000 fb6b 	bl	800301e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002948:	2009      	movs	r0, #9
 800294a:	f000 fb84 	bl	8003056 <HAL_NVIC_EnableIRQ>

}
 800294e:	bf00      	nop
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800
 800295c:	40020000 	.word	0x40020000

08002960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002964:	f000 f9ea 	bl	8002d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002968:	f000 f808 	bl	800297c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800296c:	f7ff ffa0 	bl	80028b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002970:	f7ff fecc 	bl	800270c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002974:	f006 f89a 	bl	8008aac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1){
 8002978:	e7fe      	b.n	8002978 <main+0x18>
	...

0800297c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b094      	sub	sp, #80	; 0x50
 8002980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002982:	f107 0320 	add.w	r3, r7, #32
 8002986:	2230      	movs	r2, #48	; 0x30
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f008 ff84 	bl	800b898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <SystemClock_Config+0xcc>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <SystemClock_Config+0xcc>)
 80029aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ae:	6413      	str	r3, [r2, #64]	; 0x40
 80029b0:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <SystemClock_Config+0xcc>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029bc:	2300      	movs	r3, #0
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <SystemClock_Config+0xd0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <SystemClock_Config+0xd0>)
 80029c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <SystemClock_Config+0xd0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029d8:	2301      	movs	r3, #1
 80029da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029e2:	2302      	movs	r3, #2
 80029e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029ec:	2308      	movs	r3, #8
 80029ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80029f0:	2360      	movs	r3, #96	; 0x60
 80029f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029f4:	2302      	movs	r3, #2
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029f8:	2304      	movs	r3, #4
 80029fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029fc:	f107 0320 	add.w	r3, r7, #32
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 ff91 	bl	8004928 <HAL_RCC_OscConfig>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a0c:	f000 f820 	bl	8002a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a10:	230f      	movs	r3, #15
 8002a12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a14:	2302      	movs	r3, #2
 8002a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a26:	f107 030c 	add.w	r3, r7, #12
 8002a2a:	2103      	movs	r1, #3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 f9f3 	bl	8004e18 <HAL_RCC_ClockConfig>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a38:	f000 f80a 	bl	8002a50 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002a3c:	f002 fad2 	bl	8004fe4 <HAL_RCC_EnableCSS>
}
 8002a40:	bf00      	nop
 8002a42:	3750      	adds	r7, #80	; 0x50
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000

08002a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a54:	b672      	cpsid	i
}
 8002a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    printf("[ERROR] Hard error\r\n");
 8002a58:	4801      	ldr	r0, [pc, #4]	; (8002a60 <Error_Handler+0x10>)
 8002a5a:	f008 fdc9 	bl	800b5f0 <puts>
    while (1)
 8002a5e:	e7fe      	b.n	8002a5e <Error_Handler+0xe>
 8002a60:	0800da94 	.word	0x0800da94

08002a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_MspInit+0x54>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	210f      	movs	r1, #15
 8002aa6:	f06f 0001 	mvn.w	r0, #1
 8002aaa:	f000 fab8 	bl	800301e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800

08002abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002ac0:	f002 fbac 	bl	800521c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <NMI_Handler+0x8>
	...

08002ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // Make it clear we have an error
 8002acc:	2201      	movs	r2, #1
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4801      	ldr	r0, [pc, #4]	; (8002ad8 <HardFault_Handler+0x10>)
 8002ad2:	f000 fc5f 	bl	8003394 <HAL_GPIO_WritePin>
 8002ad6:	e7f9      	b.n	8002acc <HardFault_Handler+0x4>
 8002ad8:	40020000 	.word	0x40020000

08002adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <MemManage_Handler+0x4>

08002ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <BusFault_Handler+0x4>

08002ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <UsageFault_Handler+0x4>

08002aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b00:	f000 f96e 	bl	8002de0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b04:	f006 fda8 	bl	8009658 <xTaskGetSchedulerState>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d001      	beq.n	8002b12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b0e:	f006 ffe3 	bl	8009ad8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8002b1a:	2008      	movs	r0, #8
 8002b1c:	f000 fc6e 	bl	80033fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <OTG_FS_IRQHandler+0x10>)
 8002b2a:	f000 fdcf 	bl	80036cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200063cc 	.word	0x200063cc

08002b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return 1;
 8002b3c:	2301      	movs	r3, #1
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <_kill>:

int _kill(int pid, int sig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b52:	f008 ff11 	bl	800b978 <__errno>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2216      	movs	r2, #22
 8002b5a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_exit>:

void _exit (int status)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ffe7 	bl	8002b48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b7a:	e7fe      	b.n	8002b7a <_exit+0x12>

08002b7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e00a      	b.n	8002ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b8e:	f3af 8000 	nop.w
 8002b92:	4601      	mov	r1, r0
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	60ba      	str	r2, [r7, #8]
 8002b9a:	b2ca      	uxtb	r2, r1
 8002b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	dbf0      	blt.n	8002b8e <_read+0x12>
  }

  return len;
 8002bac:	687b      	ldr	r3, [r7, #4]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e009      	b.n	8002bdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	60ba      	str	r2, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbf1      	blt.n	8002bc8 <_write+0x12>
  }
  return len;
 8002be4:	687b      	ldr	r3, [r7, #4]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_close>:

int _close(int file)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c16:	605a      	str	r2, [r3, #4]
  return 0;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_isatty>:

int _isatty(int file)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c2e:	2301      	movs	r3, #1
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <_sbrk+0x5c>)
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <_sbrk+0x60>)
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <_sbrk+0x64>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <_sbrk+0x64>)
 8002c76:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <_sbrk+0x68>)
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <_sbrk+0x64>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d207      	bcs.n	8002c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c88:	f008 fe76 	bl	800b978 <__errno>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	220c      	movs	r2, #12
 8002c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	e009      	b.n	8002cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a05      	ldr	r2, [pc, #20]	; (8002cbc <_sbrk+0x64>)
 8002ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20020000 	.word	0x20020000
 8002cb8:	00000800 	.word	0x00000800
 8002cbc:	20001190 	.word	0x20001190
 8002cc0:	20006c48 	.word	0x20006c48

08002cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <SystemInit+0x20>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <SystemInit+0x20>)
 8002cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cee:	490e      	ldr	r1, [pc, #56]	; (8002d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d04:	4c0b      	ldr	r4, [pc, #44]	; (8002d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d12:	f7ff ffd7 	bl	8002cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d16:	f008 fe35 	bl	800b984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d1a:	f7ff fe21 	bl	8002960 <main>
  bx  lr    
 8002d1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d28:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8002d2c:	0800de8c 	.word	0x0800de8c
  ldr r2, =_sbss
 8002d30:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8002d34:	20006c44 	.word	0x20006c44

08002d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC_IRQHandler>
	...

08002d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_Init+0x40>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <HAL_Init+0x40>)
 8002d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_Init+0x40>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <HAL_Init+0x40>)
 8002d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_Init+0x40>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <HAL_Init+0x40>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d64:	2003      	movs	r0, #3
 8002d66:	f000 f94f 	bl	8003008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6a:	200f      	movs	r0, #15
 8002d6c:	f000 f808 	bl	8002d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d70:	f7ff fe78 	bl	8002a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00

08002d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_InitTick+0x54>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_InitTick+0x58>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f967 	bl	8003072 <HAL_SYSTICK_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00e      	b.n	8002dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b0f      	cmp	r3, #15
 8002db2:	d80a      	bhi.n	8002dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db4:	2200      	movs	r2, #0
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	f000 f92f 	bl	800301e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc0:	4a06      	ldr	r2, [pc, #24]	; (8002ddc <HAL_InitTick+0x5c>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e000      	b.n	8002dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000004 	.word	0x20000004
 8002dd8:	2000000c 	.word	0x2000000c
 8002ddc:	20000008 	.word	0x20000008

08002de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_IncTick+0x20>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_IncTick+0x24>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <HAL_IncTick+0x24>)
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	2000000c 	.word	0x2000000c
 8002e04:	20001194 	.word	0x20001194

08002e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_GetTick+0x14>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20001194 	.word	0x20001194

08002e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff ffee 	bl	8002e08 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d005      	beq.n	8002e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_Delay+0x44>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e46:	bf00      	nop
 8002e48:	f7ff ffde 	bl	8002e08 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d8f7      	bhi.n	8002e48 <HAL_Delay+0x28>
  {
  }
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000000c 	.word	0x2000000c

08002e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e84:	4013      	ands	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9a:	4a04      	ldr	r2, [pc, #16]	; (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	60d3      	str	r3, [r2, #12]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	f003 0307 	and.w	r3, r3, #7
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	db0b      	blt.n	8002ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	4907      	ldr	r1, [pc, #28]	; (8002f04 <__NVIC_EnableIRQ+0x38>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2001      	movs	r0, #1
 8002eee:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000e100 	.word	0xe000e100

08002f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	db0a      	blt.n	8002f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	490c      	ldr	r1, [pc, #48]	; (8002f54 <__NVIC_SetPriority+0x4c>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	0112      	lsls	r2, r2, #4
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f30:	e00a      	b.n	8002f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4908      	ldr	r1, [pc, #32]	; (8002f58 <__NVIC_SetPriority+0x50>)
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	3b04      	subs	r3, #4
 8002f40:	0112      	lsls	r2, r2, #4
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	440b      	add	r3, r1
 8002f46:	761a      	strb	r2, [r3, #24]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000e100 	.word	0xe000e100
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f1c3 0307 	rsb	r3, r3, #7
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	bf28      	it	cs
 8002f7a:	2304      	movcs	r3, #4
 8002f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d902      	bls.n	8002f8c <NVIC_EncodePriority+0x30>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3b03      	subs	r3, #3
 8002f8a:	e000      	b.n	8002f8e <NVIC_EncodePriority+0x32>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f90:	f04f 32ff 	mov.w	r2, #4294967295
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	43d9      	mvns	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	4313      	orrs	r3, r2
         );
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3724      	adds	r7, #36	; 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fd4:	d301      	bcc.n	8002fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00f      	b.n	8002ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <SysTick_Config+0x40>)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe2:	210f      	movs	r1, #15
 8002fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe8:	f7ff ff8e 	bl	8002f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <SysTick_Config+0x40>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff2:	4b04      	ldr	r3, [pc, #16]	; (8003004 <SysTick_Config+0x40>)
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	e000e010 	.word	0xe000e010

08003008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff29 	bl	8002e68 <__NVIC_SetPriorityGrouping>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003030:	f7ff ff3e 	bl	8002eb0 <__NVIC_GetPriorityGrouping>
 8003034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	6978      	ldr	r0, [r7, #20]
 800303c:	f7ff ff8e 	bl	8002f5c <NVIC_EncodePriority>
 8003040:	4602      	mov	r2, r0
 8003042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff5d 	bl	8002f08 <__NVIC_SetPriority>
}
 800304e:	bf00      	nop
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff31 	bl	8002ecc <__NVIC_EnableIRQ>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ffa2 	bl	8002fc4 <SysTick_Config>
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	e159      	b.n	800335c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030a8:	2201      	movs	r2, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	f040 8148 	bne.w	8003356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d005      	beq.n	80030de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d130      	bne.n	8003140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	2203      	movs	r2, #3
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003114:	2201      	movs	r2, #1
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 0201 	and.w	r2, r3, #1
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	2b03      	cmp	r3, #3
 800314a:	d017      	beq.n	800317c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d123      	bne.n	80031d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	08da      	lsrs	r2, r3, #3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3208      	adds	r2, #8
 8003190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	220f      	movs	r2, #15
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	08da      	lsrs	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	69b9      	ldr	r1, [r7, #24]
 80031cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0203 	and.w	r2, r3, #3
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80a2 	beq.w	8003356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	4b57      	ldr	r3, [pc, #348]	; (8003374 <HAL_GPIO_Init+0x2e8>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	4a56      	ldr	r2, [pc, #344]	; (8003374 <HAL_GPIO_Init+0x2e8>)
 800321c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003220:	6453      	str	r3, [r2, #68]	; 0x44
 8003222:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_GPIO_Init+0x2e8>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800322e:	4a52      	ldr	r2, [pc, #328]	; (8003378 <HAL_GPIO_Init+0x2ec>)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a49      	ldr	r2, [pc, #292]	; (800337c <HAL_GPIO_Init+0x2f0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d019      	beq.n	800328e <HAL_GPIO_Init+0x202>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a48      	ldr	r2, [pc, #288]	; (8003380 <HAL_GPIO_Init+0x2f4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0x1fe>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a47      	ldr	r2, [pc, #284]	; (8003384 <HAL_GPIO_Init+0x2f8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00d      	beq.n	8003286 <HAL_GPIO_Init+0x1fa>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a46      	ldr	r2, [pc, #280]	; (8003388 <HAL_GPIO_Init+0x2fc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x1f6>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a45      	ldr	r2, [pc, #276]	; (800338c <HAL_GPIO_Init+0x300>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_GPIO_Init+0x1f2>
 800327a:	2304      	movs	r3, #4
 800327c:	e008      	b.n	8003290 <HAL_GPIO_Init+0x204>
 800327e:	2307      	movs	r3, #7
 8003280:	e006      	b.n	8003290 <HAL_GPIO_Init+0x204>
 8003282:	2303      	movs	r3, #3
 8003284:	e004      	b.n	8003290 <HAL_GPIO_Init+0x204>
 8003286:	2302      	movs	r3, #2
 8003288:	e002      	b.n	8003290 <HAL_GPIO_Init+0x204>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_GPIO_Init+0x204>
 800328e:	2300      	movs	r3, #0
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f002 0203 	and.w	r2, r2, #3
 8003296:	0092      	lsls	r2, r2, #2
 8003298:	4093      	lsls	r3, r2
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032a0:	4935      	ldr	r1, [pc, #212]	; (8003378 <HAL_GPIO_Init+0x2ec>)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	3302      	adds	r3, #2
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ae:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_GPIO_Init+0x304>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032d2:	4a2f      	ldr	r2, [pc, #188]	; (8003390 <HAL_GPIO_Init+0x304>)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_GPIO_Init+0x304>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032fc:	4a24      	ldr	r2, [pc, #144]	; (8003390 <HAL_GPIO_Init+0x304>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <HAL_GPIO_Init+0x304>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	43db      	mvns	r3, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003326:	4a1a      	ldr	r2, [pc, #104]	; (8003390 <HAL_GPIO_Init+0x304>)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_GPIO_Init+0x304>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003350:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HAL_GPIO_Init+0x304>)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3301      	adds	r3, #1
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b0f      	cmp	r3, #15
 8003360:	f67f aea2 	bls.w	80030a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800
 8003378:	40013800 	.word	0x40013800
 800337c:	40020000 	.word	0x40020000
 8003380:	40020400 	.word	0x40020400
 8003384:	40020800 	.word	0x40020800
 8003388:	40020c00 	.word	0x40020c00
 800338c:	40021000 	.word	0x40021000
 8003390:	40013c00 	.word	0x40013c00

08003394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
 80033a0:	4613      	mov	r3, r2
 80033a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a4:	787b      	ldrb	r3, [r7, #1]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033b0:	e003      	b.n	80033ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033b2:	887b      	ldrh	r3, [r7, #2]
 80033b4:	041a      	lsls	r2, r3, #16
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	619a      	str	r2, [r3, #24]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033d8:	887a      	ldrh	r2, [r7, #2]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	041a      	lsls	r2, r3, #16
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	43d9      	mvns	r1, r3
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	400b      	ands	r3, r1
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	619a      	str	r2, [r3, #24]
}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff f9f8 	bl	8002810 <HAL_GPIO_EXTI_Callback>
  }
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40013c00 	.word	0x40013c00

0800342c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342e:	b08f      	sub	sp, #60	; 0x3c
 8003430:	af0a      	add	r7, sp, #40	; 0x28
 8003432:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e10f      	b.n	800365e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f006 ff8f 	bl	800a37c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2203      	movs	r2, #3
 8003462:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f001 fffc 	bl	800547a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	687e      	ldr	r6, [r7, #4]
 800348a:	466d      	mov	r5, sp
 800348c:	f106 0410 	add.w	r4, r6, #16
 8003490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003498:	e894 0003 	ldmia.w	r4, {r0, r1}
 800349c:	e885 0003 	stmia.w	r5, {r0, r1}
 80034a0:	1d33      	adds	r3, r6, #4
 80034a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034a4:	6838      	ldr	r0, [r7, #0]
 80034a6:	f001 fed4 	bl	8005252 <USB_CoreInit>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0d0      	b.n	800365e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 ffea 	bl	800549c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e04a      	b.n	8003564 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	333d      	adds	r3, #61	; 0x3d
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	333c      	adds	r3, #60	; 0x3c
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	b298      	uxth	r0, r3
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	3344      	adds	r3, #68	; 0x44
 800350a:	4602      	mov	r2, r0
 800350c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	3340      	adds	r3, #64	; 0x40
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	3348      	adds	r3, #72	; 0x48
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	334c      	adds	r3, #76	; 0x4c
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	3354      	adds	r3, #84	; 0x54
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	3301      	adds	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3af      	bcc.n	80034ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	e044      	b.n	80035fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	3301      	adds	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	d3b5      	bcc.n	8003574 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	687e      	ldr	r6, [r7, #4]
 8003610:	466d      	mov	r5, sp
 8003612:	f106 0410 	add.w	r4, r6, #16
 8003616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800361a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800361e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003622:	e885 0003 	stmia.w	r5, {r0, r1}
 8003626:	1d33      	adds	r3, r6, #4
 8003628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800362a:	6838      	ldr	r0, [r7, #0]
 800362c:	f001 ff82 	bl	8005534 <USB_DevInit>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e00d      	b.n	800365e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f003 f8d1 	bl	80067fe <USB_DevDisconnect>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003666 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_PCD_Start+0x1c>
 800367e:	2302      	movs	r3, #2
 8003680:	e020      	b.n	80036c4 <HAL_PCD_Start+0x5e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	2b01      	cmp	r3, #1
 8003690:	d109      	bne.n	80036a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003696:	2b01      	cmp	r3, #1
 8003698:	d005      	beq.n	80036a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 fed4 	bl	8005458 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f003 f881 	bl	80067bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b08d      	sub	sp, #52	; 0x34
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f003 f93f 	bl	8006966 <USB_GetMode>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f040 848a 	bne.w	8004004 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 f8a3 	bl	8006840 <USB_ReadInterrupts>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8480 	beq.w	8004002 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f003 f890 	bl	8006840 <USB_ReadInterrupts>
 8003720:	4603      	mov	r3, r0
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b02      	cmp	r3, #2
 8003728:	d107      	bne.n	800373a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f002 0202 	and.w	r2, r2, #2
 8003738:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f003 f87e 	bl	8006840 <USB_ReadInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b10      	cmp	r3, #16
 800374c:	d161      	bne.n	8003812 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699a      	ldr	r2, [r3, #24]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0210 	bic.w	r2, r2, #16
 800375c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 020f 	and.w	r2, r3, #15
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	3304      	adds	r3, #4
 800377c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	0c5b      	lsrs	r3, r3, #17
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	2b02      	cmp	r3, #2
 8003788:	d124      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d035      	beq.n	8003802 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	6a38      	ldr	r0, [r7, #32]
 80037aa:	f002 feb5 	bl	8006518 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ba:	441a      	add	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037cc:	441a      	add	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	621a      	str	r2, [r3, #32]
 80037d2:	e016      	b.n	8003802 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	0c5b      	lsrs	r3, r3, #17
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	2b06      	cmp	r3, #6
 80037de:	d110      	bne.n	8003802 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037e6:	2208      	movs	r2, #8
 80037e8:	4619      	mov	r1, r3
 80037ea:	6a38      	ldr	r0, [r7, #32]
 80037ec:	f002 fe94 	bl	8006518 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037fc:	441a      	add	r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0210 	orr.w	r2, r2, #16
 8003810:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f003 f812 	bl	8006840 <USB_ReadInterrupts>
 800381c:	4603      	mov	r3, r0
 800381e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003822:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003826:	f040 80a7 	bne.w	8003978 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f003 f817 	bl	8006866 <USB_ReadDevAllOutEpInterrupt>
 8003838:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800383a:	e099      	b.n	8003970 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 808e 	beq.w	8003964 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f003 f83b 	bl	80068ce <USB_ReadDevOutEPInterrupt>
 8003858:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00c      	beq.n	800387e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003870:	461a      	mov	r2, r3
 8003872:	2301      	movs	r3, #1
 8003874:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fec3 	bl	8004604 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003894:	461a      	mov	r2, r3
 8003896:	2308      	movs	r3, #8
 8003898:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800389a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 ff99 	bl	80047d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	2310      	movs	r3, #16
 80038bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d030      	beq.n	800392a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	2b80      	cmp	r3, #128	; 0x80
 80038d2:	d109      	bne.n	80038e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	3304      	adds	r3, #4
 80038fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	78db      	ldrb	r3, [r3, #3]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d108      	bne.n	8003918 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2200      	movs	r2, #0
 800390a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	b2db      	uxtb	r3, r3
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f006 fe2e 	bl	800a574 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003924:	461a      	mov	r2, r3
 8003926:	2302      	movs	r3, #2
 8003928:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	461a      	mov	r2, r3
 8003942:	2320      	movs	r3, #32
 8003944:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d009      	beq.n	8003964 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395c:	461a      	mov	r2, r3
 800395e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003962:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	3301      	adds	r3, #1
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	f47f af62 	bne.w	800383c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f002 ff5f 	bl	8006840 <USB_ReadInterrupts>
 8003982:	4603      	mov	r3, r0
 8003984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003988:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800398c:	f040 80db 	bne.w	8003b46 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f002 ff80 	bl	800689a <USB_ReadDevAllInEpInterrupt>
 800399a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039a0:	e0cd      	b.n	8003b3e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80c2 	beq.w	8003b32 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f002 ffa6 	bl	800690a <USB_ReadDevInEPInterrupt>
 80039be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d057      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	2201      	movs	r2, #1
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69f9      	ldr	r1, [r7, #28]
 80039e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ea:	4013      	ands	r3, r2
 80039ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	461a      	mov	r2, r3
 80039fc:	2301      	movs	r3, #1
 80039fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d132      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	334c      	adds	r3, #76	; 0x4c
 8003a18:	6819      	ldr	r1, [r3, #0]
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4403      	add	r3, r0
 8003a28:	3348      	adds	r3, #72	; 0x48
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4419      	add	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4403      	add	r3, r0
 8003a3c:	334c      	adds	r3, #76	; 0x4c
 8003a3e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d113      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x3a2>
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3354      	adds	r3, #84	; 0x54
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d108      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a66:	461a      	mov	r2, r3
 8003a68:	2101      	movs	r1, #1
 8003a6a:	f002 ffad 	bl	80069c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f006 fd02 	bl	800a47e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a90:	461a      	mov	r2, r3
 8003a92:	2308      	movs	r3, #8
 8003a94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aac:	461a      	mov	r2, r3
 8003aae:	2310      	movs	r3, #16
 8003ab0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2340      	movs	r3, #64	; 0x40
 8003acc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d023      	beq.n	8003b20 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ada:	6a38      	ldr	r0, [r7, #32]
 8003adc:	f001 fe8e 	bl	80057fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	3338      	adds	r3, #56	; 0x38
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	3304      	adds	r3, #4
 8003af2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	78db      	ldrb	r3, [r3, #3]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d108      	bne.n	8003b0e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2200      	movs	r2, #0
 8003b00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	4619      	mov	r1, r3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f006 fd45 	bl	800a598 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fcdb 	bl	80044e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	3301      	adds	r3, #1
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f af2e 	bne.w	80039a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f002 fe78 	bl	8006840 <USB_ReadInterrupts>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b5a:	d122      	bne.n	8003ba2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d108      	bne.n	8003b8c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b82:	2100      	movs	r1, #0
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fec3 	bl	8004910 <HAL_PCDEx_LPM_Callback>
 8003b8a:	e002      	b.n	8003b92 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f006 fce3 	bl	800a558 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f002 fe4a 	bl	8006840 <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb6:	d112      	bne.n	8003bde <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d102      	bne.n	8003bce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f006 fc9f 	bl	800a50c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bdc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f002 fe2c 	bl	8006840 <USB_ReadInterrupts>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf2:	f040 80b7 	bne.w	8003d64 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2110      	movs	r1, #16
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 fdf3 	bl	80057fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1a:	e046      	b.n	8003caa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c74:	0151      	lsls	r1, r2, #5
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c94:	0151      	lsls	r1, r2, #5
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	440a      	add	r2, r1
 8003c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ca2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3b3      	bcc.n	8003c1c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d016      	beq.n	8003cfe <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce0:	f043 030b 	orr.w	r3, r3, #11
 8003ce4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf6:	f043 030b 	orr.w	r3, r3, #11
 8003cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfc:	e015      	b.n	8003d2a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d10:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d14:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d24:	f043 030b 	orr.w	r3, r3, #11
 8003d28:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d3c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f002 fe3a 	bl	80069c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 fd69 	bl	8006840 <USB_ReadInterrupts>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d78:	d124      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 fdff 	bl	8006982 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 fdb4 	bl	80058f6 <USB_GetDevSpeed>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	461a      	mov	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681c      	ldr	r4, [r3, #0]
 8003d9a:	f001 fa33 	bl	8005204 <HAL_RCC_GetHCLKFreq>
 8003d9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	4620      	mov	r0, r4
 8003daa:	f001 fab3 	bl	8005314 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f006 fb8d 	bl	800a4ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f002 fd39 	bl	8006840 <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d10a      	bne.n	8003dee <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f006 fb6a 	bl	800a4b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f002 0208 	and.w	r2, r2, #8
 8003dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f002 fd24 	bl	8006840 <USB_ReadInterrupts>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b80      	cmp	r3, #128	; 0x80
 8003e00:	d122      	bne.n	8003e48 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e0e:	2301      	movs	r3, #1
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
 8003e12:	e014      	b.n	8003e3e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fb27 	bl	8004486 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d3e5      	bcc.n	8003e14 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f002 fcf7 	bl	8006840 <USB_ReadInterrupts>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5c:	d13b      	bne.n	8003ed6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e5e:	2301      	movs	r3, #1
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
 8003e62:	e02b      	b.n	8003ebc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	3340      	adds	r3, #64	; 0x40
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d115      	bne.n	8003eb6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da12      	bge.n	8003eb6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	333f      	adds	r3, #63	; 0x3f
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fae8 	bl	8004486 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	3301      	adds	r3, #1
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d3ce      	bcc.n	8003e64 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f002 fcb0 	bl	8006840 <USB_ReadInterrupts>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eea:	d155      	bne.n	8003f98 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eec:	2301      	movs	r3, #1
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef0:	e045      	b.n	8003f7e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d12e      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	da2b      	bge.n	8003f78 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f2c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d121      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f74:	6053      	str	r3, [r2, #4]
            break;
 8003f76:	e007      	b.n	8003f88 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d3b4      	bcc.n	8003ef2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f002 fc4f 	bl	8006840 <USB_ReadInterrupts>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fac:	d10a      	bne.n	8003fc4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f006 fb04 	bl	800a5bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f002 fc39 	bl	8006840 <USB_ReadInterrupts>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d115      	bne.n	8004004 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f006 faf4 	bl	800a5d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	e000      	b.n	8004004 <HAL_PCD_IRQHandler+0x938>
      return;
 8004002:	bf00      	nop
    }
  }
}
 8004004:	3734      	adds	r7, #52	; 0x34
 8004006:	46bd      	mov	sp, r7
 8004008:	bd90      	pop	{r4, r7, pc}

0800400a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_PCD_SetAddress+0x1a>
 8004020:	2302      	movs	r3, #2
 8004022:	e013      	b.n	800404c <HAL_PCD_SetAddress+0x42>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f002 fb97 	bl	8006770 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	461a      	mov	r2, r3
 8004062:	4603      	mov	r3, r0
 8004064:	70fb      	strb	r3, [r7, #3]
 8004066:	460b      	mov	r3, r1
 8004068:	803b      	strh	r3, [r7, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004076:	2b00      	cmp	r3, #0
 8004078:	da0f      	bge.n	800409a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	3338      	adds	r3, #56	; 0x38
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	3304      	adds	r3, #4
 8004090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	705a      	strb	r2, [r3, #1]
 8004098:	e00f      	b.n	80040ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	f003 020f 	and.w	r2, r3, #15
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	3304      	adds	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040c6:	883a      	ldrh	r2, [r7, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	78ba      	ldrb	r2, [r7, #2]
 80040d0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040e4:	78bb      	ldrb	r3, [r7, #2]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d102      	bne.n	80040f0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_PCD_EP_Open+0xaa>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e00e      	b.n	800411c <HAL_PCD_EP_Open+0xc8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68f9      	ldr	r1, [r7, #12]
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fc17 	bl	8005940 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800411a:	7afb      	ldrb	r3, [r7, #11]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004134:	2b00      	cmp	r3, #0
 8004136:	da0f      	bge.n	8004158 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 020f 	and.w	r2, r3, #15
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	3338      	adds	r3, #56	; 0x38
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	3304      	adds	r3, #4
 800414e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	705a      	strb	r2, [r3, #1]
 8004156:	e00f      	b.n	8004178 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 020f 	and.w	r2, r3, #15
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	3304      	adds	r3, #4
 8004170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_PCD_EP_Close+0x6e>
 800418e:	2302      	movs	r3, #2
 8004190:	e00e      	b.n	80041b0 <HAL_PCD_EP_Close+0x8c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 fc55 	bl	8005a50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	460b      	mov	r3, r1
 80041c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041c8:	7afb      	ldrb	r3, [r7, #11]
 80041ca:	f003 020f 	and.w	r2, r3, #15
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4413      	add	r3, r2
 80041de:	3304      	adds	r3, #4
 80041e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2200      	movs	r2, #0
 80041f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fa:	7afb      	ldrb	r3, [r7, #11]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	b2da      	uxtb	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004214:	7afb      	ldrb	r3, [r7, #11]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	6979      	ldr	r1, [r7, #20]
 800422c:	f001 ff34 	bl	8006098 <USB_EP0StartXfer>
 8004230:	e008      	b.n	8004244 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	6979      	ldr	r1, [r7, #20]
 8004240:	f001 fce2 	bl	8005c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	f003 020f 	and.w	r2, r3, #15
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004270:	681b      	ldr	r3, [r3, #0]
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	460b      	mov	r3, r1
 800428c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800428e:	7afb      	ldrb	r3, [r7, #11]
 8004290:	f003 020f 	and.w	r2, r3, #15
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	3338      	adds	r3, #56	; 0x38
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	3304      	adds	r3, #4
 80042a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2201      	movs	r2, #1
 80042bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042be:	7afb      	ldrb	r3, [r7, #11]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042d8:	7afb      	ldrb	r3, [r7, #11]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	6979      	ldr	r1, [r7, #20]
 80042f0:	f001 fed2 	bl	8006098 <USB_EP0StartXfer>
 80042f4:	e008      	b.n	8004308 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	6979      	ldr	r1, [r7, #20]
 8004304:	f001 fc80 	bl	8005c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	f003 020f 	and.w	r2, r3, #15
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	429a      	cmp	r2, r3
 800432a:	d901      	bls.n	8004330 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e050      	b.n	80043d2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004334:	2b00      	cmp	r3, #0
 8004336:	da0f      	bge.n	8004358 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	f003 020f 	and.w	r2, r3, #15
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	3338      	adds	r3, #56	; 0x38
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	705a      	strb	r2, [r3, #1]
 8004356:	e00d      	b.n	8004374 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	4613      	mov	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	3304      	adds	r3, #4
 800436c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_PCD_EP_SetStall+0x82>
 8004390:	2302      	movs	r3, #2
 8004392:	e01e      	b.n	80043d2 <HAL_PCD_EP_SetStall+0xc0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68f9      	ldr	r1, [r7, #12]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f002 f910 	bl	80065c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	b2d9      	uxtb	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043c2:	461a      	mov	r2, r3
 80043c4:	f002 fb00 	bl	80069c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	f003 020f 	and.w	r2, r3, #15
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d901      	bls.n	80043f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e042      	b.n	800447e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	da0f      	bge.n	8004420 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	f003 020f 	and.w	r2, r3, #15
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	3338      	adds	r3, #56	; 0x38
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	3304      	adds	r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	705a      	strb	r2, [r3, #1]
 800441e:	e00f      	b.n	8004440 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	f003 020f 	and.w	r2, r3, #15
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	3304      	adds	r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_PCD_EP_ClrStall+0x86>
 800445c:	2302      	movs	r3, #2
 800445e:	e00e      	b.n	800447e <HAL_PCD_EP_ClrStall+0xa4>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68f9      	ldr	r1, [r7, #12]
 800446e:	4618      	mov	r0, r3
 8004470:	f002 f918 	bl	80066a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004496:	2b00      	cmp	r3, #0
 8004498:	da0c      	bge.n	80044b4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	f003 020f 	and.w	r2, r3, #15
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	3338      	adds	r3, #56	; 0x38
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3304      	adds	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	e00c      	b.n	80044ce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	f003 020f 	and.w	r2, r3, #15
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4413      	add	r3, r2
 80044ca:	3304      	adds	r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 ff37 	bl	8006348 <USB_EPStopXfer>
 80044da:	4603      	mov	r3, r0
 80044dc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044de:	7afb      	ldrb	r3, [r7, #11]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	3338      	adds	r3, #56	; 0x38
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4413      	add	r3, r2
 800450c:	3304      	adds	r3, #4
 800450e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1a      	ldr	r2, [r3, #32]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	429a      	cmp	r2, r3
 800451a:	d901      	bls.n	8004520 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e06c      	b.n	80045fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	699a      	ldr	r2, [r3, #24]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	429a      	cmp	r2, r3
 8004534:	d902      	bls.n	800453c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	3303      	adds	r3, #3
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004544:	e02b      	b.n	800459e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	429a      	cmp	r2, r3
 800455a:	d902      	bls.n	8004562 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3303      	adds	r3, #3
 8004566:	089b      	lsrs	r3, r3, #2
 8004568:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6919      	ldr	r1, [r3, #16]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800457a:	b2db      	uxtb	r3, r3
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	4603      	mov	r3, r0
 8004580:	6978      	ldr	r0, [r7, #20]
 8004582:	f001 ff8b 	bl	800649c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	441a      	add	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1a      	ldr	r2, [r3, #32]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	441a      	add	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d809      	bhi.n	80045c8 <PCD_WriteEmptyTxFifo+0xe0>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045bc:	429a      	cmp	r2, r3
 80045be:	d203      	bcs.n	80045c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1be      	bne.n	8004546 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d811      	bhi.n	80045f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	2201      	movs	r2, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	6939      	ldr	r1, [r7, #16]
 80045f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045f4:	4013      	ands	r3, r2
 80045f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	333c      	adds	r3, #60	; 0x3c
 800461c:	3304      	adds	r3, #4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d17b      	bne.n	8004732 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d015      	beq.n	8004670 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	4a61      	ldr	r2, [pc, #388]	; (80047cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	f240 80b9 	bls.w	80047c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80b3 	beq.w	80047c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004666:	461a      	mov	r2, r3
 8004668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466c:	6093      	str	r3, [r2, #8]
 800466e:	e0a7      	b.n	80047c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	461a      	mov	r2, r3
 8004688:	2320      	movs	r3, #32
 800468a:	6093      	str	r3, [r2, #8]
 800468c:	e098      	b.n	80047c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 8093 	bne.w	80047c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	4a4b      	ldr	r2, [pc, #300]	; (80047cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d90f      	bls.n	80046c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	461a      	mov	r2, r3
 80046ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046be:	6093      	str	r3, [r2, #8]
 80046c0:	e07e      	b.n	80047c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	3304      	adds	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	0159      	lsls	r1, r3, #5
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	440b      	add	r3, r1
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ee:	1ad2      	subs	r2, r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d114      	bne.n	8004724 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800470c:	461a      	mov	r2, r3
 800470e:	2101      	movs	r1, #1
 8004710:	f002 f95a 	bl	80069c8 <USB_EP0_OutStart>
 8004714:	e006      	b.n	8004724 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	441a      	add	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f005 fe8c 	bl	800a448 <HAL_PCD_DataOutStageCallback>
 8004730:	e046      	b.n	80047c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d124      	bne.n	8004784 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004750:	461a      	mov	r2, r3
 8004752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004756:	6093      	str	r3, [r2, #8]
 8004758:	e032      	b.n	80047c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004770:	461a      	mov	r2, r3
 8004772:	2320      	movs	r3, #32
 8004774:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f005 fe63 	bl	800a448 <HAL_PCD_DataOutStageCallback>
 8004782:	e01d      	b.n	80047c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d114      	bne.n	80047b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047ac:	461a      	mov	r2, r3
 80047ae:	2100      	movs	r1, #0
 80047b0:	f002 f90a 	bl	80069c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f005 fe44 	bl	800a448 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	4f54300a 	.word	0x4f54300a
 80047d0:	4f54310a 	.word	0x4f54310a

080047d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	333c      	adds	r3, #60	; 0x3c
 80047ec:	3304      	adds	r3, #4
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4a15      	ldr	r2, [pc, #84]	; (800485c <PCD_EP_OutSetupPacket_int+0x88>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d90e      	bls.n	8004828 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004810:	2b00      	cmp	r3, #0
 8004812:	d009      	beq.n	8004828 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	461a      	mov	r2, r3
 8004822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004826:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f005 fdfb 	bl	800a424 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4a0a      	ldr	r2, [pc, #40]	; (800485c <PCD_EP_OutSetupPacket_int+0x88>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d90c      	bls.n	8004850 <PCD_EP_OutSetupPacket_int+0x7c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d108      	bne.n	8004850 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004848:	461a      	mov	r2, r3
 800484a:	2101      	movs	r1, #1
 800484c:	f002 f8bc 	bl	80069c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	4f54300a 	.word	0x4f54300a

08004860 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
 800486c:	4613      	mov	r3, r2
 800486e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d107      	bne.n	800488e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800487e:	883b      	ldrh	r3, [r7, #0]
 8004880:	0419      	lsls	r1, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	430a      	orrs	r2, r1
 800488a:	629a      	str	r2, [r3, #40]	; 0x28
 800488c:	e028      	b.n	80048e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4413      	add	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]
 80048a0:	e00d      	b.n	80048be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	3340      	adds	r3, #64	; 0x40
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	4413      	add	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	3301      	adds	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
 80048be:	7bfa      	ldrb	r2, [r7, #15]
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d3ec      	bcc.n	80048a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048c8:	883b      	ldrh	r3, [r7, #0]
 80048ca:	0418      	lsls	r0, r3, #16
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	4302      	orrs	r2, r0
 80048d8:	3340      	adds	r3, #64	; 0x40
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e267      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d075      	beq.n	8004a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004946:	4b88      	ldr	r3, [pc, #544]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	2b04      	cmp	r3, #4
 8004950:	d00c      	beq.n	800496c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004952:	4b85      	ldr	r3, [pc, #532]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495a:	2b08      	cmp	r3, #8
 800495c:	d112      	bne.n	8004984 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495e:	4b82      	ldr	r3, [pc, #520]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800496a:	d10b      	bne.n	8004984 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496c:	4b7e      	ldr	r3, [pc, #504]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d05b      	beq.n	8004a30 <HAL_RCC_OscConfig+0x108>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d157      	bne.n	8004a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e242      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498c:	d106      	bne.n	800499c <HAL_RCC_OscConfig+0x74>
 800498e:	4b76      	ldr	r3, [pc, #472]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a75      	ldr	r2, [pc, #468]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e01d      	b.n	80049d8 <HAL_RCC_OscConfig+0xb0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCC_OscConfig+0x98>
 80049a6:	4b70      	ldr	r3, [pc, #448]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a6f      	ldr	r2, [pc, #444]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 80049ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4b6d      	ldr	r3, [pc, #436]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a6c      	ldr	r2, [pc, #432]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e00b      	b.n	80049d8 <HAL_RCC_OscConfig+0xb0>
 80049c0:	4b69      	ldr	r3, [pc, #420]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a68      	ldr	r2, [pc, #416]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 80049c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b66      	ldr	r3, [pc, #408]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a65      	ldr	r2, [pc, #404]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 80049d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d013      	beq.n	8004a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fe fa12 	bl	8002e08 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e8:	f7fe fa0e 	bl	8002e08 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b64      	cmp	r3, #100	; 0x64
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e207      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	4b5b      	ldr	r3, [pc, #364]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0xc0>
 8004a06:	e014      	b.n	8004a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fe f9fe 	bl	8002e08 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a10:	f7fe f9fa 	bl	8002e08 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b64      	cmp	r3, #100	; 0x64
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e1f3      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0xe8>
 8004a2e:	e000      	b.n	8004a32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d063      	beq.n	8004b06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a3e:	4b4a      	ldr	r3, [pc, #296]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a4a:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d11c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a56:	4b44      	ldr	r3, [pc, #272]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d116      	bne.n	8004a90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a62:	4b41      	ldr	r3, [pc, #260]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_RCC_OscConfig+0x152>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d001      	beq.n	8004a7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e1c7      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7a:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4937      	ldr	r1, [pc, #220]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8e:	e03a      	b.n	8004b06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d020      	beq.n	8004ada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a98:	4b34      	ldr	r3, [pc, #208]	; (8004b6c <HAL_RCC_OscConfig+0x244>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9e:	f7fe f9b3 	bl	8002e08 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa6:	f7fe f9af 	bl	8002e08 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e1a8      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac4:	4b28      	ldr	r3, [pc, #160]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	4925      	ldr	r1, [pc, #148]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	600b      	str	r3, [r1, #0]
 8004ad8:	e015      	b.n	8004b06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ada:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <HAL_RCC_OscConfig+0x244>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fe f992 	bl	8002e08 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae8:	f7fe f98e 	bl	8002e08 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e187      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d036      	beq.n	8004b80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d016      	beq.n	8004b48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b1a:	4b15      	ldr	r3, [pc, #84]	; (8004b70 <HAL_RCC_OscConfig+0x248>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fe f972 	bl	8002e08 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b28:	f7fe f96e 	bl	8002e08 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e167      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0x200>
 8004b46:	e01b      	b.n	8004b80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b48:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_RCC_OscConfig+0x248>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4e:	f7fe f95b 	bl	8002e08 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b54:	e00e      	b.n	8004b74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b56:	f7fe f957 	bl	8002e08 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d907      	bls.n	8004b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e150      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	42470000 	.word	0x42470000
 8004b70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b74:	4b88      	ldr	r3, [pc, #544]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1ea      	bne.n	8004b56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8097 	beq.w	8004cbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b92:	4b81      	ldr	r3, [pc, #516]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10f      	bne.n	8004bbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	4b7d      	ldr	r3, [pc, #500]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	4a7c      	ldr	r2, [pc, #496]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6413      	str	r3, [r2, #64]	; 0x40
 8004bae:	4b7a      	ldr	r3, [pc, #488]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bbe:	4b77      	ldr	r3, [pc, #476]	; (8004d9c <HAL_RCC_OscConfig+0x474>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d118      	bne.n	8004bfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bca:	4b74      	ldr	r3, [pc, #464]	; (8004d9c <HAL_RCC_OscConfig+0x474>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a73      	ldr	r2, [pc, #460]	; (8004d9c <HAL_RCC_OscConfig+0x474>)
 8004bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd6:	f7fe f917 	bl	8002e08 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bde:	f7fe f913 	bl	8002e08 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e10c      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf0:	4b6a      	ldr	r3, [pc, #424]	; (8004d9c <HAL_RCC_OscConfig+0x474>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d106      	bne.n	8004c12 <HAL_RCC_OscConfig+0x2ea>
 8004c04:	4b64      	ldr	r3, [pc, #400]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c08:	4a63      	ldr	r2, [pc, #396]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c10:	e01c      	b.n	8004c4c <HAL_RCC_OscConfig+0x324>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b05      	cmp	r3, #5
 8004c18:	d10c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x30c>
 8004c1a:	4b5f      	ldr	r3, [pc, #380]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	4a5e      	ldr	r2, [pc, #376]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70
 8004c26:	4b5c      	ldr	r3, [pc, #368]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	4a5b      	ldr	r2, [pc, #364]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	6713      	str	r3, [r2, #112]	; 0x70
 8004c32:	e00b      	b.n	8004c4c <HAL_RCC_OscConfig+0x324>
 8004c34:	4b58      	ldr	r3, [pc, #352]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	4a57      	ldr	r2, [pc, #348]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c3a:	f023 0301 	bic.w	r3, r3, #1
 8004c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c40:	4b55      	ldr	r3, [pc, #340]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c44:	4a54      	ldr	r2, [pc, #336]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c46:	f023 0304 	bic.w	r3, r3, #4
 8004c4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d015      	beq.n	8004c80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c54:	f7fe f8d8 	bl	8002e08 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5a:	e00a      	b.n	8004c72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c5c:	f7fe f8d4 	bl	8002e08 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e0cb      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c72:	4b49      	ldr	r3, [pc, #292]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0ee      	beq.n	8004c5c <HAL_RCC_OscConfig+0x334>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c80:	f7fe f8c2 	bl	8002e08 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c88:	f7fe f8be 	bl	8002e08 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e0b5      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9e:	4b3e      	ldr	r3, [pc, #248]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1ee      	bne.n	8004c88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d105      	bne.n	8004cbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb0:	4b39      	ldr	r3, [pc, #228]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	4a38      	ldr	r2, [pc, #224]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80a1 	beq.w	8004e08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cc6:	4b34      	ldr	r3, [pc, #208]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d05c      	beq.n	8004d8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d141      	bne.n	8004d5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cda:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <HAL_RCC_OscConfig+0x478>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fe f892 	bl	8002e08 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce8:	f7fe f88e 	bl	8002e08 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e087      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfa:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69da      	ldr	r2, [r3, #28]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	019b      	lsls	r3, r3, #6
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	061b      	lsls	r3, r3, #24
 8004d2a:	491b      	ldr	r1, [pc, #108]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d30:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <HAL_RCC_OscConfig+0x478>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d36:	f7fe f867 	bl	8002e08 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3e:	f7fe f863 	bl	8002e08 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e05c      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x416>
 8004d5c:	e054      	b.n	8004e08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <HAL_RCC_OscConfig+0x478>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fe f850 	bl	8002e08 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7fe f84c 	bl	8002e08 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e045      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_RCC_OscConfig+0x470>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x444>
 8004d8a:	e03d      	b.n	8004e08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d107      	bne.n	8004da4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e038      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004da4:	4b1b      	ldr	r3, [pc, #108]	; (8004e14 <HAL_RCC_OscConfig+0x4ec>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d028      	beq.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d121      	bne.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d11a      	bne.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d111      	bne.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	3b01      	subs	r3, #1
 8004dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d107      	bne.n	8004e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800

08004e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0cc      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b68      	ldr	r3, [pc, #416]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d90c      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b65      	ldr	r3, [pc, #404]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b63      	ldr	r3, [pc, #396]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0b8      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d020      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e6c:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4a58      	ldr	r2, [pc, #352]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e84:	4b53      	ldr	r3, [pc, #332]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a52      	ldr	r2, [pc, #328]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	494d      	ldr	r1, [pc, #308]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d044      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b47      	ldr	r3, [pc, #284]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d119      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e07f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d003      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d107      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed6:	4b3f      	ldr	r3, [pc, #252]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e067      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ef6:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 0203 	bic.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4934      	ldr	r1, [pc, #208]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f08:	f7fd ff7e 	bl	8002e08 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f10:	f7fd ff7a 	bl	8002e08 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e04f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	4b2b      	ldr	r3, [pc, #172]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 020c 	and.w	r2, r3, #12
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1eb      	bne.n	8004f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d20c      	bcs.n	8004f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f46:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4e:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e032      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4916      	ldr	r1, [pc, #88]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f9e:	f000 f82d 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	490a      	ldr	r1, [pc, #40]	; (8004fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb0:	5ccb      	ldrb	r3, [r1, r3]
 8004fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb6:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fd fede 	bl	8002d80 <HAL_InitTick>

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023c00 	.word	0x40023c00
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	0800daf8 	.word	0x0800daf8
 8004fdc:	20000004 	.word	0x20000004
 8004fe0:	20000008 	.word	0x20000008

08004fe4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <HAL_RCC_EnableCSS+0x14>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	4247004c 	.word	0x4247004c

08004ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005000:	b094      	sub	sp, #80	; 0x50
 8005002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	647b      	str	r3, [r7, #68]	; 0x44
 8005008:	2300      	movs	r3, #0
 800500a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800500c:	2300      	movs	r3, #0
 800500e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005014:	4b79      	ldr	r3, [pc, #484]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 030c 	and.w	r3, r3, #12
 800501c:	2b08      	cmp	r3, #8
 800501e:	d00d      	beq.n	800503c <HAL_RCC_GetSysClockFreq+0x40>
 8005020:	2b08      	cmp	r3, #8
 8005022:	f200 80e1 	bhi.w	80051e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x34>
 800502a:	2b04      	cmp	r3, #4
 800502c:	d003      	beq.n	8005036 <HAL_RCC_GetSysClockFreq+0x3a>
 800502e:	e0db      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005030:	4b73      	ldr	r3, [pc, #460]	; (8005200 <HAL_RCC_GetSysClockFreq+0x204>)
 8005032:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005034:	e0db      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005036:	4b72      	ldr	r3, [pc, #456]	; (8005200 <HAL_RCC_GetSysClockFreq+0x204>)
 8005038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800503a:	e0d8      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800503c:	4b6f      	ldr	r3, [pc, #444]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005044:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005046:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d063      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005052:	4b6a      	ldr	r3, [pc, #424]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	2200      	movs	r2, #0
 800505a:	63bb      	str	r3, [r7, #56]	; 0x38
 800505c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005064:	633b      	str	r3, [r7, #48]	; 0x30
 8005066:	2300      	movs	r3, #0
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
 800506a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800506e:	4622      	mov	r2, r4
 8005070:	462b      	mov	r3, r5
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	0159      	lsls	r1, r3, #5
 800507c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005080:	0150      	lsls	r0, r2, #5
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4621      	mov	r1, r4
 8005088:	1a51      	subs	r1, r2, r1
 800508a:	6139      	str	r1, [r7, #16]
 800508c:	4629      	mov	r1, r5
 800508e:	eb63 0301 	sbc.w	r3, r3, r1
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050a0:	4659      	mov	r1, fp
 80050a2:	018b      	lsls	r3, r1, #6
 80050a4:	4651      	mov	r1, sl
 80050a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050aa:	4651      	mov	r1, sl
 80050ac:	018a      	lsls	r2, r1, #6
 80050ae:	4651      	mov	r1, sl
 80050b0:	ebb2 0801 	subs.w	r8, r2, r1
 80050b4:	4659      	mov	r1, fp
 80050b6:	eb63 0901 	sbc.w	r9, r3, r1
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ce:	4690      	mov	r8, r2
 80050d0:	4699      	mov	r9, r3
 80050d2:	4623      	mov	r3, r4
 80050d4:	eb18 0303 	adds.w	r3, r8, r3
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	462b      	mov	r3, r5
 80050dc:	eb49 0303 	adc.w	r3, r9, r3
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050ee:	4629      	mov	r1, r5
 80050f0:	028b      	lsls	r3, r1, #10
 80050f2:	4621      	mov	r1, r4
 80050f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050f8:	4621      	mov	r1, r4
 80050fa:	028a      	lsls	r2, r1, #10
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005102:	2200      	movs	r2, #0
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
 8005106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005108:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800510c:	f7fb fd64 	bl	8000bd8 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4613      	mov	r3, r2
 8005116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005118:	e058      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800511a:	4b38      	ldr	r3, [pc, #224]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	099b      	lsrs	r3, r3, #6
 8005120:	2200      	movs	r2, #0
 8005122:	4618      	mov	r0, r3
 8005124:	4611      	mov	r1, r2
 8005126:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800512a:	623b      	str	r3, [r7, #32]
 800512c:	2300      	movs	r3, #0
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
 8005130:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005134:	4642      	mov	r2, r8
 8005136:	464b      	mov	r3, r9
 8005138:	f04f 0000 	mov.w	r0, #0
 800513c:	f04f 0100 	mov.w	r1, #0
 8005140:	0159      	lsls	r1, r3, #5
 8005142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005146:	0150      	lsls	r0, r2, #5
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4641      	mov	r1, r8
 800514e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005152:	4649      	mov	r1, r9
 8005154:	eb63 0b01 	sbc.w	fp, r3, r1
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005164:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005168:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800516c:	ebb2 040a 	subs.w	r4, r2, sl
 8005170:	eb63 050b 	sbc.w	r5, r3, fp
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	00eb      	lsls	r3, r5, #3
 800517e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005182:	00e2      	lsls	r2, r4, #3
 8005184:	4614      	mov	r4, r2
 8005186:	461d      	mov	r5, r3
 8005188:	4643      	mov	r3, r8
 800518a:	18e3      	adds	r3, r4, r3
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	464b      	mov	r3, r9
 8005190:	eb45 0303 	adc.w	r3, r5, r3
 8005194:	607b      	str	r3, [r7, #4]
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051a2:	4629      	mov	r1, r5
 80051a4:	028b      	lsls	r3, r1, #10
 80051a6:	4621      	mov	r1, r4
 80051a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051ac:	4621      	mov	r1, r4
 80051ae:	028a      	lsls	r2, r1, #10
 80051b0:	4610      	mov	r0, r2
 80051b2:	4619      	mov	r1, r3
 80051b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b6:	2200      	movs	r2, #0
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	61fa      	str	r2, [r7, #28]
 80051bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051c0:	f7fb fd0a 	bl	8000bd8 <__aeabi_uldivmod>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4613      	mov	r3, r2
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_GetSysClockFreq+0x200>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	3301      	adds	r3, #1
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051e6:	e002      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3750      	adds	r7, #80	; 0x50
 80051f4:	46bd      	mov	sp, r7
 80051f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800
 8005200:	00f42400 	.word	0x00f42400

08005204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005208:	4b03      	ldr	r3, [pc, #12]	; (8005218 <HAL_RCC_GetHCLKFreq+0x14>)
 800520a:	681b      	ldr	r3, [r3, #0]
}
 800520c:	4618      	mov	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20000004 	.word	0x20000004

0800521c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <HAL_RCC_NMI_IRQHandler+0x20>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005228:	2b80      	cmp	r3, #128	; 0x80
 800522a:	d104      	bne.n	8005236 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800522c:	f000 f80a 	bl	8005244 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005230:	4b03      	ldr	r3, [pc, #12]	; (8005240 <HAL_RCC_NMI_IRQHandler+0x24>)
 8005232:	2280      	movs	r2, #128	; 0x80
 8005234:	701a      	strb	r2, [r3, #0]
  }
}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800
 8005240:	4002380e 	.word	0x4002380e

08005244 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005252:	b084      	sub	sp, #16
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	f107 001c 	add.w	r0, r7, #28
 8005260:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	2b01      	cmp	r3, #1
 8005268:	d122      	bne.n	80052b0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800527e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d105      	bne.n	80052a4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f001 fbed 	bl	8006a84 <USB_CoreReset>
 80052aa:	4603      	mov	r3, r0
 80052ac:	73fb      	strb	r3, [r7, #15]
 80052ae:	e01a      	b.n	80052e6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 fbe1 	bl	8006a84 <USB_CoreReset>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
 80052d8:	e005      	b.n	80052e6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d10b      	bne.n	8005304 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f043 0206 	orr.w	r2, r3, #6
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005310:	b004      	add	sp, #16
 8005312:	4770      	bx	lr

08005314 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d165      	bne.n	80053f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a41      	ldr	r2, [pc, #260]	; (8005430 <USB_SetTurnaroundTime+0x11c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d906      	bls.n	800533e <USB_SetTurnaroundTime+0x2a>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4a40      	ldr	r2, [pc, #256]	; (8005434 <USB_SetTurnaroundTime+0x120>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d202      	bcs.n	800533e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005338:	230f      	movs	r3, #15
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e062      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4a3c      	ldr	r2, [pc, #240]	; (8005434 <USB_SetTurnaroundTime+0x120>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d306      	bcc.n	8005354 <USB_SetTurnaroundTime+0x40>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a3b      	ldr	r2, [pc, #236]	; (8005438 <USB_SetTurnaroundTime+0x124>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d202      	bcs.n	8005354 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800534e:	230e      	movs	r3, #14
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	e057      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4a38      	ldr	r2, [pc, #224]	; (8005438 <USB_SetTurnaroundTime+0x124>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d306      	bcc.n	800536a <USB_SetTurnaroundTime+0x56>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a37      	ldr	r2, [pc, #220]	; (800543c <USB_SetTurnaroundTime+0x128>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d202      	bcs.n	800536a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005364:	230d      	movs	r3, #13
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	e04c      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4a33      	ldr	r2, [pc, #204]	; (800543c <USB_SetTurnaroundTime+0x128>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d306      	bcc.n	8005380 <USB_SetTurnaroundTime+0x6c>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4a32      	ldr	r2, [pc, #200]	; (8005440 <USB_SetTurnaroundTime+0x12c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d802      	bhi.n	8005380 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800537a:	230c      	movs	r3, #12
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e041      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4a2f      	ldr	r2, [pc, #188]	; (8005440 <USB_SetTurnaroundTime+0x12c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d906      	bls.n	8005396 <USB_SetTurnaroundTime+0x82>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4a2e      	ldr	r2, [pc, #184]	; (8005444 <USB_SetTurnaroundTime+0x130>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d802      	bhi.n	8005396 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005390:	230b      	movs	r3, #11
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	e036      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4a2a      	ldr	r2, [pc, #168]	; (8005444 <USB_SetTurnaroundTime+0x130>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d906      	bls.n	80053ac <USB_SetTurnaroundTime+0x98>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4a29      	ldr	r2, [pc, #164]	; (8005448 <USB_SetTurnaroundTime+0x134>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d802      	bhi.n	80053ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053a6:	230a      	movs	r3, #10
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	e02b      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4a26      	ldr	r2, [pc, #152]	; (8005448 <USB_SetTurnaroundTime+0x134>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d906      	bls.n	80053c2 <USB_SetTurnaroundTime+0xae>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a25      	ldr	r2, [pc, #148]	; (800544c <USB_SetTurnaroundTime+0x138>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d202      	bcs.n	80053c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053bc:	2309      	movs	r3, #9
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e020      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4a21      	ldr	r2, [pc, #132]	; (800544c <USB_SetTurnaroundTime+0x138>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d306      	bcc.n	80053d8 <USB_SetTurnaroundTime+0xc4>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4a20      	ldr	r2, [pc, #128]	; (8005450 <USB_SetTurnaroundTime+0x13c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d802      	bhi.n	80053d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053d2:	2308      	movs	r3, #8
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e015      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <USB_SetTurnaroundTime+0x13c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d906      	bls.n	80053ee <USB_SetTurnaroundTime+0xda>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4a1c      	ldr	r2, [pc, #112]	; (8005454 <USB_SetTurnaroundTime+0x140>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d202      	bcs.n	80053ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053e8:	2307      	movs	r3, #7
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e00a      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053ee:	2306      	movs	r3, #6
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e007      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053fa:	2309      	movs	r3, #9
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e001      	b.n	8005404 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005400:	2309      	movs	r3, #9
 8005402:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	00d8acbf 	.word	0x00d8acbf
 8005434:	00e4e1c0 	.word	0x00e4e1c0
 8005438:	00f42400 	.word	0x00f42400
 800543c:	01067380 	.word	0x01067380
 8005440:	011a499f 	.word	0x011a499f
 8005444:	01312cff 	.word	0x01312cff
 8005448:	014ca43f 	.word	0x014ca43f
 800544c:	016e3600 	.word	0x016e3600
 8005450:	01a6ab1f 	.word	0x01a6ab1f
 8005454:	01e84800 	.word	0x01e84800

08005458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f043 0201 	orr.w	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d115      	bne.n	80054ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054ca:	2001      	movs	r0, #1
 80054cc:	f7fd fca8 	bl	8002e20 <HAL_Delay>
      ms++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 fa45 	bl	8006966 <USB_GetMode>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d01e      	beq.n	8005520 <USB_SetCurrentMode+0x84>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b31      	cmp	r3, #49	; 0x31
 80054e6:	d9f0      	bls.n	80054ca <USB_SetCurrentMode+0x2e>
 80054e8:	e01a      	b.n	8005520 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d115      	bne.n	800551c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054fc:	2001      	movs	r0, #1
 80054fe:	f7fd fc8f 	bl	8002e20 <HAL_Delay>
      ms++;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3301      	adds	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 fa2c 	bl	8006966 <USB_GetMode>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <USB_SetCurrentMode+0x84>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b31      	cmp	r3, #49	; 0x31
 8005518:	d9f0      	bls.n	80054fc <USB_SetCurrentMode+0x60>
 800551a:	e001      	b.n	8005520 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e005      	b.n	800552c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b32      	cmp	r3, #50	; 0x32
 8005524:	d101      	bne.n	800552a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005534:	b084      	sub	sp, #16
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800554e:	2300      	movs	r3, #0
 8005550:	613b      	str	r3, [r7, #16]
 8005552:	e009      	b.n	8005568 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	3340      	adds	r3, #64	; 0x40
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	2200      	movs	r2, #0
 8005560:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	3301      	adds	r3, #1
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b0e      	cmp	r3, #14
 800556c:	d9f2      	bls.n	8005554 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800556e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d11c      	bne.n	80055ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005582:	f043 0302 	orr.w	r3, r3, #2
 8005586:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
 80055ac:	e00b      	b.n	80055c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055cc:	461a      	mov	r2, r3
 80055ce:	2300      	movs	r3, #0
 80055d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d8:	4619      	mov	r1, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e0:	461a      	mov	r2, r3
 80055e2:	680b      	ldr	r3, [r1, #0]
 80055e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d10c      	bne.n	8005606 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055f2:	2100      	movs	r1, #0
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f965 	bl	80058c4 <USB_SetDevSpeed>
 80055fa:	e008      	b.n	800560e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055fc:	2101      	movs	r1, #1
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f960 	bl	80058c4 <USB_SetDevSpeed>
 8005604:	e003      	b.n	800560e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005606:	2103      	movs	r1, #3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f95b 	bl	80058c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800560e:	2110      	movs	r1, #16
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f8f3 	bl	80057fc <USB_FlushTxFifo>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f91f 	bl	8005864 <USB_FlushRxFifo>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	461a      	mov	r2, r3
 8005644:	2300      	movs	r3, #0
 8005646:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	461a      	mov	r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	e043      	b.n	80056e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005670:	d118      	bne.n	80056a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	461a      	mov	r2, r3
 8005686:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	e013      	b.n	80056b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569a:	461a      	mov	r2, r3
 800569c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	e008      	b.n	80056b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	461a      	mov	r2, r3
 80056b2:	2300      	movs	r3, #0
 80056b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	461a      	mov	r2, r3
 80056c4:	2300      	movs	r3, #0
 80056c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d4:	461a      	mov	r2, r3
 80056d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	3301      	adds	r3, #1
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d3b7      	bcc.n	800565a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	e043      	b.n	8005778 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005706:	d118      	bne.n	800573a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	461a      	mov	r2, r3
 800571c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e013      	b.n	800574c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005730:	461a      	mov	r2, r3
 8005732:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	e008      	b.n	800574c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	461a      	mov	r2, r3
 8005748:	2300      	movs	r3, #0
 800574a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005758:	461a      	mov	r2, r3
 800575a:	2300      	movs	r3, #0
 800575c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576a:	461a      	mov	r2, r3
 800576c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005770:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3301      	adds	r3, #1
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	429a      	cmp	r2, r3
 800577e:	d3b7      	bcc.n	80056f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005792:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f043 0210 	orr.w	r2, r3, #16
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <USB_DevInit+0x2c4>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80057c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f043 0208 	orr.w	r2, r3, #8
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d107      	bne.n	80057e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057f4:	b004      	add	sp, #16
 80057f6:	4770      	bx	lr
 80057f8:	803c3800 	.word	0x803c3800

080057fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3301      	adds	r3, #1
 800580e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a13      	ldr	r2, [pc, #76]	; (8005860 <USB_FlushTxFifo+0x64>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e01b      	b.n	8005854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	daf2      	bge.n	800580a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	019b      	lsls	r3, r3, #6
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a08      	ldr	r2, [pc, #32]	; (8005860 <USB_FlushTxFifo+0x64>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e006      	b.n	8005854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b20      	cmp	r3, #32
 8005850:	d0f0      	beq.n	8005834 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	00030d40 	.word	0x00030d40

08005864 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a11      	ldr	r2, [pc, #68]	; (80058c0 <USB_FlushRxFifo+0x5c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d901      	bls.n	8005882 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e018      	b.n	80058b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	daf2      	bge.n	8005870 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2210      	movs	r2, #16
 8005892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <USB_FlushRxFifo+0x5c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e006      	b.n	80058b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d0f0      	beq.n	8005894 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	00030d40 	.word	0x00030d40

080058c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	68f9      	ldr	r1, [r7, #12]
 80058e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058e4:	4313      	orrs	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b087      	sub	sp, #28
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0306 	and.w	r3, r3, #6
 800590e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005916:	2300      	movs	r3, #0
 8005918:	75fb      	strb	r3, [r7, #23]
 800591a:	e00a      	b.n	8005932 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d002      	beq.n	8005928 <USB_GetDevSpeed+0x32>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b06      	cmp	r3, #6
 8005926:	d102      	bne.n	800592e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005928:	2302      	movs	r3, #2
 800592a:	75fb      	strb	r3, [r7, #23]
 800592c:	e001      	b.n	8005932 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800592e:	230f      	movs	r3, #15
 8005930:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005932:	7dfb      	ldrb	r3, [r7, #23]
}
 8005934:	4618      	mov	r0, r3
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d13a      	bne.n	80059d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	2101      	movs	r1, #1
 800596e:	fa01 f303 	lsl.w	r3, r1, r3
 8005972:	b29b      	uxth	r3, r3
 8005974:	68f9      	ldr	r1, [r7, #12]
 8005976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597a:	4313      	orrs	r3, r2
 800597c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d155      	bne.n	8005a40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	791b      	ldrb	r3, [r3, #4]
 80059ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	059b      	lsls	r3, r3, #22
 80059b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059b8:	4313      	orrs	r3, r2
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	e036      	b.n	8005a40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d8:	69da      	ldr	r2, [r3, #28]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	2101      	movs	r1, #1
 80059e4:	fa01 f303 	lsl.w	r3, r1, r3
 80059e8:	041b      	lsls	r3, r3, #16
 80059ea:	68f9      	ldr	r1, [r7, #12]
 80059ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d11a      	bne.n	8005a40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	791b      	ldrb	r3, [r3, #4]
 8005a24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a26:	430b      	orrs	r3, r1
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d161      	bne.n	8005b30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a82:	d11f      	bne.n	8005ac4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005aa2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005abe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	43db      	mvns	r3, r3
 8005ade:	68f9      	ldr	r1, [r7, #12]
 8005ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	2101      	movs	r1, #1
 8005afa:	fa01 f303 	lsl.w	r3, r1, r3
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	43db      	mvns	r3, r3
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	0159      	lsls	r1, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	440b      	add	r3, r1
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	4619      	mov	r1, r3
 8005b28:	4b35      	ldr	r3, [pc, #212]	; (8005c00 <USB_DeactivateEndpoint+0x1b0>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]
 8005b2e:	e060      	b.n	8005bf2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b46:	d11f      	bne.n	8005b88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba8:	4013      	ands	r3, r2
 8005baa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc2:	041b      	lsls	r3, r3, #16
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bcc:	4013      	ands	r3, r2
 8005bce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	0159      	lsls	r1, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	440b      	add	r3, r1
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	4619      	mov	r1, r3
 8005bec:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <USB_DeactivateEndpoint+0x1b4>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	ec337800 	.word	0xec337800
 8005c04:	eff37800 	.word	0xeff37800

08005c08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	; 0x28
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	f040 815c 	bne.w	8005ee2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d132      	bne.n	8005c98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c90:	0cdb      	lsrs	r3, r3, #19
 8005c92:	04db      	lsls	r3, r3, #19
 8005c94:	6113      	str	r3, [r2, #16]
 8005c96:	e074      	b.n	8005d82 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb2:	0cdb      	lsrs	r3, r3, #19
 8005cb4:	04db      	lsls	r3, r3, #19
 8005cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6999      	ldr	r1, [r3, #24]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	440b      	add	r3, r1
 8005cf4:	1e59      	subs	r1, r3, #1
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cfe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d00:	4b9d      	ldr	r3, [pc, #628]	; (8005f78 <USB_EPStartXfer+0x370>)
 8005d02:	400b      	ands	r3, r1
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	0148      	lsls	r0, r1, #5
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d10:	4313      	orrs	r3, r2
 8005d12:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d2a:	69b9      	ldr	r1, [r7, #24]
 8005d2c:	0148      	lsls	r0, r1, #5
 8005d2e:	69f9      	ldr	r1, [r7, #28]
 8005d30:	4401      	add	r1, r0
 8005d32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d36:	4313      	orrs	r3, r2
 8005d38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	791b      	ldrb	r3, [r3, #4]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d11f      	bne.n	8005d82 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d80:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d14b      	bne.n	8005e20 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	791b      	ldrb	r3, [r3, #4]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d128      	bne.n	8005dfe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d110      	bne.n	8005dde <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	0151      	lsls	r1, r2, #5
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	e00f      	b.n	8005dfe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	e133      	b.n	8006088 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	791b      	ldrb	r3, [r3, #4]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d015      	beq.n	8005e74 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 811b 	beq.w	8006088 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	2101      	movs	r1, #1
 8005e64:	fa01 f303 	lsl.w	r3, r1, r3
 8005e68:	69f9      	ldr	r1, [r7, #28]
 8005e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	634b      	str	r3, [r1, #52]	; 0x34
 8005e72:	e109      	b.n	8006088 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d110      	bne.n	8005ea6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	e00f      	b.n	8005ec6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6919      	ldr	r1, [r3, #16]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	781a      	ldrb	r2, [r3, #0]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	b298      	uxth	r0, r3
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	4603      	mov	r3, r0
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fade 	bl	800649c <USB_WritePacket>
 8005ee0:	e0d2      	b.n	8006088 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efc:	0cdb      	lsrs	r3, r3, #19
 8005efe:	04db      	lsls	r3, r3, #19
 8005f00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d126      	bne.n	8005f7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f44:	69b9      	ldr	r1, [r7, #24]
 8005f46:	0148      	lsls	r0, r1, #5
 8005f48:	69f9      	ldr	r1, [r7, #28]
 8005f4a:	4401      	add	r1, r0
 8005f4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f50:	4313      	orrs	r3, r2
 8005f52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f72:	6113      	str	r3, [r2, #16]
 8005f74:	e03a      	b.n	8005fec <USB_EPStartXfer+0x3e4>
 8005f76:	bf00      	nop
 8005f78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	699a      	ldr	r2, [r3, #24]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	1e5a      	subs	r2, r3, #1
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f90:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	8afa      	ldrh	r2, [r7, #22]
 8005f98:	fb03 f202 	mul.w	r2, r3, r2
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	8afb      	ldrh	r3, [r7, #22]
 8005fb0:	04d9      	lsls	r1, r3, #19
 8005fb2:	4b38      	ldr	r3, [pc, #224]	; (8006094 <USB_EPStartXfer+0x48c>)
 8005fb4:	400b      	ands	r3, r1
 8005fb6:	69b9      	ldr	r1, [r7, #24]
 8005fb8:	0148      	lsls	r0, r1, #5
 8005fba:	69f9      	ldr	r1, [r7, #28]
 8005fbc:	4401      	add	r1, r0
 8005fbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	0148      	lsls	r0, r1, #5
 8005fe0:	69f9      	ldr	r1, [r7, #28]
 8005fe2:	4401      	add	r1, r0
 8005fe4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d10d      	bne.n	800600e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6919      	ldr	r1, [r3, #16]
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	460a      	mov	r2, r1
 800600c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	791b      	ldrb	r3, [r3, #4]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d128      	bne.n	8006068 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d110      	bne.n	8006048 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	440a      	add	r2, r1
 800603c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006040:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e00f      	b.n	8006068 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006066:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006082:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006086:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	1ff80000 	.word	0x1ff80000

08006098 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	785b      	ldrb	r3, [r3, #1]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	f040 80ce 	bne.w	8006256 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d132      	bne.n	8006128 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	440a      	add	r2, r1
 800611c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006120:	0cdb      	lsrs	r3, r3, #19
 8006122:	04db      	lsls	r3, r3, #19
 8006124:	6113      	str	r3, [r2, #16]
 8006126:	e04e      	b.n	80061c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006142:	0cdb      	lsrs	r3, r3, #19
 8006144:	04db      	lsls	r3, r3, #19
 8006146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006162:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006166:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800616a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	429a      	cmp	r2, r3
 8006176:	d903      	bls.n	8006180 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800619a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800619e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b6:	6939      	ldr	r1, [r7, #16]
 80061b8:	0148      	lsls	r0, r1, #5
 80061ba:	6979      	ldr	r1, [r7, #20]
 80061bc:	4401      	add	r1, r0
 80061be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061c2:	4313      	orrs	r3, r2
 80061c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d11e      	bne.n	800620a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e0:	461a      	mov	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006202:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e097      	b.n	800633a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006228:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8083 	beq.w	800633a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	2101      	movs	r1, #1
 8006246:	fa01 f303 	lsl.w	r3, r1, r3
 800624a:	6979      	ldr	r1, [r7, #20]
 800624c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006250:	4313      	orrs	r3, r2
 8006252:	634b      	str	r3, [r1, #52]	; 0x34
 8006254:	e071      	b.n	800633a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006270:	0cdb      	lsrs	r3, r3, #19
 8006272:	04db      	lsls	r3, r3, #19
 8006274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006290:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006294:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006298:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e8:	6939      	ldr	r1, [r7, #16]
 80062ea:	0148      	lsls	r0, r1, #5
 80062ec:	6979      	ldr	r1, [r7, #20]
 80062ee:	4401      	add	r1, r0
 80062f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062f4:	4313      	orrs	r3, r2
 80062f6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d10d      	bne.n	800631a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6919      	ldr	r1, [r3, #16]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	460a      	mov	r2, r1
 8006318:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006338:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d14a      	bne.n	80063fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637e:	f040 8086 	bne.w	800648e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	7812      	ldrb	r2, [r2, #0]
 8006396:	0151      	lsls	r1, r2, #5
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	440a      	add	r2, r1
 800639c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	7812      	ldrb	r2, [r2, #0]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3301      	adds	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d902      	bls.n	80063e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	75fb      	strb	r3, [r7, #23]
          break;
 80063de:	e056      	b.n	800648e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063f8:	d0e7      	beq.n	80063ca <USB_EPStopXfer+0x82>
 80063fa:	e048      	b.n	800648e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006414:	d13b      	bne.n	800648e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	7812      	ldrb	r2, [r2, #0]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	440a      	add	r2, r1
 8006430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006434:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006438:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	7812      	ldrb	r2, [r2, #0]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800645c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3301      	adds	r3, #1
 8006462:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f242 7210 	movw	r2, #10000	; 0x2710
 800646a:	4293      	cmp	r3, r2
 800646c:	d902      	bls.n	8006474 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	75fb      	strb	r3, [r7, #23]
          break;
 8006472:	e00c      	b.n	800648e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800648c:	d0e7      	beq.n	800645e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006490:	4618      	mov	r0, r3
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800649c:	b480      	push	{r7}
 800649e:	b089      	sub	sp, #36	; 0x24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	4611      	mov	r1, r2
 80064a8:	461a      	mov	r2, r3
 80064aa:	460b      	mov	r3, r1
 80064ac:	71fb      	strb	r3, [r7, #7]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d123      	bne.n	800650a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064c2:	88bb      	ldrh	r3, [r7, #4]
 80064c4:	3303      	adds	r3, #3
 80064c6:	089b      	lsrs	r3, r3, #2
 80064c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064ca:	2300      	movs	r3, #0
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	e018      	b.n	8006502 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	031a      	lsls	r2, r3, #12
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064dc:	461a      	mov	r2, r3
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	3301      	adds	r3, #1
 80064e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	3301      	adds	r3, #1
 80064ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	3301      	adds	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	3301      	adds	r3, #1
 80064fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	3301      	adds	r3, #1
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	429a      	cmp	r2, r3
 8006508:	d3e2      	bcc.n	80064d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3724      	adds	r7, #36	; 0x24
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006518:	b480      	push	{r7}
 800651a:	b08b      	sub	sp, #44	; 0x2c
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	089b      	lsrs	r3, r3, #2
 8006532:	b29b      	uxth	r3, r3
 8006534:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800653e:	2300      	movs	r3, #0
 8006540:	623b      	str	r3, [r7, #32]
 8006542:	e014      	b.n	800656e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	3301      	adds	r3, #1
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	3301      	adds	r3, #1
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	3301      	adds	r3, #1
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	3301      	adds	r3, #1
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	3301      	adds	r3, #1
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	429a      	cmp	r2, r3
 8006574:	d3e6      	bcc.n	8006544 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006576:	8bfb      	ldrh	r3, [r7, #30]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01e      	beq.n	80065ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006586:	461a      	mov	r2, r3
 8006588:	f107 0310 	add.w	r3, r7, #16
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	fa22 f303 	lsr.w	r3, r2, r3
 800659c:	b2da      	uxtb	r2, r3
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	701a      	strb	r2, [r3, #0]
      i++;
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	3301      	adds	r3, #1
 80065a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	3301      	adds	r3, #1
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80065ae:	8bfb      	ldrh	r3, [r7, #30]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065b4:	8bfb      	ldrh	r3, [r7, #30]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1ea      	bne.n	8006590 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065bc:	4618      	mov	r0, r3
 80065be:	372c      	adds	r7, #44	; 0x2c
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d12c      	bne.n	800663e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	db12      	blt.n	800661c <USB_EPSetStall+0x54>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00f      	beq.n	800661c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006616:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800661a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	e02b      	b.n	8006696 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	db12      	blt.n	8006676 <USB_EPSetStall+0xae>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00f      	beq.n	8006676 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	440a      	add	r2, r1
 800666c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006670:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006674:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006694:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d128      	bne.n	8006712 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	791b      	ldrb	r3, [r3, #4]
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d003      	beq.n	80066f0 <USB_EPClearStall+0x4c>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	791b      	ldrb	r3, [r3, #4]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d138      	bne.n	8006762 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	e027      	b.n	8006762 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	0151      	lsls	r1, r2, #5
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	440a      	add	r2, r1
 8006728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800672c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006730:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	791b      	ldrb	r3, [r3, #4]
 8006736:	2b03      	cmp	r3, #3
 8006738:	d003      	beq.n	8006742 <USB_EPClearStall+0x9e>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	791b      	ldrb	r3, [r3, #4]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d10f      	bne.n	8006762 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	0151      	lsls	r1, r2, #5
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	440a      	add	r2, r1
 8006758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800675c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006760:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800678e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006792:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80067a4:	68f9      	ldr	r1, [r7, #12]
 80067a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067aa:	4313      	orrs	r3, r2
 80067ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ea:	f023 0302 	bic.w	r3, r3, #2
 80067ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006818:	f023 0303 	bic.w	r3, r3, #3
 800681c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800682c:	f043 0302 	orr.w	r3, r3, #2
 8006830:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4013      	ands	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006858:	68fb      	ldr	r3, [r7, #12]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	4013      	ands	r3, r2
 8006888:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	0c1b      	lsrs	r3, r3, #16
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800689a:	b480      	push	{r7}
 800689c:	b085      	sub	sp, #20
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	4013      	ands	r3, r2
 80068bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	b29b      	uxth	r3, r3
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068fc:	68bb      	ldr	r3, [r7, #8]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800690a:	b480      	push	{r7}
 800690c:	b087      	sub	sp, #28
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	fa22 f303 	lsr.w	r3, r2, r3
 800693a:	01db      	lsls	r3, r3, #7
 800693c:	b2db      	uxtb	r3, r3
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4013      	ands	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006958:	68bb      	ldr	r3, [r7, #8]
}
 800695a:	4618      	mov	r0, r3
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0301 	and.w	r3, r3, #1
}
 8006976:	4618      	mov	r0, r3
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069a0:	f023 0307 	bic.w	r3, r3, #7
 80069a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	460b      	mov	r3, r1
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	333c      	adds	r3, #60	; 0x3c
 80069de:	3304      	adds	r3, #4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	4a26      	ldr	r2, [pc, #152]	; (8006a80 <USB_EP0_OutStart+0xb8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d90a      	bls.n	8006a02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fc:	d101      	bne.n	8006a02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	e037      	b.n	8006a72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	461a      	mov	r2, r3
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a30:	f043 0318 	orr.w	r3, r3, #24
 8006a34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10f      	bne.n	8006a70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	4f54300a 	.word	0x4f54300a

08006a84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3301      	adds	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <USB_CoreReset+0x64>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d901      	bls.n	8006aa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e01b      	b.n	8006ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	daf2      	bge.n	8006a90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f043 0201 	orr.w	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a09      	ldr	r2, [pc, #36]	; (8006ae8 <USB_CoreReset+0x64>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d901      	bls.n	8006acc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e006      	b.n	8006ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d0f0      	beq.n	8006aba <USB_CoreReset+0x36>

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	00030d40 	.word	0x00030d40

08006aec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006af8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006afc:	f003 ff04 	bl	800a908 <USBD_static_malloc>
 8006b00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d109      	bne.n	8006b1c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	32b0      	adds	r2, #176	; 0xb0
 8006b12:	2100      	movs	r1, #0
 8006b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e0d4      	b.n	8006cc6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006b20:	2100      	movs	r1, #0
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f004 feb8 	bl	800b898 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	32b0      	adds	r2, #176	; 0xb0
 8006b32:	68f9      	ldr	r1, [r7, #12]
 8006b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	32b0      	adds	r2, #176	; 0xb0
 8006b42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	7c1b      	ldrb	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d138      	bne.n	8006bc6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b54:	4b5e      	ldr	r3, [pc, #376]	; (8006cd0 <USBD_CDC_Init+0x1e4>)
 8006b56:	7819      	ldrb	r1, [r3, #0]
 8006b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f003 fdaf 	bl	800a6c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b64:	4b5a      	ldr	r3, [pc, #360]	; (8006cd0 <USBD_CDC_Init+0x1e4>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 020f 	and.w	r2, r3, #15
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	440b      	add	r3, r1
 8006b78:	3324      	adds	r3, #36	; 0x24
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b7e:	4b55      	ldr	r3, [pc, #340]	; (8006cd4 <USBD_CDC_Init+0x1e8>)
 8006b80:	7819      	ldrb	r1, [r3, #0]
 8006b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b86:	2202      	movs	r2, #2
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f003 fd9a 	bl	800a6c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b8e:	4b51      	ldr	r3, [pc, #324]	; (8006cd4 <USBD_CDC_Init+0x1e8>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	f003 020f 	and.w	r2, r3, #15
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006baa:	4b4b      	ldr	r3, [pc, #300]	; (8006cd8 <USBD_CDC_Init+0x1ec>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	f003 020f 	and.w	r2, r3, #15
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	440b      	add	r3, r1
 8006bbe:	3326      	adds	r3, #38	; 0x26
 8006bc0:	2210      	movs	r2, #16
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	e035      	b.n	8006c32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bc6:	4b42      	ldr	r3, [pc, #264]	; (8006cd0 <USBD_CDC_Init+0x1e4>)
 8006bc8:	7819      	ldrb	r1, [r3, #0]
 8006bca:	2340      	movs	r3, #64	; 0x40
 8006bcc:	2202      	movs	r2, #2
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f003 fd77 	bl	800a6c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006bd4:	4b3e      	ldr	r3, [pc, #248]	; (8006cd0 <USBD_CDC_Init+0x1e4>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	f003 020f 	and.w	r2, r3, #15
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	440b      	add	r3, r1
 8006be8:	3324      	adds	r3, #36	; 0x24
 8006bea:	2201      	movs	r2, #1
 8006bec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bee:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <USBD_CDC_Init+0x1e8>)
 8006bf0:	7819      	ldrb	r1, [r3, #0]
 8006bf2:	2340      	movs	r3, #64	; 0x40
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f003 fd63 	bl	800a6c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bfc:	4b35      	ldr	r3, [pc, #212]	; (8006cd4 <USBD_CDC_Init+0x1e8>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	f003 020f 	and.w	r2, r3, #15
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c14:	2201      	movs	r2, #1
 8006c16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c18:	4b2f      	ldr	r3, [pc, #188]	; (8006cd8 <USBD_CDC_Init+0x1ec>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	f003 020f 	and.w	r2, r3, #15
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	3326      	adds	r3, #38	; 0x26
 8006c2e:	2210      	movs	r2, #16
 8006c30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c32:	4b29      	ldr	r3, [pc, #164]	; (8006cd8 <USBD_CDC_Init+0x1ec>)
 8006c34:	7819      	ldrb	r1, [r3, #0]
 8006c36:	2308      	movs	r3, #8
 8006c38:	2203      	movs	r2, #3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f003 fd41 	bl	800a6c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c40:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <USBD_CDC_Init+0x1ec>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f003 020f 	and.w	r2, r3, #15
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	3324      	adds	r3, #36	; 0x24
 8006c56:	2201      	movs	r2, #1
 8006c58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	33b0      	adds	r3, #176	; 0xb0
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c90:	2302      	movs	r3, #2
 8006c92:	e018      	b.n	8006cc6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	7c1b      	ldrb	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c9c:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <USBD_CDC_Init+0x1e8>)
 8006c9e:	7819      	ldrb	r1, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f003 fdf8 	bl	800a8a0 <USBD_LL_PrepareReceive>
 8006cb0:	e008      	b.n	8006cc4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cb2:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <USBD_CDC_Init+0x1e8>)
 8006cb4:	7819      	ldrb	r1, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cbc:	2340      	movs	r3, #64	; 0x40
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f003 fdee 	bl	800a8a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000097 	.word	0x20000097
 8006cd4:	20000098 	.word	0x20000098
 8006cd8:	20000099 	.word	0x20000099

08006cdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ce8:	4b3a      	ldr	r3, [pc, #232]	; (8006dd4 <USBD_CDC_DeInit+0xf8>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f003 fd0d 	bl	800a70e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006cf4:	4b37      	ldr	r3, [pc, #220]	; (8006dd4 <USBD_CDC_DeInit+0xf8>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f003 020f 	and.w	r2, r3, #15
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	3324      	adds	r3, #36	; 0x24
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d0e:	4b32      	ldr	r3, [pc, #200]	; (8006dd8 <USBD_CDC_DeInit+0xfc>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f003 fcfa 	bl	800a70e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d1a:	4b2f      	ldr	r3, [pc, #188]	; (8006dd8 <USBD_CDC_DeInit+0xfc>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	f003 020f 	and.w	r2, r3, #15
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	440b      	add	r3, r1
 8006d2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d32:	2200      	movs	r2, #0
 8006d34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d36:	4b29      	ldr	r3, [pc, #164]	; (8006ddc <USBD_CDC_DeInit+0x100>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f003 fce6 	bl	800a70e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d42:	4b26      	ldr	r3, [pc, #152]	; (8006ddc <USBD_CDC_DeInit+0x100>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	f003 020f 	and.w	r2, r3, #15
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	3324      	adds	r3, #36	; 0x24
 8006d58:	2200      	movs	r2, #0
 8006d5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d5c:	4b1f      	ldr	r3, [pc, #124]	; (8006ddc <USBD_CDC_DeInit+0x100>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f003 020f 	and.w	r2, r3, #15
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	3326      	adds	r3, #38	; 0x26
 8006d72:	2200      	movs	r2, #0
 8006d74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	32b0      	adds	r2, #176	; 0xb0
 8006d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01f      	beq.n	8006dc8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	33b0      	adds	r3, #176	; 0xb0
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	32b0      	adds	r2, #176	; 0xb0
 8006da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f003 fdba 	bl	800a924 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	32b0      	adds	r2, #176	; 0xb0
 8006dba:	2100      	movs	r1, #0
 8006dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000097 	.word	0x20000097
 8006dd8:	20000098 	.word	0x20000098
 8006ddc:	20000099 	.word	0x20000099

08006de0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	32b0      	adds	r2, #176	; 0xb0
 8006df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e0bf      	b.n	8006f90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d050      	beq.n	8006ebe <USBD_CDC_Setup+0xde>
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	f040 80af 	bne.w	8006f80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	88db      	ldrh	r3, [r3, #6]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d03a      	beq.n	8006ea0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	b25b      	sxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	da1b      	bge.n	8006e6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	33b0      	adds	r3, #176	; 0xb0
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	88d2      	ldrh	r2, [r2, #6]
 8006e50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	88db      	ldrh	r3, [r3, #6]
 8006e56:	2b07      	cmp	r3, #7
 8006e58:	bf28      	it	cs
 8006e5a:	2307      	movcs	r3, #7
 8006e5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	89fa      	ldrh	r2, [r7, #14]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fd89 	bl	800897c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e6a:	e090      	b.n	8006f8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	785a      	ldrb	r2, [r3, #1]
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	88db      	ldrh	r3, [r3, #6]
 8006e7a:	2b3f      	cmp	r3, #63	; 0x3f
 8006e7c:	d803      	bhi.n	8006e86 <USBD_CDC_Setup+0xa6>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	88db      	ldrh	r3, [r3, #6]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	e000      	b.n	8006e88 <USBD_CDC_Setup+0xa8>
 8006e86:	2240      	movs	r2, #64	; 0x40
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e8e:	6939      	ldr	r1, [r7, #16]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006e96:	461a      	mov	r2, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fd9b 	bl	80089d4 <USBD_CtlPrepareRx>
      break;
 8006e9e:	e076      	b.n	8006f8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	33b0      	adds	r3, #176	; 0xb0
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	7850      	ldrb	r0, [r2, #1]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	4798      	blx	r3
      break;
 8006ebc:	e067      	b.n	8006f8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	785b      	ldrb	r3, [r3, #1]
 8006ec2:	2b0b      	cmp	r3, #11
 8006ec4:	d851      	bhi.n	8006f6a <USBD_CDC_Setup+0x18a>
 8006ec6:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <USBD_CDC_Setup+0xec>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006efd 	.word	0x08006efd
 8006ed0:	08006f79 	.word	0x08006f79
 8006ed4:	08006f6b 	.word	0x08006f6b
 8006ed8:	08006f6b 	.word	0x08006f6b
 8006edc:	08006f6b 	.word	0x08006f6b
 8006ee0:	08006f6b 	.word	0x08006f6b
 8006ee4:	08006f6b 	.word	0x08006f6b
 8006ee8:	08006f6b 	.word	0x08006f6b
 8006eec:	08006f6b 	.word	0x08006f6b
 8006ef0:	08006f6b 	.word	0x08006f6b
 8006ef4:	08006f27 	.word	0x08006f27
 8006ef8:	08006f51 	.word	0x08006f51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d107      	bne.n	8006f18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f08:	f107 030a 	add.w	r3, r7, #10
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 fd33 	bl	800897c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f16:	e032      	b.n	8006f7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fcbd 	bl	800889a <USBD_CtlError>
            ret = USBD_FAIL;
 8006f20:	2303      	movs	r3, #3
 8006f22:	75fb      	strb	r3, [r7, #23]
          break;
 8006f24:	e02b      	b.n	8006f7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d107      	bne.n	8006f42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f32:	f107 030d 	add.w	r3, r7, #13
 8006f36:	2201      	movs	r2, #1
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 fd1e 	bl	800897c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f40:	e01d      	b.n	8006f7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 fca8 	bl	800889a <USBD_CtlError>
            ret = USBD_FAIL;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f4e:	e016      	b.n	8006f7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d00f      	beq.n	8006f7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fc9b 	bl	800889a <USBD_CtlError>
            ret = USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f68:	e008      	b.n	8006f7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 fc94 	bl	800889a <USBD_CtlError>
          ret = USBD_FAIL;
 8006f72:	2303      	movs	r3, #3
 8006f74:	75fb      	strb	r3, [r7, #23]
          break;
 8006f76:	e002      	b.n	8006f7e <USBD_CDC_Setup+0x19e>
          break;
 8006f78:	bf00      	nop
 8006f7a:	e008      	b.n	8006f8e <USBD_CDC_Setup+0x1ae>
          break;
 8006f7c:	bf00      	nop
      }
      break;
 8006f7e:	e006      	b.n	8006f8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 fc89 	bl	800889a <USBD_CtlError>
      ret = USBD_FAIL;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006faa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	32b0      	adds	r2, #176	; 0xb0
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e065      	b.n	800708e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	32b0      	adds	r2, #176	; 0xb0
 8006fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	f003 020f 	and.w	r2, r3, #15
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d02f      	beq.n	800704c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	f003 020f 	and.w	r2, r3, #15
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	3318      	adds	r3, #24
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	f003 010f 	and.w	r1, r3, #15
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	460b      	mov	r3, r1
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	440b      	add	r3, r1
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4403      	add	r3, r0
 8007014:	3348      	adds	r3, #72	; 0x48
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	fbb2 f1f3 	udiv	r1, r2, r3
 800701c:	fb01 f303 	mul.w	r3, r1, r3
 8007020:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007022:	2b00      	cmp	r3, #0
 8007024:	d112      	bne.n	800704c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007026:	78fb      	ldrb	r3, [r7, #3]
 8007028:	f003 020f 	and.w	r2, r3, #15
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3318      	adds	r3, #24
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800703e:	78f9      	ldrb	r1, [r7, #3]
 8007040:	2300      	movs	r3, #0
 8007042:	2200      	movs	r2, #0
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f003 fc0a 	bl	800a85e <USBD_LL_Transmit>
 800704a:	e01f      	b.n	800708c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2200      	movs	r2, #0
 8007050:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	33b0      	adds	r3, #176	; 0xb0
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d010      	beq.n	800708c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	33b0      	adds	r3, #176	; 0xb0
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007088:	78fa      	ldrb	r2, [r7, #3]
 800708a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	32b0      	adds	r2, #176	; 0xb0
 80070ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	32b0      	adds	r2, #176	; 0xb0
 80070bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e01a      	b.n	80070fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f003 fc08 	bl	800a8e2 <USBD_LL_GetRxDataSize>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	33b0      	adds	r3, #176	; 0xb0
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070f8:	4611      	mov	r1, r2
 80070fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	32b0      	adds	r2, #176	; 0xb0
 8007118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007124:	2303      	movs	r3, #3
 8007126:	e025      	b.n	8007174 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	33b0      	adds	r3, #176	; 0xb0
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01a      	beq.n	8007172 <USBD_CDC_EP0_RxReady+0x6c>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007142:	2bff      	cmp	r3, #255	; 0xff
 8007144:	d015      	beq.n	8007172 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	33b0      	adds	r3, #176	; 0xb0
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800715e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007166:	b292      	uxth	r2, r2
 8007168:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	22ff      	movs	r2, #255	; 0xff
 800716e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007184:	2182      	movs	r1, #130	; 0x82
 8007186:	4818      	ldr	r0, [pc, #96]	; (80071e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007188:	f000 fd4f 	bl	8007c2a <USBD_GetEpDesc>
 800718c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800718e:	2101      	movs	r1, #1
 8007190:	4815      	ldr	r0, [pc, #84]	; (80071e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007192:	f000 fd4a 	bl	8007c2a <USBD_GetEpDesc>
 8007196:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007198:	2181      	movs	r1, #129	; 0x81
 800719a:	4813      	ldr	r0, [pc, #76]	; (80071e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800719c:	f000 fd45 	bl	8007c2a <USBD_GetEpDesc>
 80071a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2210      	movs	r2, #16
 80071ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071bc:	711a      	strb	r2, [r3, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d0:	711a      	strb	r2, [r3, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2243      	movs	r2, #67	; 0x43
 80071da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071dc:	4b02      	ldr	r3, [pc, #8]	; (80071e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20000054 	.word	0x20000054

080071ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071f4:	2182      	movs	r1, #130	; 0x82
 80071f6:	4818      	ldr	r0, [pc, #96]	; (8007258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071f8:	f000 fd17 	bl	8007c2a <USBD_GetEpDesc>
 80071fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071fe:	2101      	movs	r1, #1
 8007200:	4815      	ldr	r0, [pc, #84]	; (8007258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007202:	f000 fd12 	bl	8007c2a <USBD_GetEpDesc>
 8007206:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007208:	2181      	movs	r1, #129	; 0x81
 800720a:	4813      	ldr	r0, [pc, #76]	; (8007258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800720c:	f000 fd0d 	bl	8007c2a <USBD_GetEpDesc>
 8007210:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2210      	movs	r2, #16
 800721c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d006      	beq.n	8007232 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	2200      	movs	r2, #0
 8007228:	711a      	strb	r2, [r3, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f042 0202 	orr.w	r2, r2, #2
 8007230:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d006      	beq.n	8007246 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	711a      	strb	r2, [r3, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f042 0202 	orr.w	r2, r2, #2
 8007244:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2243      	movs	r2, #67	; 0x43
 800724a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800724c:	4b02      	ldr	r3, [pc, #8]	; (8007258 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000054 	.word	0x20000054

0800725c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007264:	2182      	movs	r1, #130	; 0x82
 8007266:	4818      	ldr	r0, [pc, #96]	; (80072c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007268:	f000 fcdf 	bl	8007c2a <USBD_GetEpDesc>
 800726c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800726e:	2101      	movs	r1, #1
 8007270:	4815      	ldr	r0, [pc, #84]	; (80072c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007272:	f000 fcda 	bl	8007c2a <USBD_GetEpDesc>
 8007276:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007278:	2181      	movs	r1, #129	; 0x81
 800727a:	4813      	ldr	r0, [pc, #76]	; (80072c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800727c:	f000 fcd5 	bl	8007c2a <USBD_GetEpDesc>
 8007280:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2210      	movs	r2, #16
 800728c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d006      	beq.n	80072a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2200      	movs	r2, #0
 8007298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800729c:	711a      	strb	r2, [r3, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d006      	beq.n	80072b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072b0:	711a      	strb	r2, [r3, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2243      	movs	r2, #67	; 0x43
 80072ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072bc:	4b02      	ldr	r3, [pc, #8]	; (80072c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000054 	.word	0x20000054

080072cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	220a      	movs	r2, #10
 80072d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80072da:	4b03      	ldr	r3, [pc, #12]	; (80072e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	20000010 	.word	0x20000010

080072ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e009      	b.n	8007314 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	33b0      	adds	r3, #176	; 0xb0
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	32b0      	adds	r2, #176	; 0xb0
 8007336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007342:	2303      	movs	r3, #3
 8007344:	e008      	b.n	8007358 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	32b0      	adds	r2, #176	; 0xb0
 8007378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	e004      	b.n	8007392 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
	...

080073a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	32b0      	adds	r2, #176	; 0xb0
 80073b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80073b8:	2301      	movs	r3, #1
 80073ba:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	32b0      	adds	r2, #176	; 0xb0
 80073c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e025      	b.n	800741e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11f      	bne.n	800741c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2201      	movs	r2, #1
 80073e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80073e4:	4b10      	ldr	r3, [pc, #64]	; (8007428 <USBD_CDC_TransmitPacket+0x88>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f003 020f 	and.w	r2, r3, #15
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4403      	add	r3, r0
 80073fe:	3318      	adds	r3, #24
 8007400:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <USBD_CDC_TransmitPacket+0x88>)
 8007404:	7819      	ldrb	r1, [r3, #0]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f003 fa23 	bl	800a85e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000097 	.word	0x20000097

0800742c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	32b0      	adds	r2, #176	; 0xb0
 800743e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007442:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	32b0      	adds	r2, #176	; 0xb0
 800744e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007456:	2303      	movs	r3, #3
 8007458:	e018      	b.n	800748c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	7c1b      	ldrb	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007462:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <USBD_CDC_ReceivePacket+0x68>)
 8007464:	7819      	ldrb	r1, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800746c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f003 fa15 	bl	800a8a0 <USBD_LL_PrepareReceive>
 8007476:	e008      	b.n	800748a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007478:	4b06      	ldr	r3, [pc, #24]	; (8007494 <USBD_CDC_ReceivePacket+0x68>)
 800747a:	7819      	ldrb	r1, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007482:	2340      	movs	r3, #64	; 0x40
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f003 fa0b 	bl	800a8a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000098 	.word	0x20000098

08007498 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e01f      	b.n	80074f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	79fa      	ldrb	r2, [r7, #7]
 80074e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f003 f885 	bl	800a5f4 <USBD_LL_Init>
 80074ea:	4603      	mov	r3, r0
 80074ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800750c:	2303      	movs	r3, #3
 800750e:	e025      	b.n	800755c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	32ae      	adds	r2, #174	; 0xae
 8007522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00f      	beq.n	800754c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	32ae      	adds	r2, #174	; 0xae
 8007536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	f107 020e 	add.w	r2, r7, #14
 8007540:	4610      	mov	r0, r2
 8007542:	4798      	blx	r3
 8007544:	4602      	mov	r2, r0
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f003 f88d 	bl	800a68c <USBD_LL_Start>
 8007572:	4603      	mov	r3, r0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007584:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d009      	beq.n	80075c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	4611      	mov	r1, r2
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	4611      	mov	r1, r2
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075f0:	2303      	movs	r3, #3
 80075f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f001 f908 	bl	8008826 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007624:	461a      	mov	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	2b02      	cmp	r3, #2
 8007638:	d01a      	beq.n	8007670 <USBD_LL_SetupStage+0x72>
 800763a:	2b02      	cmp	r3, #2
 800763c:	d822      	bhi.n	8007684 <USBD_LL_SetupStage+0x86>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <USBD_LL_SetupStage+0x4a>
 8007642:	2b01      	cmp	r3, #1
 8007644:	d00a      	beq.n	800765c <USBD_LL_SetupStage+0x5e>
 8007646:	e01d      	b.n	8007684 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fb5f 	bl	8007d14 <USBD_StdDevReq>
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]
      break;
 800765a:	e020      	b.n	800769e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fbc7 	bl	8007df8 <USBD_StdItfReq>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]
      break;
 800766e:	e016      	b.n	800769e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fc29 	bl	8007ed0 <USBD_StdEPReq>
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]
      break;
 8007682:	e00c      	b.n	800769e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800768a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800768e:	b2db      	uxtb	r3, r3
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f003 f85a 	bl	800a74c <USBD_LL_StallEP>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
      break;
 800769c:	bf00      	nop
  }

  return ret;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	460b      	mov	r3, r1
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d16e      	bne.n	800779e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80076c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	f040 8098 	bne.w	8007804 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d913      	bls.n	8007708 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	1ad2      	subs	r2, r2, r3
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	4293      	cmp	r3, r2
 80076f8:	bf28      	it	cs
 80076fa:	4613      	movcs	r3, r2
 80076fc:	461a      	mov	r2, r3
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f001 f984 	bl	8008a0e <USBD_CtlContinueRx>
 8007706:	e07d      	b.n	8007804 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800770e:	f003 031f 	and.w	r3, r3, #31
 8007712:	2b02      	cmp	r3, #2
 8007714:	d014      	beq.n	8007740 <USBD_LL_DataOutStage+0x98>
 8007716:	2b02      	cmp	r3, #2
 8007718:	d81d      	bhi.n	8007756 <USBD_LL_DataOutStage+0xae>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <USBD_LL_DataOutStage+0x7c>
 800771e:	2b01      	cmp	r3, #1
 8007720:	d003      	beq.n	800772a <USBD_LL_DataOutStage+0x82>
 8007722:	e018      	b.n	8007756 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	75bb      	strb	r3, [r7, #22]
            break;
 8007728:	e018      	b.n	800775c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007730:	b2db      	uxtb	r3, r3
 8007732:	4619      	mov	r1, r3
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fa5e 	bl	8007bf6 <USBD_CoreFindIF>
 800773a:	4603      	mov	r3, r0
 800773c:	75bb      	strb	r3, [r7, #22]
            break;
 800773e:	e00d      	b.n	800775c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007746:	b2db      	uxtb	r3, r3
 8007748:	4619      	mov	r1, r3
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fa60 	bl	8007c10 <USBD_CoreFindEP>
 8007750:	4603      	mov	r3, r0
 8007752:	75bb      	strb	r3, [r7, #22]
            break;
 8007754:	e002      	b.n	800775c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	75bb      	strb	r3, [r7, #22]
            break;
 800775a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800775c:	7dbb      	ldrb	r3, [r7, #22]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d119      	bne.n	8007796 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b03      	cmp	r3, #3
 800776c:	d113      	bne.n	8007796 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800776e:	7dba      	ldrb	r2, [r7, #22]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	32ae      	adds	r2, #174	; 0xae
 8007774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00b      	beq.n	8007796 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800777e:	7dba      	ldrb	r2, [r7, #22]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007786:	7dba      	ldrb	r2, [r7, #22]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	32ae      	adds	r2, #174	; 0xae
 800778c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f001 f94a 	bl	8008a30 <USBD_CtlSendStatus>
 800779c:	e032      	b.n	8007804 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800779e:	7afb      	ldrb	r3, [r7, #11]
 80077a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	4619      	mov	r1, r3
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fa31 	bl	8007c10 <USBD_CoreFindEP>
 80077ae:	4603      	mov	r3, r0
 80077b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077b2:	7dbb      	ldrb	r3, [r7, #22]
 80077b4:	2bff      	cmp	r3, #255	; 0xff
 80077b6:	d025      	beq.n	8007804 <USBD_LL_DataOutStage+0x15c>
 80077b8:	7dbb      	ldrb	r3, [r7, #22]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d122      	bne.n	8007804 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d117      	bne.n	80077fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80077ca:	7dba      	ldrb	r2, [r7, #22]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	32ae      	adds	r2, #174	; 0xae
 80077d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00f      	beq.n	80077fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077da:	7dba      	ldrb	r2, [r7, #22]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077e2:	7dba      	ldrb	r2, [r7, #22]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	32ae      	adds	r2, #174	; 0xae
 80077e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	7afa      	ldrb	r2, [r7, #11]
 80077f0:	4611      	mov	r1, r2
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	4798      	blx	r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	e000      	b.n	8007806 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b086      	sub	sp, #24
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	460b      	mov	r3, r1
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800781c:	7afb      	ldrb	r3, [r7, #11]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d16f      	bne.n	8007902 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3314      	adds	r3, #20
 8007826:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800782e:	2b02      	cmp	r3, #2
 8007830:	d15a      	bne.n	80078e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	429a      	cmp	r2, r3
 800783c:	d914      	bls.n	8007868 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	1ad2      	subs	r2, r2, r3
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	461a      	mov	r2, r3
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f001 f8ac 	bl	80089b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800785a:	2300      	movs	r3, #0
 800785c:	2200      	movs	r2, #0
 800785e:	2100      	movs	r1, #0
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f003 f81d 	bl	800a8a0 <USBD_LL_PrepareReceive>
 8007866:	e03f      	b.n	80078e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	429a      	cmp	r2, r3
 8007872:	d11c      	bne.n	80078ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800787c:	429a      	cmp	r2, r3
 800787e:	d316      	bcc.n	80078ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800788a:	429a      	cmp	r2, r3
 800788c:	d20f      	bcs.n	80078ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800788e:	2200      	movs	r2, #0
 8007890:	2100      	movs	r1, #0
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f001 f88d 	bl	80089b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a0:	2300      	movs	r3, #0
 80078a2:	2200      	movs	r2, #0
 80078a4:	2100      	movs	r1, #0
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f002 fffa 	bl	800a8a0 <USBD_LL_PrepareReceive>
 80078ac:	e01c      	b.n	80078e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d10f      	bne.n	80078da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078da:	2180      	movs	r1, #128	; 0x80
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f002 ff35 	bl	800a74c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f001 f8b7 	bl	8008a56 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d03a      	beq.n	8007968 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f7ff fe42 	bl	800757c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007900:	e032      	b.n	8007968 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007902:	7afb      	ldrb	r3, [r7, #11]
 8007904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007908:	b2db      	uxtb	r3, r3
 800790a:	4619      	mov	r1, r3
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f97f 	bl	8007c10 <USBD_CoreFindEP>
 8007912:	4603      	mov	r3, r0
 8007914:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007916:	7dfb      	ldrb	r3, [r7, #23]
 8007918:	2bff      	cmp	r3, #255	; 0xff
 800791a:	d025      	beq.n	8007968 <USBD_LL_DataInStage+0x15a>
 800791c:	7dfb      	ldrb	r3, [r7, #23]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d122      	bne.n	8007968 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b03      	cmp	r3, #3
 800792c:	d11c      	bne.n	8007968 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800792e:	7dfa      	ldrb	r2, [r7, #23]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	32ae      	adds	r2, #174	; 0xae
 8007934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d014      	beq.n	8007968 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800793e:	7dfa      	ldrb	r2, [r7, #23]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007946:	7dfa      	ldrb	r2, [r7, #23]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	32ae      	adds	r2, #174	; 0xae
 800794c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	7afa      	ldrb	r2, [r7, #11]
 8007954:	4611      	mov	r1, r2
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	4798      	blx	r3
 800795a:	4603      	mov	r3, r0
 800795c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800795e:	7dbb      	ldrb	r3, [r7, #22]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007964:	7dbb      	ldrb	r3, [r7, #22]
 8007966:	e000      	b.n	800796a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d014      	beq.n	80079d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00e      	beq.n	80079d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6852      	ldr	r2, [r2, #4]
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	4611      	mov	r1, r2
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079d8:	2340      	movs	r3, #64	; 0x40
 80079da:	2200      	movs	r2, #0
 80079dc:	2100      	movs	r1, #0
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f002 fe6f 	bl	800a6c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2240      	movs	r2, #64	; 0x40
 80079f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079f4:	2340      	movs	r3, #64	; 0x40
 80079f6:	2200      	movs	r2, #0
 80079f8:	2180      	movs	r1, #128	; 0x80
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f002 fe61 	bl	800a6c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2240      	movs	r2, #64	; 0x40
 8007a0a:	621a      	str	r2, [r3, #32]

  return ret;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2204      	movs	r2, #4
 8007a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d106      	bne.n	8007a84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d110      	bne.n	8007ac8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	460b      	mov	r3, r1
 8007adc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	32ae      	adds	r2, #174	; 0xae
 8007ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e01c      	b.n	8007b2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d115      	bne.n	8007b2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	32ae      	adds	r2, #174	; 0xae
 8007b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00b      	beq.n	8007b2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	32ae      	adds	r2, #174	; 0xae
 8007b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	78fa      	ldrb	r2, [r7, #3]
 8007b26:	4611      	mov	r1, r2
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	32ae      	adds	r2, #174	; 0xae
 8007b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e01c      	b.n	8007b92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d115      	bne.n	8007b90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	32ae      	adds	r2, #174	; 0xae
 8007b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	32ae      	adds	r2, #174	; 0xae
 8007b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	78fa      	ldrb	r2, [r7, #3]
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00e      	beq.n	8007bec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6852      	ldr	r2, [r2, #4]
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	4611      	mov	r1, r2
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	4798      	blx	r3
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007be8:	2303      	movs	r3, #3
 8007bea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	885b      	ldrh	r3, [r3, #2]
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d920      	bls.n	8007c94 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c5a:	e013      	b.n	8007c84 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c5c:	f107 030a 	add.w	r3, r7, #10
 8007c60:	4619      	mov	r1, r3
 8007c62:	6978      	ldr	r0, [r7, #20]
 8007c64:	f000 f81b 	bl	8007c9e <USBD_GetNextDesc>
 8007c68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	d108      	bne.n	8007c84 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	789b      	ldrb	r3, [r3, #2]
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d008      	beq.n	8007c92 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	885b      	ldrh	r3, [r3, #2]
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	897b      	ldrh	r3, [r7, #10]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d8e5      	bhi.n	8007c5c <USBD_GetEpDesc+0x32>
 8007c90:	e000      	b.n	8007c94 <USBD_GetEpDesc+0x6a>
          break;
 8007c92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c94:	693b      	ldr	r3, [r7, #16]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	881a      	ldrh	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4413      	add	r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cca:	68fb      	ldr	r3, [r7, #12]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	3301      	adds	r3, #1
 8007cee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cf6:	8a3b      	ldrh	r3, [r7, #16]
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	b21a      	sxth	r2, r3
 8007cfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	b21b      	sxth	r3, r3
 8007d04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d06:	89fb      	ldrh	r3, [r7, #14]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d2a:	2b40      	cmp	r3, #64	; 0x40
 8007d2c:	d005      	beq.n	8007d3a <USBD_StdDevReq+0x26>
 8007d2e:	2b40      	cmp	r3, #64	; 0x40
 8007d30:	d857      	bhi.n	8007de2 <USBD_StdDevReq+0xce>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00f      	beq.n	8007d56 <USBD_StdDevReq+0x42>
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	d153      	bne.n	8007de2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	32ae      	adds	r2, #174	; 0xae
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
      break;
 8007d54:	e04a      	b.n	8007dec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	785b      	ldrb	r3, [r3, #1]
 8007d5a:	2b09      	cmp	r3, #9
 8007d5c:	d83b      	bhi.n	8007dd6 <USBD_StdDevReq+0xc2>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <USBD_StdDevReq+0x50>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007db9 	.word	0x08007db9
 8007d68:	08007dcd 	.word	0x08007dcd
 8007d6c:	08007dd7 	.word	0x08007dd7
 8007d70:	08007dc3 	.word	0x08007dc3
 8007d74:	08007dd7 	.word	0x08007dd7
 8007d78:	08007d97 	.word	0x08007d97
 8007d7c:	08007d8d 	.word	0x08007d8d
 8007d80:	08007dd7 	.word	0x08007dd7
 8007d84:	08007daf 	.word	0x08007daf
 8007d88:	08007da1 	.word	0x08007da1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa3c 	bl	800820c <USBD_GetDescriptor>
          break;
 8007d94:	e024      	b.n	8007de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fba1 	bl	80084e0 <USBD_SetAddress>
          break;
 8007d9e:	e01f      	b.n	8007de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fbe0 	bl	8008568 <USBD_SetConfig>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
          break;
 8007dac:	e018      	b.n	8007de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fc83 	bl	80086bc <USBD_GetConfig>
          break;
 8007db6:	e013      	b.n	8007de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fcb4 	bl	8008728 <USBD_GetStatus>
          break;
 8007dc0:	e00e      	b.n	8007de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fce3 	bl	8008790 <USBD_SetFeature>
          break;
 8007dca:	e009      	b.n	8007de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fd07 	bl	80087e2 <USBD_ClrFeature>
          break;
 8007dd4:	e004      	b.n	8007de0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fd5e 	bl	800889a <USBD_CtlError>
          break;
 8007dde:	bf00      	nop
      }
      break;
 8007de0:	e004      	b.n	8007dec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fd58 	bl	800889a <USBD_CtlError>
      break;
 8007dea:	bf00      	nop
  }

  return ret;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop

08007df8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d005      	beq.n	8007e1e <USBD_StdItfReq+0x26>
 8007e12:	2b40      	cmp	r3, #64	; 0x40
 8007e14:	d852      	bhi.n	8007ebc <USBD_StdItfReq+0xc4>
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <USBD_StdItfReq+0x26>
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d14e      	bne.n	8007ebc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d840      	bhi.n	8007eae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	889b      	ldrh	r3, [r3, #4]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d836      	bhi.n	8007ea4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	889b      	ldrh	r3, [r3, #4]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff fed9 	bl	8007bf6 <USBD_CoreFindIF>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	2bff      	cmp	r3, #255	; 0xff
 8007e4c:	d01d      	beq.n	8007e8a <USBD_StdItfReq+0x92>
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d11a      	bne.n	8007e8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e54:	7bba      	ldrb	r2, [r7, #14]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	32ae      	adds	r2, #174	; 0xae
 8007e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00f      	beq.n	8007e84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e64:	7bba      	ldrb	r2, [r7, #14]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e6c:	7bba      	ldrb	r2, [r7, #14]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	32ae      	adds	r2, #174	; 0xae
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e82:	e004      	b.n	8007e8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e84:	2303      	movs	r3, #3
 8007e86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e88:	e001      	b.n	8007e8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	88db      	ldrh	r3, [r3, #6]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d110      	bne.n	8007eb8 <USBD_StdItfReq+0xc0>
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10d      	bne.n	8007eb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fdc7 	bl	8008a30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ea2:	e009      	b.n	8007eb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fcf7 	bl	800889a <USBD_CtlError>
          break;
 8007eac:	e004      	b.n	8007eb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fcf2 	bl	800889a <USBD_CtlError>
          break;
 8007eb6:	e000      	b.n	8007eba <USBD_StdItfReq+0xc2>
          break;
 8007eb8:	bf00      	nop
      }
      break;
 8007eba:	e004      	b.n	8007ec6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fceb 	bl	800889a <USBD_CtlError>
      break;
 8007ec4:	bf00      	nop
  }

  return ret;
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	889b      	ldrh	r3, [r3, #4]
 8007ee2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eec:	2b40      	cmp	r3, #64	; 0x40
 8007eee:	d007      	beq.n	8007f00 <USBD_StdEPReq+0x30>
 8007ef0:	2b40      	cmp	r3, #64	; 0x40
 8007ef2:	f200 817f 	bhi.w	80081f4 <USBD_StdEPReq+0x324>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d02a      	beq.n	8007f50 <USBD_StdEPReq+0x80>
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	f040 817a 	bne.w	80081f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff fe83 	bl	8007c10 <USBD_CoreFindEP>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f0e:	7b7b      	ldrb	r3, [r7, #13]
 8007f10:	2bff      	cmp	r3, #255	; 0xff
 8007f12:	f000 8174 	beq.w	80081fe <USBD_StdEPReq+0x32e>
 8007f16:	7b7b      	ldrb	r3, [r7, #13]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f040 8170 	bne.w	80081fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f1e:	7b7a      	ldrb	r2, [r7, #13]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f26:	7b7a      	ldrb	r2, [r7, #13]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	32ae      	adds	r2, #174	; 0xae
 8007f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8163 	beq.w	80081fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f38:	7b7a      	ldrb	r2, [r7, #13]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	32ae      	adds	r2, #174	; 0xae
 8007f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	4798      	blx	r3
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f4e:	e156      	b.n	80081fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	785b      	ldrb	r3, [r3, #1]
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d008      	beq.n	8007f6a <USBD_StdEPReq+0x9a>
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	f300 8145 	bgt.w	80081e8 <USBD_StdEPReq+0x318>
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 809b 	beq.w	800809a <USBD_StdEPReq+0x1ca>
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d03c      	beq.n	8007fe2 <USBD_StdEPReq+0x112>
 8007f68:	e13e      	b.n	80081e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d002      	beq.n	8007f7c <USBD_StdEPReq+0xac>
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d016      	beq.n	8007fa8 <USBD_StdEPReq+0xd8>
 8007f7a:	e02c      	b.n	8007fd6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00d      	beq.n	8007f9e <USBD_StdEPReq+0xce>
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b80      	cmp	r3, #128	; 0x80
 8007f86:	d00a      	beq.n	8007f9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f002 fbdd 	bl	800a74c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f92:	2180      	movs	r1, #128	; 0x80
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f002 fbd9 	bl	800a74c <USBD_LL_StallEP>
 8007f9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f9c:	e020      	b.n	8007fe0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc7a 	bl	800889a <USBD_CtlError>
              break;
 8007fa6:	e01b      	b.n	8007fe0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	885b      	ldrh	r3, [r3, #2]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10e      	bne.n	8007fce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00b      	beq.n	8007fce <USBD_StdEPReq+0xfe>
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	2b80      	cmp	r3, #128	; 0x80
 8007fba:	d008      	beq.n	8007fce <USBD_StdEPReq+0xfe>
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	88db      	ldrh	r3, [r3, #6]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d104      	bne.n	8007fce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f002 fbbf 	bl	800a74c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fd2e 	bl	8008a30 <USBD_CtlSendStatus>

              break;
 8007fd4:	e004      	b.n	8007fe0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fc5e 	bl	800889a <USBD_CtlError>
              break;
 8007fde:	bf00      	nop
          }
          break;
 8007fe0:	e107      	b.n	80081f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d002      	beq.n	8007ff4 <USBD_StdEPReq+0x124>
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d016      	beq.n	8008020 <USBD_StdEPReq+0x150>
 8007ff2:	e04b      	b.n	800808c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00d      	beq.n	8008016 <USBD_StdEPReq+0x146>
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	2b80      	cmp	r3, #128	; 0x80
 8007ffe:	d00a      	beq.n	8008016 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f002 fba1 	bl	800a74c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800800a:	2180      	movs	r1, #128	; 0x80
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f002 fb9d 	bl	800a74c <USBD_LL_StallEP>
 8008012:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008014:	e040      	b.n	8008098 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fc3e 	bl	800889a <USBD_CtlError>
              break;
 800801e:	e03b      	b.n	8008098 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	885b      	ldrh	r3, [r3, #2]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d136      	bne.n	8008096 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f002 fba7 	bl	800a78a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fcf7 	bl	8008a30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff fde2 	bl	8007c10 <USBD_CoreFindEP>
 800804c:	4603      	mov	r3, r0
 800804e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008050:	7b7b      	ldrb	r3, [r7, #13]
 8008052:	2bff      	cmp	r3, #255	; 0xff
 8008054:	d01f      	beq.n	8008096 <USBD_StdEPReq+0x1c6>
 8008056:	7b7b      	ldrb	r3, [r7, #13]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d11c      	bne.n	8008096 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800805c:	7b7a      	ldrb	r2, [r7, #13]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008064:	7b7a      	ldrb	r2, [r7, #13]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	32ae      	adds	r2, #174	; 0xae
 800806a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d010      	beq.n	8008096 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008074:	7b7a      	ldrb	r2, [r7, #13]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	32ae      	adds	r2, #174	; 0xae
 800807a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800808a:	e004      	b.n	8008096 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fc03 	bl	800889a <USBD_CtlError>
              break;
 8008094:	e000      	b.n	8008098 <USBD_StdEPReq+0x1c8>
              break;
 8008096:	bf00      	nop
          }
          break;
 8008098:	e0ab      	b.n	80081f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d002      	beq.n	80080ac <USBD_StdEPReq+0x1dc>
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d032      	beq.n	8008110 <USBD_StdEPReq+0x240>
 80080aa:	e097      	b.n	80081dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <USBD_StdEPReq+0x1f2>
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b80      	cmp	r3, #128	; 0x80
 80080b6:	d004      	beq.n	80080c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fbed 	bl	800889a <USBD_CtlError>
                break;
 80080c0:	e091      	b.n	80081e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	da0b      	bge.n	80080e2 <USBD_StdEPReq+0x212>
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	3310      	adds	r3, #16
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	4413      	add	r3, r2
 80080de:	3304      	adds	r3, #4
 80080e0:	e00b      	b.n	80080fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	4413      	add	r3, r2
 80080f8:	3304      	adds	r3, #4
 80080fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2202      	movs	r2, #2
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fc37 	bl	800897c <USBD_CtlSendData>
              break;
 800810e:	e06a      	b.n	80081e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008114:	2b00      	cmp	r3, #0
 8008116:	da11      	bge.n	800813c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	f003 020f 	and.w	r2, r3, #15
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	3324      	adds	r3, #36	; 0x24
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d117      	bne.n	8008162 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fbb0 	bl	800889a <USBD_CtlError>
                  break;
 800813a:	e054      	b.n	80081e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	f003 020f 	and.w	r2, r3, #15
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	440b      	add	r3, r1
 800814e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fb9d 	bl	800889a <USBD_CtlError>
                  break;
 8008160:	e041      	b.n	80081e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008166:	2b00      	cmp	r3, #0
 8008168:	da0b      	bge.n	8008182 <USBD_StdEPReq+0x2b2>
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	3310      	adds	r3, #16
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4413      	add	r3, r2
 800817e:	3304      	adds	r3, #4
 8008180:	e00b      	b.n	800819a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	4413      	add	r3, r2
 8008198:	3304      	adds	r3, #4
 800819a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <USBD_StdEPReq+0x2d8>
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b80      	cmp	r3, #128	; 0x80
 80081a6:	d103      	bne.n	80081b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e00e      	b.n	80081ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f002 fb07 	bl	800a7c8 <USBD_LL_IsStallEP>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2201      	movs	r2, #1
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	e002      	b.n	80081ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2202      	movs	r2, #2
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fbd1 	bl	800897c <USBD_CtlSendData>
              break;
 80081da:	e004      	b.n	80081e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fb5b 	bl	800889a <USBD_CtlError>
              break;
 80081e4:	bf00      	nop
          }
          break;
 80081e6:	e004      	b.n	80081f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fb55 	bl	800889a <USBD_CtlError>
          break;
 80081f0:	bf00      	nop
      }
      break;
 80081f2:	e005      	b.n	8008200 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fb4f 	bl	800889a <USBD_CtlError>
      break;
 80081fc:	e000      	b.n	8008200 <USBD_StdEPReq+0x330>
      break;
 80081fe:	bf00      	nop
  }

  return ret;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	885b      	ldrh	r3, [r3, #2]
 8008226:	0a1b      	lsrs	r3, r3, #8
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	2b06      	cmp	r3, #6
 800822e:	f200 8128 	bhi.w	8008482 <USBD_GetDescriptor+0x276>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <USBD_GetDescriptor+0x2c>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008255 	.word	0x08008255
 800823c:	0800826d 	.word	0x0800826d
 8008240:	080082ad 	.word	0x080082ad
 8008244:	08008483 	.word	0x08008483
 8008248:	08008483 	.word	0x08008483
 800824c:	08008423 	.word	0x08008423
 8008250:	0800844f 	.word	0x0800844f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	7c12      	ldrb	r2, [r2, #16]
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	4610      	mov	r0, r2
 8008266:	4798      	blx	r3
 8008268:	60f8      	str	r0, [r7, #12]
      break;
 800826a:	e112      	b.n	8008492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	7c1b      	ldrb	r3, [r3, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10d      	bne.n	8008290 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	f107 0208 	add.w	r2, r7, #8
 8008280:	4610      	mov	r0, r2
 8008282:	4798      	blx	r3
 8008284:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3301      	adds	r3, #1
 800828a:	2202      	movs	r2, #2
 800828c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800828e:	e100      	b.n	8008492 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	f107 0208 	add.w	r2, r7, #8
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3301      	adds	r3, #1
 80082a6:	2202      	movs	r2, #2
 80082a8:	701a      	strb	r2, [r3, #0]
      break;
 80082aa:	e0f2      	b.n	8008492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	885b      	ldrh	r3, [r3, #2]
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	f200 80ac 	bhi.w	8008410 <USBD_GetDescriptor+0x204>
 80082b8:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <USBD_GetDescriptor+0xb4>)
 80082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082be:	bf00      	nop
 80082c0:	080082d9 	.word	0x080082d9
 80082c4:	0800830d 	.word	0x0800830d
 80082c8:	08008341 	.word	0x08008341
 80082cc:	08008375 	.word	0x08008375
 80082d0:	080083a9 	.word	0x080083a9
 80082d4:	080083dd 	.word	0x080083dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	7c12      	ldrb	r2, [r2, #16]
 80082f0:	f107 0108 	add.w	r1, r7, #8
 80082f4:	4610      	mov	r0, r2
 80082f6:	4798      	blx	r3
 80082f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fa:	e091      	b.n	8008420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 facb 	bl	800889a <USBD_CtlError>
            err++;
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	3301      	adds	r3, #1
 8008308:	72fb      	strb	r3, [r7, #11]
          break;
 800830a:	e089      	b.n	8008420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	7c12      	ldrb	r2, [r2, #16]
 8008324:	f107 0108 	add.w	r1, r7, #8
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832e:	e077      	b.n	8008420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fab1 	bl	800889a <USBD_CtlError>
            err++;
 8008338:	7afb      	ldrb	r3, [r7, #11]
 800833a:	3301      	adds	r3, #1
 800833c:	72fb      	strb	r3, [r7, #11]
          break;
 800833e:	e06f      	b.n	8008420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 0108 	add.w	r1, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008362:	e05d      	b.n	8008420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa97 	bl	800889a <USBD_CtlError>
            err++;
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	3301      	adds	r3, #1
 8008370:	72fb      	strb	r3, [r7, #11]
          break;
 8008372:	e055      	b.n	8008420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7c12      	ldrb	r2, [r2, #16]
 800838c:	f107 0108 	add.w	r1, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008396:	e043      	b.n	8008420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa7d 	bl	800889a <USBD_CtlError>
            err++;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	3301      	adds	r3, #1
 80083a4:	72fb      	strb	r3, [r7, #11]
          break;
 80083a6:	e03b      	b.n	8008420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7c12      	ldrb	r2, [r2, #16]
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ca:	e029      	b.n	8008420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa63 	bl	800889a <USBD_CtlError>
            err++;
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	3301      	adds	r3, #1
 80083d8:	72fb      	strb	r3, [r7, #11]
          break;
 80083da:	e021      	b.n	8008420 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7c12      	ldrb	r2, [r2, #16]
 80083f4:	f107 0108 	add.w	r1, r7, #8
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fe:	e00f      	b.n	8008420 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa49 	bl	800889a <USBD_CtlError>
            err++;
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	3301      	adds	r3, #1
 800840c:	72fb      	strb	r3, [r7, #11]
          break;
 800840e:	e007      	b.n	8008420 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa41 	bl	800889a <USBD_CtlError>
          err++;
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	3301      	adds	r3, #1
 800841c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800841e:	bf00      	nop
      }
      break;
 8008420:	e037      	b.n	8008492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7c1b      	ldrb	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d109      	bne.n	800843e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	f107 0208 	add.w	r2, r7, #8
 8008436:	4610      	mov	r0, r2
 8008438:	4798      	blx	r3
 800843a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800843c:	e029      	b.n	8008492 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fa2a 	bl	800889a <USBD_CtlError>
        err++;
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	3301      	adds	r3, #1
 800844a:	72fb      	strb	r3, [r7, #11]
      break;
 800844c:	e021      	b.n	8008492 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	7c1b      	ldrb	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10d      	bne.n	8008472 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845e:	f107 0208 	add.w	r2, r7, #8
 8008462:	4610      	mov	r0, r2
 8008464:	4798      	blx	r3
 8008466:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3301      	adds	r3, #1
 800846c:	2207      	movs	r2, #7
 800846e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008470:	e00f      	b.n	8008492 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fa10 	bl	800889a <USBD_CtlError>
        err++;
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	3301      	adds	r3, #1
 800847e:	72fb      	strb	r3, [r7, #11]
      break;
 8008480:	e007      	b.n	8008492 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fa08 	bl	800889a <USBD_CtlError>
      err++;
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	3301      	adds	r3, #1
 800848e:	72fb      	strb	r3, [r7, #11]
      break;
 8008490:	bf00      	nop
  }

  if (err != 0U)
 8008492:	7afb      	ldrb	r3, [r7, #11]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d11e      	bne.n	80084d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	88db      	ldrh	r3, [r3, #6]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d016      	beq.n	80084ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084a0:	893b      	ldrh	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00e      	beq.n	80084c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	88da      	ldrh	r2, [r3, #6]
 80084aa:	893b      	ldrh	r3, [r7, #8]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	bf28      	it	cs
 80084b0:	4613      	movcs	r3, r2
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084b6:	893b      	ldrh	r3, [r7, #8]
 80084b8:	461a      	mov	r2, r3
 80084ba:	68f9      	ldr	r1, [r7, #12]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fa5d 	bl	800897c <USBD_CtlSendData>
 80084c2:	e009      	b.n	80084d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f9e7 	bl	800889a <USBD_CtlError>
 80084cc:	e004      	b.n	80084d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 faae 	bl	8008a30 <USBD_CtlSendStatus>
 80084d4:	e000      	b.n	80084d8 <USBD_GetDescriptor+0x2cc>
    return;
 80084d6:	bf00      	nop
  }
}
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop

080084e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	889b      	ldrh	r3, [r3, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d131      	bne.n	8008556 <USBD_SetAddress+0x76>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	88db      	ldrh	r3, [r3, #6]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d12d      	bne.n	8008556 <USBD_SetAddress+0x76>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	885b      	ldrh	r3, [r3, #2]
 80084fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008500:	d829      	bhi.n	8008556 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	885b      	ldrh	r3, [r3, #2]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800850c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b03      	cmp	r3, #3
 8008518:	d104      	bne.n	8008524 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f9bc 	bl	800889a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008522:	e01d      	b.n	8008560 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	7bfa      	ldrb	r2, [r7, #15]
 8008528:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f002 f975 	bl	800a820 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa7a 	bl	8008a30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2202      	movs	r2, #2
 8008546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854a:	e009      	b.n	8008560 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008554:	e004      	b.n	8008560 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f99e 	bl	800889a <USBD_CtlError>
  }
}
 800855e:	bf00      	nop
 8008560:	bf00      	nop
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	885b      	ldrh	r3, [r3, #2]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	4b4e      	ldr	r3, [pc, #312]	; (80086b8 <USBD_SetConfig+0x150>)
 800857e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008580:	4b4d      	ldr	r3, [pc, #308]	; (80086b8 <USBD_SetConfig+0x150>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d905      	bls.n	8008594 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f985 	bl	800889a <USBD_CtlError>
    return USBD_FAIL;
 8008590:	2303      	movs	r3, #3
 8008592:	e08c      	b.n	80086ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d002      	beq.n	80085a6 <USBD_SetConfig+0x3e>
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	d029      	beq.n	80085f8 <USBD_SetConfig+0x90>
 80085a4:	e075      	b.n	8008692 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085a6:	4b44      	ldr	r3, [pc, #272]	; (80086b8 <USBD_SetConfig+0x150>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d020      	beq.n	80085f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085ae:	4b42      	ldr	r3, [pc, #264]	; (80086b8 <USBD_SetConfig+0x150>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085b8:	4b3f      	ldr	r3, [pc, #252]	; (80086b8 <USBD_SetConfig+0x150>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fe ffe7 	bl	8007592 <USBD_SetClassConfig>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d008      	beq.n	80085e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f962 	bl	800889a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085de:	e065      	b.n	80086ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fa25 	bl	8008a30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2203      	movs	r2, #3
 80085ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085ee:	e05d      	b.n	80086ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fa1d 	bl	8008a30 <USBD_CtlSendStatus>
      break;
 80085f6:	e059      	b.n	80086ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085f8:	4b2f      	ldr	r3, [pc, #188]	; (80086b8 <USBD_SetConfig+0x150>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d112      	bne.n	8008626 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008608:	4b2b      	ldr	r3, [pc, #172]	; (80086b8 <USBD_SetConfig+0x150>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008612:	4b29      	ldr	r3, [pc, #164]	; (80086b8 <USBD_SetConfig+0x150>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7fe ffd6 	bl	80075ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fa06 	bl	8008a30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008624:	e042      	b.n	80086ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008626:	4b24      	ldr	r3, [pc, #144]	; (80086b8 <USBD_SetConfig+0x150>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	429a      	cmp	r2, r3
 8008632:	d02a      	beq.n	800868a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	b2db      	uxtb	r3, r3
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7fe ffc4 	bl	80075ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008642:	4b1d      	ldr	r3, [pc, #116]	; (80086b8 <USBD_SetConfig+0x150>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800864c:	4b1a      	ldr	r3, [pc, #104]	; (80086b8 <USBD_SetConfig+0x150>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7fe ff9d 	bl	8007592 <USBD_SetClassConfig>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00f      	beq.n	8008682 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f918 	bl	800889a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7fe ffa9 	bl	80075ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008680:	e014      	b.n	80086ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f9d4 	bl	8008a30 <USBD_CtlSendStatus>
      break;
 8008688:	e010      	b.n	80086ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f9d0 	bl	8008a30 <USBD_CtlSendStatus>
      break;
 8008690:	e00c      	b.n	80086ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f900 	bl	800889a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800869a:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <USBD_SetConfig+0x150>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7fe ff92 	bl	80075ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086a6:	2303      	movs	r3, #3
 80086a8:	73fb      	strb	r3, [r7, #15]
      break;
 80086aa:	bf00      	nop
  }

  return ret;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20001198 	.word	0x20001198

080086bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	88db      	ldrh	r3, [r3, #6]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d004      	beq.n	80086d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f8e2 	bl	800889a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086d6:	e023      	b.n	8008720 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	dc02      	bgt.n	80086ea <USBD_GetConfig+0x2e>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	dc03      	bgt.n	80086f0 <USBD_GetConfig+0x34>
 80086e8:	e015      	b.n	8008716 <USBD_GetConfig+0x5a>
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d00b      	beq.n	8008706 <USBD_GetConfig+0x4a>
 80086ee:	e012      	b.n	8008716 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3308      	adds	r3, #8
 80086fa:	2201      	movs	r2, #1
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f93c 	bl	800897c <USBD_CtlSendData>
        break;
 8008704:	e00c      	b.n	8008720 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3304      	adds	r3, #4
 800870a:	2201      	movs	r2, #1
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f934 	bl	800897c <USBD_CtlSendData>
        break;
 8008714:	e004      	b.n	8008720 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f8be 	bl	800889a <USBD_CtlError>
        break;
 800871e:	bf00      	nop
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008738:	b2db      	uxtb	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	2b02      	cmp	r3, #2
 800873e:	d81e      	bhi.n	800877e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	88db      	ldrh	r3, [r3, #6]
 8008744:	2b02      	cmp	r3, #2
 8008746:	d004      	beq.n	8008752 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f8a5 	bl	800889a <USBD_CtlError>
        break;
 8008750:	e01a      	b.n	8008788 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f043 0202 	orr.w	r2, r3, #2
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	330c      	adds	r3, #12
 8008772:	2202      	movs	r2, #2
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f900 	bl	800897c <USBD_CtlSendData>
      break;
 800877c:	e004      	b.n	8008788 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f88a 	bl	800889a <USBD_CtlError>
      break;
 8008786:	bf00      	nop
  }
}
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	885b      	ldrh	r3, [r3, #2]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d107      	bne.n	80087b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f940 	bl	8008a30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087b0:	e013      	b.n	80087da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	885b      	ldrh	r3, [r3, #2]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d10b      	bne.n	80087d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	889b      	ldrh	r3, [r3, #4]
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f930 	bl	8008a30 <USBD_CtlSendStatus>
}
 80087d0:	e003      	b.n	80087da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f860 	bl	800889a <USBD_CtlError>
}
 80087da:	bf00      	nop
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	3b01      	subs	r3, #1
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d80b      	bhi.n	8008812 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	885b      	ldrh	r3, [r3, #2]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d10c      	bne.n	800881c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f910 	bl	8008a30 <USBD_CtlSendStatus>
      }
      break;
 8008810:	e004      	b.n	800881c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f840 	bl	800889a <USBD_CtlError>
      break;
 800881a:	e000      	b.n	800881e <USBD_ClrFeature+0x3c>
      break;
 800881c:	bf00      	nop
  }
}
 800881e:	bf00      	nop
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	781a      	ldrb	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	781a      	ldrb	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3301      	adds	r3, #1
 800884e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7ff fa41 	bl	8007cd8 <SWAPBYTE>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3301      	adds	r3, #1
 8008868:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7ff fa34 	bl	8007cd8 <SWAPBYTE>
 8008870:	4603      	mov	r3, r0
 8008872:	461a      	mov	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3301      	adds	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3301      	adds	r3, #1
 8008882:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7ff fa27 	bl	8007cd8 <SWAPBYTE>
 800888a:	4603      	mov	r3, r0
 800888c:	461a      	mov	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	80da      	strh	r2, [r3, #6]
}
 8008892:	bf00      	nop
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088a4:	2180      	movs	r1, #128	; 0x80
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 ff50 	bl	800a74c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088ac:	2100      	movs	r1, #0
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 ff4c 	bl	800a74c <USBD_LL_StallEP>
}
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d036      	beq.n	8008940 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088d6:	6938      	ldr	r0, [r7, #16]
 80088d8:	f000 f836 	bl	8008948 <USBD_GetLen>
 80088dc:	4603      	mov	r3, r0
 80088de:	3301      	adds	r3, #1
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	4413      	add	r3, r2
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	7812      	ldrb	r2, [r2, #0]
 80088f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	3301      	adds	r3, #1
 80088fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	4413      	add	r3, r2
 8008902:	2203      	movs	r2, #3
 8008904:	701a      	strb	r2, [r3, #0]
  idx++;
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	3301      	adds	r3, #1
 800890a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800890c:	e013      	b.n	8008936 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	4413      	add	r3, r2
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	7812      	ldrb	r2, [r2, #0]
 8008918:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	3301      	adds	r3, #1
 800891e:	613b      	str	r3, [r7, #16]
    idx++;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
 8008922:	3301      	adds	r3, #1
 8008924:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	4413      	add	r3, r2
 800892c:	2200      	movs	r2, #0
 800892e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	3301      	adds	r3, #1
 8008934:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e7      	bne.n	800890e <USBD_GetString+0x52>
 800893e:	e000      	b.n	8008942 <USBD_GetString+0x86>
    return;
 8008940:	bf00      	nop
  }
}
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008958:	e005      	b.n	8008966 <USBD_GetLen+0x1e>
  {
    len++;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
 800895c:	3301      	adds	r3, #1
 800895e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	3301      	adds	r3, #1
 8008964:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1f5      	bne.n	800895a <USBD_GetLen+0x12>
  }

  return len;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2202      	movs	r2, #2
 800898c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	2100      	movs	r1, #0
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f001 ff5b 	bl	800a85e <USBD_LL_Transmit>

  return USBD_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	2100      	movs	r1, #0
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f001 ff4a 	bl	800a85e <USBD_LL_Transmit>

  return USBD_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2203      	movs	r2, #3
 80089e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	2100      	movs	r1, #0
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f001 ff4e 	bl	800a8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	2100      	movs	r1, #0
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f001 ff3d 	bl	800a8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a40:	2300      	movs	r3, #0
 8008a42:	2200      	movs	r2, #0
 8008a44:	2100      	movs	r1, #0
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 ff09 	bl	800a85e <USBD_LL_Transmit>

  return USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2205      	movs	r2, #5
 8008a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a66:	2300      	movs	r3, #0
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 ff17 	bl	800a8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a86:	2300      	movs	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a8e:	2b84      	cmp	r3, #132	; 0x84
 8008a90:	d005      	beq.n	8008a9e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008a92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	3303      	adds	r3, #3
 8008a9c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008ab0:	f000 fade 	bl	8009070 <vTaskStartScheduler>
  
  return osOK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008abc:	b089      	sub	sp, #36	; 0x24
 8008abe:	af04      	add	r7, sp, #16
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d020      	beq.n	8008b0e <osThreadCreate+0x54>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01c      	beq.n	8008b0e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685c      	ldr	r4, [r3, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691e      	ldr	r6, [r3, #16]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff ffc8 	bl	8008a7c <makeFreeRtosPriority>
 8008aec:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008af6:	9202      	str	r2, [sp, #8]
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	9100      	str	r1, [sp, #0]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	4632      	mov	r2, r6
 8008b00:	4629      	mov	r1, r5
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 f8ed 	bl	8008ce2 <xTaskCreateStatic>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	e01c      	b.n	8008b48 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685c      	ldr	r4, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b1a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7ff ffaa 	bl	8008a7c <makeFreeRtosPriority>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	f107 030c 	add.w	r3, r7, #12
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	9200      	str	r2, [sp, #0]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	4632      	mov	r2, r6
 8008b36:	4629      	mov	r1, r5
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 f92f 	bl	8008d9c <xTaskCreate>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d001      	beq.n	8008b48 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	e000      	b.n	8008b4a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008b48:	68fb      	ldr	r3, [r7, #12]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b52 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <osDelay+0x16>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	e000      	b.n	8008b6a <osDelay+0x18>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fa4c 	bl	8009008 <vTaskDelay>
  
  return osOK;
 8008b70:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f103 0208 	add.w	r2, r3, #8
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f103 0208 	add.w	r2, r3, #8
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f103 0208 	add.w	r2, r3, #8
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	601a      	str	r2, [r3, #0]
}
 8008c10:	bf00      	nop
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c32:	d103      	bne.n	8008c3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	e00c      	b.n	8008c56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	e002      	b.n	8008c4a <vListInsert+0x2e>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d2f6      	bcs.n	8008c44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	601a      	str	r2, [r3, #0]
}
 8008c82:	bf00      	nop
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6892      	ldr	r2, [r2, #8]
 8008ca4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	6852      	ldr	r2, [r2, #4]
 8008cae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d103      	bne.n	8008cc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	1e5a      	subs	r2, r3, #1
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b08e      	sub	sp, #56	; 0x38
 8008ce6:	af04      	add	r7, sp, #16
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	607a      	str	r2, [r7, #4]
 8008cee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10a      	bne.n	8008d0c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d08:	bf00      	nop
 8008d0a:	e7fe      	b.n	8008d0a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <xTaskCreateStatic+0x46>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	61fb      	str	r3, [r7, #28]
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d28:	2354      	movs	r3, #84	; 0x54
 8008d2a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2b54      	cmp	r3, #84	; 0x54
 8008d30:	d00a      	beq.n	8008d48 <xTaskCreateStatic+0x66>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	61bb      	str	r3, [r7, #24]
}
 8008d44:	bf00      	nop
 8008d46:	e7fe      	b.n	8008d46 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01e      	beq.n	8008d8e <xTaskCreateStatic+0xac>
 8008d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d01b      	beq.n	8008d8e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d68:	2300      	movs	r3, #0
 8008d6a:	9303      	str	r3, [sp, #12]
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	9302      	str	r3, [sp, #8]
 8008d70:	f107 0314 	add.w	r3, r7, #20
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	68b9      	ldr	r1, [r7, #8]
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 f850 	bl	8008e26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d88:	f000 f8d4 	bl	8008f34 <prvAddNewTaskToReadyList>
 8008d8c:	e001      	b.n	8008d92 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d92:	697b      	ldr	r3, [r7, #20]
	}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3728      	adds	r7, #40	; 0x28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08c      	sub	sp, #48	; 0x30
 8008da0:	af04      	add	r7, sp, #16
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	4613      	mov	r3, r2
 8008daa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008dac:	88fb      	ldrh	r3, [r7, #6]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fee1 	bl	8009b78 <pvPortMalloc>
 8008db6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00e      	beq.n	8008ddc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008dbe:	2054      	movs	r0, #84	; 0x54
 8008dc0:	f000 feda 	bl	8009b78 <pvPortMalloc>
 8008dc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8008dd2:	e005      	b.n	8008de0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008dd4:	6978      	ldr	r0, [r7, #20]
 8008dd6:	f000 ff9b 	bl	8009d10 <vPortFree>
 8008dda:	e001      	b.n	8008de0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d017      	beq.n	8008e16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dee:	88fa      	ldrh	r2, [r7, #6]
 8008df0:	2300      	movs	r3, #0
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	9302      	str	r3, [sp, #8]
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	9301      	str	r3, [sp, #4]
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 f80e 	bl	8008e26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e0a:	69f8      	ldr	r0, [r7, #28]
 8008e0c:	f000 f892 	bl	8008f34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e10:	2301      	movs	r3, #1
 8008e12:	61bb      	str	r3, [r7, #24]
 8008e14:	e002      	b.n	8008e1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
	}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3720      	adds	r7, #32
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b088      	sub	sp, #32
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	60f8      	str	r0, [r7, #12]
 8008e2e:	60b9      	str	r1, [r7, #8]
 8008e30:	607a      	str	r2, [r7, #4]
 8008e32:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	f023 0307 	bic.w	r3, r3, #7
 8008e4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f003 0307 	and.w	r3, r3, #7
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00a      	beq.n	8008e6e <prvInitialiseNewTask+0x48>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	617b      	str	r3, [r7, #20]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01f      	beq.n	8008eb4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e74:	2300      	movs	r3, #0
 8008e76:	61fb      	str	r3, [r7, #28]
 8008e78:	e012      	b.n	8008ea0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	4413      	add	r3, r2
 8008e80:	7819      	ldrb	r1, [r3, #0]
 8008e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	4413      	add	r3, r2
 8008e88:	3334      	adds	r3, #52	; 0x34
 8008e8a:	460a      	mov	r2, r1
 8008e8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	4413      	add	r3, r2
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d006      	beq.n	8008ea8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	2b0f      	cmp	r3, #15
 8008ea4:	d9e9      	bls.n	8008e7a <prvInitialiseNewTask+0x54>
 8008ea6:	e000      	b.n	8008eaa <prvInitialiseNewTask+0x84>
			{
				break;
 8008ea8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008eb2:	e003      	b.n	8008ebc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	2b06      	cmp	r3, #6
 8008ec0:	d901      	bls.n	8008ec6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ec2:	2306      	movs	r3, #6
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ed0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	3304      	adds	r3, #4
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff fe6c 	bl	8008bba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	3318      	adds	r3, #24
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fe67 	bl	8008bba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	f1c3 0207 	rsb	r2, r3, #7
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f00:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	2200      	movs	r2, #0
 8008f06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	68f9      	ldr	r1, [r7, #12]
 8008f14:	69b8      	ldr	r0, [r7, #24]
 8008f16:	f000 fc23 	bl	8009760 <pxPortInitialiseStack>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f2c:	bf00      	nop
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f3c:	f000 fd3a 	bl	80099b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f40:	4b2a      	ldr	r3, [pc, #168]	; (8008fec <prvAddNewTaskToReadyList+0xb8>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3301      	adds	r3, #1
 8008f46:	4a29      	ldr	r2, [pc, #164]	; (8008fec <prvAddNewTaskToReadyList+0xb8>)
 8008f48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f4a:	4b29      	ldr	r3, [pc, #164]	; (8008ff0 <prvAddNewTaskToReadyList+0xbc>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f52:	4a27      	ldr	r2, [pc, #156]	; (8008ff0 <prvAddNewTaskToReadyList+0xbc>)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f58:	4b24      	ldr	r3, [pc, #144]	; (8008fec <prvAddNewTaskToReadyList+0xb8>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d110      	bne.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f60:	f000 fabc 	bl	80094dc <prvInitialiseTaskLists>
 8008f64:	e00d      	b.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f66:	4b23      	ldr	r3, [pc, #140]	; (8008ff4 <prvAddNewTaskToReadyList+0xc0>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d109      	bne.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f6e:	4b20      	ldr	r3, [pc, #128]	; (8008ff0 <prvAddNewTaskToReadyList+0xbc>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d802      	bhi.n	8008f82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f7c:	4a1c      	ldr	r2, [pc, #112]	; (8008ff0 <prvAddNewTaskToReadyList+0xbc>)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f82:	4b1d      	ldr	r3, [pc, #116]	; (8008ff8 <prvAddNewTaskToReadyList+0xc4>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3301      	adds	r3, #1
 8008f88:	4a1b      	ldr	r2, [pc, #108]	; (8008ff8 <prvAddNewTaskToReadyList+0xc4>)
 8008f8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	2201      	movs	r2, #1
 8008f92:	409a      	lsls	r2, r3
 8008f94:	4b19      	ldr	r3, [pc, #100]	; (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	4a18      	ldr	r2, [pc, #96]	; (8008ffc <prvAddNewTaskToReadyList+0xc8>)
 8008f9c:	6013      	str	r3, [r2, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4a15      	ldr	r2, [pc, #84]	; (8009000 <prvAddNewTaskToReadyList+0xcc>)
 8008fac:	441a      	add	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	f7ff fe0d 	bl	8008bd4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fba:	f000 fd2b 	bl	8009a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fbe:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <prvAddNewTaskToReadyList+0xc0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00e      	beq.n	8008fe4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fc6:	4b0a      	ldr	r3, [pc, #40]	; (8008ff0 <prvAddNewTaskToReadyList+0xbc>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d207      	bcs.n	8008fe4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fd4:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <prvAddNewTaskToReadyList+0xd0>)
 8008fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	2000129c 	.word	0x2000129c
 8008ff0:	2000119c 	.word	0x2000119c
 8008ff4:	200012a8 	.word	0x200012a8
 8008ff8:	200012b8 	.word	0x200012b8
 8008ffc:	200012a4 	.word	0x200012a4
 8009000:	200011a0 	.word	0x200011a0
 8009004:	e000ed04 	.word	0xe000ed04

08009008 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d017      	beq.n	800904a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800901a:	4b13      	ldr	r3, [pc, #76]	; (8009068 <vTaskDelay+0x60>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <vTaskDelay+0x30>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	60bb      	str	r3, [r7, #8]
}
 8009034:	bf00      	nop
 8009036:	e7fe      	b.n	8009036 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009038:	f000 f87a 	bl	8009130 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800903c:	2100      	movs	r1, #0
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fb28 	bl	8009694 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009044:	f000 f882 	bl	800914c <xTaskResumeAll>
 8009048:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d107      	bne.n	8009060 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009050:	4b06      	ldr	r3, [pc, #24]	; (800906c <vTaskDelay+0x64>)
 8009052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009060:	bf00      	nop
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	200012c4 	.word	0x200012c4
 800906c:	e000ed04 	.word	0xe000ed04

08009070 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08a      	sub	sp, #40	; 0x28
 8009074:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009076:	2300      	movs	r3, #0
 8009078:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800907e:	463a      	mov	r2, r7
 8009080:	1d39      	adds	r1, r7, #4
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	4618      	mov	r0, r3
 8009088:	f7f9 fb26 	bl	80026d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	9202      	str	r2, [sp, #8]
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	2300      	movs	r3, #0
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	2300      	movs	r3, #0
 800909c:	460a      	mov	r2, r1
 800909e:	491e      	ldr	r1, [pc, #120]	; (8009118 <vTaskStartScheduler+0xa8>)
 80090a0:	481e      	ldr	r0, [pc, #120]	; (800911c <vTaskStartScheduler+0xac>)
 80090a2:	f7ff fe1e 	bl	8008ce2 <xTaskCreateStatic>
 80090a6:	4603      	mov	r3, r0
 80090a8:	4a1d      	ldr	r2, [pc, #116]	; (8009120 <vTaskStartScheduler+0xb0>)
 80090aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090ac:	4b1c      	ldr	r3, [pc, #112]	; (8009120 <vTaskStartScheduler+0xb0>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090b4:	2301      	movs	r3, #1
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e001      	b.n	80090be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d116      	bne.n	80090f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	613b      	str	r3, [r7, #16]
}
 80090d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090d8:	4b12      	ldr	r3, [pc, #72]	; (8009124 <vTaskStartScheduler+0xb4>)
 80090da:	f04f 32ff 	mov.w	r2, #4294967295
 80090de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090e0:	4b11      	ldr	r3, [pc, #68]	; (8009128 <vTaskStartScheduler+0xb8>)
 80090e2:	2201      	movs	r2, #1
 80090e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090e6:	4b11      	ldr	r3, [pc, #68]	; (800912c <vTaskStartScheduler+0xbc>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090ec:	f000 fbc0 	bl	8009870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090f0:	e00e      	b.n	8009110 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f8:	d10a      	bne.n	8009110 <vTaskStartScheduler+0xa0>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	60fb      	str	r3, [r7, #12]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <vTaskStartScheduler+0x9e>
}
 8009110:	bf00      	nop
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	0800daa8 	.word	0x0800daa8
 800911c:	080094ad 	.word	0x080094ad
 8009120:	200012c0 	.word	0x200012c0
 8009124:	200012bc 	.word	0x200012bc
 8009128:	200012a8 	.word	0x200012a8
 800912c:	200012a0 	.word	0x200012a0

08009130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009134:	4b04      	ldr	r3, [pc, #16]	; (8009148 <vTaskSuspendAll+0x18>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3301      	adds	r3, #1
 800913a:	4a03      	ldr	r2, [pc, #12]	; (8009148 <vTaskSuspendAll+0x18>)
 800913c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800913e:	bf00      	nop
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	200012c4 	.word	0x200012c4

0800914c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009152:	2300      	movs	r3, #0
 8009154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009156:	2300      	movs	r3, #0
 8009158:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800915a:	4b41      	ldr	r3, [pc, #260]	; (8009260 <xTaskResumeAll+0x114>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10a      	bne.n	8009178 <xTaskResumeAll+0x2c>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	603b      	str	r3, [r7, #0]
}
 8009174:	bf00      	nop
 8009176:	e7fe      	b.n	8009176 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009178:	f000 fc1c 	bl	80099b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800917c:	4b38      	ldr	r3, [pc, #224]	; (8009260 <xTaskResumeAll+0x114>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3b01      	subs	r3, #1
 8009182:	4a37      	ldr	r2, [pc, #220]	; (8009260 <xTaskResumeAll+0x114>)
 8009184:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009186:	4b36      	ldr	r3, [pc, #216]	; (8009260 <xTaskResumeAll+0x114>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d161      	bne.n	8009252 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800918e:	4b35      	ldr	r3, [pc, #212]	; (8009264 <xTaskResumeAll+0x118>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d05d      	beq.n	8009252 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009196:	e02e      	b.n	80091f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009198:	4b33      	ldr	r3, [pc, #204]	; (8009268 <xTaskResumeAll+0x11c>)
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3318      	adds	r3, #24
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7ff fd72 	bl	8008c8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff fd6d 	bl	8008c8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b8:	2201      	movs	r2, #1
 80091ba:	409a      	lsls	r2, r3
 80091bc:	4b2b      	ldr	r3, [pc, #172]	; (800926c <xTaskResumeAll+0x120>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	4a2a      	ldr	r2, [pc, #168]	; (800926c <xTaskResumeAll+0x120>)
 80091c4:	6013      	str	r3, [r2, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ca:	4613      	mov	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4a27      	ldr	r2, [pc, #156]	; (8009270 <xTaskResumeAll+0x124>)
 80091d4:	441a      	add	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3304      	adds	r3, #4
 80091da:	4619      	mov	r1, r3
 80091dc:	4610      	mov	r0, r2
 80091de:	f7ff fcf9 	bl	8008bd4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e6:	4b23      	ldr	r3, [pc, #140]	; (8009274 <xTaskResumeAll+0x128>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d302      	bcc.n	80091f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80091f0:	4b21      	ldr	r3, [pc, #132]	; (8009278 <xTaskResumeAll+0x12c>)
 80091f2:	2201      	movs	r2, #1
 80091f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091f6:	4b1c      	ldr	r3, [pc, #112]	; (8009268 <xTaskResumeAll+0x11c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1cc      	bne.n	8009198 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009204:	f000 fa08 	bl	8009618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009208:	4b1c      	ldr	r3, [pc, #112]	; (800927c <xTaskResumeAll+0x130>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d010      	beq.n	8009236 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009214:	f000 f836 	bl	8009284 <xTaskIncrementTick>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d002      	beq.n	8009224 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800921e:	4b16      	ldr	r3, [pc, #88]	; (8009278 <xTaskResumeAll+0x12c>)
 8009220:	2201      	movs	r2, #1
 8009222:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3b01      	subs	r3, #1
 8009228:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1f1      	bne.n	8009214 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009230:	4b12      	ldr	r3, [pc, #72]	; (800927c <xTaskResumeAll+0x130>)
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <xTaskResumeAll+0x12c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d009      	beq.n	8009252 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800923e:	2301      	movs	r3, #1
 8009240:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009242:	4b0f      	ldr	r3, [pc, #60]	; (8009280 <xTaskResumeAll+0x134>)
 8009244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009252:	f000 fbdf 	bl	8009a14 <vPortExitCritical>

	return xAlreadyYielded;
 8009256:	68bb      	ldr	r3, [r7, #8]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	200012c4 	.word	0x200012c4
 8009264:	2000129c 	.word	0x2000129c
 8009268:	2000125c 	.word	0x2000125c
 800926c:	200012a4 	.word	0x200012a4
 8009270:	200011a0 	.word	0x200011a0
 8009274:	2000119c 	.word	0x2000119c
 8009278:	200012b0 	.word	0x200012b0
 800927c:	200012ac 	.word	0x200012ac
 8009280:	e000ed04 	.word	0xe000ed04

08009284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800928e:	4b4e      	ldr	r3, [pc, #312]	; (80093c8 <xTaskIncrementTick+0x144>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f040 808e 	bne.w	80093b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009298:	4b4c      	ldr	r3, [pc, #304]	; (80093cc <xTaskIncrementTick+0x148>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3301      	adds	r3, #1
 800929e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092a0:	4a4a      	ldr	r2, [pc, #296]	; (80093cc <xTaskIncrementTick+0x148>)
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d120      	bne.n	80092ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80092ac:	4b48      	ldr	r3, [pc, #288]	; (80093d0 <xTaskIncrementTick+0x14c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <xTaskIncrementTick+0x48>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	603b      	str	r3, [r7, #0]
}
 80092c8:	bf00      	nop
 80092ca:	e7fe      	b.n	80092ca <xTaskIncrementTick+0x46>
 80092cc:	4b40      	ldr	r3, [pc, #256]	; (80093d0 <xTaskIncrementTick+0x14c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	60fb      	str	r3, [r7, #12]
 80092d2:	4b40      	ldr	r3, [pc, #256]	; (80093d4 <xTaskIncrementTick+0x150>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a3e      	ldr	r2, [pc, #248]	; (80093d0 <xTaskIncrementTick+0x14c>)
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	4a3e      	ldr	r2, [pc, #248]	; (80093d4 <xTaskIncrementTick+0x150>)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6013      	str	r3, [r2, #0]
 80092e0:	4b3d      	ldr	r3, [pc, #244]	; (80093d8 <xTaskIncrementTick+0x154>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3301      	adds	r3, #1
 80092e6:	4a3c      	ldr	r2, [pc, #240]	; (80093d8 <xTaskIncrementTick+0x154>)
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	f000 f995 	bl	8009618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092ee:	4b3b      	ldr	r3, [pc, #236]	; (80093dc <xTaskIncrementTick+0x158>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d348      	bcc.n	800938a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092f8:	4b35      	ldr	r3, [pc, #212]	; (80093d0 <xTaskIncrementTick+0x14c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d104      	bne.n	800930c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009302:	4b36      	ldr	r3, [pc, #216]	; (80093dc <xTaskIncrementTick+0x158>)
 8009304:	f04f 32ff 	mov.w	r2, #4294967295
 8009308:	601a      	str	r2, [r3, #0]
					break;
 800930a:	e03e      	b.n	800938a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800930c:	4b30      	ldr	r3, [pc, #192]	; (80093d0 <xTaskIncrementTick+0x14c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d203      	bcs.n	800932c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009324:	4a2d      	ldr	r2, [pc, #180]	; (80093dc <xTaskIncrementTick+0x158>)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800932a:	e02e      	b.n	800938a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	3304      	adds	r3, #4
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff fcac 	bl	8008c8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933a:	2b00      	cmp	r3, #0
 800933c:	d004      	beq.n	8009348 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	3318      	adds	r3, #24
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff fca3 	bl	8008c8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934c:	2201      	movs	r2, #1
 800934e:	409a      	lsls	r2, r3
 8009350:	4b23      	ldr	r3, [pc, #140]	; (80093e0 <xTaskIncrementTick+0x15c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4313      	orrs	r3, r2
 8009356:	4a22      	ldr	r2, [pc, #136]	; (80093e0 <xTaskIncrementTick+0x15c>)
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4a1f      	ldr	r2, [pc, #124]	; (80093e4 <xTaskIncrementTick+0x160>)
 8009368:	441a      	add	r2, r3
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	3304      	adds	r3, #4
 800936e:	4619      	mov	r1, r3
 8009370:	4610      	mov	r0, r2
 8009372:	f7ff fc2f 	bl	8008bd4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937a:	4b1b      	ldr	r3, [pc, #108]	; (80093e8 <xTaskIncrementTick+0x164>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009380:	429a      	cmp	r2, r3
 8009382:	d3b9      	bcc.n	80092f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009384:	2301      	movs	r3, #1
 8009386:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009388:	e7b6      	b.n	80092f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800938a:	4b17      	ldr	r3, [pc, #92]	; (80093e8 <xTaskIncrementTick+0x164>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009390:	4914      	ldr	r1, [pc, #80]	; (80093e4 <xTaskIncrementTick+0x160>)
 8009392:	4613      	mov	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d901      	bls.n	80093a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80093a2:	2301      	movs	r3, #1
 80093a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093a6:	4b11      	ldr	r3, [pc, #68]	; (80093ec <xTaskIncrementTick+0x168>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d007      	beq.n	80093be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80093ae:	2301      	movs	r3, #1
 80093b0:	617b      	str	r3, [r7, #20]
 80093b2:	e004      	b.n	80093be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093b4:	4b0e      	ldr	r3, [pc, #56]	; (80093f0 <xTaskIncrementTick+0x16c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3301      	adds	r3, #1
 80093ba:	4a0d      	ldr	r2, [pc, #52]	; (80093f0 <xTaskIncrementTick+0x16c>)
 80093bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093be:	697b      	ldr	r3, [r7, #20]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	200012c4 	.word	0x200012c4
 80093cc:	200012a0 	.word	0x200012a0
 80093d0:	20001254 	.word	0x20001254
 80093d4:	20001258 	.word	0x20001258
 80093d8:	200012b4 	.word	0x200012b4
 80093dc:	200012bc 	.word	0x200012bc
 80093e0:	200012a4 	.word	0x200012a4
 80093e4:	200011a0 	.word	0x200011a0
 80093e8:	2000119c 	.word	0x2000119c
 80093ec:	200012b0 	.word	0x200012b0
 80093f0:	200012ac 	.word	0x200012ac

080093f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093fa:	4b27      	ldr	r3, [pc, #156]	; (8009498 <vTaskSwitchContext+0xa4>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009402:	4b26      	ldr	r3, [pc, #152]	; (800949c <vTaskSwitchContext+0xa8>)
 8009404:	2201      	movs	r2, #1
 8009406:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009408:	e03f      	b.n	800948a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800940a:	4b24      	ldr	r3, [pc, #144]	; (800949c <vTaskSwitchContext+0xa8>)
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009410:	4b23      	ldr	r3, [pc, #140]	; (80094a0 <vTaskSwitchContext+0xac>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	fab3 f383 	clz	r3, r3
 800941c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	f1c3 031f 	rsb	r3, r3, #31
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	491f      	ldr	r1, [pc, #124]	; (80094a4 <vTaskSwitchContext+0xb0>)
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10a      	bne.n	8009450 <vTaskSwitchContext+0x5c>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	607b      	str	r3, [r7, #4]
}
 800944c:	bf00      	nop
 800944e:	e7fe      	b.n	800944e <vTaskSwitchContext+0x5a>
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4a12      	ldr	r2, [pc, #72]	; (80094a4 <vTaskSwitchContext+0xb0>)
 800945c:	4413      	add	r3, r2
 800945e:	613b      	str	r3, [r7, #16]
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	605a      	str	r2, [r3, #4]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	3308      	adds	r3, #8
 8009472:	429a      	cmp	r2, r3
 8009474:	d104      	bne.n	8009480 <vTaskSwitchContext+0x8c>
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	605a      	str	r2, [r3, #4]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	4a08      	ldr	r2, [pc, #32]	; (80094a8 <vTaskSwitchContext+0xb4>)
 8009488:	6013      	str	r3, [r2, #0]
}
 800948a:	bf00      	nop
 800948c:	371c      	adds	r7, #28
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	200012c4 	.word	0x200012c4
 800949c:	200012b0 	.word	0x200012b0
 80094a0:	200012a4 	.word	0x200012a4
 80094a4:	200011a0 	.word	0x200011a0
 80094a8:	2000119c 	.word	0x2000119c

080094ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094b4:	f000 f852 	bl	800955c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094b8:	4b06      	ldr	r3, [pc, #24]	; (80094d4 <prvIdleTask+0x28>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d9f9      	bls.n	80094b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094c0:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <prvIdleTask+0x2c>)
 80094c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094d0:	e7f0      	b.n	80094b4 <prvIdleTask+0x8>
 80094d2:	bf00      	nop
 80094d4:	200011a0 	.word	0x200011a0
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094e2:	2300      	movs	r3, #0
 80094e4:	607b      	str	r3, [r7, #4]
 80094e6:	e00c      	b.n	8009502 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4a12      	ldr	r2, [pc, #72]	; (800953c <prvInitialiseTaskLists+0x60>)
 80094f4:	4413      	add	r3, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7ff fb3f 	bl	8008b7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	3301      	adds	r3, #1
 8009500:	607b      	str	r3, [r7, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b06      	cmp	r3, #6
 8009506:	d9ef      	bls.n	80094e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009508:	480d      	ldr	r0, [pc, #52]	; (8009540 <prvInitialiseTaskLists+0x64>)
 800950a:	f7ff fb36 	bl	8008b7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800950e:	480d      	ldr	r0, [pc, #52]	; (8009544 <prvInitialiseTaskLists+0x68>)
 8009510:	f7ff fb33 	bl	8008b7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009514:	480c      	ldr	r0, [pc, #48]	; (8009548 <prvInitialiseTaskLists+0x6c>)
 8009516:	f7ff fb30 	bl	8008b7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800951a:	480c      	ldr	r0, [pc, #48]	; (800954c <prvInitialiseTaskLists+0x70>)
 800951c:	f7ff fb2d 	bl	8008b7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009520:	480b      	ldr	r0, [pc, #44]	; (8009550 <prvInitialiseTaskLists+0x74>)
 8009522:	f7ff fb2a 	bl	8008b7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009526:	4b0b      	ldr	r3, [pc, #44]	; (8009554 <prvInitialiseTaskLists+0x78>)
 8009528:	4a05      	ldr	r2, [pc, #20]	; (8009540 <prvInitialiseTaskLists+0x64>)
 800952a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800952c:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <prvInitialiseTaskLists+0x7c>)
 800952e:	4a05      	ldr	r2, [pc, #20]	; (8009544 <prvInitialiseTaskLists+0x68>)
 8009530:	601a      	str	r2, [r3, #0]
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	200011a0 	.word	0x200011a0
 8009540:	2000122c 	.word	0x2000122c
 8009544:	20001240 	.word	0x20001240
 8009548:	2000125c 	.word	0x2000125c
 800954c:	20001270 	.word	0x20001270
 8009550:	20001288 	.word	0x20001288
 8009554:	20001254 	.word	0x20001254
 8009558:	20001258 	.word	0x20001258

0800955c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009562:	e019      	b.n	8009598 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009564:	f000 fa26 	bl	80099b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009568:	4b10      	ldr	r3, [pc, #64]	; (80095ac <prvCheckTasksWaitingTermination+0x50>)
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	3304      	adds	r3, #4
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fb8a 	bl	8008c8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800957a:	4b0d      	ldr	r3, [pc, #52]	; (80095b0 <prvCheckTasksWaitingTermination+0x54>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3b01      	subs	r3, #1
 8009580:	4a0b      	ldr	r2, [pc, #44]	; (80095b0 <prvCheckTasksWaitingTermination+0x54>)
 8009582:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009584:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <prvCheckTasksWaitingTermination+0x58>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3b01      	subs	r3, #1
 800958a:	4a0a      	ldr	r2, [pc, #40]	; (80095b4 <prvCheckTasksWaitingTermination+0x58>)
 800958c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800958e:	f000 fa41 	bl	8009a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f810 	bl	80095b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009598:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <prvCheckTasksWaitingTermination+0x58>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e1      	bne.n	8009564 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20001270 	.word	0x20001270
 80095b0:	2000129c 	.word	0x2000129c
 80095b4:	20001284 	.word	0x20001284

080095b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d108      	bne.n	80095dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fb9e 	bl	8009d10 <vPortFree>
				vPortFree( pxTCB );
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fb9b 	bl	8009d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095da:	e018      	b.n	800960e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d103      	bne.n	80095ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fb92 	bl	8009d10 <vPortFree>
	}
 80095ec:	e00f      	b.n	800960e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d00a      	beq.n	800960e <prvDeleteTCB+0x56>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	60fb      	str	r3, [r7, #12]
}
 800960a:	bf00      	nop
 800960c:	e7fe      	b.n	800960c <prvDeleteTCB+0x54>
	}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <prvResetNextTaskUnblockTime+0x38>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d104      	bne.n	8009632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009628:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <prvResetNextTaskUnblockTime+0x3c>)
 800962a:	f04f 32ff 	mov.w	r2, #4294967295
 800962e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009630:	e008      	b.n	8009644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009632:	4b07      	ldr	r3, [pc, #28]	; (8009650 <prvResetNextTaskUnblockTime+0x38>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	4a04      	ldr	r2, [pc, #16]	; (8009654 <prvResetNextTaskUnblockTime+0x3c>)
 8009642:	6013      	str	r3, [r2, #0]
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	20001254 	.word	0x20001254
 8009654:	200012bc 	.word	0x200012bc

08009658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800965e:	4b0b      	ldr	r3, [pc, #44]	; (800968c <xTaskGetSchedulerState+0x34>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d102      	bne.n	800966c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009666:	2301      	movs	r3, #1
 8009668:	607b      	str	r3, [r7, #4]
 800966a:	e008      	b.n	800967e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800966c:	4b08      	ldr	r3, [pc, #32]	; (8009690 <xTaskGetSchedulerState+0x38>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d102      	bne.n	800967a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009674:	2302      	movs	r3, #2
 8009676:	607b      	str	r3, [r7, #4]
 8009678:	e001      	b.n	800967e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800967a:	2300      	movs	r3, #0
 800967c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800967e:	687b      	ldr	r3, [r7, #4]
	}
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	200012a8 	.word	0x200012a8
 8009690:	200012c4 	.word	0x200012c4

08009694 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800969e:	4b29      	ldr	r3, [pc, #164]	; (8009744 <prvAddCurrentTaskToDelayedList+0xb0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096a4:	4b28      	ldr	r3, [pc, #160]	; (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3304      	adds	r3, #4
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff faef 	bl	8008c8e <uxListRemove>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10b      	bne.n	80096ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80096b6:	4b24      	ldr	r3, [pc, #144]	; (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096bc:	2201      	movs	r2, #1
 80096be:	fa02 f303 	lsl.w	r3, r2, r3
 80096c2:	43da      	mvns	r2, r3
 80096c4:	4b21      	ldr	r3, [pc, #132]	; (800974c <prvAddCurrentTaskToDelayedList+0xb8>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4013      	ands	r3, r2
 80096ca:	4a20      	ldr	r2, [pc, #128]	; (800974c <prvAddCurrentTaskToDelayedList+0xb8>)
 80096cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d4:	d10a      	bne.n	80096ec <prvAddCurrentTaskToDelayedList+0x58>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d007      	beq.n	80096ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096dc:	4b1a      	ldr	r3, [pc, #104]	; (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3304      	adds	r3, #4
 80096e2:	4619      	mov	r1, r3
 80096e4:	481a      	ldr	r0, [pc, #104]	; (8009750 <prvAddCurrentTaskToDelayedList+0xbc>)
 80096e6:	f7ff fa75 	bl	8008bd4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096ea:	e026      	b.n	800973a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4413      	add	r3, r2
 80096f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096f4:	4b14      	ldr	r3, [pc, #80]	; (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	429a      	cmp	r2, r3
 8009702:	d209      	bcs.n	8009718 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009704:	4b13      	ldr	r3, [pc, #76]	; (8009754 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	4b0f      	ldr	r3, [pc, #60]	; (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3304      	adds	r3, #4
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f7ff fa83 	bl	8008c1c <vListInsert>
}
 8009716:	e010      	b.n	800973a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <prvAddCurrentTaskToDelayedList+0xc4>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <prvAddCurrentTaskToDelayedList+0xb4>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3304      	adds	r3, #4
 8009722:	4619      	mov	r1, r3
 8009724:	4610      	mov	r0, r2
 8009726:	f7ff fa79 	bl	8008c1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800972a:	4b0c      	ldr	r3, [pc, #48]	; (800975c <prvAddCurrentTaskToDelayedList+0xc8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	429a      	cmp	r2, r3
 8009732:	d202      	bcs.n	800973a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009734:	4a09      	ldr	r2, [pc, #36]	; (800975c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6013      	str	r3, [r2, #0]
}
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	200012a0 	.word	0x200012a0
 8009748:	2000119c 	.word	0x2000119c
 800974c:	200012a4 	.word	0x200012a4
 8009750:	20001288 	.word	0x20001288
 8009754:	20001258 	.word	0x20001258
 8009758:	20001254 	.word	0x20001254
 800975c:	200012bc 	.word	0x200012bc

08009760 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3b04      	subs	r3, #4
 8009770:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3b04      	subs	r3, #4
 800977e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	f023 0201 	bic.w	r2, r3, #1
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3b04      	subs	r3, #4
 800978e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009790:	4a0c      	ldr	r2, [pc, #48]	; (80097c4 <pxPortInitialiseStack+0x64>)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3b14      	subs	r3, #20
 800979a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3b04      	subs	r3, #4
 80097a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f06f 0202 	mvn.w	r2, #2
 80097ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	3b20      	subs	r3, #32
 80097b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097b6:	68fb      	ldr	r3, [r7, #12]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	080097c9 	.word	0x080097c9

080097c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097d2:	4b12      	ldr	r3, [pc, #72]	; (800981c <prvTaskExitError+0x54>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097da:	d00a      	beq.n	80097f2 <prvTaskExitError+0x2a>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	60fb      	str	r3, [r7, #12]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <prvTaskExitError+0x28>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	60bb      	str	r3, [r7, #8]
}
 8009804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009806:	bf00      	nop
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0fc      	beq.n	8009808 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800980e:	bf00      	nop
 8009810:	bf00      	nop
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	2000009c 	.word	0x2000009c

08009820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009820:	4b07      	ldr	r3, [pc, #28]	; (8009840 <pxCurrentTCBConst2>)
 8009822:	6819      	ldr	r1, [r3, #0]
 8009824:	6808      	ldr	r0, [r1, #0]
 8009826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982a:	f380 8809 	msr	PSP, r0
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f04f 0000 	mov.w	r0, #0
 8009836:	f380 8811 	msr	BASEPRI, r0
 800983a:	4770      	bx	lr
 800983c:	f3af 8000 	nop.w

08009840 <pxCurrentTCBConst2>:
 8009840:	2000119c 	.word	0x2000119c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009844:	bf00      	nop
 8009846:	bf00      	nop

08009848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009848:	4808      	ldr	r0, [pc, #32]	; (800986c <prvPortStartFirstTask+0x24>)
 800984a:	6800      	ldr	r0, [r0, #0]
 800984c:	6800      	ldr	r0, [r0, #0]
 800984e:	f380 8808 	msr	MSP, r0
 8009852:	f04f 0000 	mov.w	r0, #0
 8009856:	f380 8814 	msr	CONTROL, r0
 800985a:	b662      	cpsie	i
 800985c:	b661      	cpsie	f
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	df00      	svc	0
 8009868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800986a:	bf00      	nop
 800986c:	e000ed08 	.word	0xe000ed08

08009870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009876:	4b46      	ldr	r3, [pc, #280]	; (8009990 <xPortStartScheduler+0x120>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a46      	ldr	r2, [pc, #280]	; (8009994 <xPortStartScheduler+0x124>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d10a      	bne.n	8009896 <xPortStartScheduler+0x26>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	613b      	str	r3, [r7, #16]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009896:	4b3e      	ldr	r3, [pc, #248]	; (8009990 <xPortStartScheduler+0x120>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a3f      	ldr	r2, [pc, #252]	; (8009998 <xPortStartScheduler+0x128>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d10a      	bne.n	80098b6 <xPortStartScheduler+0x46>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	60fb      	str	r3, [r7, #12]
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098b6:	4b39      	ldr	r3, [pc, #228]	; (800999c <xPortStartScheduler+0x12c>)
 80098b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	22ff      	movs	r2, #255	; 0xff
 80098c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	4b31      	ldr	r3, [pc, #196]	; (80099a0 <xPortStartScheduler+0x130>)
 80098dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098de:	4b31      	ldr	r3, [pc, #196]	; (80099a4 <xPortStartScheduler+0x134>)
 80098e0:	2207      	movs	r2, #7
 80098e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098e4:	e009      	b.n	80098fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80098e6:	4b2f      	ldr	r3, [pc, #188]	; (80099a4 <xPortStartScheduler+0x134>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3b01      	subs	r3, #1
 80098ec:	4a2d      	ldr	r2, [pc, #180]	; (80099a4 <xPortStartScheduler+0x134>)
 80098ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	005b      	lsls	r3, r3, #1
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098fa:	78fb      	ldrb	r3, [r7, #3]
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009902:	2b80      	cmp	r3, #128	; 0x80
 8009904:	d0ef      	beq.n	80098e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009906:	4b27      	ldr	r3, [pc, #156]	; (80099a4 <xPortStartScheduler+0x134>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f1c3 0307 	rsb	r3, r3, #7
 800990e:	2b04      	cmp	r3, #4
 8009910:	d00a      	beq.n	8009928 <xPortStartScheduler+0xb8>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	60bb      	str	r3, [r7, #8]
}
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009928:	4b1e      	ldr	r3, [pc, #120]	; (80099a4 <xPortStartScheduler+0x134>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	021b      	lsls	r3, r3, #8
 800992e:	4a1d      	ldr	r2, [pc, #116]	; (80099a4 <xPortStartScheduler+0x134>)
 8009930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009932:	4b1c      	ldr	r3, [pc, #112]	; (80099a4 <xPortStartScheduler+0x134>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800993a:	4a1a      	ldr	r2, [pc, #104]	; (80099a4 <xPortStartScheduler+0x134>)
 800993c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	b2da      	uxtb	r2, r3
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009946:	4b18      	ldr	r3, [pc, #96]	; (80099a8 <xPortStartScheduler+0x138>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a17      	ldr	r2, [pc, #92]	; (80099a8 <xPortStartScheduler+0x138>)
 800994c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009952:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <xPortStartScheduler+0x138>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a14      	ldr	r2, [pc, #80]	; (80099a8 <xPortStartScheduler+0x138>)
 8009958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800995c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800995e:	f000 f8dd 	bl	8009b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009962:	4b12      	ldr	r3, [pc, #72]	; (80099ac <xPortStartScheduler+0x13c>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009968:	f000 f8fc 	bl	8009b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800996c:	4b10      	ldr	r3, [pc, #64]	; (80099b0 <xPortStartScheduler+0x140>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a0f      	ldr	r2, [pc, #60]	; (80099b0 <xPortStartScheduler+0x140>)
 8009972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009978:	f7ff ff66 	bl	8009848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800997c:	f7ff fd3a 	bl	80093f4 <vTaskSwitchContext>
	prvTaskExitError();
 8009980:	f7ff ff22 	bl	80097c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	e000ed00 	.word	0xe000ed00
 8009994:	410fc271 	.word	0x410fc271
 8009998:	410fc270 	.word	0x410fc270
 800999c:	e000e400 	.word	0xe000e400
 80099a0:	200012c8 	.word	0x200012c8
 80099a4:	200012cc 	.word	0x200012cc
 80099a8:	e000ed20 	.word	0xe000ed20
 80099ac:	2000009c 	.word	0x2000009c
 80099b0:	e000ef34 	.word	0xe000ef34

080099b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	607b      	str	r3, [r7, #4]
}
 80099cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099ce:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <vPortEnterCritical+0x58>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3301      	adds	r3, #1
 80099d4:	4a0d      	ldr	r2, [pc, #52]	; (8009a0c <vPortEnterCritical+0x58>)
 80099d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099d8:	4b0c      	ldr	r3, [pc, #48]	; (8009a0c <vPortEnterCritical+0x58>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d10f      	bne.n	8009a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099e0:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <vPortEnterCritical+0x5c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00a      	beq.n	8009a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	603b      	str	r3, [r7, #0]
}
 80099fc:	bf00      	nop
 80099fe:	e7fe      	b.n	80099fe <vPortEnterCritical+0x4a>
	}
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	2000009c 	.word	0x2000009c
 8009a10:	e000ed04 	.word	0xe000ed04

08009a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a1a:	4b12      	ldr	r3, [pc, #72]	; (8009a64 <vPortExitCritical+0x50>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10a      	bne.n	8009a38 <vPortExitCritical+0x24>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	607b      	str	r3, [r7, #4]
}
 8009a34:	bf00      	nop
 8009a36:	e7fe      	b.n	8009a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a38:	4b0a      	ldr	r3, [pc, #40]	; (8009a64 <vPortExitCritical+0x50>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	4a09      	ldr	r2, [pc, #36]	; (8009a64 <vPortExitCritical+0x50>)
 8009a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a42:	4b08      	ldr	r3, [pc, #32]	; (8009a64 <vPortExitCritical+0x50>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d105      	bne.n	8009a56 <vPortExitCritical+0x42>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a56:	bf00      	nop
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	2000009c 	.word	0x2000009c
	...

08009a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a70:	f3ef 8009 	mrs	r0, PSP
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	4b15      	ldr	r3, [pc, #84]	; (8009ad0 <pxCurrentTCBConst>)
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	f01e 0f10 	tst.w	lr, #16
 8009a80:	bf08      	it	eq
 8009a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8a:	6010      	str	r0, [r2, #0]
 8009a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a94:	f380 8811 	msr	BASEPRI, r0
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f7ff fca8 	bl	80093f4 <vTaskSwitchContext>
 8009aa4:	f04f 0000 	mov.w	r0, #0
 8009aa8:	f380 8811 	msr	BASEPRI, r0
 8009aac:	bc09      	pop	{r0, r3}
 8009aae:	6819      	ldr	r1, [r3, #0]
 8009ab0:	6808      	ldr	r0, [r1, #0]
 8009ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab6:	f01e 0f10 	tst.w	lr, #16
 8009aba:	bf08      	it	eq
 8009abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ac0:	f380 8809 	msr	PSP, r0
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	f3af 8000 	nop.w

08009ad0 <pxCurrentTCBConst>:
 8009ad0:	2000119c 	.word	0x2000119c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop

08009ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	607b      	str	r3, [r7, #4]
}
 8009af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009af2:	f7ff fbc7 	bl	8009284 <xTaskIncrementTick>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009afc:	4b06      	ldr	r3, [pc, #24]	; (8009b18 <xPortSysTickHandler+0x40>)
 8009afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	2300      	movs	r3, #0
 8009b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	f383 8811 	msr	BASEPRI, r3
}
 8009b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b20:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <vPortSetupTimerInterrupt+0x34>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b26:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <vPortSetupTimerInterrupt+0x38>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b2c:	4b0a      	ldr	r3, [pc, #40]	; (8009b58 <vPortSetupTimerInterrupt+0x3c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <vPortSetupTimerInterrupt+0x40>)
 8009b32:	fba2 2303 	umull	r2, r3, r2, r3
 8009b36:	099b      	lsrs	r3, r3, #6
 8009b38:	4a09      	ldr	r2, [pc, #36]	; (8009b60 <vPortSetupTimerInterrupt+0x44>)
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b3e:	4b04      	ldr	r3, [pc, #16]	; (8009b50 <vPortSetupTimerInterrupt+0x34>)
 8009b40:	2207      	movs	r2, #7
 8009b42:	601a      	str	r2, [r3, #0]
}
 8009b44:	bf00      	nop
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	e000e010 	.word	0xe000e010
 8009b54:	e000e018 	.word	0xe000e018
 8009b58:	20000004 	.word	0x20000004
 8009b5c:	10624dd3 	.word	0x10624dd3
 8009b60:	e000e014 	.word	0xe000e014

08009b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b74 <vPortEnableVFP+0x10>
 8009b68:	6801      	ldr	r1, [r0, #0]
 8009b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b6e:	6001      	str	r1, [r0, #0]
 8009b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b72:	bf00      	nop
 8009b74:	e000ed88 	.word	0xe000ed88

08009b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08a      	sub	sp, #40	; 0x28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b84:	f7ff fad4 	bl	8009130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b88:	4b5b      	ldr	r3, [pc, #364]	; (8009cf8 <pvPortMalloc+0x180>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b90:	f000 f920 	bl	8009dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b94:	4b59      	ldr	r3, [pc, #356]	; (8009cfc <pvPortMalloc+0x184>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 8093 	bne.w	8009cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01d      	beq.n	8009be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ba8:	2208      	movs	r2, #8
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d014      	beq.n	8009be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f023 0307 	bic.w	r3, r3, #7
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <pvPortMalloc+0x6c>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	617b      	str	r3, [r7, #20]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d06e      	beq.n	8009cc8 <pvPortMalloc+0x150>
 8009bea:	4b45      	ldr	r3, [pc, #276]	; (8009d00 <pvPortMalloc+0x188>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d869      	bhi.n	8009cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bf4:	4b43      	ldr	r3, [pc, #268]	; (8009d04 <pvPortMalloc+0x18c>)
 8009bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bf8:	4b42      	ldr	r3, [pc, #264]	; (8009d04 <pvPortMalloc+0x18c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bfe:	e004      	b.n	8009c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d903      	bls.n	8009c1c <pvPortMalloc+0xa4>
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1f1      	bne.n	8009c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c1c:	4b36      	ldr	r3, [pc, #216]	; (8009cf8 <pvPortMalloc+0x180>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d050      	beq.n	8009cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2208      	movs	r2, #8
 8009c2c:	4413      	add	r3, r2
 8009c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	1ad2      	subs	r2, r2, r3
 8009c40:	2308      	movs	r3, #8
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d91f      	bls.n	8009c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <pvPortMalloc+0xf8>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	613b      	str	r3, [r7, #16]
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	1ad2      	subs	r2, r2, r3
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c82:	69b8      	ldr	r0, [r7, #24]
 8009c84:	f000 f908 	bl	8009e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c88:	4b1d      	ldr	r3, [pc, #116]	; (8009d00 <pvPortMalloc+0x188>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	4a1b      	ldr	r2, [pc, #108]	; (8009d00 <pvPortMalloc+0x188>)
 8009c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c96:	4b1a      	ldr	r3, [pc, #104]	; (8009d00 <pvPortMalloc+0x188>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	4b1b      	ldr	r3, [pc, #108]	; (8009d08 <pvPortMalloc+0x190>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d203      	bcs.n	8009caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ca2:	4b17      	ldr	r3, [pc, #92]	; (8009d00 <pvPortMalloc+0x188>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a18      	ldr	r2, [pc, #96]	; (8009d08 <pvPortMalloc+0x190>)
 8009ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	4b13      	ldr	r3, [pc, #76]	; (8009cfc <pvPortMalloc+0x184>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009cbe:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <pvPortMalloc+0x194>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	4a11      	ldr	r2, [pc, #68]	; (8009d0c <pvPortMalloc+0x194>)
 8009cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cc8:	f7ff fa40 	bl	800914c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	f003 0307 	and.w	r3, r3, #7
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <pvPortMalloc+0x174>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	60fb      	str	r3, [r7, #12]
}
 8009ce8:	bf00      	nop
 8009cea:	e7fe      	b.n	8009cea <pvPortMalloc+0x172>
	return pvReturn;
 8009cec:	69fb      	ldr	r3, [r7, #28]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3728      	adds	r7, #40	; 0x28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20004ed8 	.word	0x20004ed8
 8009cfc:	20004eec 	.word	0x20004eec
 8009d00:	20004edc 	.word	0x20004edc
 8009d04:	20004ed0 	.word	0x20004ed0
 8009d08:	20004ee0 	.word	0x20004ee0
 8009d0c:	20004ee4 	.word	0x20004ee4

08009d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d04d      	beq.n	8009dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d22:	2308      	movs	r3, #8
 8009d24:	425b      	negs	r3, r3
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	4413      	add	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	4b24      	ldr	r3, [pc, #144]	; (8009dc8 <vPortFree+0xb8>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4013      	ands	r3, r2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10a      	bne.n	8009d54 <vPortFree+0x44>
	__asm volatile
 8009d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	60fb      	str	r3, [r7, #12]
}
 8009d50:	bf00      	nop
 8009d52:	e7fe      	b.n	8009d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <vPortFree+0x62>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	60bb      	str	r3, [r7, #8]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <vPortFree+0xb8>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d01e      	beq.n	8009dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d11a      	bne.n	8009dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	4b0e      	ldr	r3, [pc, #56]	; (8009dc8 <vPortFree+0xb8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	43db      	mvns	r3, r3
 8009d92:	401a      	ands	r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d98:	f7ff f9ca 	bl	8009130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <vPortFree+0xbc>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4413      	add	r3, r2
 8009da6:	4a09      	ldr	r2, [pc, #36]	; (8009dcc <vPortFree+0xbc>)
 8009da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009daa:	6938      	ldr	r0, [r7, #16]
 8009dac:	f000 f874 	bl	8009e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009db0:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <vPortFree+0xc0>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	4a06      	ldr	r2, [pc, #24]	; (8009dd0 <vPortFree+0xc0>)
 8009db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009dba:	f7ff f9c7 	bl	800914c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dbe:	bf00      	nop
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20004eec 	.word	0x20004eec
 8009dcc:	20004edc 	.word	0x20004edc
 8009dd0:	20004ee8 	.word	0x20004ee8

08009dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009de0:	4b27      	ldr	r3, [pc, #156]	; (8009e80 <prvHeapInit+0xac>)
 8009de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00c      	beq.n	8009e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3307      	adds	r3, #7
 8009df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0307 	bic.w	r3, r3, #7
 8009dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	4a1f      	ldr	r2, [pc, #124]	; (8009e80 <prvHeapInit+0xac>)
 8009e04:	4413      	add	r3, r2
 8009e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e0c:	4a1d      	ldr	r2, [pc, #116]	; (8009e84 <prvHeapInit+0xb0>)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e12:	4b1c      	ldr	r3, [pc, #112]	; (8009e84 <prvHeapInit+0xb0>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e20:	2208      	movs	r2, #8
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	1a9b      	subs	r3, r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f023 0307 	bic.w	r3, r3, #7
 8009e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4a15      	ldr	r2, [pc, #84]	; (8009e88 <prvHeapInit+0xb4>)
 8009e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e36:	4b14      	ldr	r3, [pc, #80]	; (8009e88 <prvHeapInit+0xb4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e3e:	4b12      	ldr	r3, [pc, #72]	; (8009e88 <prvHeapInit+0xb4>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e54:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <prvHeapInit+0xb4>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	4a0a      	ldr	r2, [pc, #40]	; (8009e8c <prvHeapInit+0xb8>)
 8009e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	4a09      	ldr	r2, [pc, #36]	; (8009e90 <prvHeapInit+0xbc>)
 8009e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e6c:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <prvHeapInit+0xc0>)
 8009e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e72:	601a      	str	r2, [r3, #0]
}
 8009e74:	bf00      	nop
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	200012d0 	.word	0x200012d0
 8009e84:	20004ed0 	.word	0x20004ed0
 8009e88:	20004ed8 	.word	0x20004ed8
 8009e8c:	20004ee0 	.word	0x20004ee0
 8009e90:	20004edc 	.word	0x20004edc
 8009e94:	20004eec 	.word	0x20004eec

08009e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ea0:	4b28      	ldr	r3, [pc, #160]	; (8009f44 <prvInsertBlockIntoFreeList+0xac>)
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	e002      	b.n	8009eac <prvInsertBlockIntoFreeList+0x14>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d8f7      	bhi.n	8009ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d108      	bne.n	8009eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	441a      	add	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	441a      	add	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d118      	bne.n	8009f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4b15      	ldr	r3, [pc, #84]	; (8009f48 <prvInsertBlockIntoFreeList+0xb0>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d00d      	beq.n	8009f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	441a      	add	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	e008      	b.n	8009f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f16:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <prvInsertBlockIntoFreeList+0xb0>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e003      	b.n	8009f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d002      	beq.n	8009f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f36:	bf00      	nop
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20004ed0 	.word	0x20004ed0
 8009f48:	20004ed8 	.word	0x20004ed8

08009f4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f50:	2200      	movs	r2, #0
 8009f52:	4912      	ldr	r1, [pc, #72]	; (8009f9c <MX_USB_DEVICE_Init+0x50>)
 8009f54:	4812      	ldr	r0, [pc, #72]	; (8009fa0 <MX_USB_DEVICE_Init+0x54>)
 8009f56:	f7fd fa9f 	bl	8007498 <USBD_Init>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f60:	f7f8 fd76 	bl	8002a50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f64:	490f      	ldr	r1, [pc, #60]	; (8009fa4 <MX_USB_DEVICE_Init+0x58>)
 8009f66:	480e      	ldr	r0, [pc, #56]	; (8009fa0 <MX_USB_DEVICE_Init+0x54>)
 8009f68:	f7fd fac6 	bl	80074f8 <USBD_RegisterClass>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f72:	f7f8 fd6d 	bl	8002a50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f76:	490c      	ldr	r1, [pc, #48]	; (8009fa8 <MX_USB_DEVICE_Init+0x5c>)
 8009f78:	4809      	ldr	r0, [pc, #36]	; (8009fa0 <MX_USB_DEVICE_Init+0x54>)
 8009f7a:	f7fd f9b7 	bl	80072ec <USBD_CDC_RegisterInterface>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f84:	f7f8 fd64 	bl	8002a50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f88:	4805      	ldr	r0, [pc, #20]	; (8009fa0 <MX_USB_DEVICE_Init+0x54>)
 8009f8a:	f7fd faeb 	bl	8007564 <USBD_Start>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f94:	f7f8 fd5c 	bl	8002a50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f98:	bf00      	nop
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	200000b4 	.word	0x200000b4
 8009fa0:	20004ef0 	.word	0x20004ef0
 8009fa4:	2000001c 	.word	0x2000001c
 8009fa8:	200000a0 	.word	0x200000a0

08009fac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	4905      	ldr	r1, [pc, #20]	; (8009fc8 <CDC_Init_FS+0x1c>)
 8009fb4:	4805      	ldr	r0, [pc, #20]	; (8009fcc <CDC_Init_FS+0x20>)
 8009fb6:	f7fd f9b3 	bl	8007320 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fba:	4905      	ldr	r1, [pc, #20]	; (8009fd0 <CDC_Init_FS+0x24>)
 8009fbc:	4803      	ldr	r0, [pc, #12]	; (8009fcc <CDC_Init_FS+0x20>)
 8009fbe:	f7fd f9d1 	bl	8007364 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8009fc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	200059cc 	.word	0x200059cc
 8009fcc:	20004ef0 	.word	0x20004ef0
 8009fd0:	200051cc 	.word	0x200051cc

08009fd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009fd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	4603      	mov	r3, r0
 8009fec:	6039      	str	r1, [r7, #0]
 8009fee:	71fb      	strb	r3, [r7, #7]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 8009ff4:	79fb      	ldrb	r3, [r7, #7]
 8009ff6:	2b23      	cmp	r3, #35	; 0x23
 8009ff8:	d84a      	bhi.n	800a090 <CDC_Control_FS+0xac>
 8009ffa:	a201      	add	r2, pc, #4	; (adr r2, 800a000 <CDC_Control_FS+0x1c>)
 8009ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a000:	0800a091 	.word	0x0800a091
 800a004:	0800a091 	.word	0x0800a091
 800a008:	0800a091 	.word	0x0800a091
 800a00c:	0800a091 	.word	0x0800a091
 800a010:	0800a091 	.word	0x0800a091
 800a014:	0800a091 	.word	0x0800a091
 800a018:	0800a091 	.word	0x0800a091
 800a01c:	0800a091 	.word	0x0800a091
 800a020:	0800a091 	.word	0x0800a091
 800a024:	0800a091 	.word	0x0800a091
 800a028:	0800a091 	.word	0x0800a091
 800a02c:	0800a091 	.word	0x0800a091
 800a030:	0800a091 	.word	0x0800a091
 800a034:	0800a091 	.word	0x0800a091
 800a038:	0800a091 	.word	0x0800a091
 800a03c:	0800a091 	.word	0x0800a091
 800a040:	0800a091 	.word	0x0800a091
 800a044:	0800a091 	.word	0x0800a091
 800a048:	0800a091 	.word	0x0800a091
 800a04c:	0800a091 	.word	0x0800a091
 800a050:	0800a091 	.word	0x0800a091
 800a054:	0800a091 	.word	0x0800a091
 800a058:	0800a091 	.word	0x0800a091
 800a05c:	0800a091 	.word	0x0800a091
 800a060:	0800a091 	.word	0x0800a091
 800a064:	0800a091 	.word	0x0800a091
 800a068:	0800a091 	.word	0x0800a091
 800a06c:	0800a091 	.word	0x0800a091
 800a070:	0800a091 	.word	0x0800a091
 800a074:	0800a091 	.word	0x0800a091
 800a078:	0800a091 	.word	0x0800a091
 800a07c:	0800a091 	.word	0x0800a091
 800a080:	0800a091 	.word	0x0800a091
 800a084:	0800a091 	.word	0x0800a091
 800a088:	0800a091 	.word	0x0800a091
 800a08c:	0800a091 	.word	0x0800a091
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800a090:	bf00      	nop
	}

	return (USBD_OK);
 800a092:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a094:	4618      	mov	r0, r3
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Received characters should individually be sent to the CLI
	for(int i = 0; i < *Len; i++){
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
 800a0ae:	e009      	b.n	800a0c4 <CDC_Receive_FS+0x24>
		rtos_add_rx(Buf[i]);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7f8 fbc5 	bl	8002848 <rtos_add_rx>
	for(int i = 0; i < *Len; i++){
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d8f0      	bhi.n	800a0b0 <CDC_Receive_FS+0x10>
//		cli_receive_byte(Buf[i]);
	}


	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <CDC_Receive_FS+0x48>)
 800a0d2:	f7fd f947 	bl	8007364 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0d6:	4804      	ldr	r0, [pc, #16]	; (800a0e8 <CDC_Receive_FS+0x48>)
 800a0d8:	f7fd f9a8 	bl	800742c <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 800a0dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20004ef0 	.word	0x20004ef0

0800a0ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a0fc:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <CDC_Transmit_FS+0x48>)
 800a0fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a102:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800a10e:	2301      	movs	r3, #1
 800a110:	e00b      	b.n	800a12a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a112:	887b      	ldrh	r3, [r7, #2]
 800a114:	461a      	mov	r2, r3
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	4806      	ldr	r0, [pc, #24]	; (800a134 <CDC_Transmit_FS+0x48>)
 800a11a:	f7fd f901 	bl	8007320 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a11e:	4805      	ldr	r0, [pc, #20]	; (800a134 <CDC_Transmit_FS+0x48>)
 800a120:	f7fd f93e 	bl	80073a0 <USBD_CDC_TransmitPacket>
 800a124:	4603      	mov	r3, r0
 800a126:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a128:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20004ef0 	.word	0x20004ef0

0800a138 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	4613      	mov	r3, r2
 800a144:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a14a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
	...

0800a15c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	6039      	str	r1, [r7, #0]
 800a166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2212      	movs	r2, #18
 800a16c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a16e:	4b03      	ldr	r3, [pc, #12]	; (800a17c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	200000d0 	.word	0x200000d0

0800a180 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	4603      	mov	r3, r0
 800a188:	6039      	str	r1, [r7, #0]
 800a18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2204      	movs	r2, #4
 800a190:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a192:	4b03      	ldr	r3, [pc, #12]	; (800a1a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	200000e4 	.word	0x200000e4

0800a1a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	6039      	str	r1, [r7, #0]
 800a1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1b0:	79fb      	ldrb	r3, [r7, #7]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	4907      	ldr	r1, [pc, #28]	; (800a1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1ba:	4808      	ldr	r0, [pc, #32]	; (800a1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800a1bc:	f7fe fb7e 	bl	80088bc <USBD_GetString>
 800a1c0:	e004      	b.n	800a1cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	4904      	ldr	r1, [pc, #16]	; (800a1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1c6:	4805      	ldr	r0, [pc, #20]	; (800a1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800a1c8:	f7fe fb78 	bl	80088bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1cc:	4b02      	ldr	r3, [pc, #8]	; (800a1d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	200061cc 	.word	0x200061cc
 800a1dc:	0800dab0 	.word	0x0800dab0

0800a1e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	6039      	str	r1, [r7, #0]
 800a1ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	4904      	ldr	r1, [pc, #16]	; (800a200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1f0:	4804      	ldr	r0, [pc, #16]	; (800a204 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1f2:	f7fe fb63 	bl	80088bc <USBD_GetString>
  return USBD_StrDesc;
 800a1f6:	4b02      	ldr	r3, [pc, #8]	; (800a200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	200061cc 	.word	0x200061cc
 800a204:	0800dac8 	.word	0x0800dac8

0800a208 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	6039      	str	r1, [r7, #0]
 800a212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	221a      	movs	r2, #26
 800a218:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a21a:	f000 f843 	bl	800a2a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a21e:	4b02      	ldr	r3, [pc, #8]	; (800a228 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	200000e8 	.word	0x200000e8

0800a22c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	6039      	str	r1, [r7, #0]
 800a236:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d105      	bne.n	800a24a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	4907      	ldr	r1, [pc, #28]	; (800a260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a242:	4808      	ldr	r0, [pc, #32]	; (800a264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a244:	f7fe fb3a 	bl	80088bc <USBD_GetString>
 800a248:	e004      	b.n	800a254 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	4904      	ldr	r1, [pc, #16]	; (800a260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a24e:	4805      	ldr	r0, [pc, #20]	; (800a264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a250:	f7fe fb34 	bl	80088bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a254:	4b02      	ldr	r3, [pc, #8]	; (800a260 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	200061cc 	.word	0x200061cc
 800a264:	0800dadc 	.word	0x0800dadc

0800a268 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	6039      	str	r1, [r7, #0]
 800a272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d105      	bne.n	800a286 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4907      	ldr	r1, [pc, #28]	; (800a29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a27e:	4808      	ldr	r0, [pc, #32]	; (800a2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a280:	f7fe fb1c 	bl	80088bc <USBD_GetString>
 800a284:	e004      	b.n	800a290 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	4904      	ldr	r1, [pc, #16]	; (800a29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a28a:	4805      	ldr	r0, [pc, #20]	; (800a2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a28c:	f7fe fb16 	bl	80088bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a290:	4b02      	ldr	r3, [pc, #8]	; (800a29c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	200061cc 	.word	0x200061cc
 800a2a0:	0800dae8 	.word	0x0800dae8

0800a2a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a2aa:	4b0f      	ldr	r3, [pc, #60]	; (800a2e8 <Get_SerialNum+0x44>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a2b0:	4b0e      	ldr	r3, [pc, #56]	; (800a2ec <Get_SerialNum+0x48>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a2b6:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <Get_SerialNum+0x4c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d009      	beq.n	800a2de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2ca:	2208      	movs	r2, #8
 800a2cc:	4909      	ldr	r1, [pc, #36]	; (800a2f4 <Get_SerialNum+0x50>)
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f000 f814 	bl	800a2fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2d4:	2204      	movs	r2, #4
 800a2d6:	4908      	ldr	r1, [pc, #32]	; (800a2f8 <Get_SerialNum+0x54>)
 800a2d8:	68b8      	ldr	r0, [r7, #8]
 800a2da:	f000 f80f 	bl	800a2fc <IntToUnicode>
  }
}
 800a2de:	bf00      	nop
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	1fff7a10 	.word	0x1fff7a10
 800a2ec:	1fff7a14 	.word	0x1fff7a14
 800a2f0:	1fff7a18 	.word	0x1fff7a18
 800a2f4:	200000ea 	.word	0x200000ea
 800a2f8:	200000fa 	.word	0x200000fa

0800a2fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b087      	sub	sp, #28
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4613      	mov	r3, r2
 800a308:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a30e:	2300      	movs	r3, #0
 800a310:	75fb      	strb	r3, [r7, #23]
 800a312:	e027      	b.n	800a364 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	0f1b      	lsrs	r3, r3, #28
 800a318:	2b09      	cmp	r3, #9
 800a31a:	d80b      	bhi.n	800a334 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	0f1b      	lsrs	r3, r3, #28
 800a320:	b2da      	uxtb	r2, r3
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	4619      	mov	r1, r3
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	440b      	add	r3, r1
 800a32c:	3230      	adds	r2, #48	; 0x30
 800a32e:	b2d2      	uxtb	r2, r2
 800a330:	701a      	strb	r2, [r3, #0]
 800a332:	e00a      	b.n	800a34a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	0f1b      	lsrs	r3, r3, #28
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
 800a33c:	005b      	lsls	r3, r3, #1
 800a33e:	4619      	mov	r1, r3
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	440b      	add	r3, r1
 800a344:	3237      	adds	r2, #55	; 0x37
 800a346:	b2d2      	uxtb	r2, r2
 800a348:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	011b      	lsls	r3, r3, #4
 800a34e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a350:	7dfb      	ldrb	r3, [r7, #23]
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	3301      	adds	r3, #1
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	4413      	add	r3, r2
 800a35a:	2200      	movs	r2, #0
 800a35c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a35e:	7dfb      	ldrb	r3, [r7, #23]
 800a360:	3301      	adds	r3, #1
 800a362:	75fb      	strb	r3, [r7, #23]
 800a364:	7dfa      	ldrb	r2, [r7, #23]
 800a366:	79fb      	ldrb	r3, [r7, #7]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d3d3      	bcc.n	800a314 <IntToUnicode+0x18>
  }
}
 800a36c:	bf00      	nop
 800a36e:	bf00      	nop
 800a370:	371c      	adds	r7, #28
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
	...

0800a37c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08a      	sub	sp, #40	; 0x28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a384:	f107 0314 	add.w	r3, r7, #20
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	605a      	str	r2, [r3, #4]
 800a38e:	609a      	str	r2, [r3, #8]
 800a390:	60da      	str	r2, [r3, #12]
 800a392:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a39c:	d13a      	bne.n	800a414 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a39e:	2300      	movs	r3, #0
 800a3a0:	613b      	str	r3, [r7, #16]
 800a3a2:	4b1e      	ldr	r3, [pc, #120]	; (800a41c <HAL_PCD_MspInit+0xa0>)
 800a3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a6:	4a1d      	ldr	r2, [pc, #116]	; (800a41c <HAL_PCD_MspInit+0xa0>)
 800a3a8:	f043 0301 	orr.w	r3, r3, #1
 800a3ac:	6313      	str	r3, [r2, #48]	; 0x30
 800a3ae:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <HAL_PCD_MspInit+0xa0>)
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	613b      	str	r3, [r7, #16]
 800a3b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a3ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a3be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3cc:	230a      	movs	r3, #10
 800a3ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3d0:	f107 0314 	add.w	r3, r7, #20
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4812      	ldr	r0, [pc, #72]	; (800a420 <HAL_PCD_MspInit+0xa4>)
 800a3d8:	f7f8 fe58 	bl	800308c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <HAL_PCD_MspInit+0xa0>)
 800a3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e0:	4a0e      	ldr	r2, [pc, #56]	; (800a41c <HAL_PCD_MspInit+0xa0>)
 800a3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e6:	6353      	str	r3, [r2, #52]	; 0x34
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <HAL_PCD_MspInit+0xa0>)
 800a3ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3f0:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <HAL_PCD_MspInit+0xa0>)
 800a3f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3f6:	6453      	str	r3, [r2, #68]	; 0x44
 800a3f8:	4b08      	ldr	r3, [pc, #32]	; (800a41c <HAL_PCD_MspInit+0xa0>)
 800a3fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a404:	2200      	movs	r2, #0
 800a406:	2105      	movs	r1, #5
 800a408:	2043      	movs	r0, #67	; 0x43
 800a40a:	f7f8 fe08 	bl	800301e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a40e:	2043      	movs	r0, #67	; 0x43
 800a410:	f7f8 fe21 	bl	8003056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a414:	bf00      	nop
 800a416:	3728      	adds	r7, #40	; 0x28
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	40023800 	.word	0x40023800
 800a420:	40020000 	.word	0x40020000

0800a424 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a438:	4619      	mov	r1, r3
 800a43a:	4610      	mov	r0, r2
 800a43c:	f7fd f8df 	bl	80075fe <USBD_LL_SetupStage>
}
 800a440:	bf00      	nop
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a45a:	78fa      	ldrb	r2, [r7, #3]
 800a45c:	6879      	ldr	r1, [r7, #4]
 800a45e:	4613      	mov	r3, r2
 800a460:	00db      	lsls	r3, r3, #3
 800a462:	4413      	add	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	440b      	add	r3, r1
 800a468:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	4619      	mov	r1, r3
 800a472:	f7fd f919 	bl	80076a8 <USBD_LL_DataOutStage>
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	460b      	mov	r3, r1
 800a488:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a490:	78fa      	ldrb	r2, [r7, #3]
 800a492:	6879      	ldr	r1, [r7, #4]
 800a494:	4613      	mov	r3, r2
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	4413      	add	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	440b      	add	r3, r1
 800a49e:	334c      	adds	r3, #76	; 0x4c
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	78fb      	ldrb	r3, [r7, #3]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	f7fd f9b2 	bl	800780e <USBD_LL_DataInStage>
}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fd fae6 	bl	8007a92 <USBD_LL_SOF>
}
 800a4c6:	bf00      	nop
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d001      	beq.n	800a4e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a4e2:	f7f8 fab5 	bl	8002a50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4ec:	7bfa      	ldrb	r2, [r7, #15]
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fd fa90 	bl	8007a16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fd fa38 	bl	8007972 <USBD_LL_Reset>
}
 800a502:	bf00      	nop
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fd fa8b 	bl	8007a36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	6812      	ldr	r2, [r2, #0]
 800a52e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a532:	f043 0301 	orr.w	r3, r3, #1
 800a536:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d005      	beq.n	800a54c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a540:	4b04      	ldr	r3, [pc, #16]	; (800a554 <HAL_PCD_SuspendCallback+0x48>)
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	4a03      	ldr	r2, [pc, #12]	; (800a554 <HAL_PCD_SuspendCallback+0x48>)
 800a546:	f043 0306 	orr.w	r3, r3, #6
 800a54a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	e000ed00 	.word	0xe000ed00

0800a558 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a566:	4618      	mov	r0, r3
 800a568:	f7fd fa7b 	bl	8007a62 <USBD_LL_Resume>
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	4611      	mov	r1, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fd fad3 	bl	8007b36 <USBD_LL_IsoOUTIncomplete>
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5aa:	78fa      	ldrb	r2, [r7, #3]
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fd fa8f 	bl	8007ad2 <USBD_LL_IsoINIncomplete>
}
 800a5b4:	bf00      	nop
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fd fae5 	bl	8007b9a <USBD_LL_DevConnected>
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fd fae2 	bl	8007bb0 <USBD_LL_DevDisconnected>
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d13c      	bne.n	800a67e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a604:	4a20      	ldr	r2, [pc, #128]	; (800a688 <USBD_LL_Init+0x94>)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a1e      	ldr	r2, [pc, #120]	; (800a688 <USBD_LL_Init+0x94>)
 800a610:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a614:	4b1c      	ldr	r3, [pc, #112]	; (800a688 <USBD_LL_Init+0x94>)
 800a616:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a61a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a61c:	4b1a      	ldr	r3, [pc, #104]	; (800a688 <USBD_LL_Init+0x94>)
 800a61e:	2204      	movs	r2, #4
 800a620:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a622:	4b19      	ldr	r3, [pc, #100]	; (800a688 <USBD_LL_Init+0x94>)
 800a624:	2202      	movs	r2, #2
 800a626:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a628:	4b17      	ldr	r3, [pc, #92]	; (800a688 <USBD_LL_Init+0x94>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a62e:	4b16      	ldr	r3, [pc, #88]	; (800a688 <USBD_LL_Init+0x94>)
 800a630:	2202      	movs	r2, #2
 800a632:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a634:	4b14      	ldr	r3, [pc, #80]	; (800a688 <USBD_LL_Init+0x94>)
 800a636:	2200      	movs	r2, #0
 800a638:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a63a:	4b13      	ldr	r3, [pc, #76]	; (800a688 <USBD_LL_Init+0x94>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a640:	4b11      	ldr	r3, [pc, #68]	; (800a688 <USBD_LL_Init+0x94>)
 800a642:	2200      	movs	r2, #0
 800a644:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a646:	4b10      	ldr	r3, [pc, #64]	; (800a688 <USBD_LL_Init+0x94>)
 800a648:	2200      	movs	r2, #0
 800a64a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a64c:	4b0e      	ldr	r3, [pc, #56]	; (800a688 <USBD_LL_Init+0x94>)
 800a64e:	2200      	movs	r2, #0
 800a650:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a652:	480d      	ldr	r0, [pc, #52]	; (800a688 <USBD_LL_Init+0x94>)
 800a654:	f7f8 feea 	bl	800342c <HAL_PCD_Init>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a65e:	f7f8 f9f7 	bl	8002a50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a662:	2180      	movs	r1, #128	; 0x80
 800a664:	4808      	ldr	r0, [pc, #32]	; (800a688 <USBD_LL_Init+0x94>)
 800a666:	f7fa f942 	bl	80048ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a66a:	2240      	movs	r2, #64	; 0x40
 800a66c:	2100      	movs	r1, #0
 800a66e:	4806      	ldr	r0, [pc, #24]	; (800a688 <USBD_LL_Init+0x94>)
 800a670:	f7fa f8f6 	bl	8004860 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a674:	2280      	movs	r2, #128	; 0x80
 800a676:	2101      	movs	r1, #1
 800a678:	4803      	ldr	r0, [pc, #12]	; (800a688 <USBD_LL_Init+0x94>)
 800a67a:	f7fa f8f1 	bl	8004860 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	200063cc 	.word	0x200063cc

0800a68c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7f8 ffdf 	bl	8003666 <HAL_PCD_Start>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 f942 	bl	800a938 <USBD_Get_USB_Status>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	70fb      	strb	r3, [r7, #3]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70bb      	strb	r3, [r7, #2]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a6ea:	78bb      	ldrb	r3, [r7, #2]
 800a6ec:	883a      	ldrh	r2, [r7, #0]
 800a6ee:	78f9      	ldrb	r1, [r7, #3]
 800a6f0:	f7f9 fcb0 	bl	8004054 <HAL_PCD_EP_Open>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 f91c 	bl	800a938 <USBD_Get_USB_Status>
 800a700:	4603      	mov	r3, r0
 800a702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a704:	7bbb      	ldrb	r3, [r7, #14]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	460b      	mov	r3, r1
 800a718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a728:	78fa      	ldrb	r2, [r7, #3]
 800a72a:	4611      	mov	r1, r2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7f9 fcf9 	bl	8004124 <HAL_PCD_EP_Close>
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 f8fd 	bl	800a938 <USBD_Get_USB_Status>
 800a73e:	4603      	mov	r3, r0
 800a740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a742:	7bbb      	ldrb	r3, [r7, #14]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a766:	78fa      	ldrb	r2, [r7, #3]
 800a768:	4611      	mov	r1, r2
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7f9 fdd1 	bl	8004312 <HAL_PCD_EP_SetStall>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 f8de 	bl	800a938 <USBD_Get_USB_Status>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a780:	7bbb      	ldrb	r3, [r7, #14]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7a4:	78fa      	ldrb	r2, [r7, #3]
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7f9 fe16 	bl	80043da <HAL_PCD_EP_ClrStall>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 f8bf 	bl	800a938 <USBD_Get_USB_Status>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	da0b      	bge.n	800a7fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7ea:	68f9      	ldr	r1, [r7, #12]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	4413      	add	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	440b      	add	r3, r1
 800a7f6:	333e      	adds	r3, #62	; 0x3e
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	e00b      	b.n	800a814 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	4613      	mov	r3, r2
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	4413      	add	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	440b      	add	r3, r1
 800a80e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a812:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a83a:	78fa      	ldrb	r2, [r7, #3]
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f7f9 fbe3 	bl	800400a <HAL_PCD_SetAddress>
 800a844:	4603      	mov	r3, r0
 800a846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 f874 	bl	800a938 <USBD_Get_USB_Status>
 800a850:	4603      	mov	r3, r0
 800a852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a854:	7bbb      	ldrb	r3, [r7, #14]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b086      	sub	sp, #24
 800a862:	af00      	add	r7, sp, #0
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	607a      	str	r2, [r7, #4]
 800a868:	603b      	str	r3, [r7, #0]
 800a86a:	460b      	mov	r3, r1
 800a86c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a87c:	7af9      	ldrb	r1, [r7, #11]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	f7f9 fcfc 	bl	800427e <HAL_PCD_EP_Transmit>
 800a886:	4603      	mov	r3, r0
 800a888:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a88a:	7dfb      	ldrb	r3, [r7, #23]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 f853 	bl	800a938 <USBD_Get_USB_Status>
 800a892:	4603      	mov	r3, r0
 800a894:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a896:	7dbb      	ldrb	r3, [r7, #22]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	607a      	str	r2, [r7, #4]
 800a8aa:	603b      	str	r3, [r7, #0]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a8be:	7af9      	ldrb	r1, [r7, #11]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	f7f9 fc78 	bl	80041b8 <HAL_PCD_EP_Receive>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f832 	bl	800a938 <USBD_Get_USB_Status>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8f4:	78fa      	ldrb	r2, [r7, #3]
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7f9 fca8 	bl	800424e <HAL_PCD_EP_GetRxCount>
 800a8fe:	4603      	mov	r3, r0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a910:	4b03      	ldr	r3, [pc, #12]	; (800a920 <USBD_static_malloc+0x18>)
}
 800a912:	4618      	mov	r0, r3
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	200068d8 	.word	0x200068d8

0800a924 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]

}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	4603      	mov	r3, r0
 800a940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	2b03      	cmp	r3, #3
 800a94a:	d817      	bhi.n	800a97c <USBD_Get_USB_Status+0x44>
 800a94c:	a201      	add	r2, pc, #4	; (adr r2, 800a954 <USBD_Get_USB_Status+0x1c>)
 800a94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a952:	bf00      	nop
 800a954:	0800a965 	.word	0x0800a965
 800a958:	0800a96b 	.word	0x0800a96b
 800a95c:	0800a971 	.word	0x0800a971
 800a960:	0800a977 	.word	0x0800a977
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	73fb      	strb	r3, [r7, #15]
    break;
 800a968:	e00b      	b.n	800a982 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a96a:	2303      	movs	r3, #3
 800a96c:	73fb      	strb	r3, [r7, #15]
    break;
 800a96e:	e008      	b.n	800a982 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a970:	2301      	movs	r3, #1
 800a972:	73fb      	strb	r3, [r7, #15]
    break;
 800a974:	e005      	b.n	800a982 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a976:	2303      	movs	r3, #3
 800a978:	73fb      	strb	r3, [r7, #15]
    break;
 800a97a:	e002      	b.n	800a982 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a97c:	2303      	movs	r3, #3
 800a97e:	73fb      	strb	r3, [r7, #15]
    break;
 800a980:	bf00      	nop
  }
  return usb_status;
 800a982:	7bfb      	ldrb	r3, [r7, #15]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <malloc>:
 800a990:	4b02      	ldr	r3, [pc, #8]	; (800a99c <malloc+0xc>)
 800a992:	4601      	mov	r1, r0
 800a994:	6818      	ldr	r0, [r3, #0]
 800a996:	f000 b823 	b.w	800a9e0 <_malloc_r>
 800a99a:	bf00      	nop
 800a99c:	2000015c 	.word	0x2000015c

0800a9a0 <sbrk_aligned>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	4e0e      	ldr	r6, [pc, #56]	; (800a9dc <sbrk_aligned+0x3c>)
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	6831      	ldr	r1, [r6, #0]
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	b911      	cbnz	r1, 800a9b2 <sbrk_aligned+0x12>
 800a9ac:	f000 ffc2 	bl	800b934 <_sbrk_r>
 800a9b0:	6030      	str	r0, [r6, #0]
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	f000 ffbd 	bl	800b934 <_sbrk_r>
 800a9ba:	1c43      	adds	r3, r0, #1
 800a9bc:	d00a      	beq.n	800a9d4 <sbrk_aligned+0x34>
 800a9be:	1cc4      	adds	r4, r0, #3
 800a9c0:	f024 0403 	bic.w	r4, r4, #3
 800a9c4:	42a0      	cmp	r0, r4
 800a9c6:	d007      	beq.n	800a9d8 <sbrk_aligned+0x38>
 800a9c8:	1a21      	subs	r1, r4, r0
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	f000 ffb2 	bl	800b934 <_sbrk_r>
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	d101      	bne.n	800a9d8 <sbrk_aligned+0x38>
 800a9d4:	f04f 34ff 	mov.w	r4, #4294967295
 800a9d8:	4620      	mov	r0, r4
 800a9da:	bd70      	pop	{r4, r5, r6, pc}
 800a9dc:	20006afc 	.word	0x20006afc

0800a9e0 <_malloc_r>:
 800a9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e4:	1ccd      	adds	r5, r1, #3
 800a9e6:	f025 0503 	bic.w	r5, r5, #3
 800a9ea:	3508      	adds	r5, #8
 800a9ec:	2d0c      	cmp	r5, #12
 800a9ee:	bf38      	it	cc
 800a9f0:	250c      	movcc	r5, #12
 800a9f2:	2d00      	cmp	r5, #0
 800a9f4:	4607      	mov	r7, r0
 800a9f6:	db01      	blt.n	800a9fc <_malloc_r+0x1c>
 800a9f8:	42a9      	cmp	r1, r5
 800a9fa:	d905      	bls.n	800aa08 <_malloc_r+0x28>
 800a9fc:	230c      	movs	r3, #12
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	2600      	movs	r6, #0
 800aa02:	4630      	mov	r0, r6
 800aa04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aadc <_malloc_r+0xfc>
 800aa0c:	f000 f868 	bl	800aae0 <__malloc_lock>
 800aa10:	f8d8 3000 	ldr.w	r3, [r8]
 800aa14:	461c      	mov	r4, r3
 800aa16:	bb5c      	cbnz	r4, 800aa70 <_malloc_r+0x90>
 800aa18:	4629      	mov	r1, r5
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	f7ff ffc0 	bl	800a9a0 <sbrk_aligned>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	4604      	mov	r4, r0
 800aa24:	d155      	bne.n	800aad2 <_malloc_r+0xf2>
 800aa26:	f8d8 4000 	ldr.w	r4, [r8]
 800aa2a:	4626      	mov	r6, r4
 800aa2c:	2e00      	cmp	r6, #0
 800aa2e:	d145      	bne.n	800aabc <_malloc_r+0xdc>
 800aa30:	2c00      	cmp	r4, #0
 800aa32:	d048      	beq.n	800aac6 <_malloc_r+0xe6>
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	4631      	mov	r1, r6
 800aa38:	4638      	mov	r0, r7
 800aa3a:	eb04 0903 	add.w	r9, r4, r3
 800aa3e:	f000 ff79 	bl	800b934 <_sbrk_r>
 800aa42:	4581      	cmp	r9, r0
 800aa44:	d13f      	bne.n	800aac6 <_malloc_r+0xe6>
 800aa46:	6821      	ldr	r1, [r4, #0]
 800aa48:	1a6d      	subs	r5, r5, r1
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f7ff ffa7 	bl	800a9a0 <sbrk_aligned>
 800aa52:	3001      	adds	r0, #1
 800aa54:	d037      	beq.n	800aac6 <_malloc_r+0xe6>
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	442b      	add	r3, r5
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d038      	beq.n	800aad6 <_malloc_r+0xf6>
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	42a2      	cmp	r2, r4
 800aa68:	d12b      	bne.n	800aac2 <_malloc_r+0xe2>
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	605a      	str	r2, [r3, #4]
 800aa6e:	e00f      	b.n	800aa90 <_malloc_r+0xb0>
 800aa70:	6822      	ldr	r2, [r4, #0]
 800aa72:	1b52      	subs	r2, r2, r5
 800aa74:	d41f      	bmi.n	800aab6 <_malloc_r+0xd6>
 800aa76:	2a0b      	cmp	r2, #11
 800aa78:	d917      	bls.n	800aaaa <_malloc_r+0xca>
 800aa7a:	1961      	adds	r1, r4, r5
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	6025      	str	r5, [r4, #0]
 800aa80:	bf18      	it	ne
 800aa82:	6059      	strne	r1, [r3, #4]
 800aa84:	6863      	ldr	r3, [r4, #4]
 800aa86:	bf08      	it	eq
 800aa88:	f8c8 1000 	streq.w	r1, [r8]
 800aa8c:	5162      	str	r2, [r4, r5]
 800aa8e:	604b      	str	r3, [r1, #4]
 800aa90:	4638      	mov	r0, r7
 800aa92:	f104 060b 	add.w	r6, r4, #11
 800aa96:	f000 f829 	bl	800aaec <__malloc_unlock>
 800aa9a:	f026 0607 	bic.w	r6, r6, #7
 800aa9e:	1d23      	adds	r3, r4, #4
 800aaa0:	1af2      	subs	r2, r6, r3
 800aaa2:	d0ae      	beq.n	800aa02 <_malloc_r+0x22>
 800aaa4:	1b9b      	subs	r3, r3, r6
 800aaa6:	50a3      	str	r3, [r4, r2]
 800aaa8:	e7ab      	b.n	800aa02 <_malloc_r+0x22>
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	6862      	ldr	r2, [r4, #4]
 800aaae:	d1dd      	bne.n	800aa6c <_malloc_r+0x8c>
 800aab0:	f8c8 2000 	str.w	r2, [r8]
 800aab4:	e7ec      	b.n	800aa90 <_malloc_r+0xb0>
 800aab6:	4623      	mov	r3, r4
 800aab8:	6864      	ldr	r4, [r4, #4]
 800aaba:	e7ac      	b.n	800aa16 <_malloc_r+0x36>
 800aabc:	4634      	mov	r4, r6
 800aabe:	6876      	ldr	r6, [r6, #4]
 800aac0:	e7b4      	b.n	800aa2c <_malloc_r+0x4c>
 800aac2:	4613      	mov	r3, r2
 800aac4:	e7cc      	b.n	800aa60 <_malloc_r+0x80>
 800aac6:	230c      	movs	r3, #12
 800aac8:	603b      	str	r3, [r7, #0]
 800aaca:	4638      	mov	r0, r7
 800aacc:	f000 f80e 	bl	800aaec <__malloc_unlock>
 800aad0:	e797      	b.n	800aa02 <_malloc_r+0x22>
 800aad2:	6025      	str	r5, [r4, #0]
 800aad4:	e7dc      	b.n	800aa90 <_malloc_r+0xb0>
 800aad6:	605b      	str	r3, [r3, #4]
 800aad8:	deff      	udf	#255	; 0xff
 800aada:	bf00      	nop
 800aadc:	20006af8 	.word	0x20006af8

0800aae0 <__malloc_lock>:
 800aae0:	4801      	ldr	r0, [pc, #4]	; (800aae8 <__malloc_lock+0x8>)
 800aae2:	f000 bf74 	b.w	800b9ce <__retarget_lock_acquire_recursive>
 800aae6:	bf00      	nop
 800aae8:	20006c40 	.word	0x20006c40

0800aaec <__malloc_unlock>:
 800aaec:	4801      	ldr	r0, [pc, #4]	; (800aaf4 <__malloc_unlock+0x8>)
 800aaee:	f000 bf6f 	b.w	800b9d0 <__retarget_lock_release_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	20006c40 	.word	0x20006c40

0800aaf8 <__cvt>:
 800aaf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aafc:	ec55 4b10 	vmov	r4, r5, d0
 800ab00:	2d00      	cmp	r5, #0
 800ab02:	460e      	mov	r6, r1
 800ab04:	4619      	mov	r1, r3
 800ab06:	462b      	mov	r3, r5
 800ab08:	bfbb      	ittet	lt
 800ab0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab0e:	461d      	movlt	r5, r3
 800ab10:	2300      	movge	r3, #0
 800ab12:	232d      	movlt	r3, #45	; 0x2d
 800ab14:	700b      	strb	r3, [r1, #0]
 800ab16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab1c:	4691      	mov	r9, r2
 800ab1e:	f023 0820 	bic.w	r8, r3, #32
 800ab22:	bfbc      	itt	lt
 800ab24:	4622      	movlt	r2, r4
 800ab26:	4614      	movlt	r4, r2
 800ab28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab2c:	d005      	beq.n	800ab3a <__cvt+0x42>
 800ab2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab32:	d100      	bne.n	800ab36 <__cvt+0x3e>
 800ab34:	3601      	adds	r6, #1
 800ab36:	2102      	movs	r1, #2
 800ab38:	e000      	b.n	800ab3c <__cvt+0x44>
 800ab3a:	2103      	movs	r1, #3
 800ab3c:	ab03      	add	r3, sp, #12
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	ab02      	add	r3, sp, #8
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	ec45 4b10 	vmov	d0, r4, r5
 800ab48:	4653      	mov	r3, sl
 800ab4a:	4632      	mov	r2, r6
 800ab4c:	f000 ffd8 	bl	800bb00 <_dtoa_r>
 800ab50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab54:	4607      	mov	r7, r0
 800ab56:	d102      	bne.n	800ab5e <__cvt+0x66>
 800ab58:	f019 0f01 	tst.w	r9, #1
 800ab5c:	d022      	beq.n	800aba4 <__cvt+0xac>
 800ab5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab62:	eb07 0906 	add.w	r9, r7, r6
 800ab66:	d110      	bne.n	800ab8a <__cvt+0x92>
 800ab68:	783b      	ldrb	r3, [r7, #0]
 800ab6a:	2b30      	cmp	r3, #48	; 0x30
 800ab6c:	d10a      	bne.n	800ab84 <__cvt+0x8c>
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2300      	movs	r3, #0
 800ab72:	4620      	mov	r0, r4
 800ab74:	4629      	mov	r1, r5
 800ab76:	f7f5 ffbf 	bl	8000af8 <__aeabi_dcmpeq>
 800ab7a:	b918      	cbnz	r0, 800ab84 <__cvt+0x8c>
 800ab7c:	f1c6 0601 	rsb	r6, r6, #1
 800ab80:	f8ca 6000 	str.w	r6, [sl]
 800ab84:	f8da 3000 	ldr.w	r3, [sl]
 800ab88:	4499      	add	r9, r3
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	4620      	mov	r0, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	f7f5 ffb1 	bl	8000af8 <__aeabi_dcmpeq>
 800ab96:	b108      	cbz	r0, 800ab9c <__cvt+0xa4>
 800ab98:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab9c:	2230      	movs	r2, #48	; 0x30
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	454b      	cmp	r3, r9
 800aba2:	d307      	bcc.n	800abb4 <__cvt+0xbc>
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aba8:	1bdb      	subs	r3, r3, r7
 800abaa:	4638      	mov	r0, r7
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	b004      	add	sp, #16
 800abb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb4:	1c59      	adds	r1, r3, #1
 800abb6:	9103      	str	r1, [sp, #12]
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	e7f0      	b.n	800ab9e <__cvt+0xa6>

0800abbc <__exponent>:
 800abbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abbe:	4603      	mov	r3, r0
 800abc0:	2900      	cmp	r1, #0
 800abc2:	bfb8      	it	lt
 800abc4:	4249      	neglt	r1, r1
 800abc6:	f803 2b02 	strb.w	r2, [r3], #2
 800abca:	bfb4      	ite	lt
 800abcc:	222d      	movlt	r2, #45	; 0x2d
 800abce:	222b      	movge	r2, #43	; 0x2b
 800abd0:	2909      	cmp	r1, #9
 800abd2:	7042      	strb	r2, [r0, #1]
 800abd4:	dd2a      	ble.n	800ac2c <__exponent+0x70>
 800abd6:	f10d 0207 	add.w	r2, sp, #7
 800abda:	4617      	mov	r7, r2
 800abdc:	260a      	movs	r6, #10
 800abde:	4694      	mov	ip, r2
 800abe0:	fb91 f5f6 	sdiv	r5, r1, r6
 800abe4:	fb06 1415 	mls	r4, r6, r5, r1
 800abe8:	3430      	adds	r4, #48	; 0x30
 800abea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800abee:	460c      	mov	r4, r1
 800abf0:	2c63      	cmp	r4, #99	; 0x63
 800abf2:	f102 32ff 	add.w	r2, r2, #4294967295
 800abf6:	4629      	mov	r1, r5
 800abf8:	dcf1      	bgt.n	800abde <__exponent+0x22>
 800abfa:	3130      	adds	r1, #48	; 0x30
 800abfc:	f1ac 0402 	sub.w	r4, ip, #2
 800ac00:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ac04:	1c41      	adds	r1, r0, #1
 800ac06:	4622      	mov	r2, r4
 800ac08:	42ba      	cmp	r2, r7
 800ac0a:	d30a      	bcc.n	800ac22 <__exponent+0x66>
 800ac0c:	f10d 0209 	add.w	r2, sp, #9
 800ac10:	eba2 020c 	sub.w	r2, r2, ip
 800ac14:	42bc      	cmp	r4, r7
 800ac16:	bf88      	it	hi
 800ac18:	2200      	movhi	r2, #0
 800ac1a:	4413      	add	r3, r2
 800ac1c:	1a18      	subs	r0, r3, r0
 800ac1e:	b003      	add	sp, #12
 800ac20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac22:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ac26:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ac2a:	e7ed      	b.n	800ac08 <__exponent+0x4c>
 800ac2c:	2330      	movs	r3, #48	; 0x30
 800ac2e:	3130      	adds	r1, #48	; 0x30
 800ac30:	7083      	strb	r3, [r0, #2]
 800ac32:	70c1      	strb	r1, [r0, #3]
 800ac34:	1d03      	adds	r3, r0, #4
 800ac36:	e7f1      	b.n	800ac1c <__exponent+0x60>

0800ac38 <_printf_float>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	ed2d 8b02 	vpush	{d8}
 800ac40:	b08d      	sub	sp, #52	; 0x34
 800ac42:	460c      	mov	r4, r1
 800ac44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac48:	4616      	mov	r6, r2
 800ac4a:	461f      	mov	r7, r3
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	f000 fe39 	bl	800b8c4 <_localeconv_r>
 800ac52:	f8d0 a000 	ldr.w	sl, [r0]
 800ac56:	4650      	mov	r0, sl
 800ac58:	f7f5 fb22 	bl	80002a0 <strlen>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	9305      	str	r3, [sp, #20]
 800ac64:	f8d8 3000 	ldr.w	r3, [r8]
 800ac68:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac6c:	3307      	adds	r3, #7
 800ac6e:	f023 0307 	bic.w	r3, r3, #7
 800ac72:	f103 0208 	add.w	r2, r3, #8
 800ac76:	f8c8 2000 	str.w	r2, [r8]
 800ac7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac82:	9307      	str	r3, [sp, #28]
 800ac84:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac88:	ee08 0a10 	vmov	s16, r0
 800ac8c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ac90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac94:	4b9e      	ldr	r3, [pc, #632]	; (800af10 <_printf_float+0x2d8>)
 800ac96:	f04f 32ff 	mov.w	r2, #4294967295
 800ac9a:	f7f5 ff5f 	bl	8000b5c <__aeabi_dcmpun>
 800ac9e:	bb88      	cbnz	r0, 800ad04 <_printf_float+0xcc>
 800aca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aca4:	4b9a      	ldr	r3, [pc, #616]	; (800af10 <_printf_float+0x2d8>)
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295
 800acaa:	f7f5 ff39 	bl	8000b20 <__aeabi_dcmple>
 800acae:	bb48      	cbnz	r0, 800ad04 <_printf_float+0xcc>
 800acb0:	2200      	movs	r2, #0
 800acb2:	2300      	movs	r3, #0
 800acb4:	4640      	mov	r0, r8
 800acb6:	4649      	mov	r1, r9
 800acb8:	f7f5 ff28 	bl	8000b0c <__aeabi_dcmplt>
 800acbc:	b110      	cbz	r0, 800acc4 <_printf_float+0x8c>
 800acbe:	232d      	movs	r3, #45	; 0x2d
 800acc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc4:	4a93      	ldr	r2, [pc, #588]	; (800af14 <_printf_float+0x2dc>)
 800acc6:	4b94      	ldr	r3, [pc, #592]	; (800af18 <_printf_float+0x2e0>)
 800acc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800accc:	bf94      	ite	ls
 800acce:	4690      	movls	r8, r2
 800acd0:	4698      	movhi	r8, r3
 800acd2:	2303      	movs	r3, #3
 800acd4:	6123      	str	r3, [r4, #16]
 800acd6:	9b05      	ldr	r3, [sp, #20]
 800acd8:	f023 0304 	bic.w	r3, r3, #4
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	f04f 0900 	mov.w	r9, #0
 800ace2:	9700      	str	r7, [sp, #0]
 800ace4:	4633      	mov	r3, r6
 800ace6:	aa0b      	add	r2, sp, #44	; 0x2c
 800ace8:	4621      	mov	r1, r4
 800acea:	4628      	mov	r0, r5
 800acec:	f000 f9da 	bl	800b0a4 <_printf_common>
 800acf0:	3001      	adds	r0, #1
 800acf2:	f040 8090 	bne.w	800ae16 <_printf_float+0x1de>
 800acf6:	f04f 30ff 	mov.w	r0, #4294967295
 800acfa:	b00d      	add	sp, #52	; 0x34
 800acfc:	ecbd 8b02 	vpop	{d8}
 800ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad04:	4642      	mov	r2, r8
 800ad06:	464b      	mov	r3, r9
 800ad08:	4640      	mov	r0, r8
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	f7f5 ff26 	bl	8000b5c <__aeabi_dcmpun>
 800ad10:	b140      	cbz	r0, 800ad24 <_printf_float+0xec>
 800ad12:	464b      	mov	r3, r9
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bfbc      	itt	lt
 800ad18:	232d      	movlt	r3, #45	; 0x2d
 800ad1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad1e:	4a7f      	ldr	r2, [pc, #508]	; (800af1c <_printf_float+0x2e4>)
 800ad20:	4b7f      	ldr	r3, [pc, #508]	; (800af20 <_printf_float+0x2e8>)
 800ad22:	e7d1      	b.n	800acc8 <_printf_float+0x90>
 800ad24:	6863      	ldr	r3, [r4, #4]
 800ad26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad2a:	9206      	str	r2, [sp, #24]
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	d13f      	bne.n	800adb0 <_printf_float+0x178>
 800ad30:	2306      	movs	r3, #6
 800ad32:	6063      	str	r3, [r4, #4]
 800ad34:	9b05      	ldr	r3, [sp, #20]
 800ad36:	6861      	ldr	r1, [r4, #4]
 800ad38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	ab0a      	add	r3, sp, #40	; 0x28
 800ad42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad46:	ab09      	add	r3, sp, #36	; 0x24
 800ad48:	ec49 8b10 	vmov	d0, r8, r9
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	6022      	str	r2, [r4, #0]
 800ad50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad54:	4628      	mov	r0, r5
 800ad56:	f7ff fecf 	bl	800aaf8 <__cvt>
 800ad5a:	9b06      	ldr	r3, [sp, #24]
 800ad5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad5e:	2b47      	cmp	r3, #71	; 0x47
 800ad60:	4680      	mov	r8, r0
 800ad62:	d108      	bne.n	800ad76 <_printf_float+0x13e>
 800ad64:	1cc8      	adds	r0, r1, #3
 800ad66:	db02      	blt.n	800ad6e <_printf_float+0x136>
 800ad68:	6863      	ldr	r3, [r4, #4]
 800ad6a:	4299      	cmp	r1, r3
 800ad6c:	dd41      	ble.n	800adf2 <_printf_float+0x1ba>
 800ad6e:	f1ab 0302 	sub.w	r3, fp, #2
 800ad72:	fa5f fb83 	uxtb.w	fp, r3
 800ad76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad7a:	d820      	bhi.n	800adbe <_printf_float+0x186>
 800ad7c:	3901      	subs	r1, #1
 800ad7e:	465a      	mov	r2, fp
 800ad80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad84:	9109      	str	r1, [sp, #36]	; 0x24
 800ad86:	f7ff ff19 	bl	800abbc <__exponent>
 800ad8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad8c:	1813      	adds	r3, r2, r0
 800ad8e:	2a01      	cmp	r2, #1
 800ad90:	4681      	mov	r9, r0
 800ad92:	6123      	str	r3, [r4, #16]
 800ad94:	dc02      	bgt.n	800ad9c <_printf_float+0x164>
 800ad96:	6822      	ldr	r2, [r4, #0]
 800ad98:	07d2      	lsls	r2, r2, #31
 800ad9a:	d501      	bpl.n	800ada0 <_printf_float+0x168>
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	6123      	str	r3, [r4, #16]
 800ada0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d09c      	beq.n	800ace2 <_printf_float+0xaa>
 800ada8:	232d      	movs	r3, #45	; 0x2d
 800adaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adae:	e798      	b.n	800ace2 <_printf_float+0xaa>
 800adb0:	9a06      	ldr	r2, [sp, #24]
 800adb2:	2a47      	cmp	r2, #71	; 0x47
 800adb4:	d1be      	bne.n	800ad34 <_printf_float+0xfc>
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1bc      	bne.n	800ad34 <_printf_float+0xfc>
 800adba:	2301      	movs	r3, #1
 800adbc:	e7b9      	b.n	800ad32 <_printf_float+0xfa>
 800adbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800adc2:	d118      	bne.n	800adf6 <_printf_float+0x1be>
 800adc4:	2900      	cmp	r1, #0
 800adc6:	6863      	ldr	r3, [r4, #4]
 800adc8:	dd0b      	ble.n	800ade2 <_printf_float+0x1aa>
 800adca:	6121      	str	r1, [r4, #16]
 800adcc:	b913      	cbnz	r3, 800add4 <_printf_float+0x19c>
 800adce:	6822      	ldr	r2, [r4, #0]
 800add0:	07d0      	lsls	r0, r2, #31
 800add2:	d502      	bpl.n	800adda <_printf_float+0x1a2>
 800add4:	3301      	adds	r3, #1
 800add6:	440b      	add	r3, r1
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	65a1      	str	r1, [r4, #88]	; 0x58
 800addc:	f04f 0900 	mov.w	r9, #0
 800ade0:	e7de      	b.n	800ada0 <_printf_float+0x168>
 800ade2:	b913      	cbnz	r3, 800adea <_printf_float+0x1b2>
 800ade4:	6822      	ldr	r2, [r4, #0]
 800ade6:	07d2      	lsls	r2, r2, #31
 800ade8:	d501      	bpl.n	800adee <_printf_float+0x1b6>
 800adea:	3302      	adds	r3, #2
 800adec:	e7f4      	b.n	800add8 <_printf_float+0x1a0>
 800adee:	2301      	movs	r3, #1
 800adf0:	e7f2      	b.n	800add8 <_printf_float+0x1a0>
 800adf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf8:	4299      	cmp	r1, r3
 800adfa:	db05      	blt.n	800ae08 <_printf_float+0x1d0>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	6121      	str	r1, [r4, #16]
 800ae00:	07d8      	lsls	r0, r3, #31
 800ae02:	d5ea      	bpl.n	800adda <_printf_float+0x1a2>
 800ae04:	1c4b      	adds	r3, r1, #1
 800ae06:	e7e7      	b.n	800add8 <_printf_float+0x1a0>
 800ae08:	2900      	cmp	r1, #0
 800ae0a:	bfd4      	ite	le
 800ae0c:	f1c1 0202 	rsble	r2, r1, #2
 800ae10:	2201      	movgt	r2, #1
 800ae12:	4413      	add	r3, r2
 800ae14:	e7e0      	b.n	800add8 <_printf_float+0x1a0>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	055a      	lsls	r2, r3, #21
 800ae1a:	d407      	bmi.n	800ae2c <_printf_float+0x1f4>
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	4642      	mov	r2, r8
 800ae20:	4631      	mov	r1, r6
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b8      	blx	r7
 800ae26:	3001      	adds	r0, #1
 800ae28:	d12c      	bne.n	800ae84 <_printf_float+0x24c>
 800ae2a:	e764      	b.n	800acf6 <_printf_float+0xbe>
 800ae2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae30:	f240 80e0 	bls.w	800aff4 <_printf_float+0x3bc>
 800ae34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f7f5 fe5c 	bl	8000af8 <__aeabi_dcmpeq>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d034      	beq.n	800aeae <_printf_float+0x276>
 800ae44:	4a37      	ldr	r2, [pc, #220]	; (800af24 <_printf_float+0x2ec>)
 800ae46:	2301      	movs	r3, #1
 800ae48:	4631      	mov	r1, r6
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	47b8      	blx	r7
 800ae4e:	3001      	adds	r0, #1
 800ae50:	f43f af51 	beq.w	800acf6 <_printf_float+0xbe>
 800ae54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	db02      	blt.n	800ae62 <_printf_float+0x22a>
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	07d8      	lsls	r0, r3, #31
 800ae60:	d510      	bpl.n	800ae84 <_printf_float+0x24c>
 800ae62:	ee18 3a10 	vmov	r3, s16
 800ae66:	4652      	mov	r2, sl
 800ae68:	4631      	mov	r1, r6
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	47b8      	blx	r7
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f43f af41 	beq.w	800acf6 <_printf_float+0xbe>
 800ae74:	f04f 0800 	mov.w	r8, #0
 800ae78:	f104 091a 	add.w	r9, r4, #26
 800ae7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	4543      	cmp	r3, r8
 800ae82:	dc09      	bgt.n	800ae98 <_printf_float+0x260>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	079b      	lsls	r3, r3, #30
 800ae88:	f100 8107 	bmi.w	800b09a <_printf_float+0x462>
 800ae8c:	68e0      	ldr	r0, [r4, #12]
 800ae8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae90:	4298      	cmp	r0, r3
 800ae92:	bfb8      	it	lt
 800ae94:	4618      	movlt	r0, r3
 800ae96:	e730      	b.n	800acfa <_printf_float+0xc2>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	464a      	mov	r2, r9
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	f43f af27 	beq.w	800acf6 <_printf_float+0xbe>
 800aea8:	f108 0801 	add.w	r8, r8, #1
 800aeac:	e7e6      	b.n	800ae7c <_printf_float+0x244>
 800aeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dc39      	bgt.n	800af28 <_printf_float+0x2f0>
 800aeb4:	4a1b      	ldr	r2, [pc, #108]	; (800af24 <_printf_float+0x2ec>)
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	f43f af19 	beq.w	800acf6 <_printf_float+0xbe>
 800aec4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aec8:	4313      	orrs	r3, r2
 800aeca:	d102      	bne.n	800aed2 <_printf_float+0x29a>
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	07d9      	lsls	r1, r3, #31
 800aed0:	d5d8      	bpl.n	800ae84 <_printf_float+0x24c>
 800aed2:	ee18 3a10 	vmov	r3, s16
 800aed6:	4652      	mov	r2, sl
 800aed8:	4631      	mov	r1, r6
 800aeda:	4628      	mov	r0, r5
 800aedc:	47b8      	blx	r7
 800aede:	3001      	adds	r0, #1
 800aee0:	f43f af09 	beq.w	800acf6 <_printf_float+0xbe>
 800aee4:	f04f 0900 	mov.w	r9, #0
 800aee8:	f104 0a1a 	add.w	sl, r4, #26
 800aeec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeee:	425b      	negs	r3, r3
 800aef0:	454b      	cmp	r3, r9
 800aef2:	dc01      	bgt.n	800aef8 <_printf_float+0x2c0>
 800aef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef6:	e792      	b.n	800ae1e <_printf_float+0x1e6>
 800aef8:	2301      	movs	r3, #1
 800aefa:	4652      	mov	r2, sl
 800aefc:	4631      	mov	r1, r6
 800aefe:	4628      	mov	r0, r5
 800af00:	47b8      	blx	r7
 800af02:	3001      	adds	r0, #1
 800af04:	f43f aef7 	beq.w	800acf6 <_printf_float+0xbe>
 800af08:	f109 0901 	add.w	r9, r9, #1
 800af0c:	e7ee      	b.n	800aeec <_printf_float+0x2b4>
 800af0e:	bf00      	nop
 800af10:	7fefffff 	.word	0x7fefffff
 800af14:	0800db08 	.word	0x0800db08
 800af18:	0800db0c 	.word	0x0800db0c
 800af1c:	0800db10 	.word	0x0800db10
 800af20:	0800db14 	.word	0x0800db14
 800af24:	0800db18 	.word	0x0800db18
 800af28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af2c:	429a      	cmp	r2, r3
 800af2e:	bfa8      	it	ge
 800af30:	461a      	movge	r2, r3
 800af32:	2a00      	cmp	r2, #0
 800af34:	4691      	mov	r9, r2
 800af36:	dc37      	bgt.n	800afa8 <_printf_float+0x370>
 800af38:	f04f 0b00 	mov.w	fp, #0
 800af3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af40:	f104 021a 	add.w	r2, r4, #26
 800af44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af46:	9305      	str	r3, [sp, #20]
 800af48:	eba3 0309 	sub.w	r3, r3, r9
 800af4c:	455b      	cmp	r3, fp
 800af4e:	dc33      	bgt.n	800afb8 <_printf_float+0x380>
 800af50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af54:	429a      	cmp	r2, r3
 800af56:	db3b      	blt.n	800afd0 <_printf_float+0x398>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	07da      	lsls	r2, r3, #31
 800af5c:	d438      	bmi.n	800afd0 <_printf_float+0x398>
 800af5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af62:	eba2 0903 	sub.w	r9, r2, r3
 800af66:	9b05      	ldr	r3, [sp, #20]
 800af68:	1ad2      	subs	r2, r2, r3
 800af6a:	4591      	cmp	r9, r2
 800af6c:	bfa8      	it	ge
 800af6e:	4691      	movge	r9, r2
 800af70:	f1b9 0f00 	cmp.w	r9, #0
 800af74:	dc35      	bgt.n	800afe2 <_printf_float+0x3aa>
 800af76:	f04f 0800 	mov.w	r8, #0
 800af7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af7e:	f104 0a1a 	add.w	sl, r4, #26
 800af82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	eba3 0309 	sub.w	r3, r3, r9
 800af8c:	4543      	cmp	r3, r8
 800af8e:	f77f af79 	ble.w	800ae84 <_printf_float+0x24c>
 800af92:	2301      	movs	r3, #1
 800af94:	4652      	mov	r2, sl
 800af96:	4631      	mov	r1, r6
 800af98:	4628      	mov	r0, r5
 800af9a:	47b8      	blx	r7
 800af9c:	3001      	adds	r0, #1
 800af9e:	f43f aeaa 	beq.w	800acf6 <_printf_float+0xbe>
 800afa2:	f108 0801 	add.w	r8, r8, #1
 800afa6:	e7ec      	b.n	800af82 <_printf_float+0x34a>
 800afa8:	4613      	mov	r3, r2
 800afaa:	4631      	mov	r1, r6
 800afac:	4642      	mov	r2, r8
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	d1c0      	bne.n	800af38 <_printf_float+0x300>
 800afb6:	e69e      	b.n	800acf6 <_printf_float+0xbe>
 800afb8:	2301      	movs	r3, #1
 800afba:	4631      	mov	r1, r6
 800afbc:	4628      	mov	r0, r5
 800afbe:	9205      	str	r2, [sp, #20]
 800afc0:	47b8      	blx	r7
 800afc2:	3001      	adds	r0, #1
 800afc4:	f43f ae97 	beq.w	800acf6 <_printf_float+0xbe>
 800afc8:	9a05      	ldr	r2, [sp, #20]
 800afca:	f10b 0b01 	add.w	fp, fp, #1
 800afce:	e7b9      	b.n	800af44 <_printf_float+0x30c>
 800afd0:	ee18 3a10 	vmov	r3, s16
 800afd4:	4652      	mov	r2, sl
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	d1be      	bne.n	800af5e <_printf_float+0x326>
 800afe0:	e689      	b.n	800acf6 <_printf_float+0xbe>
 800afe2:	9a05      	ldr	r2, [sp, #20]
 800afe4:	464b      	mov	r3, r9
 800afe6:	4442      	add	r2, r8
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	47b8      	blx	r7
 800afee:	3001      	adds	r0, #1
 800aff0:	d1c1      	bne.n	800af76 <_printf_float+0x33e>
 800aff2:	e680      	b.n	800acf6 <_printf_float+0xbe>
 800aff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aff6:	2a01      	cmp	r2, #1
 800aff8:	dc01      	bgt.n	800affe <_printf_float+0x3c6>
 800affa:	07db      	lsls	r3, r3, #31
 800affc:	d53a      	bpl.n	800b074 <_printf_float+0x43c>
 800affe:	2301      	movs	r3, #1
 800b000:	4642      	mov	r2, r8
 800b002:	4631      	mov	r1, r6
 800b004:	4628      	mov	r0, r5
 800b006:	47b8      	blx	r7
 800b008:	3001      	adds	r0, #1
 800b00a:	f43f ae74 	beq.w	800acf6 <_printf_float+0xbe>
 800b00e:	ee18 3a10 	vmov	r3, s16
 800b012:	4652      	mov	r2, sl
 800b014:	4631      	mov	r1, r6
 800b016:	4628      	mov	r0, r5
 800b018:	47b8      	blx	r7
 800b01a:	3001      	adds	r0, #1
 800b01c:	f43f ae6b 	beq.w	800acf6 <_printf_float+0xbe>
 800b020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b024:	2200      	movs	r2, #0
 800b026:	2300      	movs	r3, #0
 800b028:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b02c:	f7f5 fd64 	bl	8000af8 <__aeabi_dcmpeq>
 800b030:	b9d8      	cbnz	r0, 800b06a <_printf_float+0x432>
 800b032:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b036:	f108 0201 	add.w	r2, r8, #1
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	d10e      	bne.n	800b062 <_printf_float+0x42a>
 800b044:	e657      	b.n	800acf6 <_printf_float+0xbe>
 800b046:	2301      	movs	r3, #1
 800b048:	4652      	mov	r2, sl
 800b04a:	4631      	mov	r1, r6
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b8      	blx	r7
 800b050:	3001      	adds	r0, #1
 800b052:	f43f ae50 	beq.w	800acf6 <_printf_float+0xbe>
 800b056:	f108 0801 	add.w	r8, r8, #1
 800b05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b05c:	3b01      	subs	r3, #1
 800b05e:	4543      	cmp	r3, r8
 800b060:	dcf1      	bgt.n	800b046 <_printf_float+0x40e>
 800b062:	464b      	mov	r3, r9
 800b064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b068:	e6da      	b.n	800ae20 <_printf_float+0x1e8>
 800b06a:	f04f 0800 	mov.w	r8, #0
 800b06e:	f104 0a1a 	add.w	sl, r4, #26
 800b072:	e7f2      	b.n	800b05a <_printf_float+0x422>
 800b074:	2301      	movs	r3, #1
 800b076:	4642      	mov	r2, r8
 800b078:	e7df      	b.n	800b03a <_printf_float+0x402>
 800b07a:	2301      	movs	r3, #1
 800b07c:	464a      	mov	r2, r9
 800b07e:	4631      	mov	r1, r6
 800b080:	4628      	mov	r0, r5
 800b082:	47b8      	blx	r7
 800b084:	3001      	adds	r0, #1
 800b086:	f43f ae36 	beq.w	800acf6 <_printf_float+0xbe>
 800b08a:	f108 0801 	add.w	r8, r8, #1
 800b08e:	68e3      	ldr	r3, [r4, #12]
 800b090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b092:	1a5b      	subs	r3, r3, r1
 800b094:	4543      	cmp	r3, r8
 800b096:	dcf0      	bgt.n	800b07a <_printf_float+0x442>
 800b098:	e6f8      	b.n	800ae8c <_printf_float+0x254>
 800b09a:	f04f 0800 	mov.w	r8, #0
 800b09e:	f104 0919 	add.w	r9, r4, #25
 800b0a2:	e7f4      	b.n	800b08e <_printf_float+0x456>

0800b0a4 <_printf_common>:
 800b0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a8:	4616      	mov	r6, r2
 800b0aa:	4699      	mov	r9, r3
 800b0ac:	688a      	ldr	r2, [r1, #8]
 800b0ae:	690b      	ldr	r3, [r1, #16]
 800b0b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	bfb8      	it	lt
 800b0b8:	4613      	movlt	r3, r2
 800b0ba:	6033      	str	r3, [r6, #0]
 800b0bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	b10a      	cbz	r2, 800b0ca <_printf_common+0x26>
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	6033      	str	r3, [r6, #0]
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	0699      	lsls	r1, r3, #26
 800b0ce:	bf42      	ittt	mi
 800b0d0:	6833      	ldrmi	r3, [r6, #0]
 800b0d2:	3302      	addmi	r3, #2
 800b0d4:	6033      	strmi	r3, [r6, #0]
 800b0d6:	6825      	ldr	r5, [r4, #0]
 800b0d8:	f015 0506 	ands.w	r5, r5, #6
 800b0dc:	d106      	bne.n	800b0ec <_printf_common+0x48>
 800b0de:	f104 0a19 	add.w	sl, r4, #25
 800b0e2:	68e3      	ldr	r3, [r4, #12]
 800b0e4:	6832      	ldr	r2, [r6, #0]
 800b0e6:	1a9b      	subs	r3, r3, r2
 800b0e8:	42ab      	cmp	r3, r5
 800b0ea:	dc26      	bgt.n	800b13a <_printf_common+0x96>
 800b0ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0f0:	1e13      	subs	r3, r2, #0
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	bf18      	it	ne
 800b0f6:	2301      	movne	r3, #1
 800b0f8:	0692      	lsls	r2, r2, #26
 800b0fa:	d42b      	bmi.n	800b154 <_printf_common+0xb0>
 800b0fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b100:	4649      	mov	r1, r9
 800b102:	4638      	mov	r0, r7
 800b104:	47c0      	blx	r8
 800b106:	3001      	adds	r0, #1
 800b108:	d01e      	beq.n	800b148 <_printf_common+0xa4>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	6922      	ldr	r2, [r4, #16]
 800b10e:	f003 0306 	and.w	r3, r3, #6
 800b112:	2b04      	cmp	r3, #4
 800b114:	bf02      	ittt	eq
 800b116:	68e5      	ldreq	r5, [r4, #12]
 800b118:	6833      	ldreq	r3, [r6, #0]
 800b11a:	1aed      	subeq	r5, r5, r3
 800b11c:	68a3      	ldr	r3, [r4, #8]
 800b11e:	bf0c      	ite	eq
 800b120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b124:	2500      	movne	r5, #0
 800b126:	4293      	cmp	r3, r2
 800b128:	bfc4      	itt	gt
 800b12a:	1a9b      	subgt	r3, r3, r2
 800b12c:	18ed      	addgt	r5, r5, r3
 800b12e:	2600      	movs	r6, #0
 800b130:	341a      	adds	r4, #26
 800b132:	42b5      	cmp	r5, r6
 800b134:	d11a      	bne.n	800b16c <_printf_common+0xc8>
 800b136:	2000      	movs	r0, #0
 800b138:	e008      	b.n	800b14c <_printf_common+0xa8>
 800b13a:	2301      	movs	r3, #1
 800b13c:	4652      	mov	r2, sl
 800b13e:	4649      	mov	r1, r9
 800b140:	4638      	mov	r0, r7
 800b142:	47c0      	blx	r8
 800b144:	3001      	adds	r0, #1
 800b146:	d103      	bne.n	800b150 <_printf_common+0xac>
 800b148:	f04f 30ff 	mov.w	r0, #4294967295
 800b14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b150:	3501      	adds	r5, #1
 800b152:	e7c6      	b.n	800b0e2 <_printf_common+0x3e>
 800b154:	18e1      	adds	r1, r4, r3
 800b156:	1c5a      	adds	r2, r3, #1
 800b158:	2030      	movs	r0, #48	; 0x30
 800b15a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b15e:	4422      	add	r2, r4
 800b160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b168:	3302      	adds	r3, #2
 800b16a:	e7c7      	b.n	800b0fc <_printf_common+0x58>
 800b16c:	2301      	movs	r3, #1
 800b16e:	4622      	mov	r2, r4
 800b170:	4649      	mov	r1, r9
 800b172:	4638      	mov	r0, r7
 800b174:	47c0      	blx	r8
 800b176:	3001      	adds	r0, #1
 800b178:	d0e6      	beq.n	800b148 <_printf_common+0xa4>
 800b17a:	3601      	adds	r6, #1
 800b17c:	e7d9      	b.n	800b132 <_printf_common+0x8e>
	...

0800b180 <_printf_i>:
 800b180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b184:	7e0f      	ldrb	r7, [r1, #24]
 800b186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b188:	2f78      	cmp	r7, #120	; 0x78
 800b18a:	4691      	mov	r9, r2
 800b18c:	4680      	mov	r8, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	469a      	mov	sl, r3
 800b192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b196:	d807      	bhi.n	800b1a8 <_printf_i+0x28>
 800b198:	2f62      	cmp	r7, #98	; 0x62
 800b19a:	d80a      	bhi.n	800b1b2 <_printf_i+0x32>
 800b19c:	2f00      	cmp	r7, #0
 800b19e:	f000 80d4 	beq.w	800b34a <_printf_i+0x1ca>
 800b1a2:	2f58      	cmp	r7, #88	; 0x58
 800b1a4:	f000 80c0 	beq.w	800b328 <_printf_i+0x1a8>
 800b1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1b0:	e03a      	b.n	800b228 <_printf_i+0xa8>
 800b1b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1b6:	2b15      	cmp	r3, #21
 800b1b8:	d8f6      	bhi.n	800b1a8 <_printf_i+0x28>
 800b1ba:	a101      	add	r1, pc, #4	; (adr r1, 800b1c0 <_printf_i+0x40>)
 800b1bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1c0:	0800b219 	.word	0x0800b219
 800b1c4:	0800b22d 	.word	0x0800b22d
 800b1c8:	0800b1a9 	.word	0x0800b1a9
 800b1cc:	0800b1a9 	.word	0x0800b1a9
 800b1d0:	0800b1a9 	.word	0x0800b1a9
 800b1d4:	0800b1a9 	.word	0x0800b1a9
 800b1d8:	0800b22d 	.word	0x0800b22d
 800b1dc:	0800b1a9 	.word	0x0800b1a9
 800b1e0:	0800b1a9 	.word	0x0800b1a9
 800b1e4:	0800b1a9 	.word	0x0800b1a9
 800b1e8:	0800b1a9 	.word	0x0800b1a9
 800b1ec:	0800b331 	.word	0x0800b331
 800b1f0:	0800b259 	.word	0x0800b259
 800b1f4:	0800b2eb 	.word	0x0800b2eb
 800b1f8:	0800b1a9 	.word	0x0800b1a9
 800b1fc:	0800b1a9 	.word	0x0800b1a9
 800b200:	0800b353 	.word	0x0800b353
 800b204:	0800b1a9 	.word	0x0800b1a9
 800b208:	0800b259 	.word	0x0800b259
 800b20c:	0800b1a9 	.word	0x0800b1a9
 800b210:	0800b1a9 	.word	0x0800b1a9
 800b214:	0800b2f3 	.word	0x0800b2f3
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	1d1a      	adds	r2, r3, #4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	602a      	str	r2, [r5, #0]
 800b220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b228:	2301      	movs	r3, #1
 800b22a:	e09f      	b.n	800b36c <_printf_i+0x1ec>
 800b22c:	6820      	ldr	r0, [r4, #0]
 800b22e:	682b      	ldr	r3, [r5, #0]
 800b230:	0607      	lsls	r7, r0, #24
 800b232:	f103 0104 	add.w	r1, r3, #4
 800b236:	6029      	str	r1, [r5, #0]
 800b238:	d501      	bpl.n	800b23e <_printf_i+0xbe>
 800b23a:	681e      	ldr	r6, [r3, #0]
 800b23c:	e003      	b.n	800b246 <_printf_i+0xc6>
 800b23e:	0646      	lsls	r6, r0, #25
 800b240:	d5fb      	bpl.n	800b23a <_printf_i+0xba>
 800b242:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b246:	2e00      	cmp	r6, #0
 800b248:	da03      	bge.n	800b252 <_printf_i+0xd2>
 800b24a:	232d      	movs	r3, #45	; 0x2d
 800b24c:	4276      	negs	r6, r6
 800b24e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b252:	485a      	ldr	r0, [pc, #360]	; (800b3bc <_printf_i+0x23c>)
 800b254:	230a      	movs	r3, #10
 800b256:	e012      	b.n	800b27e <_printf_i+0xfe>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	6820      	ldr	r0, [r4, #0]
 800b25c:	1d19      	adds	r1, r3, #4
 800b25e:	6029      	str	r1, [r5, #0]
 800b260:	0605      	lsls	r5, r0, #24
 800b262:	d501      	bpl.n	800b268 <_printf_i+0xe8>
 800b264:	681e      	ldr	r6, [r3, #0]
 800b266:	e002      	b.n	800b26e <_printf_i+0xee>
 800b268:	0641      	lsls	r1, r0, #25
 800b26a:	d5fb      	bpl.n	800b264 <_printf_i+0xe4>
 800b26c:	881e      	ldrh	r6, [r3, #0]
 800b26e:	4853      	ldr	r0, [pc, #332]	; (800b3bc <_printf_i+0x23c>)
 800b270:	2f6f      	cmp	r7, #111	; 0x6f
 800b272:	bf0c      	ite	eq
 800b274:	2308      	moveq	r3, #8
 800b276:	230a      	movne	r3, #10
 800b278:	2100      	movs	r1, #0
 800b27a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b27e:	6865      	ldr	r5, [r4, #4]
 800b280:	60a5      	str	r5, [r4, #8]
 800b282:	2d00      	cmp	r5, #0
 800b284:	bfa2      	ittt	ge
 800b286:	6821      	ldrge	r1, [r4, #0]
 800b288:	f021 0104 	bicge.w	r1, r1, #4
 800b28c:	6021      	strge	r1, [r4, #0]
 800b28e:	b90e      	cbnz	r6, 800b294 <_printf_i+0x114>
 800b290:	2d00      	cmp	r5, #0
 800b292:	d04b      	beq.n	800b32c <_printf_i+0x1ac>
 800b294:	4615      	mov	r5, r2
 800b296:	fbb6 f1f3 	udiv	r1, r6, r3
 800b29a:	fb03 6711 	mls	r7, r3, r1, r6
 800b29e:	5dc7      	ldrb	r7, [r0, r7]
 800b2a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2a4:	4637      	mov	r7, r6
 800b2a6:	42bb      	cmp	r3, r7
 800b2a8:	460e      	mov	r6, r1
 800b2aa:	d9f4      	bls.n	800b296 <_printf_i+0x116>
 800b2ac:	2b08      	cmp	r3, #8
 800b2ae:	d10b      	bne.n	800b2c8 <_printf_i+0x148>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	07de      	lsls	r6, r3, #31
 800b2b4:	d508      	bpl.n	800b2c8 <_printf_i+0x148>
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	6861      	ldr	r1, [r4, #4]
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	bfde      	ittt	le
 800b2be:	2330      	movle	r3, #48	; 0x30
 800b2c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2c8:	1b52      	subs	r2, r2, r5
 800b2ca:	6122      	str	r2, [r4, #16]
 800b2cc:	f8cd a000 	str.w	sl, [sp]
 800b2d0:	464b      	mov	r3, r9
 800b2d2:	aa03      	add	r2, sp, #12
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	f7ff fee4 	bl	800b0a4 <_printf_common>
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d14a      	bne.n	800b376 <_printf_i+0x1f6>
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e4:	b004      	add	sp, #16
 800b2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	f043 0320 	orr.w	r3, r3, #32
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	4833      	ldr	r0, [pc, #204]	; (800b3c0 <_printf_i+0x240>)
 800b2f4:	2778      	movs	r7, #120	; 0x78
 800b2f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	6829      	ldr	r1, [r5, #0]
 800b2fe:	061f      	lsls	r7, r3, #24
 800b300:	f851 6b04 	ldr.w	r6, [r1], #4
 800b304:	d402      	bmi.n	800b30c <_printf_i+0x18c>
 800b306:	065f      	lsls	r7, r3, #25
 800b308:	bf48      	it	mi
 800b30a:	b2b6      	uxthmi	r6, r6
 800b30c:	07df      	lsls	r7, r3, #31
 800b30e:	bf48      	it	mi
 800b310:	f043 0320 	orrmi.w	r3, r3, #32
 800b314:	6029      	str	r1, [r5, #0]
 800b316:	bf48      	it	mi
 800b318:	6023      	strmi	r3, [r4, #0]
 800b31a:	b91e      	cbnz	r6, 800b324 <_printf_i+0x1a4>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	f023 0320 	bic.w	r3, r3, #32
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	2310      	movs	r3, #16
 800b326:	e7a7      	b.n	800b278 <_printf_i+0xf8>
 800b328:	4824      	ldr	r0, [pc, #144]	; (800b3bc <_printf_i+0x23c>)
 800b32a:	e7e4      	b.n	800b2f6 <_printf_i+0x176>
 800b32c:	4615      	mov	r5, r2
 800b32e:	e7bd      	b.n	800b2ac <_printf_i+0x12c>
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	6826      	ldr	r6, [r4, #0]
 800b334:	6961      	ldr	r1, [r4, #20]
 800b336:	1d18      	adds	r0, r3, #4
 800b338:	6028      	str	r0, [r5, #0]
 800b33a:	0635      	lsls	r5, r6, #24
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	d501      	bpl.n	800b344 <_printf_i+0x1c4>
 800b340:	6019      	str	r1, [r3, #0]
 800b342:	e002      	b.n	800b34a <_printf_i+0x1ca>
 800b344:	0670      	lsls	r0, r6, #25
 800b346:	d5fb      	bpl.n	800b340 <_printf_i+0x1c0>
 800b348:	8019      	strh	r1, [r3, #0]
 800b34a:	2300      	movs	r3, #0
 800b34c:	6123      	str	r3, [r4, #16]
 800b34e:	4615      	mov	r5, r2
 800b350:	e7bc      	b.n	800b2cc <_printf_i+0x14c>
 800b352:	682b      	ldr	r3, [r5, #0]
 800b354:	1d1a      	adds	r2, r3, #4
 800b356:	602a      	str	r2, [r5, #0]
 800b358:	681d      	ldr	r5, [r3, #0]
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	2100      	movs	r1, #0
 800b35e:	4628      	mov	r0, r5
 800b360:	f7f4 ff4e 	bl	8000200 <memchr>
 800b364:	b108      	cbz	r0, 800b36a <_printf_i+0x1ea>
 800b366:	1b40      	subs	r0, r0, r5
 800b368:	6060      	str	r0, [r4, #4]
 800b36a:	6863      	ldr	r3, [r4, #4]
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	2300      	movs	r3, #0
 800b370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b374:	e7aa      	b.n	800b2cc <_printf_i+0x14c>
 800b376:	6923      	ldr	r3, [r4, #16]
 800b378:	462a      	mov	r2, r5
 800b37a:	4649      	mov	r1, r9
 800b37c:	4640      	mov	r0, r8
 800b37e:	47d0      	blx	sl
 800b380:	3001      	adds	r0, #1
 800b382:	d0ad      	beq.n	800b2e0 <_printf_i+0x160>
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	079b      	lsls	r3, r3, #30
 800b388:	d413      	bmi.n	800b3b2 <_printf_i+0x232>
 800b38a:	68e0      	ldr	r0, [r4, #12]
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	4298      	cmp	r0, r3
 800b390:	bfb8      	it	lt
 800b392:	4618      	movlt	r0, r3
 800b394:	e7a6      	b.n	800b2e4 <_printf_i+0x164>
 800b396:	2301      	movs	r3, #1
 800b398:	4632      	mov	r2, r6
 800b39a:	4649      	mov	r1, r9
 800b39c:	4640      	mov	r0, r8
 800b39e:	47d0      	blx	sl
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d09d      	beq.n	800b2e0 <_printf_i+0x160>
 800b3a4:	3501      	adds	r5, #1
 800b3a6:	68e3      	ldr	r3, [r4, #12]
 800b3a8:	9903      	ldr	r1, [sp, #12]
 800b3aa:	1a5b      	subs	r3, r3, r1
 800b3ac:	42ab      	cmp	r3, r5
 800b3ae:	dcf2      	bgt.n	800b396 <_printf_i+0x216>
 800b3b0:	e7eb      	b.n	800b38a <_printf_i+0x20a>
 800b3b2:	2500      	movs	r5, #0
 800b3b4:	f104 0619 	add.w	r6, r4, #25
 800b3b8:	e7f5      	b.n	800b3a6 <_printf_i+0x226>
 800b3ba:	bf00      	nop
 800b3bc:	0800db1a 	.word	0x0800db1a
 800b3c0:	0800db2b 	.word	0x0800db2b

0800b3c4 <std>:
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	b510      	push	{r4, lr}
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b3ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3d2:	6083      	str	r3, [r0, #8]
 800b3d4:	8181      	strh	r1, [r0, #12]
 800b3d6:	6643      	str	r3, [r0, #100]	; 0x64
 800b3d8:	81c2      	strh	r2, [r0, #14]
 800b3da:	6183      	str	r3, [r0, #24]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	2208      	movs	r2, #8
 800b3e0:	305c      	adds	r0, #92	; 0x5c
 800b3e2:	f000 fa59 	bl	800b898 <memset>
 800b3e6:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <std+0x58>)
 800b3e8:	6263      	str	r3, [r4, #36]	; 0x24
 800b3ea:	4b0d      	ldr	r3, [pc, #52]	; (800b420 <std+0x5c>)
 800b3ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3ee:	4b0d      	ldr	r3, [pc, #52]	; (800b424 <std+0x60>)
 800b3f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3f2:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <std+0x64>)
 800b3f4:	6323      	str	r3, [r4, #48]	; 0x30
 800b3f6:	4b0d      	ldr	r3, [pc, #52]	; (800b42c <std+0x68>)
 800b3f8:	6224      	str	r4, [r4, #32]
 800b3fa:	429c      	cmp	r4, r3
 800b3fc:	d006      	beq.n	800b40c <std+0x48>
 800b3fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b402:	4294      	cmp	r4, r2
 800b404:	d002      	beq.n	800b40c <std+0x48>
 800b406:	33d0      	adds	r3, #208	; 0xd0
 800b408:	429c      	cmp	r4, r3
 800b40a:	d105      	bne.n	800b418 <std+0x54>
 800b40c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b414:	f000 bada 	b.w	800b9cc <__retarget_lock_init_recursive>
 800b418:	bd10      	pop	{r4, pc}
 800b41a:	bf00      	nop
 800b41c:	0800b641 	.word	0x0800b641
 800b420:	0800b663 	.word	0x0800b663
 800b424:	0800b69b 	.word	0x0800b69b
 800b428:	0800b6bf 	.word	0x0800b6bf
 800b42c:	20006b00 	.word	0x20006b00

0800b430 <stdio_exit_handler>:
 800b430:	4a02      	ldr	r2, [pc, #8]	; (800b43c <stdio_exit_handler+0xc>)
 800b432:	4903      	ldr	r1, [pc, #12]	; (800b440 <stdio_exit_handler+0x10>)
 800b434:	4803      	ldr	r0, [pc, #12]	; (800b444 <stdio_exit_handler+0x14>)
 800b436:	f000 b869 	b.w	800b50c <_fwalk_sglue>
 800b43a:	bf00      	nop
 800b43c:	20000104 	.word	0x20000104
 800b440:	0800d231 	.word	0x0800d231
 800b444:	20000110 	.word	0x20000110

0800b448 <cleanup_stdio>:
 800b448:	6841      	ldr	r1, [r0, #4]
 800b44a:	4b0c      	ldr	r3, [pc, #48]	; (800b47c <cleanup_stdio+0x34>)
 800b44c:	4299      	cmp	r1, r3
 800b44e:	b510      	push	{r4, lr}
 800b450:	4604      	mov	r4, r0
 800b452:	d001      	beq.n	800b458 <cleanup_stdio+0x10>
 800b454:	f001 feec 	bl	800d230 <_fflush_r>
 800b458:	68a1      	ldr	r1, [r4, #8]
 800b45a:	4b09      	ldr	r3, [pc, #36]	; (800b480 <cleanup_stdio+0x38>)
 800b45c:	4299      	cmp	r1, r3
 800b45e:	d002      	beq.n	800b466 <cleanup_stdio+0x1e>
 800b460:	4620      	mov	r0, r4
 800b462:	f001 fee5 	bl	800d230 <_fflush_r>
 800b466:	68e1      	ldr	r1, [r4, #12]
 800b468:	4b06      	ldr	r3, [pc, #24]	; (800b484 <cleanup_stdio+0x3c>)
 800b46a:	4299      	cmp	r1, r3
 800b46c:	d004      	beq.n	800b478 <cleanup_stdio+0x30>
 800b46e:	4620      	mov	r0, r4
 800b470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b474:	f001 bedc 	b.w	800d230 <_fflush_r>
 800b478:	bd10      	pop	{r4, pc}
 800b47a:	bf00      	nop
 800b47c:	20006b00 	.word	0x20006b00
 800b480:	20006b68 	.word	0x20006b68
 800b484:	20006bd0 	.word	0x20006bd0

0800b488 <global_stdio_init.part.0>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	4b0b      	ldr	r3, [pc, #44]	; (800b4b8 <global_stdio_init.part.0+0x30>)
 800b48c:	4c0b      	ldr	r4, [pc, #44]	; (800b4bc <global_stdio_init.part.0+0x34>)
 800b48e:	4a0c      	ldr	r2, [pc, #48]	; (800b4c0 <global_stdio_init.part.0+0x38>)
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	4620      	mov	r0, r4
 800b494:	2200      	movs	r2, #0
 800b496:	2104      	movs	r1, #4
 800b498:	f7ff ff94 	bl	800b3c4 <std>
 800b49c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	2109      	movs	r1, #9
 800b4a4:	f7ff ff8e 	bl	800b3c4 <std>
 800b4a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b4ac:	2202      	movs	r2, #2
 800b4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b2:	2112      	movs	r1, #18
 800b4b4:	f7ff bf86 	b.w	800b3c4 <std>
 800b4b8:	20006c38 	.word	0x20006c38
 800b4bc:	20006b00 	.word	0x20006b00
 800b4c0:	0800b431 	.word	0x0800b431

0800b4c4 <__sfp_lock_acquire>:
 800b4c4:	4801      	ldr	r0, [pc, #4]	; (800b4cc <__sfp_lock_acquire+0x8>)
 800b4c6:	f000 ba82 	b.w	800b9ce <__retarget_lock_acquire_recursive>
 800b4ca:	bf00      	nop
 800b4cc:	20006c41 	.word	0x20006c41

0800b4d0 <__sfp_lock_release>:
 800b4d0:	4801      	ldr	r0, [pc, #4]	; (800b4d8 <__sfp_lock_release+0x8>)
 800b4d2:	f000 ba7d 	b.w	800b9d0 <__retarget_lock_release_recursive>
 800b4d6:	bf00      	nop
 800b4d8:	20006c41 	.word	0x20006c41

0800b4dc <__sinit>:
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	4604      	mov	r4, r0
 800b4e0:	f7ff fff0 	bl	800b4c4 <__sfp_lock_acquire>
 800b4e4:	6a23      	ldr	r3, [r4, #32]
 800b4e6:	b11b      	cbz	r3, 800b4f0 <__sinit+0x14>
 800b4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ec:	f7ff bff0 	b.w	800b4d0 <__sfp_lock_release>
 800b4f0:	4b04      	ldr	r3, [pc, #16]	; (800b504 <__sinit+0x28>)
 800b4f2:	6223      	str	r3, [r4, #32]
 800b4f4:	4b04      	ldr	r3, [pc, #16]	; (800b508 <__sinit+0x2c>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1f5      	bne.n	800b4e8 <__sinit+0xc>
 800b4fc:	f7ff ffc4 	bl	800b488 <global_stdio_init.part.0>
 800b500:	e7f2      	b.n	800b4e8 <__sinit+0xc>
 800b502:	bf00      	nop
 800b504:	0800b449 	.word	0x0800b449
 800b508:	20006c38 	.word	0x20006c38

0800b50c <_fwalk_sglue>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	4607      	mov	r7, r0
 800b512:	4688      	mov	r8, r1
 800b514:	4614      	mov	r4, r2
 800b516:	2600      	movs	r6, #0
 800b518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b51c:	f1b9 0901 	subs.w	r9, r9, #1
 800b520:	d505      	bpl.n	800b52e <_fwalk_sglue+0x22>
 800b522:	6824      	ldr	r4, [r4, #0]
 800b524:	2c00      	cmp	r4, #0
 800b526:	d1f7      	bne.n	800b518 <_fwalk_sglue+0xc>
 800b528:	4630      	mov	r0, r6
 800b52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52e:	89ab      	ldrh	r3, [r5, #12]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d907      	bls.n	800b544 <_fwalk_sglue+0x38>
 800b534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b538:	3301      	adds	r3, #1
 800b53a:	d003      	beq.n	800b544 <_fwalk_sglue+0x38>
 800b53c:	4629      	mov	r1, r5
 800b53e:	4638      	mov	r0, r7
 800b540:	47c0      	blx	r8
 800b542:	4306      	orrs	r6, r0
 800b544:	3568      	adds	r5, #104	; 0x68
 800b546:	e7e9      	b.n	800b51c <_fwalk_sglue+0x10>

0800b548 <_puts_r>:
 800b548:	6a03      	ldr	r3, [r0, #32]
 800b54a:	b570      	push	{r4, r5, r6, lr}
 800b54c:	6884      	ldr	r4, [r0, #8]
 800b54e:	4605      	mov	r5, r0
 800b550:	460e      	mov	r6, r1
 800b552:	b90b      	cbnz	r3, 800b558 <_puts_r+0x10>
 800b554:	f7ff ffc2 	bl	800b4dc <__sinit>
 800b558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b55a:	07db      	lsls	r3, r3, #31
 800b55c:	d405      	bmi.n	800b56a <_puts_r+0x22>
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	0598      	lsls	r0, r3, #22
 800b562:	d402      	bmi.n	800b56a <_puts_r+0x22>
 800b564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b566:	f000 fa32 	bl	800b9ce <__retarget_lock_acquire_recursive>
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	0719      	lsls	r1, r3, #28
 800b56e:	d513      	bpl.n	800b598 <_puts_r+0x50>
 800b570:	6923      	ldr	r3, [r4, #16]
 800b572:	b18b      	cbz	r3, 800b598 <_puts_r+0x50>
 800b574:	3e01      	subs	r6, #1
 800b576:	68a3      	ldr	r3, [r4, #8]
 800b578:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b57c:	3b01      	subs	r3, #1
 800b57e:	60a3      	str	r3, [r4, #8]
 800b580:	b9e9      	cbnz	r1, 800b5be <_puts_r+0x76>
 800b582:	2b00      	cmp	r3, #0
 800b584:	da2e      	bge.n	800b5e4 <_puts_r+0x9c>
 800b586:	4622      	mov	r2, r4
 800b588:	210a      	movs	r1, #10
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 f8d4 	bl	800b738 <__swbuf_r>
 800b590:	3001      	adds	r0, #1
 800b592:	d007      	beq.n	800b5a4 <_puts_r+0x5c>
 800b594:	250a      	movs	r5, #10
 800b596:	e007      	b.n	800b5a8 <_puts_r+0x60>
 800b598:	4621      	mov	r1, r4
 800b59a:	4628      	mov	r0, r5
 800b59c:	f000 f90a 	bl	800b7b4 <__swsetup_r>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d0e7      	beq.n	800b574 <_puts_r+0x2c>
 800b5a4:	f04f 35ff 	mov.w	r5, #4294967295
 800b5a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5aa:	07da      	lsls	r2, r3, #31
 800b5ac:	d405      	bmi.n	800b5ba <_puts_r+0x72>
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	059b      	lsls	r3, r3, #22
 800b5b2:	d402      	bmi.n	800b5ba <_puts_r+0x72>
 800b5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5b6:	f000 fa0b 	bl	800b9d0 <__retarget_lock_release_recursive>
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	bd70      	pop	{r4, r5, r6, pc}
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	da04      	bge.n	800b5cc <_puts_r+0x84>
 800b5c2:	69a2      	ldr	r2, [r4, #24]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	dc06      	bgt.n	800b5d6 <_puts_r+0x8e>
 800b5c8:	290a      	cmp	r1, #10
 800b5ca:	d004      	beq.n	800b5d6 <_puts_r+0x8e>
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	6022      	str	r2, [r4, #0]
 800b5d2:	7019      	strb	r1, [r3, #0]
 800b5d4:	e7cf      	b.n	800b576 <_puts_r+0x2e>
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	4628      	mov	r0, r5
 800b5da:	f000 f8ad 	bl	800b738 <__swbuf_r>
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d1c9      	bne.n	800b576 <_puts_r+0x2e>
 800b5e2:	e7df      	b.n	800b5a4 <_puts_r+0x5c>
 800b5e4:	6823      	ldr	r3, [r4, #0]
 800b5e6:	250a      	movs	r5, #10
 800b5e8:	1c5a      	adds	r2, r3, #1
 800b5ea:	6022      	str	r2, [r4, #0]
 800b5ec:	701d      	strb	r5, [r3, #0]
 800b5ee:	e7db      	b.n	800b5a8 <_puts_r+0x60>

0800b5f0 <puts>:
 800b5f0:	4b02      	ldr	r3, [pc, #8]	; (800b5fc <puts+0xc>)
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	6818      	ldr	r0, [r3, #0]
 800b5f6:	f7ff bfa7 	b.w	800b548 <_puts_r>
 800b5fa:	bf00      	nop
 800b5fc:	2000015c 	.word	0x2000015c

0800b600 <siprintf>:
 800b600:	b40e      	push	{r1, r2, r3}
 800b602:	b500      	push	{lr}
 800b604:	b09c      	sub	sp, #112	; 0x70
 800b606:	ab1d      	add	r3, sp, #116	; 0x74
 800b608:	9002      	str	r0, [sp, #8]
 800b60a:	9006      	str	r0, [sp, #24]
 800b60c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b610:	4809      	ldr	r0, [pc, #36]	; (800b638 <siprintf+0x38>)
 800b612:	9107      	str	r1, [sp, #28]
 800b614:	9104      	str	r1, [sp, #16]
 800b616:	4909      	ldr	r1, [pc, #36]	; (800b63c <siprintf+0x3c>)
 800b618:	f853 2b04 	ldr.w	r2, [r3], #4
 800b61c:	9105      	str	r1, [sp, #20]
 800b61e:	6800      	ldr	r0, [r0, #0]
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	a902      	add	r1, sp, #8
 800b624:	f001 fc80 	bl	800cf28 <_svfiprintf_r>
 800b628:	9b02      	ldr	r3, [sp, #8]
 800b62a:	2200      	movs	r2, #0
 800b62c:	701a      	strb	r2, [r3, #0]
 800b62e:	b01c      	add	sp, #112	; 0x70
 800b630:	f85d eb04 	ldr.w	lr, [sp], #4
 800b634:	b003      	add	sp, #12
 800b636:	4770      	bx	lr
 800b638:	2000015c 	.word	0x2000015c
 800b63c:	ffff0208 	.word	0xffff0208

0800b640 <__sread>:
 800b640:	b510      	push	{r4, lr}
 800b642:	460c      	mov	r4, r1
 800b644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b648:	f000 f962 	bl	800b910 <_read_r>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	bfab      	itete	ge
 800b650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b652:	89a3      	ldrhlt	r3, [r4, #12]
 800b654:	181b      	addge	r3, r3, r0
 800b656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b65a:	bfac      	ite	ge
 800b65c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b65e:	81a3      	strhlt	r3, [r4, #12]
 800b660:	bd10      	pop	{r4, pc}

0800b662 <__swrite>:
 800b662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b666:	461f      	mov	r7, r3
 800b668:	898b      	ldrh	r3, [r1, #12]
 800b66a:	05db      	lsls	r3, r3, #23
 800b66c:	4605      	mov	r5, r0
 800b66e:	460c      	mov	r4, r1
 800b670:	4616      	mov	r6, r2
 800b672:	d505      	bpl.n	800b680 <__swrite+0x1e>
 800b674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b678:	2302      	movs	r3, #2
 800b67a:	2200      	movs	r2, #0
 800b67c:	f000 f936 	bl	800b8ec <_lseek_r>
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b68a:	81a3      	strh	r3, [r4, #12]
 800b68c:	4632      	mov	r2, r6
 800b68e:	463b      	mov	r3, r7
 800b690:	4628      	mov	r0, r5
 800b692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b696:	f000 b95d 	b.w	800b954 <_write_r>

0800b69a <__sseek>:
 800b69a:	b510      	push	{r4, lr}
 800b69c:	460c      	mov	r4, r1
 800b69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a2:	f000 f923 	bl	800b8ec <_lseek_r>
 800b6a6:	1c43      	adds	r3, r0, #1
 800b6a8:	89a3      	ldrh	r3, [r4, #12]
 800b6aa:	bf15      	itete	ne
 800b6ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6b6:	81a3      	strheq	r3, [r4, #12]
 800b6b8:	bf18      	it	ne
 800b6ba:	81a3      	strhne	r3, [r4, #12]
 800b6bc:	bd10      	pop	{r4, pc}

0800b6be <__sclose>:
 800b6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c2:	f000 b903 	b.w	800b8cc <_close_r>

0800b6c6 <_vsniprintf_r>:
 800b6c6:	b530      	push	{r4, r5, lr}
 800b6c8:	4614      	mov	r4, r2
 800b6ca:	2c00      	cmp	r4, #0
 800b6cc:	b09b      	sub	sp, #108	; 0x6c
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	da05      	bge.n	800b6e0 <_vsniprintf_r+0x1a>
 800b6d4:	238b      	movs	r3, #139	; 0x8b
 800b6d6:	6003      	str	r3, [r0, #0]
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6dc:	b01b      	add	sp, #108	; 0x6c
 800b6de:	bd30      	pop	{r4, r5, pc}
 800b6e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b6e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b6e8:	bf14      	ite	ne
 800b6ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b6ee:	4623      	moveq	r3, r4
 800b6f0:	9302      	str	r3, [sp, #8]
 800b6f2:	9305      	str	r3, [sp, #20]
 800b6f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6f8:	9100      	str	r1, [sp, #0]
 800b6fa:	9104      	str	r1, [sp, #16]
 800b6fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b700:	4669      	mov	r1, sp
 800b702:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b704:	f001 fc10 	bl	800cf28 <_svfiprintf_r>
 800b708:	1c43      	adds	r3, r0, #1
 800b70a:	bfbc      	itt	lt
 800b70c:	238b      	movlt	r3, #139	; 0x8b
 800b70e:	602b      	strlt	r3, [r5, #0]
 800b710:	2c00      	cmp	r4, #0
 800b712:	d0e3      	beq.n	800b6dc <_vsniprintf_r+0x16>
 800b714:	9b00      	ldr	r3, [sp, #0]
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	e7df      	b.n	800b6dc <_vsniprintf_r+0x16>

0800b71c <vsniprintf>:
 800b71c:	b507      	push	{r0, r1, r2, lr}
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	4613      	mov	r3, r2
 800b722:	460a      	mov	r2, r1
 800b724:	4601      	mov	r1, r0
 800b726:	4803      	ldr	r0, [pc, #12]	; (800b734 <vsniprintf+0x18>)
 800b728:	6800      	ldr	r0, [r0, #0]
 800b72a:	f7ff ffcc 	bl	800b6c6 <_vsniprintf_r>
 800b72e:	b003      	add	sp, #12
 800b730:	f85d fb04 	ldr.w	pc, [sp], #4
 800b734:	2000015c 	.word	0x2000015c

0800b738 <__swbuf_r>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	460e      	mov	r6, r1
 800b73c:	4614      	mov	r4, r2
 800b73e:	4605      	mov	r5, r0
 800b740:	b118      	cbz	r0, 800b74a <__swbuf_r+0x12>
 800b742:	6a03      	ldr	r3, [r0, #32]
 800b744:	b90b      	cbnz	r3, 800b74a <__swbuf_r+0x12>
 800b746:	f7ff fec9 	bl	800b4dc <__sinit>
 800b74a:	69a3      	ldr	r3, [r4, #24]
 800b74c:	60a3      	str	r3, [r4, #8]
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	071a      	lsls	r2, r3, #28
 800b752:	d525      	bpl.n	800b7a0 <__swbuf_r+0x68>
 800b754:	6923      	ldr	r3, [r4, #16]
 800b756:	b31b      	cbz	r3, 800b7a0 <__swbuf_r+0x68>
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	6922      	ldr	r2, [r4, #16]
 800b75c:	1a98      	subs	r0, r3, r2
 800b75e:	6963      	ldr	r3, [r4, #20]
 800b760:	b2f6      	uxtb	r6, r6
 800b762:	4283      	cmp	r3, r0
 800b764:	4637      	mov	r7, r6
 800b766:	dc04      	bgt.n	800b772 <__swbuf_r+0x3a>
 800b768:	4621      	mov	r1, r4
 800b76a:	4628      	mov	r0, r5
 800b76c:	f001 fd60 	bl	800d230 <_fflush_r>
 800b770:	b9e0      	cbnz	r0, 800b7ac <__swbuf_r+0x74>
 800b772:	68a3      	ldr	r3, [r4, #8]
 800b774:	3b01      	subs	r3, #1
 800b776:	60a3      	str	r3, [r4, #8]
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	6022      	str	r2, [r4, #0]
 800b77e:	701e      	strb	r6, [r3, #0]
 800b780:	6962      	ldr	r2, [r4, #20]
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	429a      	cmp	r2, r3
 800b786:	d004      	beq.n	800b792 <__swbuf_r+0x5a>
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	07db      	lsls	r3, r3, #31
 800b78c:	d506      	bpl.n	800b79c <__swbuf_r+0x64>
 800b78e:	2e0a      	cmp	r6, #10
 800b790:	d104      	bne.n	800b79c <__swbuf_r+0x64>
 800b792:	4621      	mov	r1, r4
 800b794:	4628      	mov	r0, r5
 800b796:	f001 fd4b 	bl	800d230 <_fflush_r>
 800b79a:	b938      	cbnz	r0, 800b7ac <__swbuf_r+0x74>
 800b79c:	4638      	mov	r0, r7
 800b79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f000 f806 	bl	800b7b4 <__swsetup_r>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d0d5      	beq.n	800b758 <__swbuf_r+0x20>
 800b7ac:	f04f 37ff 	mov.w	r7, #4294967295
 800b7b0:	e7f4      	b.n	800b79c <__swbuf_r+0x64>
	...

0800b7b4 <__swsetup_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	4b2a      	ldr	r3, [pc, #168]	; (800b860 <__swsetup_r+0xac>)
 800b7b8:	4605      	mov	r5, r0
 800b7ba:	6818      	ldr	r0, [r3, #0]
 800b7bc:	460c      	mov	r4, r1
 800b7be:	b118      	cbz	r0, 800b7c8 <__swsetup_r+0x14>
 800b7c0:	6a03      	ldr	r3, [r0, #32]
 800b7c2:	b90b      	cbnz	r3, 800b7c8 <__swsetup_r+0x14>
 800b7c4:	f7ff fe8a 	bl	800b4dc <__sinit>
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ce:	0718      	lsls	r0, r3, #28
 800b7d0:	d422      	bmi.n	800b818 <__swsetup_r+0x64>
 800b7d2:	06d9      	lsls	r1, r3, #27
 800b7d4:	d407      	bmi.n	800b7e6 <__swsetup_r+0x32>
 800b7d6:	2309      	movs	r3, #9
 800b7d8:	602b      	str	r3, [r5, #0]
 800b7da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7de:	81a3      	strh	r3, [r4, #12]
 800b7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e4:	e034      	b.n	800b850 <__swsetup_r+0x9c>
 800b7e6:	0758      	lsls	r0, r3, #29
 800b7e8:	d512      	bpl.n	800b810 <__swsetup_r+0x5c>
 800b7ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ec:	b141      	cbz	r1, 800b800 <__swsetup_r+0x4c>
 800b7ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7f2:	4299      	cmp	r1, r3
 800b7f4:	d002      	beq.n	800b7fc <__swsetup_r+0x48>
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f000 ff74 	bl	800c6e4 <_free_r>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	6363      	str	r3, [r4, #52]	; 0x34
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b806:	81a3      	strh	r3, [r4, #12]
 800b808:	2300      	movs	r3, #0
 800b80a:	6063      	str	r3, [r4, #4]
 800b80c:	6923      	ldr	r3, [r4, #16]
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	f043 0308 	orr.w	r3, r3, #8
 800b816:	81a3      	strh	r3, [r4, #12]
 800b818:	6923      	ldr	r3, [r4, #16]
 800b81a:	b94b      	cbnz	r3, 800b830 <__swsetup_r+0x7c>
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b826:	d003      	beq.n	800b830 <__swsetup_r+0x7c>
 800b828:	4621      	mov	r1, r4
 800b82a:	4628      	mov	r0, r5
 800b82c:	f001 fd4e 	bl	800d2cc <__smakebuf_r>
 800b830:	89a0      	ldrh	r0, [r4, #12]
 800b832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b836:	f010 0301 	ands.w	r3, r0, #1
 800b83a:	d00a      	beq.n	800b852 <__swsetup_r+0x9e>
 800b83c:	2300      	movs	r3, #0
 800b83e:	60a3      	str	r3, [r4, #8]
 800b840:	6963      	ldr	r3, [r4, #20]
 800b842:	425b      	negs	r3, r3
 800b844:	61a3      	str	r3, [r4, #24]
 800b846:	6923      	ldr	r3, [r4, #16]
 800b848:	b943      	cbnz	r3, 800b85c <__swsetup_r+0xa8>
 800b84a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b84e:	d1c4      	bne.n	800b7da <__swsetup_r+0x26>
 800b850:	bd38      	pop	{r3, r4, r5, pc}
 800b852:	0781      	lsls	r1, r0, #30
 800b854:	bf58      	it	pl
 800b856:	6963      	ldrpl	r3, [r4, #20]
 800b858:	60a3      	str	r3, [r4, #8]
 800b85a:	e7f4      	b.n	800b846 <__swsetup_r+0x92>
 800b85c:	2000      	movs	r0, #0
 800b85e:	e7f7      	b.n	800b850 <__swsetup_r+0x9c>
 800b860:	2000015c 	.word	0x2000015c

0800b864 <memmove>:
 800b864:	4288      	cmp	r0, r1
 800b866:	b510      	push	{r4, lr}
 800b868:	eb01 0402 	add.w	r4, r1, r2
 800b86c:	d902      	bls.n	800b874 <memmove+0x10>
 800b86e:	4284      	cmp	r4, r0
 800b870:	4623      	mov	r3, r4
 800b872:	d807      	bhi.n	800b884 <memmove+0x20>
 800b874:	1e43      	subs	r3, r0, #1
 800b876:	42a1      	cmp	r1, r4
 800b878:	d008      	beq.n	800b88c <memmove+0x28>
 800b87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b882:	e7f8      	b.n	800b876 <memmove+0x12>
 800b884:	4402      	add	r2, r0
 800b886:	4601      	mov	r1, r0
 800b888:	428a      	cmp	r2, r1
 800b88a:	d100      	bne.n	800b88e <memmove+0x2a>
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b896:	e7f7      	b.n	800b888 <memmove+0x24>

0800b898 <memset>:
 800b898:	4402      	add	r2, r0
 800b89a:	4603      	mov	r3, r0
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d100      	bne.n	800b8a2 <memset+0xa>
 800b8a0:	4770      	bx	lr
 800b8a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b8a6:	e7f9      	b.n	800b89c <memset+0x4>

0800b8a8 <strchr>:
 800b8a8:	b2c9      	uxtb	r1, r1
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8b0:	b11a      	cbz	r2, 800b8ba <strchr+0x12>
 800b8b2:	428a      	cmp	r2, r1
 800b8b4:	d1f9      	bne.n	800b8aa <strchr+0x2>
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	4770      	bx	lr
 800b8ba:	2900      	cmp	r1, #0
 800b8bc:	bf18      	it	ne
 800b8be:	2300      	movne	r3, #0
 800b8c0:	e7f9      	b.n	800b8b6 <strchr+0xe>
	...

0800b8c4 <_localeconv_r>:
 800b8c4:	4800      	ldr	r0, [pc, #0]	; (800b8c8 <_localeconv_r+0x4>)
 800b8c6:	4770      	bx	lr
 800b8c8:	20000250 	.word	0x20000250

0800b8cc <_close_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4d06      	ldr	r5, [pc, #24]	; (800b8e8 <_close_r+0x1c>)
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	4608      	mov	r0, r1
 800b8d6:	602b      	str	r3, [r5, #0]
 800b8d8:	f7f7 f989 	bl	8002bee <_close>
 800b8dc:	1c43      	adds	r3, r0, #1
 800b8de:	d102      	bne.n	800b8e6 <_close_r+0x1a>
 800b8e0:	682b      	ldr	r3, [r5, #0]
 800b8e2:	b103      	cbz	r3, 800b8e6 <_close_r+0x1a>
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	bd38      	pop	{r3, r4, r5, pc}
 800b8e8:	20006c3c 	.word	0x20006c3c

0800b8ec <_lseek_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4d07      	ldr	r5, [pc, #28]	; (800b90c <_lseek_r+0x20>)
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	4608      	mov	r0, r1
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	602a      	str	r2, [r5, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	f7f7 f99e 	bl	8002c3c <_lseek>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_lseek_r+0x1e>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_lseek_r+0x1e>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	20006c3c 	.word	0x20006c3c

0800b910 <_read_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4d07      	ldr	r5, [pc, #28]	; (800b930 <_read_r+0x20>)
 800b914:	4604      	mov	r4, r0
 800b916:	4608      	mov	r0, r1
 800b918:	4611      	mov	r1, r2
 800b91a:	2200      	movs	r2, #0
 800b91c:	602a      	str	r2, [r5, #0]
 800b91e:	461a      	mov	r2, r3
 800b920:	f7f7 f92c 	bl	8002b7c <_read>
 800b924:	1c43      	adds	r3, r0, #1
 800b926:	d102      	bne.n	800b92e <_read_r+0x1e>
 800b928:	682b      	ldr	r3, [r5, #0]
 800b92a:	b103      	cbz	r3, 800b92e <_read_r+0x1e>
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	bd38      	pop	{r3, r4, r5, pc}
 800b930:	20006c3c 	.word	0x20006c3c

0800b934 <_sbrk_r>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	4d06      	ldr	r5, [pc, #24]	; (800b950 <_sbrk_r+0x1c>)
 800b938:	2300      	movs	r3, #0
 800b93a:	4604      	mov	r4, r0
 800b93c:	4608      	mov	r0, r1
 800b93e:	602b      	str	r3, [r5, #0]
 800b940:	f7f7 f98a 	bl	8002c58 <_sbrk>
 800b944:	1c43      	adds	r3, r0, #1
 800b946:	d102      	bne.n	800b94e <_sbrk_r+0x1a>
 800b948:	682b      	ldr	r3, [r5, #0]
 800b94a:	b103      	cbz	r3, 800b94e <_sbrk_r+0x1a>
 800b94c:	6023      	str	r3, [r4, #0]
 800b94e:	bd38      	pop	{r3, r4, r5, pc}
 800b950:	20006c3c 	.word	0x20006c3c

0800b954 <_write_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	4d07      	ldr	r5, [pc, #28]	; (800b974 <_write_r+0x20>)
 800b958:	4604      	mov	r4, r0
 800b95a:	4608      	mov	r0, r1
 800b95c:	4611      	mov	r1, r2
 800b95e:	2200      	movs	r2, #0
 800b960:	602a      	str	r2, [r5, #0]
 800b962:	461a      	mov	r2, r3
 800b964:	f7f7 f927 	bl	8002bb6 <_write>
 800b968:	1c43      	adds	r3, r0, #1
 800b96a:	d102      	bne.n	800b972 <_write_r+0x1e>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	b103      	cbz	r3, 800b972 <_write_r+0x1e>
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	20006c3c 	.word	0x20006c3c

0800b978 <__errno>:
 800b978:	4b01      	ldr	r3, [pc, #4]	; (800b980 <__errno+0x8>)
 800b97a:	6818      	ldr	r0, [r3, #0]
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	2000015c 	.word	0x2000015c

0800b984 <__libc_init_array>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	4d0d      	ldr	r5, [pc, #52]	; (800b9bc <__libc_init_array+0x38>)
 800b988:	4c0d      	ldr	r4, [pc, #52]	; (800b9c0 <__libc_init_array+0x3c>)
 800b98a:	1b64      	subs	r4, r4, r5
 800b98c:	10a4      	asrs	r4, r4, #2
 800b98e:	2600      	movs	r6, #0
 800b990:	42a6      	cmp	r6, r4
 800b992:	d109      	bne.n	800b9a8 <__libc_init_array+0x24>
 800b994:	4d0b      	ldr	r5, [pc, #44]	; (800b9c4 <__libc_init_array+0x40>)
 800b996:	4c0c      	ldr	r4, [pc, #48]	; (800b9c8 <__libc_init_array+0x44>)
 800b998:	f001 ff20 	bl	800d7dc <_init>
 800b99c:	1b64      	subs	r4, r4, r5
 800b99e:	10a4      	asrs	r4, r4, #2
 800b9a0:	2600      	movs	r6, #0
 800b9a2:	42a6      	cmp	r6, r4
 800b9a4:	d105      	bne.n	800b9b2 <__libc_init_array+0x2e>
 800b9a6:	bd70      	pop	{r4, r5, r6, pc}
 800b9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ac:	4798      	blx	r3
 800b9ae:	3601      	adds	r6, #1
 800b9b0:	e7ee      	b.n	800b990 <__libc_init_array+0xc>
 800b9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b6:	4798      	blx	r3
 800b9b8:	3601      	adds	r6, #1
 800b9ba:	e7f2      	b.n	800b9a2 <__libc_init_array+0x1e>
 800b9bc:	0800de84 	.word	0x0800de84
 800b9c0:	0800de84 	.word	0x0800de84
 800b9c4:	0800de84 	.word	0x0800de84
 800b9c8:	0800de88 	.word	0x0800de88

0800b9cc <__retarget_lock_init_recursive>:
 800b9cc:	4770      	bx	lr

0800b9ce <__retarget_lock_acquire_recursive>:
 800b9ce:	4770      	bx	lr

0800b9d0 <__retarget_lock_release_recursive>:
 800b9d0:	4770      	bx	lr

0800b9d2 <memcpy>:
 800b9d2:	440a      	add	r2, r1
 800b9d4:	4291      	cmp	r1, r2
 800b9d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9da:	d100      	bne.n	800b9de <memcpy+0xc>
 800b9dc:	4770      	bx	lr
 800b9de:	b510      	push	{r4, lr}
 800b9e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9e8:	4291      	cmp	r1, r2
 800b9ea:	d1f9      	bne.n	800b9e0 <memcpy+0xe>
 800b9ec:	bd10      	pop	{r4, pc}

0800b9ee <quorem>:
 800b9ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f2:	6903      	ldr	r3, [r0, #16]
 800b9f4:	690c      	ldr	r4, [r1, #16]
 800b9f6:	42a3      	cmp	r3, r4
 800b9f8:	4607      	mov	r7, r0
 800b9fa:	db7e      	blt.n	800bafa <quorem+0x10c>
 800b9fc:	3c01      	subs	r4, #1
 800b9fe:	f101 0814 	add.w	r8, r1, #20
 800ba02:	f100 0514 	add.w	r5, r0, #20
 800ba06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba0a:	9301      	str	r3, [sp, #4]
 800ba0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba14:	3301      	adds	r3, #1
 800ba16:	429a      	cmp	r2, r3
 800ba18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba20:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba24:	d331      	bcc.n	800ba8a <quorem+0x9c>
 800ba26:	f04f 0e00 	mov.w	lr, #0
 800ba2a:	4640      	mov	r0, r8
 800ba2c:	46ac      	mov	ip, r5
 800ba2e:	46f2      	mov	sl, lr
 800ba30:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba34:	b293      	uxth	r3, r2
 800ba36:	fb06 e303 	mla	r3, r6, r3, lr
 800ba3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba3e:	0c1a      	lsrs	r2, r3, #16
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	ebaa 0303 	sub.w	r3, sl, r3
 800ba46:	f8dc a000 	ldr.w	sl, [ip]
 800ba4a:	fa13 f38a 	uxtah	r3, r3, sl
 800ba4e:	fb06 220e 	mla	r2, r6, lr, r2
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	9b00      	ldr	r3, [sp, #0]
 800ba56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba5a:	b292      	uxth	r2, r2
 800ba5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ba60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba64:	f8bd 3000 	ldrh.w	r3, [sp]
 800ba68:	4581      	cmp	r9, r0
 800ba6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba6e:	f84c 3b04 	str.w	r3, [ip], #4
 800ba72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba76:	d2db      	bcs.n	800ba30 <quorem+0x42>
 800ba78:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba7c:	b92b      	cbnz	r3, 800ba8a <quorem+0x9c>
 800ba7e:	9b01      	ldr	r3, [sp, #4]
 800ba80:	3b04      	subs	r3, #4
 800ba82:	429d      	cmp	r5, r3
 800ba84:	461a      	mov	r2, r3
 800ba86:	d32c      	bcc.n	800bae2 <quorem+0xf4>
 800ba88:	613c      	str	r4, [r7, #16]
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	f001 f8f2 	bl	800cc74 <__mcmp>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	db22      	blt.n	800bada <quorem+0xec>
 800ba94:	3601      	adds	r6, #1
 800ba96:	4629      	mov	r1, r5
 800ba98:	2000      	movs	r0, #0
 800ba9a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba9e:	f8d1 c000 	ldr.w	ip, [r1]
 800baa2:	b293      	uxth	r3, r2
 800baa4:	1ac3      	subs	r3, r0, r3
 800baa6:	0c12      	lsrs	r2, r2, #16
 800baa8:	fa13 f38c 	uxtah	r3, r3, ip
 800baac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800baba:	45c1      	cmp	r9, r8
 800babc:	f841 3b04 	str.w	r3, [r1], #4
 800bac0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bac4:	d2e9      	bcs.n	800ba9a <quorem+0xac>
 800bac6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bace:	b922      	cbnz	r2, 800bada <quorem+0xec>
 800bad0:	3b04      	subs	r3, #4
 800bad2:	429d      	cmp	r5, r3
 800bad4:	461a      	mov	r2, r3
 800bad6:	d30a      	bcc.n	800baee <quorem+0x100>
 800bad8:	613c      	str	r4, [r7, #16]
 800bada:	4630      	mov	r0, r6
 800badc:	b003      	add	sp, #12
 800bade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae2:	6812      	ldr	r2, [r2, #0]
 800bae4:	3b04      	subs	r3, #4
 800bae6:	2a00      	cmp	r2, #0
 800bae8:	d1ce      	bne.n	800ba88 <quorem+0x9a>
 800baea:	3c01      	subs	r4, #1
 800baec:	e7c9      	b.n	800ba82 <quorem+0x94>
 800baee:	6812      	ldr	r2, [r2, #0]
 800baf0:	3b04      	subs	r3, #4
 800baf2:	2a00      	cmp	r2, #0
 800baf4:	d1f0      	bne.n	800bad8 <quorem+0xea>
 800baf6:	3c01      	subs	r4, #1
 800baf8:	e7eb      	b.n	800bad2 <quorem+0xe4>
 800bafa:	2000      	movs	r0, #0
 800bafc:	e7ee      	b.n	800badc <quorem+0xee>
	...

0800bb00 <_dtoa_r>:
 800bb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb04:	ed2d 8b04 	vpush	{d8-d9}
 800bb08:	69c5      	ldr	r5, [r0, #28]
 800bb0a:	b093      	sub	sp, #76	; 0x4c
 800bb0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb10:	ec57 6b10 	vmov	r6, r7, d0
 800bb14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bb18:	9107      	str	r1, [sp, #28]
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	920a      	str	r2, [sp, #40]	; 0x28
 800bb1e:	930d      	str	r3, [sp, #52]	; 0x34
 800bb20:	b975      	cbnz	r5, 800bb40 <_dtoa_r+0x40>
 800bb22:	2010      	movs	r0, #16
 800bb24:	f7fe ff34 	bl	800a990 <malloc>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	61e0      	str	r0, [r4, #28]
 800bb2c:	b920      	cbnz	r0, 800bb38 <_dtoa_r+0x38>
 800bb2e:	4bae      	ldr	r3, [pc, #696]	; (800bde8 <_dtoa_r+0x2e8>)
 800bb30:	21ef      	movs	r1, #239	; 0xef
 800bb32:	48ae      	ldr	r0, [pc, #696]	; (800bdec <_dtoa_r+0x2ec>)
 800bb34:	f001 fc28 	bl	800d388 <__assert_func>
 800bb38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bb3c:	6005      	str	r5, [r0, #0]
 800bb3e:	60c5      	str	r5, [r0, #12]
 800bb40:	69e3      	ldr	r3, [r4, #28]
 800bb42:	6819      	ldr	r1, [r3, #0]
 800bb44:	b151      	cbz	r1, 800bb5c <_dtoa_r+0x5c>
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	604a      	str	r2, [r1, #4]
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	4093      	lsls	r3, r2
 800bb4e:	608b      	str	r3, [r1, #8]
 800bb50:	4620      	mov	r0, r4
 800bb52:	f000 fe53 	bl	800c7fc <_Bfree>
 800bb56:	69e3      	ldr	r3, [r4, #28]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]
 800bb5c:	1e3b      	subs	r3, r7, #0
 800bb5e:	bfbb      	ittet	lt
 800bb60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bb64:	9303      	strlt	r3, [sp, #12]
 800bb66:	2300      	movge	r3, #0
 800bb68:	2201      	movlt	r2, #1
 800bb6a:	bfac      	ite	ge
 800bb6c:	f8c8 3000 	strge.w	r3, [r8]
 800bb70:	f8c8 2000 	strlt.w	r2, [r8]
 800bb74:	4b9e      	ldr	r3, [pc, #632]	; (800bdf0 <_dtoa_r+0x2f0>)
 800bb76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bb7a:	ea33 0308 	bics.w	r3, r3, r8
 800bb7e:	d11b      	bne.n	800bbb8 <_dtoa_r+0xb8>
 800bb80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb82:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bb8c:	4333      	orrs	r3, r6
 800bb8e:	f000 8593 	beq.w	800c6b8 <_dtoa_r+0xbb8>
 800bb92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb94:	b963      	cbnz	r3, 800bbb0 <_dtoa_r+0xb0>
 800bb96:	4b97      	ldr	r3, [pc, #604]	; (800bdf4 <_dtoa_r+0x2f4>)
 800bb98:	e027      	b.n	800bbea <_dtoa_r+0xea>
 800bb9a:	4b97      	ldr	r3, [pc, #604]	; (800bdf8 <_dtoa_r+0x2f8>)
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	3308      	adds	r3, #8
 800bba0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bba2:	6013      	str	r3, [r2, #0]
 800bba4:	9800      	ldr	r0, [sp, #0]
 800bba6:	b013      	add	sp, #76	; 0x4c
 800bba8:	ecbd 8b04 	vpop	{d8-d9}
 800bbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb0:	4b90      	ldr	r3, [pc, #576]	; (800bdf4 <_dtoa_r+0x2f4>)
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	3303      	adds	r3, #3
 800bbb6:	e7f3      	b.n	800bba0 <_dtoa_r+0xa0>
 800bbb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	ec51 0b17 	vmov	r0, r1, d7
 800bbc2:	eeb0 8a47 	vmov.f32	s16, s14
 800bbc6:	eef0 8a67 	vmov.f32	s17, s15
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f7f4 ff94 	bl	8000af8 <__aeabi_dcmpeq>
 800bbd0:	4681      	mov	r9, r0
 800bbd2:	b160      	cbz	r0, 800bbee <_dtoa_r+0xee>
 800bbd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	6013      	str	r3, [r2, #0]
 800bbda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 8568 	beq.w	800c6b2 <_dtoa_r+0xbb2>
 800bbe2:	4b86      	ldr	r3, [pc, #536]	; (800bdfc <_dtoa_r+0x2fc>)
 800bbe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bbe6:	6013      	str	r3, [r2, #0]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	9300      	str	r3, [sp, #0]
 800bbec:	e7da      	b.n	800bba4 <_dtoa_r+0xa4>
 800bbee:	aa10      	add	r2, sp, #64	; 0x40
 800bbf0:	a911      	add	r1, sp, #68	; 0x44
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	eeb0 0a48 	vmov.f32	s0, s16
 800bbf8:	eef0 0a68 	vmov.f32	s1, s17
 800bbfc:	f001 f8e0 	bl	800cdc0 <__d2b>
 800bc00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bc04:	4682      	mov	sl, r0
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	d07f      	beq.n	800bd0a <_dtoa_r+0x20a>
 800bc0a:	ee18 3a90 	vmov	r3, s17
 800bc0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bc16:	ec51 0b18 	vmov	r0, r1, d8
 800bc1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bc22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bc26:	4619      	mov	r1, r3
 800bc28:	2200      	movs	r2, #0
 800bc2a:	4b75      	ldr	r3, [pc, #468]	; (800be00 <_dtoa_r+0x300>)
 800bc2c:	f7f4 fb44 	bl	80002b8 <__aeabi_dsub>
 800bc30:	a367      	add	r3, pc, #412	; (adr r3, 800bdd0 <_dtoa_r+0x2d0>)
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	f7f4 fcf7 	bl	8000628 <__aeabi_dmul>
 800bc3a:	a367      	add	r3, pc, #412	; (adr r3, 800bdd8 <_dtoa_r+0x2d8>)
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	f7f4 fb3c 	bl	80002bc <__adddf3>
 800bc44:	4606      	mov	r6, r0
 800bc46:	4628      	mov	r0, r5
 800bc48:	460f      	mov	r7, r1
 800bc4a:	f7f4 fc83 	bl	8000554 <__aeabi_i2d>
 800bc4e:	a364      	add	r3, pc, #400	; (adr r3, 800bde0 <_dtoa_r+0x2e0>)
 800bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc54:	f7f4 fce8 	bl	8000628 <__aeabi_dmul>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	4639      	mov	r1, r7
 800bc60:	f7f4 fb2c 	bl	80002bc <__adddf3>
 800bc64:	4606      	mov	r6, r0
 800bc66:	460f      	mov	r7, r1
 800bc68:	f7f4 ff8e 	bl	8000b88 <__aeabi_d2iz>
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	4683      	mov	fp, r0
 800bc70:	2300      	movs	r3, #0
 800bc72:	4630      	mov	r0, r6
 800bc74:	4639      	mov	r1, r7
 800bc76:	f7f4 ff49 	bl	8000b0c <__aeabi_dcmplt>
 800bc7a:	b148      	cbz	r0, 800bc90 <_dtoa_r+0x190>
 800bc7c:	4658      	mov	r0, fp
 800bc7e:	f7f4 fc69 	bl	8000554 <__aeabi_i2d>
 800bc82:	4632      	mov	r2, r6
 800bc84:	463b      	mov	r3, r7
 800bc86:	f7f4 ff37 	bl	8000af8 <__aeabi_dcmpeq>
 800bc8a:	b908      	cbnz	r0, 800bc90 <_dtoa_r+0x190>
 800bc8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc90:	f1bb 0f16 	cmp.w	fp, #22
 800bc94:	d857      	bhi.n	800bd46 <_dtoa_r+0x246>
 800bc96:	4b5b      	ldr	r3, [pc, #364]	; (800be04 <_dtoa_r+0x304>)
 800bc98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	ec51 0b18 	vmov	r0, r1, d8
 800bca4:	f7f4 ff32 	bl	8000b0c <__aeabi_dcmplt>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d04e      	beq.n	800bd4a <_dtoa_r+0x24a>
 800bcac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	930c      	str	r3, [sp, #48]	; 0x30
 800bcb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bcb6:	1b5b      	subs	r3, r3, r5
 800bcb8:	1e5a      	subs	r2, r3, #1
 800bcba:	bf45      	ittet	mi
 800bcbc:	f1c3 0301 	rsbmi	r3, r3, #1
 800bcc0:	9305      	strmi	r3, [sp, #20]
 800bcc2:	2300      	movpl	r3, #0
 800bcc4:	2300      	movmi	r3, #0
 800bcc6:	9206      	str	r2, [sp, #24]
 800bcc8:	bf54      	ite	pl
 800bcca:	9305      	strpl	r3, [sp, #20]
 800bccc:	9306      	strmi	r3, [sp, #24]
 800bcce:	f1bb 0f00 	cmp.w	fp, #0
 800bcd2:	db3c      	blt.n	800bd4e <_dtoa_r+0x24e>
 800bcd4:	9b06      	ldr	r3, [sp, #24]
 800bcd6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bcda:	445b      	add	r3, fp
 800bcdc:	9306      	str	r3, [sp, #24]
 800bcde:	2300      	movs	r3, #0
 800bce0:	9308      	str	r3, [sp, #32]
 800bce2:	9b07      	ldr	r3, [sp, #28]
 800bce4:	2b09      	cmp	r3, #9
 800bce6:	d868      	bhi.n	800bdba <_dtoa_r+0x2ba>
 800bce8:	2b05      	cmp	r3, #5
 800bcea:	bfc4      	itt	gt
 800bcec:	3b04      	subgt	r3, #4
 800bcee:	9307      	strgt	r3, [sp, #28]
 800bcf0:	9b07      	ldr	r3, [sp, #28]
 800bcf2:	f1a3 0302 	sub.w	r3, r3, #2
 800bcf6:	bfcc      	ite	gt
 800bcf8:	2500      	movgt	r5, #0
 800bcfa:	2501      	movle	r5, #1
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	f200 8085 	bhi.w	800be0c <_dtoa_r+0x30c>
 800bd02:	e8df f003 	tbb	[pc, r3]
 800bd06:	3b2e      	.short	0x3b2e
 800bd08:	5839      	.short	0x5839
 800bd0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bd0e:	441d      	add	r5, r3
 800bd10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	bfc1      	itttt	gt
 800bd18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd1c:	fa08 f803 	lslgt.w	r8, r8, r3
 800bd20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bd24:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bd28:	bfd6      	itet	le
 800bd2a:	f1c3 0320 	rsble	r3, r3, #32
 800bd2e:	ea48 0003 	orrgt.w	r0, r8, r3
 800bd32:	fa06 f003 	lslle.w	r0, r6, r3
 800bd36:	f7f4 fbfd 	bl	8000534 <__aeabi_ui2d>
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bd40:	3d01      	subs	r5, #1
 800bd42:	920e      	str	r2, [sp, #56]	; 0x38
 800bd44:	e76f      	b.n	800bc26 <_dtoa_r+0x126>
 800bd46:	2301      	movs	r3, #1
 800bd48:	e7b3      	b.n	800bcb2 <_dtoa_r+0x1b2>
 800bd4a:	900c      	str	r0, [sp, #48]	; 0x30
 800bd4c:	e7b2      	b.n	800bcb4 <_dtoa_r+0x1b4>
 800bd4e:	9b05      	ldr	r3, [sp, #20]
 800bd50:	eba3 030b 	sub.w	r3, r3, fp
 800bd54:	9305      	str	r3, [sp, #20]
 800bd56:	f1cb 0300 	rsb	r3, fp, #0
 800bd5a:	9308      	str	r3, [sp, #32]
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd60:	e7bf      	b.n	800bce2 <_dtoa_r+0x1e2>
 800bd62:	2300      	movs	r3, #0
 800bd64:	9309      	str	r3, [sp, #36]	; 0x24
 800bd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	dc52      	bgt.n	800be12 <_dtoa_r+0x312>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	9301      	str	r3, [sp, #4]
 800bd70:	9304      	str	r3, [sp, #16]
 800bd72:	461a      	mov	r2, r3
 800bd74:	920a      	str	r2, [sp, #40]	; 0x28
 800bd76:	e00b      	b.n	800bd90 <_dtoa_r+0x290>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e7f3      	b.n	800bd64 <_dtoa_r+0x264>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd82:	445b      	add	r3, fp
 800bd84:	9301      	str	r3, [sp, #4]
 800bd86:	3301      	adds	r3, #1
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	9304      	str	r3, [sp, #16]
 800bd8c:	bfb8      	it	lt
 800bd8e:	2301      	movlt	r3, #1
 800bd90:	69e0      	ldr	r0, [r4, #28]
 800bd92:	2100      	movs	r1, #0
 800bd94:	2204      	movs	r2, #4
 800bd96:	f102 0614 	add.w	r6, r2, #20
 800bd9a:	429e      	cmp	r6, r3
 800bd9c:	d93d      	bls.n	800be1a <_dtoa_r+0x31a>
 800bd9e:	6041      	str	r1, [r0, #4]
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 fceb 	bl	800c77c <_Balloc>
 800bda6:	9000      	str	r0, [sp, #0]
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d139      	bne.n	800be20 <_dtoa_r+0x320>
 800bdac:	4b16      	ldr	r3, [pc, #88]	; (800be08 <_dtoa_r+0x308>)
 800bdae:	4602      	mov	r2, r0
 800bdb0:	f240 11af 	movw	r1, #431	; 0x1af
 800bdb4:	e6bd      	b.n	800bb32 <_dtoa_r+0x32>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e7e1      	b.n	800bd7e <_dtoa_r+0x27e>
 800bdba:	2501      	movs	r5, #1
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	9307      	str	r3, [sp, #28]
 800bdc0:	9509      	str	r5, [sp, #36]	; 0x24
 800bdc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc6:	9301      	str	r3, [sp, #4]
 800bdc8:	9304      	str	r3, [sp, #16]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2312      	movs	r3, #18
 800bdce:	e7d1      	b.n	800bd74 <_dtoa_r+0x274>
 800bdd0:	636f4361 	.word	0x636f4361
 800bdd4:	3fd287a7 	.word	0x3fd287a7
 800bdd8:	8b60c8b3 	.word	0x8b60c8b3
 800bddc:	3fc68a28 	.word	0x3fc68a28
 800bde0:	509f79fb 	.word	0x509f79fb
 800bde4:	3fd34413 	.word	0x3fd34413
 800bde8:	0800db49 	.word	0x0800db49
 800bdec:	0800db60 	.word	0x0800db60
 800bdf0:	7ff00000 	.word	0x7ff00000
 800bdf4:	0800db45 	.word	0x0800db45
 800bdf8:	0800db3c 	.word	0x0800db3c
 800bdfc:	0800db19 	.word	0x0800db19
 800be00:	3ff80000 	.word	0x3ff80000
 800be04:	0800dc50 	.word	0x0800dc50
 800be08:	0800dbb8 	.word	0x0800dbb8
 800be0c:	2301      	movs	r3, #1
 800be0e:	9309      	str	r3, [sp, #36]	; 0x24
 800be10:	e7d7      	b.n	800bdc2 <_dtoa_r+0x2c2>
 800be12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	9304      	str	r3, [sp, #16]
 800be18:	e7ba      	b.n	800bd90 <_dtoa_r+0x290>
 800be1a:	3101      	adds	r1, #1
 800be1c:	0052      	lsls	r2, r2, #1
 800be1e:	e7ba      	b.n	800bd96 <_dtoa_r+0x296>
 800be20:	69e3      	ldr	r3, [r4, #28]
 800be22:	9a00      	ldr	r2, [sp, #0]
 800be24:	601a      	str	r2, [r3, #0]
 800be26:	9b04      	ldr	r3, [sp, #16]
 800be28:	2b0e      	cmp	r3, #14
 800be2a:	f200 80a8 	bhi.w	800bf7e <_dtoa_r+0x47e>
 800be2e:	2d00      	cmp	r5, #0
 800be30:	f000 80a5 	beq.w	800bf7e <_dtoa_r+0x47e>
 800be34:	f1bb 0f00 	cmp.w	fp, #0
 800be38:	dd38      	ble.n	800beac <_dtoa_r+0x3ac>
 800be3a:	4bc0      	ldr	r3, [pc, #768]	; (800c13c <_dtoa_r+0x63c>)
 800be3c:	f00b 020f 	and.w	r2, fp, #15
 800be40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800be48:	e9d3 6700 	ldrd	r6, r7, [r3]
 800be4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800be50:	d019      	beq.n	800be86 <_dtoa_r+0x386>
 800be52:	4bbb      	ldr	r3, [pc, #748]	; (800c140 <_dtoa_r+0x640>)
 800be54:	ec51 0b18 	vmov	r0, r1, d8
 800be58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be5c:	f7f4 fd0e 	bl	800087c <__aeabi_ddiv>
 800be60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be64:	f008 080f 	and.w	r8, r8, #15
 800be68:	2503      	movs	r5, #3
 800be6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c140 <_dtoa_r+0x640>
 800be6e:	f1b8 0f00 	cmp.w	r8, #0
 800be72:	d10a      	bne.n	800be8a <_dtoa_r+0x38a>
 800be74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be78:	4632      	mov	r2, r6
 800be7a:	463b      	mov	r3, r7
 800be7c:	f7f4 fcfe 	bl	800087c <__aeabi_ddiv>
 800be80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be84:	e02b      	b.n	800bede <_dtoa_r+0x3de>
 800be86:	2502      	movs	r5, #2
 800be88:	e7ef      	b.n	800be6a <_dtoa_r+0x36a>
 800be8a:	f018 0f01 	tst.w	r8, #1
 800be8e:	d008      	beq.n	800bea2 <_dtoa_r+0x3a2>
 800be90:	4630      	mov	r0, r6
 800be92:	4639      	mov	r1, r7
 800be94:	e9d9 2300 	ldrd	r2, r3, [r9]
 800be98:	f7f4 fbc6 	bl	8000628 <__aeabi_dmul>
 800be9c:	3501      	adds	r5, #1
 800be9e:	4606      	mov	r6, r0
 800bea0:	460f      	mov	r7, r1
 800bea2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bea6:	f109 0908 	add.w	r9, r9, #8
 800beaa:	e7e0      	b.n	800be6e <_dtoa_r+0x36e>
 800beac:	f000 809f 	beq.w	800bfee <_dtoa_r+0x4ee>
 800beb0:	f1cb 0600 	rsb	r6, fp, #0
 800beb4:	4ba1      	ldr	r3, [pc, #644]	; (800c13c <_dtoa_r+0x63c>)
 800beb6:	4fa2      	ldr	r7, [pc, #648]	; (800c140 <_dtoa_r+0x640>)
 800beb8:	f006 020f 	and.w	r2, r6, #15
 800bebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	ec51 0b18 	vmov	r0, r1, d8
 800bec8:	f7f4 fbae 	bl	8000628 <__aeabi_dmul>
 800becc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bed0:	1136      	asrs	r6, r6, #4
 800bed2:	2300      	movs	r3, #0
 800bed4:	2502      	movs	r5, #2
 800bed6:	2e00      	cmp	r6, #0
 800bed8:	d17e      	bne.n	800bfd8 <_dtoa_r+0x4d8>
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d1d0      	bne.n	800be80 <_dtoa_r+0x380>
 800bede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bee0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 8084 	beq.w	800bff2 <_dtoa_r+0x4f2>
 800beea:	4b96      	ldr	r3, [pc, #600]	; (800c144 <_dtoa_r+0x644>)
 800beec:	2200      	movs	r2, #0
 800beee:	4640      	mov	r0, r8
 800bef0:	4649      	mov	r1, r9
 800bef2:	f7f4 fe0b 	bl	8000b0c <__aeabi_dcmplt>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d07b      	beq.n	800bff2 <_dtoa_r+0x4f2>
 800befa:	9b04      	ldr	r3, [sp, #16]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d078      	beq.n	800bff2 <_dtoa_r+0x4f2>
 800bf00:	9b01      	ldr	r3, [sp, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	dd39      	ble.n	800bf7a <_dtoa_r+0x47a>
 800bf06:	4b90      	ldr	r3, [pc, #576]	; (800c148 <_dtoa_r+0x648>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	4640      	mov	r0, r8
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	f7f4 fb8b 	bl	8000628 <__aeabi_dmul>
 800bf12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf16:	9e01      	ldr	r6, [sp, #4]
 800bf18:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bf1c:	3501      	adds	r5, #1
 800bf1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf22:	4628      	mov	r0, r5
 800bf24:	f7f4 fb16 	bl	8000554 <__aeabi_i2d>
 800bf28:	4642      	mov	r2, r8
 800bf2a:	464b      	mov	r3, r9
 800bf2c:	f7f4 fb7c 	bl	8000628 <__aeabi_dmul>
 800bf30:	4b86      	ldr	r3, [pc, #536]	; (800c14c <_dtoa_r+0x64c>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	f7f4 f9c2 	bl	80002bc <__adddf3>
 800bf38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bf3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf40:	9303      	str	r3, [sp, #12]
 800bf42:	2e00      	cmp	r6, #0
 800bf44:	d158      	bne.n	800bff8 <_dtoa_r+0x4f8>
 800bf46:	4b82      	ldr	r3, [pc, #520]	; (800c150 <_dtoa_r+0x650>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 f9b3 	bl	80002b8 <__aeabi_dsub>
 800bf52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf56:	4680      	mov	r8, r0
 800bf58:	4689      	mov	r9, r1
 800bf5a:	f7f4 fdf5 	bl	8000b48 <__aeabi_dcmpgt>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f040 8296 	bne.w	800c490 <_dtoa_r+0x990>
 800bf64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bf68:	4640      	mov	r0, r8
 800bf6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf6e:	4649      	mov	r1, r9
 800bf70:	f7f4 fdcc 	bl	8000b0c <__aeabi_dcmplt>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	f040 8289 	bne.w	800c48c <_dtoa_r+0x98c>
 800bf7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bf7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f2c0 814e 	blt.w	800c222 <_dtoa_r+0x722>
 800bf86:	f1bb 0f0e 	cmp.w	fp, #14
 800bf8a:	f300 814a 	bgt.w	800c222 <_dtoa_r+0x722>
 800bf8e:	4b6b      	ldr	r3, [pc, #428]	; (800c13c <_dtoa_r+0x63c>)
 800bf90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bf94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f280 80dc 	bge.w	800c158 <_dtoa_r+0x658>
 800bfa0:	9b04      	ldr	r3, [sp, #16]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f300 80d8 	bgt.w	800c158 <_dtoa_r+0x658>
 800bfa8:	f040 826f 	bne.w	800c48a <_dtoa_r+0x98a>
 800bfac:	4b68      	ldr	r3, [pc, #416]	; (800c150 <_dtoa_r+0x650>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4640      	mov	r0, r8
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	f7f4 fb38 	bl	8000628 <__aeabi_dmul>
 800bfb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfbc:	f7f4 fdba 	bl	8000b34 <__aeabi_dcmpge>
 800bfc0:	9e04      	ldr	r6, [sp, #16]
 800bfc2:	4637      	mov	r7, r6
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	f040 8245 	bne.w	800c454 <_dtoa_r+0x954>
 800bfca:	9d00      	ldr	r5, [sp, #0]
 800bfcc:	2331      	movs	r3, #49	; 0x31
 800bfce:	f805 3b01 	strb.w	r3, [r5], #1
 800bfd2:	f10b 0b01 	add.w	fp, fp, #1
 800bfd6:	e241      	b.n	800c45c <_dtoa_r+0x95c>
 800bfd8:	07f2      	lsls	r2, r6, #31
 800bfda:	d505      	bpl.n	800bfe8 <_dtoa_r+0x4e8>
 800bfdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfe0:	f7f4 fb22 	bl	8000628 <__aeabi_dmul>
 800bfe4:	3501      	adds	r5, #1
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	1076      	asrs	r6, r6, #1
 800bfea:	3708      	adds	r7, #8
 800bfec:	e773      	b.n	800bed6 <_dtoa_r+0x3d6>
 800bfee:	2502      	movs	r5, #2
 800bff0:	e775      	b.n	800bede <_dtoa_r+0x3de>
 800bff2:	9e04      	ldr	r6, [sp, #16]
 800bff4:	465f      	mov	r7, fp
 800bff6:	e792      	b.n	800bf1e <_dtoa_r+0x41e>
 800bff8:	9900      	ldr	r1, [sp, #0]
 800bffa:	4b50      	ldr	r3, [pc, #320]	; (800c13c <_dtoa_r+0x63c>)
 800bffc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c000:	4431      	add	r1, r6
 800c002:	9102      	str	r1, [sp, #8]
 800c004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c006:	eeb0 9a47 	vmov.f32	s18, s14
 800c00a:	eef0 9a67 	vmov.f32	s19, s15
 800c00e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c012:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c016:	2900      	cmp	r1, #0
 800c018:	d044      	beq.n	800c0a4 <_dtoa_r+0x5a4>
 800c01a:	494e      	ldr	r1, [pc, #312]	; (800c154 <_dtoa_r+0x654>)
 800c01c:	2000      	movs	r0, #0
 800c01e:	f7f4 fc2d 	bl	800087c <__aeabi_ddiv>
 800c022:	ec53 2b19 	vmov	r2, r3, d9
 800c026:	f7f4 f947 	bl	80002b8 <__aeabi_dsub>
 800c02a:	9d00      	ldr	r5, [sp, #0]
 800c02c:	ec41 0b19 	vmov	d9, r0, r1
 800c030:	4649      	mov	r1, r9
 800c032:	4640      	mov	r0, r8
 800c034:	f7f4 fda8 	bl	8000b88 <__aeabi_d2iz>
 800c038:	4606      	mov	r6, r0
 800c03a:	f7f4 fa8b 	bl	8000554 <__aeabi_i2d>
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4640      	mov	r0, r8
 800c044:	4649      	mov	r1, r9
 800c046:	f7f4 f937 	bl	80002b8 <__aeabi_dsub>
 800c04a:	3630      	adds	r6, #48	; 0x30
 800c04c:	f805 6b01 	strb.w	r6, [r5], #1
 800c050:	ec53 2b19 	vmov	r2, r3, d9
 800c054:	4680      	mov	r8, r0
 800c056:	4689      	mov	r9, r1
 800c058:	f7f4 fd58 	bl	8000b0c <__aeabi_dcmplt>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d164      	bne.n	800c12a <_dtoa_r+0x62a>
 800c060:	4642      	mov	r2, r8
 800c062:	464b      	mov	r3, r9
 800c064:	4937      	ldr	r1, [pc, #220]	; (800c144 <_dtoa_r+0x644>)
 800c066:	2000      	movs	r0, #0
 800c068:	f7f4 f926 	bl	80002b8 <__aeabi_dsub>
 800c06c:	ec53 2b19 	vmov	r2, r3, d9
 800c070:	f7f4 fd4c 	bl	8000b0c <__aeabi_dcmplt>
 800c074:	2800      	cmp	r0, #0
 800c076:	f040 80b6 	bne.w	800c1e6 <_dtoa_r+0x6e6>
 800c07a:	9b02      	ldr	r3, [sp, #8]
 800c07c:	429d      	cmp	r5, r3
 800c07e:	f43f af7c 	beq.w	800bf7a <_dtoa_r+0x47a>
 800c082:	4b31      	ldr	r3, [pc, #196]	; (800c148 <_dtoa_r+0x648>)
 800c084:	ec51 0b19 	vmov	r0, r1, d9
 800c088:	2200      	movs	r2, #0
 800c08a:	f7f4 facd 	bl	8000628 <__aeabi_dmul>
 800c08e:	4b2e      	ldr	r3, [pc, #184]	; (800c148 <_dtoa_r+0x648>)
 800c090:	ec41 0b19 	vmov	d9, r0, r1
 800c094:	2200      	movs	r2, #0
 800c096:	4640      	mov	r0, r8
 800c098:	4649      	mov	r1, r9
 800c09a:	f7f4 fac5 	bl	8000628 <__aeabi_dmul>
 800c09e:	4680      	mov	r8, r0
 800c0a0:	4689      	mov	r9, r1
 800c0a2:	e7c5      	b.n	800c030 <_dtoa_r+0x530>
 800c0a4:	ec51 0b17 	vmov	r0, r1, d7
 800c0a8:	f7f4 fabe 	bl	8000628 <__aeabi_dmul>
 800c0ac:	9b02      	ldr	r3, [sp, #8]
 800c0ae:	9d00      	ldr	r5, [sp, #0]
 800c0b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0b2:	ec41 0b19 	vmov	d9, r0, r1
 800c0b6:	4649      	mov	r1, r9
 800c0b8:	4640      	mov	r0, r8
 800c0ba:	f7f4 fd65 	bl	8000b88 <__aeabi_d2iz>
 800c0be:	4606      	mov	r6, r0
 800c0c0:	f7f4 fa48 	bl	8000554 <__aeabi_i2d>
 800c0c4:	3630      	adds	r6, #48	; 0x30
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	f7f4 f8f3 	bl	80002b8 <__aeabi_dsub>
 800c0d2:	f805 6b01 	strb.w	r6, [r5], #1
 800c0d6:	9b02      	ldr	r3, [sp, #8]
 800c0d8:	429d      	cmp	r5, r3
 800c0da:	4680      	mov	r8, r0
 800c0dc:	4689      	mov	r9, r1
 800c0de:	f04f 0200 	mov.w	r2, #0
 800c0e2:	d124      	bne.n	800c12e <_dtoa_r+0x62e>
 800c0e4:	4b1b      	ldr	r3, [pc, #108]	; (800c154 <_dtoa_r+0x654>)
 800c0e6:	ec51 0b19 	vmov	r0, r1, d9
 800c0ea:	f7f4 f8e7 	bl	80002bc <__adddf3>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4640      	mov	r0, r8
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	f7f4 fd27 	bl	8000b48 <__aeabi_dcmpgt>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d173      	bne.n	800c1e6 <_dtoa_r+0x6e6>
 800c0fe:	ec53 2b19 	vmov	r2, r3, d9
 800c102:	4914      	ldr	r1, [pc, #80]	; (800c154 <_dtoa_r+0x654>)
 800c104:	2000      	movs	r0, #0
 800c106:	f7f4 f8d7 	bl	80002b8 <__aeabi_dsub>
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	4640      	mov	r0, r8
 800c110:	4649      	mov	r1, r9
 800c112:	f7f4 fcfb 	bl	8000b0c <__aeabi_dcmplt>
 800c116:	2800      	cmp	r0, #0
 800c118:	f43f af2f 	beq.w	800bf7a <_dtoa_r+0x47a>
 800c11c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c11e:	1e6b      	subs	r3, r5, #1
 800c120:	930f      	str	r3, [sp, #60]	; 0x3c
 800c122:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c126:	2b30      	cmp	r3, #48	; 0x30
 800c128:	d0f8      	beq.n	800c11c <_dtoa_r+0x61c>
 800c12a:	46bb      	mov	fp, r7
 800c12c:	e04a      	b.n	800c1c4 <_dtoa_r+0x6c4>
 800c12e:	4b06      	ldr	r3, [pc, #24]	; (800c148 <_dtoa_r+0x648>)
 800c130:	f7f4 fa7a 	bl	8000628 <__aeabi_dmul>
 800c134:	4680      	mov	r8, r0
 800c136:	4689      	mov	r9, r1
 800c138:	e7bd      	b.n	800c0b6 <_dtoa_r+0x5b6>
 800c13a:	bf00      	nop
 800c13c:	0800dc50 	.word	0x0800dc50
 800c140:	0800dc28 	.word	0x0800dc28
 800c144:	3ff00000 	.word	0x3ff00000
 800c148:	40240000 	.word	0x40240000
 800c14c:	401c0000 	.word	0x401c0000
 800c150:	40140000 	.word	0x40140000
 800c154:	3fe00000 	.word	0x3fe00000
 800c158:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c15c:	9d00      	ldr	r5, [sp, #0]
 800c15e:	4642      	mov	r2, r8
 800c160:	464b      	mov	r3, r9
 800c162:	4630      	mov	r0, r6
 800c164:	4639      	mov	r1, r7
 800c166:	f7f4 fb89 	bl	800087c <__aeabi_ddiv>
 800c16a:	f7f4 fd0d 	bl	8000b88 <__aeabi_d2iz>
 800c16e:	9001      	str	r0, [sp, #4]
 800c170:	f7f4 f9f0 	bl	8000554 <__aeabi_i2d>
 800c174:	4642      	mov	r2, r8
 800c176:	464b      	mov	r3, r9
 800c178:	f7f4 fa56 	bl	8000628 <__aeabi_dmul>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	4630      	mov	r0, r6
 800c182:	4639      	mov	r1, r7
 800c184:	f7f4 f898 	bl	80002b8 <__aeabi_dsub>
 800c188:	9e01      	ldr	r6, [sp, #4]
 800c18a:	9f04      	ldr	r7, [sp, #16]
 800c18c:	3630      	adds	r6, #48	; 0x30
 800c18e:	f805 6b01 	strb.w	r6, [r5], #1
 800c192:	9e00      	ldr	r6, [sp, #0]
 800c194:	1bae      	subs	r6, r5, r6
 800c196:	42b7      	cmp	r7, r6
 800c198:	4602      	mov	r2, r0
 800c19a:	460b      	mov	r3, r1
 800c19c:	d134      	bne.n	800c208 <_dtoa_r+0x708>
 800c19e:	f7f4 f88d 	bl	80002bc <__adddf3>
 800c1a2:	4642      	mov	r2, r8
 800c1a4:	464b      	mov	r3, r9
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	460f      	mov	r7, r1
 800c1aa:	f7f4 fccd 	bl	8000b48 <__aeabi_dcmpgt>
 800c1ae:	b9c8      	cbnz	r0, 800c1e4 <_dtoa_r+0x6e4>
 800c1b0:	4642      	mov	r2, r8
 800c1b2:	464b      	mov	r3, r9
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	f7f4 fc9e 	bl	8000af8 <__aeabi_dcmpeq>
 800c1bc:	b110      	cbz	r0, 800c1c4 <_dtoa_r+0x6c4>
 800c1be:	9b01      	ldr	r3, [sp, #4]
 800c1c0:	07db      	lsls	r3, r3, #31
 800c1c2:	d40f      	bmi.n	800c1e4 <_dtoa_r+0x6e4>
 800c1c4:	4651      	mov	r1, sl
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 fb18 	bl	800c7fc <_Bfree>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1d0:	702b      	strb	r3, [r5, #0]
 800c1d2:	f10b 0301 	add.w	r3, fp, #1
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f43f ace2 	beq.w	800bba4 <_dtoa_r+0xa4>
 800c1e0:	601d      	str	r5, [r3, #0]
 800c1e2:	e4df      	b.n	800bba4 <_dtoa_r+0xa4>
 800c1e4:	465f      	mov	r7, fp
 800c1e6:	462b      	mov	r3, r5
 800c1e8:	461d      	mov	r5, r3
 800c1ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1ee:	2a39      	cmp	r2, #57	; 0x39
 800c1f0:	d106      	bne.n	800c200 <_dtoa_r+0x700>
 800c1f2:	9a00      	ldr	r2, [sp, #0]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d1f7      	bne.n	800c1e8 <_dtoa_r+0x6e8>
 800c1f8:	9900      	ldr	r1, [sp, #0]
 800c1fa:	2230      	movs	r2, #48	; 0x30
 800c1fc:	3701      	adds	r7, #1
 800c1fe:	700a      	strb	r2, [r1, #0]
 800c200:	781a      	ldrb	r2, [r3, #0]
 800c202:	3201      	adds	r2, #1
 800c204:	701a      	strb	r2, [r3, #0]
 800c206:	e790      	b.n	800c12a <_dtoa_r+0x62a>
 800c208:	4ba3      	ldr	r3, [pc, #652]	; (800c498 <_dtoa_r+0x998>)
 800c20a:	2200      	movs	r2, #0
 800c20c:	f7f4 fa0c 	bl	8000628 <__aeabi_dmul>
 800c210:	2200      	movs	r2, #0
 800c212:	2300      	movs	r3, #0
 800c214:	4606      	mov	r6, r0
 800c216:	460f      	mov	r7, r1
 800c218:	f7f4 fc6e 	bl	8000af8 <__aeabi_dcmpeq>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d09e      	beq.n	800c15e <_dtoa_r+0x65e>
 800c220:	e7d0      	b.n	800c1c4 <_dtoa_r+0x6c4>
 800c222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c224:	2a00      	cmp	r2, #0
 800c226:	f000 80ca 	beq.w	800c3be <_dtoa_r+0x8be>
 800c22a:	9a07      	ldr	r2, [sp, #28]
 800c22c:	2a01      	cmp	r2, #1
 800c22e:	f300 80ad 	bgt.w	800c38c <_dtoa_r+0x88c>
 800c232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c234:	2a00      	cmp	r2, #0
 800c236:	f000 80a5 	beq.w	800c384 <_dtoa_r+0x884>
 800c23a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c23e:	9e08      	ldr	r6, [sp, #32]
 800c240:	9d05      	ldr	r5, [sp, #20]
 800c242:	9a05      	ldr	r2, [sp, #20]
 800c244:	441a      	add	r2, r3
 800c246:	9205      	str	r2, [sp, #20]
 800c248:	9a06      	ldr	r2, [sp, #24]
 800c24a:	2101      	movs	r1, #1
 800c24c:	441a      	add	r2, r3
 800c24e:	4620      	mov	r0, r4
 800c250:	9206      	str	r2, [sp, #24]
 800c252:	f000 fb89 	bl	800c968 <__i2b>
 800c256:	4607      	mov	r7, r0
 800c258:	b165      	cbz	r5, 800c274 <_dtoa_r+0x774>
 800c25a:	9b06      	ldr	r3, [sp, #24]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dd09      	ble.n	800c274 <_dtoa_r+0x774>
 800c260:	42ab      	cmp	r3, r5
 800c262:	9a05      	ldr	r2, [sp, #20]
 800c264:	bfa8      	it	ge
 800c266:	462b      	movge	r3, r5
 800c268:	1ad2      	subs	r2, r2, r3
 800c26a:	9205      	str	r2, [sp, #20]
 800c26c:	9a06      	ldr	r2, [sp, #24]
 800c26e:	1aed      	subs	r5, r5, r3
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	9306      	str	r3, [sp, #24]
 800c274:	9b08      	ldr	r3, [sp, #32]
 800c276:	b1f3      	cbz	r3, 800c2b6 <_dtoa_r+0x7b6>
 800c278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f000 80a3 	beq.w	800c3c6 <_dtoa_r+0x8c6>
 800c280:	2e00      	cmp	r6, #0
 800c282:	dd10      	ble.n	800c2a6 <_dtoa_r+0x7a6>
 800c284:	4639      	mov	r1, r7
 800c286:	4632      	mov	r2, r6
 800c288:	4620      	mov	r0, r4
 800c28a:	f000 fc2d 	bl	800cae8 <__pow5mult>
 800c28e:	4652      	mov	r2, sl
 800c290:	4601      	mov	r1, r0
 800c292:	4607      	mov	r7, r0
 800c294:	4620      	mov	r0, r4
 800c296:	f000 fb7d 	bl	800c994 <__multiply>
 800c29a:	4651      	mov	r1, sl
 800c29c:	4680      	mov	r8, r0
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f000 faac 	bl	800c7fc <_Bfree>
 800c2a4:	46c2      	mov	sl, r8
 800c2a6:	9b08      	ldr	r3, [sp, #32]
 800c2a8:	1b9a      	subs	r2, r3, r6
 800c2aa:	d004      	beq.n	800c2b6 <_dtoa_r+0x7b6>
 800c2ac:	4651      	mov	r1, sl
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 fc1a 	bl	800cae8 <__pow5mult>
 800c2b4:	4682      	mov	sl, r0
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f000 fb55 	bl	800c968 <__i2b>
 800c2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	f340 8081 	ble.w	800c3ca <_dtoa_r+0x8ca>
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	4601      	mov	r1, r0
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 fc0b 	bl	800cae8 <__pow5mult>
 800c2d2:	9b07      	ldr	r3, [sp, #28]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	4606      	mov	r6, r0
 800c2d8:	dd7a      	ble.n	800c3d0 <_dtoa_r+0x8d0>
 800c2da:	f04f 0800 	mov.w	r8, #0
 800c2de:	6933      	ldr	r3, [r6, #16]
 800c2e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c2e4:	6918      	ldr	r0, [r3, #16]
 800c2e6:	f000 faf1 	bl	800c8cc <__hi0bits>
 800c2ea:	f1c0 0020 	rsb	r0, r0, #32
 800c2ee:	9b06      	ldr	r3, [sp, #24]
 800c2f0:	4418      	add	r0, r3
 800c2f2:	f010 001f 	ands.w	r0, r0, #31
 800c2f6:	f000 8094 	beq.w	800c422 <_dtoa_r+0x922>
 800c2fa:	f1c0 0320 	rsb	r3, r0, #32
 800c2fe:	2b04      	cmp	r3, #4
 800c300:	f340 8085 	ble.w	800c40e <_dtoa_r+0x90e>
 800c304:	9b05      	ldr	r3, [sp, #20]
 800c306:	f1c0 001c 	rsb	r0, r0, #28
 800c30a:	4403      	add	r3, r0
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	9b06      	ldr	r3, [sp, #24]
 800c310:	4403      	add	r3, r0
 800c312:	4405      	add	r5, r0
 800c314:	9306      	str	r3, [sp, #24]
 800c316:	9b05      	ldr	r3, [sp, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	dd05      	ble.n	800c328 <_dtoa_r+0x828>
 800c31c:	4651      	mov	r1, sl
 800c31e:	461a      	mov	r2, r3
 800c320:	4620      	mov	r0, r4
 800c322:	f000 fc3b 	bl	800cb9c <__lshift>
 800c326:	4682      	mov	sl, r0
 800c328:	9b06      	ldr	r3, [sp, #24]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	dd05      	ble.n	800c33a <_dtoa_r+0x83a>
 800c32e:	4631      	mov	r1, r6
 800c330:	461a      	mov	r2, r3
 800c332:	4620      	mov	r0, r4
 800c334:	f000 fc32 	bl	800cb9c <__lshift>
 800c338:	4606      	mov	r6, r0
 800c33a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d072      	beq.n	800c426 <_dtoa_r+0x926>
 800c340:	4631      	mov	r1, r6
 800c342:	4650      	mov	r0, sl
 800c344:	f000 fc96 	bl	800cc74 <__mcmp>
 800c348:	2800      	cmp	r0, #0
 800c34a:	da6c      	bge.n	800c426 <_dtoa_r+0x926>
 800c34c:	2300      	movs	r3, #0
 800c34e:	4651      	mov	r1, sl
 800c350:	220a      	movs	r2, #10
 800c352:	4620      	mov	r0, r4
 800c354:	f000 fa74 	bl	800c840 <__multadd>
 800c358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c35a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c35e:	4682      	mov	sl, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 81b0 	beq.w	800c6c6 <_dtoa_r+0xbc6>
 800c366:	2300      	movs	r3, #0
 800c368:	4639      	mov	r1, r7
 800c36a:	220a      	movs	r2, #10
 800c36c:	4620      	mov	r0, r4
 800c36e:	f000 fa67 	bl	800c840 <__multadd>
 800c372:	9b01      	ldr	r3, [sp, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	4607      	mov	r7, r0
 800c378:	f300 8096 	bgt.w	800c4a8 <_dtoa_r+0x9a8>
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	dc59      	bgt.n	800c436 <_dtoa_r+0x936>
 800c382:	e091      	b.n	800c4a8 <_dtoa_r+0x9a8>
 800c384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c38a:	e758      	b.n	800c23e <_dtoa_r+0x73e>
 800c38c:	9b04      	ldr	r3, [sp, #16]
 800c38e:	1e5e      	subs	r6, r3, #1
 800c390:	9b08      	ldr	r3, [sp, #32]
 800c392:	42b3      	cmp	r3, r6
 800c394:	bfbf      	itttt	lt
 800c396:	9b08      	ldrlt	r3, [sp, #32]
 800c398:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c39a:	9608      	strlt	r6, [sp, #32]
 800c39c:	1af3      	sublt	r3, r6, r3
 800c39e:	bfb4      	ite	lt
 800c3a0:	18d2      	addlt	r2, r2, r3
 800c3a2:	1b9e      	subge	r6, r3, r6
 800c3a4:	9b04      	ldr	r3, [sp, #16]
 800c3a6:	bfbc      	itt	lt
 800c3a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c3aa:	2600      	movlt	r6, #0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	bfb7      	itett	lt
 800c3b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c3b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c3b8:	1a9d      	sublt	r5, r3, r2
 800c3ba:	2300      	movlt	r3, #0
 800c3bc:	e741      	b.n	800c242 <_dtoa_r+0x742>
 800c3be:	9e08      	ldr	r6, [sp, #32]
 800c3c0:	9d05      	ldr	r5, [sp, #20]
 800c3c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c3c4:	e748      	b.n	800c258 <_dtoa_r+0x758>
 800c3c6:	9a08      	ldr	r2, [sp, #32]
 800c3c8:	e770      	b.n	800c2ac <_dtoa_r+0x7ac>
 800c3ca:	9b07      	ldr	r3, [sp, #28]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	dc19      	bgt.n	800c404 <_dtoa_r+0x904>
 800c3d0:	9b02      	ldr	r3, [sp, #8]
 800c3d2:	b9bb      	cbnz	r3, 800c404 <_dtoa_r+0x904>
 800c3d4:	9b03      	ldr	r3, [sp, #12]
 800c3d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3da:	b99b      	cbnz	r3, 800c404 <_dtoa_r+0x904>
 800c3dc:	9b03      	ldr	r3, [sp, #12]
 800c3de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3e2:	0d1b      	lsrs	r3, r3, #20
 800c3e4:	051b      	lsls	r3, r3, #20
 800c3e6:	b183      	cbz	r3, 800c40a <_dtoa_r+0x90a>
 800c3e8:	9b05      	ldr	r3, [sp, #20]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	9305      	str	r3, [sp, #20]
 800c3ee:	9b06      	ldr	r3, [sp, #24]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	9306      	str	r3, [sp, #24]
 800c3f4:	f04f 0801 	mov.w	r8, #1
 800c3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f47f af6f 	bne.w	800c2de <_dtoa_r+0x7de>
 800c400:	2001      	movs	r0, #1
 800c402:	e774      	b.n	800c2ee <_dtoa_r+0x7ee>
 800c404:	f04f 0800 	mov.w	r8, #0
 800c408:	e7f6      	b.n	800c3f8 <_dtoa_r+0x8f8>
 800c40a:	4698      	mov	r8, r3
 800c40c:	e7f4      	b.n	800c3f8 <_dtoa_r+0x8f8>
 800c40e:	d082      	beq.n	800c316 <_dtoa_r+0x816>
 800c410:	9a05      	ldr	r2, [sp, #20]
 800c412:	331c      	adds	r3, #28
 800c414:	441a      	add	r2, r3
 800c416:	9205      	str	r2, [sp, #20]
 800c418:	9a06      	ldr	r2, [sp, #24]
 800c41a:	441a      	add	r2, r3
 800c41c:	441d      	add	r5, r3
 800c41e:	9206      	str	r2, [sp, #24]
 800c420:	e779      	b.n	800c316 <_dtoa_r+0x816>
 800c422:	4603      	mov	r3, r0
 800c424:	e7f4      	b.n	800c410 <_dtoa_r+0x910>
 800c426:	9b04      	ldr	r3, [sp, #16]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	dc37      	bgt.n	800c49c <_dtoa_r+0x99c>
 800c42c:	9b07      	ldr	r3, [sp, #28]
 800c42e:	2b02      	cmp	r3, #2
 800c430:	dd34      	ble.n	800c49c <_dtoa_r+0x99c>
 800c432:	9b04      	ldr	r3, [sp, #16]
 800c434:	9301      	str	r3, [sp, #4]
 800c436:	9b01      	ldr	r3, [sp, #4]
 800c438:	b963      	cbnz	r3, 800c454 <_dtoa_r+0x954>
 800c43a:	4631      	mov	r1, r6
 800c43c:	2205      	movs	r2, #5
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 f9fe 	bl	800c840 <__multadd>
 800c444:	4601      	mov	r1, r0
 800c446:	4606      	mov	r6, r0
 800c448:	4650      	mov	r0, sl
 800c44a:	f000 fc13 	bl	800cc74 <__mcmp>
 800c44e:	2800      	cmp	r0, #0
 800c450:	f73f adbb 	bgt.w	800bfca <_dtoa_r+0x4ca>
 800c454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c456:	9d00      	ldr	r5, [sp, #0]
 800c458:	ea6f 0b03 	mvn.w	fp, r3
 800c45c:	f04f 0800 	mov.w	r8, #0
 800c460:	4631      	mov	r1, r6
 800c462:	4620      	mov	r0, r4
 800c464:	f000 f9ca 	bl	800c7fc <_Bfree>
 800c468:	2f00      	cmp	r7, #0
 800c46a:	f43f aeab 	beq.w	800c1c4 <_dtoa_r+0x6c4>
 800c46e:	f1b8 0f00 	cmp.w	r8, #0
 800c472:	d005      	beq.n	800c480 <_dtoa_r+0x980>
 800c474:	45b8      	cmp	r8, r7
 800c476:	d003      	beq.n	800c480 <_dtoa_r+0x980>
 800c478:	4641      	mov	r1, r8
 800c47a:	4620      	mov	r0, r4
 800c47c:	f000 f9be 	bl	800c7fc <_Bfree>
 800c480:	4639      	mov	r1, r7
 800c482:	4620      	mov	r0, r4
 800c484:	f000 f9ba 	bl	800c7fc <_Bfree>
 800c488:	e69c      	b.n	800c1c4 <_dtoa_r+0x6c4>
 800c48a:	2600      	movs	r6, #0
 800c48c:	4637      	mov	r7, r6
 800c48e:	e7e1      	b.n	800c454 <_dtoa_r+0x954>
 800c490:	46bb      	mov	fp, r7
 800c492:	4637      	mov	r7, r6
 800c494:	e599      	b.n	800bfca <_dtoa_r+0x4ca>
 800c496:	bf00      	nop
 800c498:	40240000 	.word	0x40240000
 800c49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f000 80c8 	beq.w	800c634 <_dtoa_r+0xb34>
 800c4a4:	9b04      	ldr	r3, [sp, #16]
 800c4a6:	9301      	str	r3, [sp, #4]
 800c4a8:	2d00      	cmp	r5, #0
 800c4aa:	dd05      	ble.n	800c4b8 <_dtoa_r+0x9b8>
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	462a      	mov	r2, r5
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f000 fb73 	bl	800cb9c <__lshift>
 800c4b6:	4607      	mov	r7, r0
 800c4b8:	f1b8 0f00 	cmp.w	r8, #0
 800c4bc:	d05b      	beq.n	800c576 <_dtoa_r+0xa76>
 800c4be:	6879      	ldr	r1, [r7, #4]
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 f95b 	bl	800c77c <_Balloc>
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	b928      	cbnz	r0, 800c4d6 <_dtoa_r+0x9d6>
 800c4ca:	4b83      	ldr	r3, [pc, #524]	; (800c6d8 <_dtoa_r+0xbd8>)
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c4d2:	f7ff bb2e 	b.w	800bb32 <_dtoa_r+0x32>
 800c4d6:	693a      	ldr	r2, [r7, #16]
 800c4d8:	3202      	adds	r2, #2
 800c4da:	0092      	lsls	r2, r2, #2
 800c4dc:	f107 010c 	add.w	r1, r7, #12
 800c4e0:	300c      	adds	r0, #12
 800c4e2:	f7ff fa76 	bl	800b9d2 <memcpy>
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 fb56 	bl	800cb9c <__lshift>
 800c4f0:	9b00      	ldr	r3, [sp, #0]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	9304      	str	r3, [sp, #16]
 800c4f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	9308      	str	r3, [sp, #32]
 800c4fe:	9b02      	ldr	r3, [sp, #8]
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	46b8      	mov	r8, r7
 800c506:	9306      	str	r3, [sp, #24]
 800c508:	4607      	mov	r7, r0
 800c50a:	9b04      	ldr	r3, [sp, #16]
 800c50c:	4631      	mov	r1, r6
 800c50e:	3b01      	subs	r3, #1
 800c510:	4650      	mov	r0, sl
 800c512:	9301      	str	r3, [sp, #4]
 800c514:	f7ff fa6b 	bl	800b9ee <quorem>
 800c518:	4641      	mov	r1, r8
 800c51a:	9002      	str	r0, [sp, #8]
 800c51c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c520:	4650      	mov	r0, sl
 800c522:	f000 fba7 	bl	800cc74 <__mcmp>
 800c526:	463a      	mov	r2, r7
 800c528:	9005      	str	r0, [sp, #20]
 800c52a:	4631      	mov	r1, r6
 800c52c:	4620      	mov	r0, r4
 800c52e:	f000 fbbd 	bl	800ccac <__mdiff>
 800c532:	68c2      	ldr	r2, [r0, #12]
 800c534:	4605      	mov	r5, r0
 800c536:	bb02      	cbnz	r2, 800c57a <_dtoa_r+0xa7a>
 800c538:	4601      	mov	r1, r0
 800c53a:	4650      	mov	r0, sl
 800c53c:	f000 fb9a 	bl	800cc74 <__mcmp>
 800c540:	4602      	mov	r2, r0
 800c542:	4629      	mov	r1, r5
 800c544:	4620      	mov	r0, r4
 800c546:	9209      	str	r2, [sp, #36]	; 0x24
 800c548:	f000 f958 	bl	800c7fc <_Bfree>
 800c54c:	9b07      	ldr	r3, [sp, #28]
 800c54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c550:	9d04      	ldr	r5, [sp, #16]
 800c552:	ea43 0102 	orr.w	r1, r3, r2
 800c556:	9b06      	ldr	r3, [sp, #24]
 800c558:	4319      	orrs	r1, r3
 800c55a:	d110      	bne.n	800c57e <_dtoa_r+0xa7e>
 800c55c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c560:	d029      	beq.n	800c5b6 <_dtoa_r+0xab6>
 800c562:	9b05      	ldr	r3, [sp, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	dd02      	ble.n	800c56e <_dtoa_r+0xa6e>
 800c568:	9b02      	ldr	r3, [sp, #8]
 800c56a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c56e:	9b01      	ldr	r3, [sp, #4]
 800c570:	f883 9000 	strb.w	r9, [r3]
 800c574:	e774      	b.n	800c460 <_dtoa_r+0x960>
 800c576:	4638      	mov	r0, r7
 800c578:	e7ba      	b.n	800c4f0 <_dtoa_r+0x9f0>
 800c57a:	2201      	movs	r2, #1
 800c57c:	e7e1      	b.n	800c542 <_dtoa_r+0xa42>
 800c57e:	9b05      	ldr	r3, [sp, #20]
 800c580:	2b00      	cmp	r3, #0
 800c582:	db04      	blt.n	800c58e <_dtoa_r+0xa8e>
 800c584:	9907      	ldr	r1, [sp, #28]
 800c586:	430b      	orrs	r3, r1
 800c588:	9906      	ldr	r1, [sp, #24]
 800c58a:	430b      	orrs	r3, r1
 800c58c:	d120      	bne.n	800c5d0 <_dtoa_r+0xad0>
 800c58e:	2a00      	cmp	r2, #0
 800c590:	dded      	ble.n	800c56e <_dtoa_r+0xa6e>
 800c592:	4651      	mov	r1, sl
 800c594:	2201      	movs	r2, #1
 800c596:	4620      	mov	r0, r4
 800c598:	f000 fb00 	bl	800cb9c <__lshift>
 800c59c:	4631      	mov	r1, r6
 800c59e:	4682      	mov	sl, r0
 800c5a0:	f000 fb68 	bl	800cc74 <__mcmp>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	dc03      	bgt.n	800c5b0 <_dtoa_r+0xab0>
 800c5a8:	d1e1      	bne.n	800c56e <_dtoa_r+0xa6e>
 800c5aa:	f019 0f01 	tst.w	r9, #1
 800c5ae:	d0de      	beq.n	800c56e <_dtoa_r+0xa6e>
 800c5b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c5b4:	d1d8      	bne.n	800c568 <_dtoa_r+0xa68>
 800c5b6:	9a01      	ldr	r2, [sp, #4]
 800c5b8:	2339      	movs	r3, #57	; 0x39
 800c5ba:	7013      	strb	r3, [r2, #0]
 800c5bc:	462b      	mov	r3, r5
 800c5be:	461d      	mov	r5, r3
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c5c6:	2a39      	cmp	r2, #57	; 0x39
 800c5c8:	d06c      	beq.n	800c6a4 <_dtoa_r+0xba4>
 800c5ca:	3201      	adds	r2, #1
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	e747      	b.n	800c460 <_dtoa_r+0x960>
 800c5d0:	2a00      	cmp	r2, #0
 800c5d2:	dd07      	ble.n	800c5e4 <_dtoa_r+0xae4>
 800c5d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c5d8:	d0ed      	beq.n	800c5b6 <_dtoa_r+0xab6>
 800c5da:	9a01      	ldr	r2, [sp, #4]
 800c5dc:	f109 0301 	add.w	r3, r9, #1
 800c5e0:	7013      	strb	r3, [r2, #0]
 800c5e2:	e73d      	b.n	800c460 <_dtoa_r+0x960>
 800c5e4:	9b04      	ldr	r3, [sp, #16]
 800c5e6:	9a08      	ldr	r2, [sp, #32]
 800c5e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d043      	beq.n	800c678 <_dtoa_r+0xb78>
 800c5f0:	4651      	mov	r1, sl
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	220a      	movs	r2, #10
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f000 f922 	bl	800c840 <__multadd>
 800c5fc:	45b8      	cmp	r8, r7
 800c5fe:	4682      	mov	sl, r0
 800c600:	f04f 0300 	mov.w	r3, #0
 800c604:	f04f 020a 	mov.w	r2, #10
 800c608:	4641      	mov	r1, r8
 800c60a:	4620      	mov	r0, r4
 800c60c:	d107      	bne.n	800c61e <_dtoa_r+0xb1e>
 800c60e:	f000 f917 	bl	800c840 <__multadd>
 800c612:	4680      	mov	r8, r0
 800c614:	4607      	mov	r7, r0
 800c616:	9b04      	ldr	r3, [sp, #16]
 800c618:	3301      	adds	r3, #1
 800c61a:	9304      	str	r3, [sp, #16]
 800c61c:	e775      	b.n	800c50a <_dtoa_r+0xa0a>
 800c61e:	f000 f90f 	bl	800c840 <__multadd>
 800c622:	4639      	mov	r1, r7
 800c624:	4680      	mov	r8, r0
 800c626:	2300      	movs	r3, #0
 800c628:	220a      	movs	r2, #10
 800c62a:	4620      	mov	r0, r4
 800c62c:	f000 f908 	bl	800c840 <__multadd>
 800c630:	4607      	mov	r7, r0
 800c632:	e7f0      	b.n	800c616 <_dtoa_r+0xb16>
 800c634:	9b04      	ldr	r3, [sp, #16]
 800c636:	9301      	str	r3, [sp, #4]
 800c638:	9d00      	ldr	r5, [sp, #0]
 800c63a:	4631      	mov	r1, r6
 800c63c:	4650      	mov	r0, sl
 800c63e:	f7ff f9d6 	bl	800b9ee <quorem>
 800c642:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c646:	9b00      	ldr	r3, [sp, #0]
 800c648:	f805 9b01 	strb.w	r9, [r5], #1
 800c64c:	1aea      	subs	r2, r5, r3
 800c64e:	9b01      	ldr	r3, [sp, #4]
 800c650:	4293      	cmp	r3, r2
 800c652:	dd07      	ble.n	800c664 <_dtoa_r+0xb64>
 800c654:	4651      	mov	r1, sl
 800c656:	2300      	movs	r3, #0
 800c658:	220a      	movs	r2, #10
 800c65a:	4620      	mov	r0, r4
 800c65c:	f000 f8f0 	bl	800c840 <__multadd>
 800c660:	4682      	mov	sl, r0
 800c662:	e7ea      	b.n	800c63a <_dtoa_r+0xb3a>
 800c664:	9b01      	ldr	r3, [sp, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	bfc8      	it	gt
 800c66a:	461d      	movgt	r5, r3
 800c66c:	9b00      	ldr	r3, [sp, #0]
 800c66e:	bfd8      	it	le
 800c670:	2501      	movle	r5, #1
 800c672:	441d      	add	r5, r3
 800c674:	f04f 0800 	mov.w	r8, #0
 800c678:	4651      	mov	r1, sl
 800c67a:	2201      	movs	r2, #1
 800c67c:	4620      	mov	r0, r4
 800c67e:	f000 fa8d 	bl	800cb9c <__lshift>
 800c682:	4631      	mov	r1, r6
 800c684:	4682      	mov	sl, r0
 800c686:	f000 faf5 	bl	800cc74 <__mcmp>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	dc96      	bgt.n	800c5bc <_dtoa_r+0xabc>
 800c68e:	d102      	bne.n	800c696 <_dtoa_r+0xb96>
 800c690:	f019 0f01 	tst.w	r9, #1
 800c694:	d192      	bne.n	800c5bc <_dtoa_r+0xabc>
 800c696:	462b      	mov	r3, r5
 800c698:	461d      	mov	r5, r3
 800c69a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c69e:	2a30      	cmp	r2, #48	; 0x30
 800c6a0:	d0fa      	beq.n	800c698 <_dtoa_r+0xb98>
 800c6a2:	e6dd      	b.n	800c460 <_dtoa_r+0x960>
 800c6a4:	9a00      	ldr	r2, [sp, #0]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d189      	bne.n	800c5be <_dtoa_r+0xabe>
 800c6aa:	f10b 0b01 	add.w	fp, fp, #1
 800c6ae:	2331      	movs	r3, #49	; 0x31
 800c6b0:	e796      	b.n	800c5e0 <_dtoa_r+0xae0>
 800c6b2:	4b0a      	ldr	r3, [pc, #40]	; (800c6dc <_dtoa_r+0xbdc>)
 800c6b4:	f7ff ba99 	b.w	800bbea <_dtoa_r+0xea>
 800c6b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	f47f aa6d 	bne.w	800bb9a <_dtoa_r+0x9a>
 800c6c0:	4b07      	ldr	r3, [pc, #28]	; (800c6e0 <_dtoa_r+0xbe0>)
 800c6c2:	f7ff ba92 	b.w	800bbea <_dtoa_r+0xea>
 800c6c6:	9b01      	ldr	r3, [sp, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	dcb5      	bgt.n	800c638 <_dtoa_r+0xb38>
 800c6cc:	9b07      	ldr	r3, [sp, #28]
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	f73f aeb1 	bgt.w	800c436 <_dtoa_r+0x936>
 800c6d4:	e7b0      	b.n	800c638 <_dtoa_r+0xb38>
 800c6d6:	bf00      	nop
 800c6d8:	0800dbb8 	.word	0x0800dbb8
 800c6dc:	0800db18 	.word	0x0800db18
 800c6e0:	0800db3c 	.word	0x0800db3c

0800c6e4 <_free_r>:
 800c6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6e6:	2900      	cmp	r1, #0
 800c6e8:	d044      	beq.n	800c774 <_free_r+0x90>
 800c6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ee:	9001      	str	r0, [sp, #4]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f1a1 0404 	sub.w	r4, r1, #4
 800c6f6:	bfb8      	it	lt
 800c6f8:	18e4      	addlt	r4, r4, r3
 800c6fa:	f7fe f9f1 	bl	800aae0 <__malloc_lock>
 800c6fe:	4a1e      	ldr	r2, [pc, #120]	; (800c778 <_free_r+0x94>)
 800c700:	9801      	ldr	r0, [sp, #4]
 800c702:	6813      	ldr	r3, [r2, #0]
 800c704:	b933      	cbnz	r3, 800c714 <_free_r+0x30>
 800c706:	6063      	str	r3, [r4, #4]
 800c708:	6014      	str	r4, [r2, #0]
 800c70a:	b003      	add	sp, #12
 800c70c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c710:	f7fe b9ec 	b.w	800aaec <__malloc_unlock>
 800c714:	42a3      	cmp	r3, r4
 800c716:	d908      	bls.n	800c72a <_free_r+0x46>
 800c718:	6825      	ldr	r5, [r4, #0]
 800c71a:	1961      	adds	r1, r4, r5
 800c71c:	428b      	cmp	r3, r1
 800c71e:	bf01      	itttt	eq
 800c720:	6819      	ldreq	r1, [r3, #0]
 800c722:	685b      	ldreq	r3, [r3, #4]
 800c724:	1949      	addeq	r1, r1, r5
 800c726:	6021      	streq	r1, [r4, #0]
 800c728:	e7ed      	b.n	800c706 <_free_r+0x22>
 800c72a:	461a      	mov	r2, r3
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	b10b      	cbz	r3, 800c734 <_free_r+0x50>
 800c730:	42a3      	cmp	r3, r4
 800c732:	d9fa      	bls.n	800c72a <_free_r+0x46>
 800c734:	6811      	ldr	r1, [r2, #0]
 800c736:	1855      	adds	r5, r2, r1
 800c738:	42a5      	cmp	r5, r4
 800c73a:	d10b      	bne.n	800c754 <_free_r+0x70>
 800c73c:	6824      	ldr	r4, [r4, #0]
 800c73e:	4421      	add	r1, r4
 800c740:	1854      	adds	r4, r2, r1
 800c742:	42a3      	cmp	r3, r4
 800c744:	6011      	str	r1, [r2, #0]
 800c746:	d1e0      	bne.n	800c70a <_free_r+0x26>
 800c748:	681c      	ldr	r4, [r3, #0]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	6053      	str	r3, [r2, #4]
 800c74e:	440c      	add	r4, r1
 800c750:	6014      	str	r4, [r2, #0]
 800c752:	e7da      	b.n	800c70a <_free_r+0x26>
 800c754:	d902      	bls.n	800c75c <_free_r+0x78>
 800c756:	230c      	movs	r3, #12
 800c758:	6003      	str	r3, [r0, #0]
 800c75a:	e7d6      	b.n	800c70a <_free_r+0x26>
 800c75c:	6825      	ldr	r5, [r4, #0]
 800c75e:	1961      	adds	r1, r4, r5
 800c760:	428b      	cmp	r3, r1
 800c762:	bf04      	itt	eq
 800c764:	6819      	ldreq	r1, [r3, #0]
 800c766:	685b      	ldreq	r3, [r3, #4]
 800c768:	6063      	str	r3, [r4, #4]
 800c76a:	bf04      	itt	eq
 800c76c:	1949      	addeq	r1, r1, r5
 800c76e:	6021      	streq	r1, [r4, #0]
 800c770:	6054      	str	r4, [r2, #4]
 800c772:	e7ca      	b.n	800c70a <_free_r+0x26>
 800c774:	b003      	add	sp, #12
 800c776:	bd30      	pop	{r4, r5, pc}
 800c778:	20006af8 	.word	0x20006af8

0800c77c <_Balloc>:
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	69c6      	ldr	r6, [r0, #28]
 800c780:	4604      	mov	r4, r0
 800c782:	460d      	mov	r5, r1
 800c784:	b976      	cbnz	r6, 800c7a4 <_Balloc+0x28>
 800c786:	2010      	movs	r0, #16
 800c788:	f7fe f902 	bl	800a990 <malloc>
 800c78c:	4602      	mov	r2, r0
 800c78e:	61e0      	str	r0, [r4, #28]
 800c790:	b920      	cbnz	r0, 800c79c <_Balloc+0x20>
 800c792:	4b18      	ldr	r3, [pc, #96]	; (800c7f4 <_Balloc+0x78>)
 800c794:	4818      	ldr	r0, [pc, #96]	; (800c7f8 <_Balloc+0x7c>)
 800c796:	216b      	movs	r1, #107	; 0x6b
 800c798:	f000 fdf6 	bl	800d388 <__assert_func>
 800c79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7a0:	6006      	str	r6, [r0, #0]
 800c7a2:	60c6      	str	r6, [r0, #12]
 800c7a4:	69e6      	ldr	r6, [r4, #28]
 800c7a6:	68f3      	ldr	r3, [r6, #12]
 800c7a8:	b183      	cbz	r3, 800c7cc <_Balloc+0x50>
 800c7aa:	69e3      	ldr	r3, [r4, #28]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7b2:	b9b8      	cbnz	r0, 800c7e4 <_Balloc+0x68>
 800c7b4:	2101      	movs	r1, #1
 800c7b6:	fa01 f605 	lsl.w	r6, r1, r5
 800c7ba:	1d72      	adds	r2, r6, #5
 800c7bc:	0092      	lsls	r2, r2, #2
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 fe00 	bl	800d3c4 <_calloc_r>
 800c7c4:	b160      	cbz	r0, 800c7e0 <_Balloc+0x64>
 800c7c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7ca:	e00e      	b.n	800c7ea <_Balloc+0x6e>
 800c7cc:	2221      	movs	r2, #33	; 0x21
 800c7ce:	2104      	movs	r1, #4
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f000 fdf7 	bl	800d3c4 <_calloc_r>
 800c7d6:	69e3      	ldr	r3, [r4, #28]
 800c7d8:	60f0      	str	r0, [r6, #12]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1e4      	bne.n	800c7aa <_Balloc+0x2e>
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	bd70      	pop	{r4, r5, r6, pc}
 800c7e4:	6802      	ldr	r2, [r0, #0]
 800c7e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7f0:	e7f7      	b.n	800c7e2 <_Balloc+0x66>
 800c7f2:	bf00      	nop
 800c7f4:	0800db49 	.word	0x0800db49
 800c7f8:	0800dbc9 	.word	0x0800dbc9

0800c7fc <_Bfree>:
 800c7fc:	b570      	push	{r4, r5, r6, lr}
 800c7fe:	69c6      	ldr	r6, [r0, #28]
 800c800:	4605      	mov	r5, r0
 800c802:	460c      	mov	r4, r1
 800c804:	b976      	cbnz	r6, 800c824 <_Bfree+0x28>
 800c806:	2010      	movs	r0, #16
 800c808:	f7fe f8c2 	bl	800a990 <malloc>
 800c80c:	4602      	mov	r2, r0
 800c80e:	61e8      	str	r0, [r5, #28]
 800c810:	b920      	cbnz	r0, 800c81c <_Bfree+0x20>
 800c812:	4b09      	ldr	r3, [pc, #36]	; (800c838 <_Bfree+0x3c>)
 800c814:	4809      	ldr	r0, [pc, #36]	; (800c83c <_Bfree+0x40>)
 800c816:	218f      	movs	r1, #143	; 0x8f
 800c818:	f000 fdb6 	bl	800d388 <__assert_func>
 800c81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c820:	6006      	str	r6, [r0, #0]
 800c822:	60c6      	str	r6, [r0, #12]
 800c824:	b13c      	cbz	r4, 800c836 <_Bfree+0x3a>
 800c826:	69eb      	ldr	r3, [r5, #28]
 800c828:	6862      	ldr	r2, [r4, #4]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c830:	6021      	str	r1, [r4, #0]
 800c832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c836:	bd70      	pop	{r4, r5, r6, pc}
 800c838:	0800db49 	.word	0x0800db49
 800c83c:	0800dbc9 	.word	0x0800dbc9

0800c840 <__multadd>:
 800c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c844:	690d      	ldr	r5, [r1, #16]
 800c846:	4607      	mov	r7, r0
 800c848:	460c      	mov	r4, r1
 800c84a:	461e      	mov	r6, r3
 800c84c:	f101 0c14 	add.w	ip, r1, #20
 800c850:	2000      	movs	r0, #0
 800c852:	f8dc 3000 	ldr.w	r3, [ip]
 800c856:	b299      	uxth	r1, r3
 800c858:	fb02 6101 	mla	r1, r2, r1, r6
 800c85c:	0c1e      	lsrs	r6, r3, #16
 800c85e:	0c0b      	lsrs	r3, r1, #16
 800c860:	fb02 3306 	mla	r3, r2, r6, r3
 800c864:	b289      	uxth	r1, r1
 800c866:	3001      	adds	r0, #1
 800c868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c86c:	4285      	cmp	r5, r0
 800c86e:	f84c 1b04 	str.w	r1, [ip], #4
 800c872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c876:	dcec      	bgt.n	800c852 <__multadd+0x12>
 800c878:	b30e      	cbz	r6, 800c8be <__multadd+0x7e>
 800c87a:	68a3      	ldr	r3, [r4, #8]
 800c87c:	42ab      	cmp	r3, r5
 800c87e:	dc19      	bgt.n	800c8b4 <__multadd+0x74>
 800c880:	6861      	ldr	r1, [r4, #4]
 800c882:	4638      	mov	r0, r7
 800c884:	3101      	adds	r1, #1
 800c886:	f7ff ff79 	bl	800c77c <_Balloc>
 800c88a:	4680      	mov	r8, r0
 800c88c:	b928      	cbnz	r0, 800c89a <__multadd+0x5a>
 800c88e:	4602      	mov	r2, r0
 800c890:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <__multadd+0x84>)
 800c892:	480d      	ldr	r0, [pc, #52]	; (800c8c8 <__multadd+0x88>)
 800c894:	21ba      	movs	r1, #186	; 0xba
 800c896:	f000 fd77 	bl	800d388 <__assert_func>
 800c89a:	6922      	ldr	r2, [r4, #16]
 800c89c:	3202      	adds	r2, #2
 800c89e:	f104 010c 	add.w	r1, r4, #12
 800c8a2:	0092      	lsls	r2, r2, #2
 800c8a4:	300c      	adds	r0, #12
 800c8a6:	f7ff f894 	bl	800b9d2 <memcpy>
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	f7ff ffa5 	bl	800c7fc <_Bfree>
 800c8b2:	4644      	mov	r4, r8
 800c8b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c8b8:	3501      	adds	r5, #1
 800c8ba:	615e      	str	r6, [r3, #20]
 800c8bc:	6125      	str	r5, [r4, #16]
 800c8be:	4620      	mov	r0, r4
 800c8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c4:	0800dbb8 	.word	0x0800dbb8
 800c8c8:	0800dbc9 	.word	0x0800dbc9

0800c8cc <__hi0bits>:
 800c8cc:	0c03      	lsrs	r3, r0, #16
 800c8ce:	041b      	lsls	r3, r3, #16
 800c8d0:	b9d3      	cbnz	r3, 800c908 <__hi0bits+0x3c>
 800c8d2:	0400      	lsls	r0, r0, #16
 800c8d4:	2310      	movs	r3, #16
 800c8d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c8da:	bf04      	itt	eq
 800c8dc:	0200      	lsleq	r0, r0, #8
 800c8de:	3308      	addeq	r3, #8
 800c8e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c8e4:	bf04      	itt	eq
 800c8e6:	0100      	lsleq	r0, r0, #4
 800c8e8:	3304      	addeq	r3, #4
 800c8ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c8ee:	bf04      	itt	eq
 800c8f0:	0080      	lsleq	r0, r0, #2
 800c8f2:	3302      	addeq	r3, #2
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	db05      	blt.n	800c904 <__hi0bits+0x38>
 800c8f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c8fc:	f103 0301 	add.w	r3, r3, #1
 800c900:	bf08      	it	eq
 800c902:	2320      	moveq	r3, #32
 800c904:	4618      	mov	r0, r3
 800c906:	4770      	bx	lr
 800c908:	2300      	movs	r3, #0
 800c90a:	e7e4      	b.n	800c8d6 <__hi0bits+0xa>

0800c90c <__lo0bits>:
 800c90c:	6803      	ldr	r3, [r0, #0]
 800c90e:	f013 0207 	ands.w	r2, r3, #7
 800c912:	d00c      	beq.n	800c92e <__lo0bits+0x22>
 800c914:	07d9      	lsls	r1, r3, #31
 800c916:	d422      	bmi.n	800c95e <__lo0bits+0x52>
 800c918:	079a      	lsls	r2, r3, #30
 800c91a:	bf49      	itett	mi
 800c91c:	085b      	lsrmi	r3, r3, #1
 800c91e:	089b      	lsrpl	r3, r3, #2
 800c920:	6003      	strmi	r3, [r0, #0]
 800c922:	2201      	movmi	r2, #1
 800c924:	bf5c      	itt	pl
 800c926:	6003      	strpl	r3, [r0, #0]
 800c928:	2202      	movpl	r2, #2
 800c92a:	4610      	mov	r0, r2
 800c92c:	4770      	bx	lr
 800c92e:	b299      	uxth	r1, r3
 800c930:	b909      	cbnz	r1, 800c936 <__lo0bits+0x2a>
 800c932:	0c1b      	lsrs	r3, r3, #16
 800c934:	2210      	movs	r2, #16
 800c936:	b2d9      	uxtb	r1, r3
 800c938:	b909      	cbnz	r1, 800c93e <__lo0bits+0x32>
 800c93a:	3208      	adds	r2, #8
 800c93c:	0a1b      	lsrs	r3, r3, #8
 800c93e:	0719      	lsls	r1, r3, #28
 800c940:	bf04      	itt	eq
 800c942:	091b      	lsreq	r3, r3, #4
 800c944:	3204      	addeq	r2, #4
 800c946:	0799      	lsls	r1, r3, #30
 800c948:	bf04      	itt	eq
 800c94a:	089b      	lsreq	r3, r3, #2
 800c94c:	3202      	addeq	r2, #2
 800c94e:	07d9      	lsls	r1, r3, #31
 800c950:	d403      	bmi.n	800c95a <__lo0bits+0x4e>
 800c952:	085b      	lsrs	r3, r3, #1
 800c954:	f102 0201 	add.w	r2, r2, #1
 800c958:	d003      	beq.n	800c962 <__lo0bits+0x56>
 800c95a:	6003      	str	r3, [r0, #0]
 800c95c:	e7e5      	b.n	800c92a <__lo0bits+0x1e>
 800c95e:	2200      	movs	r2, #0
 800c960:	e7e3      	b.n	800c92a <__lo0bits+0x1e>
 800c962:	2220      	movs	r2, #32
 800c964:	e7e1      	b.n	800c92a <__lo0bits+0x1e>
	...

0800c968 <__i2b>:
 800c968:	b510      	push	{r4, lr}
 800c96a:	460c      	mov	r4, r1
 800c96c:	2101      	movs	r1, #1
 800c96e:	f7ff ff05 	bl	800c77c <_Balloc>
 800c972:	4602      	mov	r2, r0
 800c974:	b928      	cbnz	r0, 800c982 <__i2b+0x1a>
 800c976:	4b05      	ldr	r3, [pc, #20]	; (800c98c <__i2b+0x24>)
 800c978:	4805      	ldr	r0, [pc, #20]	; (800c990 <__i2b+0x28>)
 800c97a:	f240 1145 	movw	r1, #325	; 0x145
 800c97e:	f000 fd03 	bl	800d388 <__assert_func>
 800c982:	2301      	movs	r3, #1
 800c984:	6144      	str	r4, [r0, #20]
 800c986:	6103      	str	r3, [r0, #16]
 800c988:	bd10      	pop	{r4, pc}
 800c98a:	bf00      	nop
 800c98c:	0800dbb8 	.word	0x0800dbb8
 800c990:	0800dbc9 	.word	0x0800dbc9

0800c994 <__multiply>:
 800c994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c998:	4691      	mov	r9, r2
 800c99a:	690a      	ldr	r2, [r1, #16]
 800c99c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	bfb8      	it	lt
 800c9a4:	460b      	movlt	r3, r1
 800c9a6:	460c      	mov	r4, r1
 800c9a8:	bfbc      	itt	lt
 800c9aa:	464c      	movlt	r4, r9
 800c9ac:	4699      	movlt	r9, r3
 800c9ae:	6927      	ldr	r7, [r4, #16]
 800c9b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c9b4:	68a3      	ldr	r3, [r4, #8]
 800c9b6:	6861      	ldr	r1, [r4, #4]
 800c9b8:	eb07 060a 	add.w	r6, r7, sl
 800c9bc:	42b3      	cmp	r3, r6
 800c9be:	b085      	sub	sp, #20
 800c9c0:	bfb8      	it	lt
 800c9c2:	3101      	addlt	r1, #1
 800c9c4:	f7ff feda 	bl	800c77c <_Balloc>
 800c9c8:	b930      	cbnz	r0, 800c9d8 <__multiply+0x44>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	4b44      	ldr	r3, [pc, #272]	; (800cae0 <__multiply+0x14c>)
 800c9ce:	4845      	ldr	r0, [pc, #276]	; (800cae4 <__multiply+0x150>)
 800c9d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c9d4:	f000 fcd8 	bl	800d388 <__assert_func>
 800c9d8:	f100 0514 	add.w	r5, r0, #20
 800c9dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c9e0:	462b      	mov	r3, r5
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	4543      	cmp	r3, r8
 800c9e6:	d321      	bcc.n	800ca2c <__multiply+0x98>
 800c9e8:	f104 0314 	add.w	r3, r4, #20
 800c9ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c9f0:	f109 0314 	add.w	r3, r9, #20
 800c9f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c9f8:	9202      	str	r2, [sp, #8]
 800c9fa:	1b3a      	subs	r2, r7, r4
 800c9fc:	3a15      	subs	r2, #21
 800c9fe:	f022 0203 	bic.w	r2, r2, #3
 800ca02:	3204      	adds	r2, #4
 800ca04:	f104 0115 	add.w	r1, r4, #21
 800ca08:	428f      	cmp	r7, r1
 800ca0a:	bf38      	it	cc
 800ca0c:	2204      	movcc	r2, #4
 800ca0e:	9201      	str	r2, [sp, #4]
 800ca10:	9a02      	ldr	r2, [sp, #8]
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d80c      	bhi.n	800ca32 <__multiply+0x9e>
 800ca18:	2e00      	cmp	r6, #0
 800ca1a:	dd03      	ble.n	800ca24 <__multiply+0x90>
 800ca1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d05b      	beq.n	800cadc <__multiply+0x148>
 800ca24:	6106      	str	r6, [r0, #16]
 800ca26:	b005      	add	sp, #20
 800ca28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2c:	f843 2b04 	str.w	r2, [r3], #4
 800ca30:	e7d8      	b.n	800c9e4 <__multiply+0x50>
 800ca32:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca36:	f1ba 0f00 	cmp.w	sl, #0
 800ca3a:	d024      	beq.n	800ca86 <__multiply+0xf2>
 800ca3c:	f104 0e14 	add.w	lr, r4, #20
 800ca40:	46a9      	mov	r9, r5
 800ca42:	f04f 0c00 	mov.w	ip, #0
 800ca46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca4a:	f8d9 1000 	ldr.w	r1, [r9]
 800ca4e:	fa1f fb82 	uxth.w	fp, r2
 800ca52:	b289      	uxth	r1, r1
 800ca54:	fb0a 110b 	mla	r1, sl, fp, r1
 800ca58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ca5c:	f8d9 2000 	ldr.w	r2, [r9]
 800ca60:	4461      	add	r1, ip
 800ca62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca66:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca6e:	b289      	uxth	r1, r1
 800ca70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca74:	4577      	cmp	r7, lr
 800ca76:	f849 1b04 	str.w	r1, [r9], #4
 800ca7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca7e:	d8e2      	bhi.n	800ca46 <__multiply+0xb2>
 800ca80:	9a01      	ldr	r2, [sp, #4]
 800ca82:	f845 c002 	str.w	ip, [r5, r2]
 800ca86:	9a03      	ldr	r2, [sp, #12]
 800ca88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	f1b9 0f00 	cmp.w	r9, #0
 800ca92:	d021      	beq.n	800cad8 <__multiply+0x144>
 800ca94:	6829      	ldr	r1, [r5, #0]
 800ca96:	f104 0c14 	add.w	ip, r4, #20
 800ca9a:	46ae      	mov	lr, r5
 800ca9c:	f04f 0a00 	mov.w	sl, #0
 800caa0:	f8bc b000 	ldrh.w	fp, [ip]
 800caa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800caa8:	fb09 220b 	mla	r2, r9, fp, r2
 800caac:	4452      	add	r2, sl
 800caae:	b289      	uxth	r1, r1
 800cab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cab4:	f84e 1b04 	str.w	r1, [lr], #4
 800cab8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cabc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cac0:	f8be 1000 	ldrh.w	r1, [lr]
 800cac4:	fb09 110a 	mla	r1, r9, sl, r1
 800cac8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cacc:	4567      	cmp	r7, ip
 800cace:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cad2:	d8e5      	bhi.n	800caa0 <__multiply+0x10c>
 800cad4:	9a01      	ldr	r2, [sp, #4]
 800cad6:	50a9      	str	r1, [r5, r2]
 800cad8:	3504      	adds	r5, #4
 800cada:	e799      	b.n	800ca10 <__multiply+0x7c>
 800cadc:	3e01      	subs	r6, #1
 800cade:	e79b      	b.n	800ca18 <__multiply+0x84>
 800cae0:	0800dbb8 	.word	0x0800dbb8
 800cae4:	0800dbc9 	.word	0x0800dbc9

0800cae8 <__pow5mult>:
 800cae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caec:	4615      	mov	r5, r2
 800caee:	f012 0203 	ands.w	r2, r2, #3
 800caf2:	4606      	mov	r6, r0
 800caf4:	460f      	mov	r7, r1
 800caf6:	d007      	beq.n	800cb08 <__pow5mult+0x20>
 800caf8:	4c25      	ldr	r4, [pc, #148]	; (800cb90 <__pow5mult+0xa8>)
 800cafa:	3a01      	subs	r2, #1
 800cafc:	2300      	movs	r3, #0
 800cafe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb02:	f7ff fe9d 	bl	800c840 <__multadd>
 800cb06:	4607      	mov	r7, r0
 800cb08:	10ad      	asrs	r5, r5, #2
 800cb0a:	d03d      	beq.n	800cb88 <__pow5mult+0xa0>
 800cb0c:	69f4      	ldr	r4, [r6, #28]
 800cb0e:	b97c      	cbnz	r4, 800cb30 <__pow5mult+0x48>
 800cb10:	2010      	movs	r0, #16
 800cb12:	f7fd ff3d 	bl	800a990 <malloc>
 800cb16:	4602      	mov	r2, r0
 800cb18:	61f0      	str	r0, [r6, #28]
 800cb1a:	b928      	cbnz	r0, 800cb28 <__pow5mult+0x40>
 800cb1c:	4b1d      	ldr	r3, [pc, #116]	; (800cb94 <__pow5mult+0xac>)
 800cb1e:	481e      	ldr	r0, [pc, #120]	; (800cb98 <__pow5mult+0xb0>)
 800cb20:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cb24:	f000 fc30 	bl	800d388 <__assert_func>
 800cb28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb2c:	6004      	str	r4, [r0, #0]
 800cb2e:	60c4      	str	r4, [r0, #12]
 800cb30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cb34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb38:	b94c      	cbnz	r4, 800cb4e <__pow5mult+0x66>
 800cb3a:	f240 2171 	movw	r1, #625	; 0x271
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f7ff ff12 	bl	800c968 <__i2b>
 800cb44:	2300      	movs	r3, #0
 800cb46:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	6003      	str	r3, [r0, #0]
 800cb4e:	f04f 0900 	mov.w	r9, #0
 800cb52:	07eb      	lsls	r3, r5, #31
 800cb54:	d50a      	bpl.n	800cb6c <__pow5mult+0x84>
 800cb56:	4639      	mov	r1, r7
 800cb58:	4622      	mov	r2, r4
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	f7ff ff1a 	bl	800c994 <__multiply>
 800cb60:	4639      	mov	r1, r7
 800cb62:	4680      	mov	r8, r0
 800cb64:	4630      	mov	r0, r6
 800cb66:	f7ff fe49 	bl	800c7fc <_Bfree>
 800cb6a:	4647      	mov	r7, r8
 800cb6c:	106d      	asrs	r5, r5, #1
 800cb6e:	d00b      	beq.n	800cb88 <__pow5mult+0xa0>
 800cb70:	6820      	ldr	r0, [r4, #0]
 800cb72:	b938      	cbnz	r0, 800cb84 <__pow5mult+0x9c>
 800cb74:	4622      	mov	r2, r4
 800cb76:	4621      	mov	r1, r4
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f7ff ff0b 	bl	800c994 <__multiply>
 800cb7e:	6020      	str	r0, [r4, #0]
 800cb80:	f8c0 9000 	str.w	r9, [r0]
 800cb84:	4604      	mov	r4, r0
 800cb86:	e7e4      	b.n	800cb52 <__pow5mult+0x6a>
 800cb88:	4638      	mov	r0, r7
 800cb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb8e:	bf00      	nop
 800cb90:	0800dd18 	.word	0x0800dd18
 800cb94:	0800db49 	.word	0x0800db49
 800cb98:	0800dbc9 	.word	0x0800dbc9

0800cb9c <__lshift>:
 800cb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba0:	460c      	mov	r4, r1
 800cba2:	6849      	ldr	r1, [r1, #4]
 800cba4:	6923      	ldr	r3, [r4, #16]
 800cba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbaa:	68a3      	ldr	r3, [r4, #8]
 800cbac:	4607      	mov	r7, r0
 800cbae:	4691      	mov	r9, r2
 800cbb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbb4:	f108 0601 	add.w	r6, r8, #1
 800cbb8:	42b3      	cmp	r3, r6
 800cbba:	db0b      	blt.n	800cbd4 <__lshift+0x38>
 800cbbc:	4638      	mov	r0, r7
 800cbbe:	f7ff fddd 	bl	800c77c <_Balloc>
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	b948      	cbnz	r0, 800cbda <__lshift+0x3e>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	4b28      	ldr	r3, [pc, #160]	; (800cc6c <__lshift+0xd0>)
 800cbca:	4829      	ldr	r0, [pc, #164]	; (800cc70 <__lshift+0xd4>)
 800cbcc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cbd0:	f000 fbda 	bl	800d388 <__assert_func>
 800cbd4:	3101      	adds	r1, #1
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	e7ee      	b.n	800cbb8 <__lshift+0x1c>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f100 0114 	add.w	r1, r0, #20
 800cbe0:	f100 0210 	add.w	r2, r0, #16
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	4553      	cmp	r3, sl
 800cbe8:	db33      	blt.n	800cc52 <__lshift+0xb6>
 800cbea:	6920      	ldr	r0, [r4, #16]
 800cbec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbf0:	f104 0314 	add.w	r3, r4, #20
 800cbf4:	f019 091f 	ands.w	r9, r9, #31
 800cbf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc00:	d02b      	beq.n	800cc5a <__lshift+0xbe>
 800cc02:	f1c9 0e20 	rsb	lr, r9, #32
 800cc06:	468a      	mov	sl, r1
 800cc08:	2200      	movs	r2, #0
 800cc0a:	6818      	ldr	r0, [r3, #0]
 800cc0c:	fa00 f009 	lsl.w	r0, r0, r9
 800cc10:	4310      	orrs	r0, r2
 800cc12:	f84a 0b04 	str.w	r0, [sl], #4
 800cc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc1a:	459c      	cmp	ip, r3
 800cc1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc20:	d8f3      	bhi.n	800cc0a <__lshift+0x6e>
 800cc22:	ebac 0304 	sub.w	r3, ip, r4
 800cc26:	3b15      	subs	r3, #21
 800cc28:	f023 0303 	bic.w	r3, r3, #3
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	f104 0015 	add.w	r0, r4, #21
 800cc32:	4584      	cmp	ip, r0
 800cc34:	bf38      	it	cc
 800cc36:	2304      	movcc	r3, #4
 800cc38:	50ca      	str	r2, [r1, r3]
 800cc3a:	b10a      	cbz	r2, 800cc40 <__lshift+0xa4>
 800cc3c:	f108 0602 	add.w	r6, r8, #2
 800cc40:	3e01      	subs	r6, #1
 800cc42:	4638      	mov	r0, r7
 800cc44:	612e      	str	r6, [r5, #16]
 800cc46:	4621      	mov	r1, r4
 800cc48:	f7ff fdd8 	bl	800c7fc <_Bfree>
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc52:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc56:	3301      	adds	r3, #1
 800cc58:	e7c5      	b.n	800cbe6 <__lshift+0x4a>
 800cc5a:	3904      	subs	r1, #4
 800cc5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc60:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc64:	459c      	cmp	ip, r3
 800cc66:	d8f9      	bhi.n	800cc5c <__lshift+0xc0>
 800cc68:	e7ea      	b.n	800cc40 <__lshift+0xa4>
 800cc6a:	bf00      	nop
 800cc6c:	0800dbb8 	.word	0x0800dbb8
 800cc70:	0800dbc9 	.word	0x0800dbc9

0800cc74 <__mcmp>:
 800cc74:	b530      	push	{r4, r5, lr}
 800cc76:	6902      	ldr	r2, [r0, #16]
 800cc78:	690c      	ldr	r4, [r1, #16]
 800cc7a:	1b12      	subs	r2, r2, r4
 800cc7c:	d10e      	bne.n	800cc9c <__mcmp+0x28>
 800cc7e:	f100 0314 	add.w	r3, r0, #20
 800cc82:	3114      	adds	r1, #20
 800cc84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc94:	42a5      	cmp	r5, r4
 800cc96:	d003      	beq.n	800cca0 <__mcmp+0x2c>
 800cc98:	d305      	bcc.n	800cca6 <__mcmp+0x32>
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	4610      	mov	r0, r2
 800cc9e:	bd30      	pop	{r4, r5, pc}
 800cca0:	4283      	cmp	r3, r0
 800cca2:	d3f3      	bcc.n	800cc8c <__mcmp+0x18>
 800cca4:	e7fa      	b.n	800cc9c <__mcmp+0x28>
 800cca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccaa:	e7f7      	b.n	800cc9c <__mcmp+0x28>

0800ccac <__mdiff>:
 800ccac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	4690      	mov	r8, r2
 800ccba:	f7ff ffdb 	bl	800cc74 <__mcmp>
 800ccbe:	1e05      	subs	r5, r0, #0
 800ccc0:	d110      	bne.n	800cce4 <__mdiff+0x38>
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	f7ff fd59 	bl	800c77c <_Balloc>
 800ccca:	b930      	cbnz	r0, 800ccda <__mdiff+0x2e>
 800cccc:	4b3a      	ldr	r3, [pc, #232]	; (800cdb8 <__mdiff+0x10c>)
 800ccce:	4602      	mov	r2, r0
 800ccd0:	f240 2137 	movw	r1, #567	; 0x237
 800ccd4:	4839      	ldr	r0, [pc, #228]	; (800cdbc <__mdiff+0x110>)
 800ccd6:	f000 fb57 	bl	800d388 <__assert_func>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cce0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce4:	bfa4      	itt	ge
 800cce6:	4643      	movge	r3, r8
 800cce8:	46a0      	movge	r8, r4
 800ccea:	4630      	mov	r0, r6
 800ccec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ccf0:	bfa6      	itte	ge
 800ccf2:	461c      	movge	r4, r3
 800ccf4:	2500      	movge	r5, #0
 800ccf6:	2501      	movlt	r5, #1
 800ccf8:	f7ff fd40 	bl	800c77c <_Balloc>
 800ccfc:	b920      	cbnz	r0, 800cd08 <__mdiff+0x5c>
 800ccfe:	4b2e      	ldr	r3, [pc, #184]	; (800cdb8 <__mdiff+0x10c>)
 800cd00:	4602      	mov	r2, r0
 800cd02:	f240 2145 	movw	r1, #581	; 0x245
 800cd06:	e7e5      	b.n	800ccd4 <__mdiff+0x28>
 800cd08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd0c:	6926      	ldr	r6, [r4, #16]
 800cd0e:	60c5      	str	r5, [r0, #12]
 800cd10:	f104 0914 	add.w	r9, r4, #20
 800cd14:	f108 0514 	add.w	r5, r8, #20
 800cd18:	f100 0e14 	add.w	lr, r0, #20
 800cd1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd24:	f108 0210 	add.w	r2, r8, #16
 800cd28:	46f2      	mov	sl, lr
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd34:	fa11 f88b 	uxtah	r8, r1, fp
 800cd38:	b299      	uxth	r1, r3
 800cd3a:	0c1b      	lsrs	r3, r3, #16
 800cd3c:	eba8 0801 	sub.w	r8, r8, r1
 800cd40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd48:	fa1f f888 	uxth.w	r8, r8
 800cd4c:	1419      	asrs	r1, r3, #16
 800cd4e:	454e      	cmp	r6, r9
 800cd50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd54:	f84a 3b04 	str.w	r3, [sl], #4
 800cd58:	d8e8      	bhi.n	800cd2c <__mdiff+0x80>
 800cd5a:	1b33      	subs	r3, r6, r4
 800cd5c:	3b15      	subs	r3, #21
 800cd5e:	f023 0303 	bic.w	r3, r3, #3
 800cd62:	3304      	adds	r3, #4
 800cd64:	3415      	adds	r4, #21
 800cd66:	42a6      	cmp	r6, r4
 800cd68:	bf38      	it	cc
 800cd6a:	2304      	movcc	r3, #4
 800cd6c:	441d      	add	r5, r3
 800cd6e:	4473      	add	r3, lr
 800cd70:	469e      	mov	lr, r3
 800cd72:	462e      	mov	r6, r5
 800cd74:	4566      	cmp	r6, ip
 800cd76:	d30e      	bcc.n	800cd96 <__mdiff+0xea>
 800cd78:	f10c 0203 	add.w	r2, ip, #3
 800cd7c:	1b52      	subs	r2, r2, r5
 800cd7e:	f022 0203 	bic.w	r2, r2, #3
 800cd82:	3d03      	subs	r5, #3
 800cd84:	45ac      	cmp	ip, r5
 800cd86:	bf38      	it	cc
 800cd88:	2200      	movcc	r2, #0
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd90:	b17a      	cbz	r2, 800cdb2 <__mdiff+0x106>
 800cd92:	6107      	str	r7, [r0, #16]
 800cd94:	e7a4      	b.n	800cce0 <__mdiff+0x34>
 800cd96:	f856 8b04 	ldr.w	r8, [r6], #4
 800cd9a:	fa11 f288 	uxtah	r2, r1, r8
 800cd9e:	1414      	asrs	r4, r2, #16
 800cda0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cda4:	b292      	uxth	r2, r2
 800cda6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cdaa:	f84e 2b04 	str.w	r2, [lr], #4
 800cdae:	1421      	asrs	r1, r4, #16
 800cdb0:	e7e0      	b.n	800cd74 <__mdiff+0xc8>
 800cdb2:	3f01      	subs	r7, #1
 800cdb4:	e7ea      	b.n	800cd8c <__mdiff+0xe0>
 800cdb6:	bf00      	nop
 800cdb8:	0800dbb8 	.word	0x0800dbb8
 800cdbc:	0800dbc9 	.word	0x0800dbc9

0800cdc0 <__d2b>:
 800cdc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdc4:	460f      	mov	r7, r1
 800cdc6:	2101      	movs	r1, #1
 800cdc8:	ec59 8b10 	vmov	r8, r9, d0
 800cdcc:	4616      	mov	r6, r2
 800cdce:	f7ff fcd5 	bl	800c77c <_Balloc>
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	b930      	cbnz	r0, 800cde4 <__d2b+0x24>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	4b24      	ldr	r3, [pc, #144]	; (800ce6c <__d2b+0xac>)
 800cdda:	4825      	ldr	r0, [pc, #148]	; (800ce70 <__d2b+0xb0>)
 800cddc:	f240 310f 	movw	r1, #783	; 0x30f
 800cde0:	f000 fad2 	bl	800d388 <__assert_func>
 800cde4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cde8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdec:	bb2d      	cbnz	r5, 800ce3a <__d2b+0x7a>
 800cdee:	9301      	str	r3, [sp, #4]
 800cdf0:	f1b8 0300 	subs.w	r3, r8, #0
 800cdf4:	d026      	beq.n	800ce44 <__d2b+0x84>
 800cdf6:	4668      	mov	r0, sp
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	f7ff fd87 	bl	800c90c <__lo0bits>
 800cdfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ce02:	b1e8      	cbz	r0, 800ce40 <__d2b+0x80>
 800ce04:	f1c0 0320 	rsb	r3, r0, #32
 800ce08:	fa02 f303 	lsl.w	r3, r2, r3
 800ce0c:	430b      	orrs	r3, r1
 800ce0e:	40c2      	lsrs	r2, r0
 800ce10:	6163      	str	r3, [r4, #20]
 800ce12:	9201      	str	r2, [sp, #4]
 800ce14:	9b01      	ldr	r3, [sp, #4]
 800ce16:	61a3      	str	r3, [r4, #24]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	bf14      	ite	ne
 800ce1c:	2202      	movne	r2, #2
 800ce1e:	2201      	moveq	r2, #1
 800ce20:	6122      	str	r2, [r4, #16]
 800ce22:	b1bd      	cbz	r5, 800ce54 <__d2b+0x94>
 800ce24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce28:	4405      	add	r5, r0
 800ce2a:	603d      	str	r5, [r7, #0]
 800ce2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce30:	6030      	str	r0, [r6, #0]
 800ce32:	4620      	mov	r0, r4
 800ce34:	b003      	add	sp, #12
 800ce36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce3e:	e7d6      	b.n	800cdee <__d2b+0x2e>
 800ce40:	6161      	str	r1, [r4, #20]
 800ce42:	e7e7      	b.n	800ce14 <__d2b+0x54>
 800ce44:	a801      	add	r0, sp, #4
 800ce46:	f7ff fd61 	bl	800c90c <__lo0bits>
 800ce4a:	9b01      	ldr	r3, [sp, #4]
 800ce4c:	6163      	str	r3, [r4, #20]
 800ce4e:	3020      	adds	r0, #32
 800ce50:	2201      	movs	r2, #1
 800ce52:	e7e5      	b.n	800ce20 <__d2b+0x60>
 800ce54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce5c:	6038      	str	r0, [r7, #0]
 800ce5e:	6918      	ldr	r0, [r3, #16]
 800ce60:	f7ff fd34 	bl	800c8cc <__hi0bits>
 800ce64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce68:	e7e2      	b.n	800ce30 <__d2b+0x70>
 800ce6a:	bf00      	nop
 800ce6c:	0800dbb8 	.word	0x0800dbb8
 800ce70:	0800dbc9 	.word	0x0800dbc9

0800ce74 <__ssputs_r>:
 800ce74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce78:	688e      	ldr	r6, [r1, #8]
 800ce7a:	461f      	mov	r7, r3
 800ce7c:	42be      	cmp	r6, r7
 800ce7e:	680b      	ldr	r3, [r1, #0]
 800ce80:	4682      	mov	sl, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	4690      	mov	r8, r2
 800ce86:	d82c      	bhi.n	800cee2 <__ssputs_r+0x6e>
 800ce88:	898a      	ldrh	r2, [r1, #12]
 800ce8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce8e:	d026      	beq.n	800cede <__ssputs_r+0x6a>
 800ce90:	6965      	ldr	r5, [r4, #20]
 800ce92:	6909      	ldr	r1, [r1, #16]
 800ce94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce98:	eba3 0901 	sub.w	r9, r3, r1
 800ce9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cea0:	1c7b      	adds	r3, r7, #1
 800cea2:	444b      	add	r3, r9
 800cea4:	106d      	asrs	r5, r5, #1
 800cea6:	429d      	cmp	r5, r3
 800cea8:	bf38      	it	cc
 800ceaa:	461d      	movcc	r5, r3
 800ceac:	0553      	lsls	r3, r2, #21
 800ceae:	d527      	bpl.n	800cf00 <__ssputs_r+0x8c>
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	f7fd fd95 	bl	800a9e0 <_malloc_r>
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	b360      	cbz	r0, 800cf14 <__ssputs_r+0xa0>
 800ceba:	6921      	ldr	r1, [r4, #16]
 800cebc:	464a      	mov	r2, r9
 800cebe:	f7fe fd88 	bl	800b9d2 <memcpy>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cecc:	81a3      	strh	r3, [r4, #12]
 800cece:	6126      	str	r6, [r4, #16]
 800ced0:	6165      	str	r5, [r4, #20]
 800ced2:	444e      	add	r6, r9
 800ced4:	eba5 0509 	sub.w	r5, r5, r9
 800ced8:	6026      	str	r6, [r4, #0]
 800ceda:	60a5      	str	r5, [r4, #8]
 800cedc:	463e      	mov	r6, r7
 800cede:	42be      	cmp	r6, r7
 800cee0:	d900      	bls.n	800cee4 <__ssputs_r+0x70>
 800cee2:	463e      	mov	r6, r7
 800cee4:	6820      	ldr	r0, [r4, #0]
 800cee6:	4632      	mov	r2, r6
 800cee8:	4641      	mov	r1, r8
 800ceea:	f7fe fcbb 	bl	800b864 <memmove>
 800ceee:	68a3      	ldr	r3, [r4, #8]
 800cef0:	1b9b      	subs	r3, r3, r6
 800cef2:	60a3      	str	r3, [r4, #8]
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	4433      	add	r3, r6
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	2000      	movs	r0, #0
 800cefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf00:	462a      	mov	r2, r5
 800cf02:	f000 fa87 	bl	800d414 <_realloc_r>
 800cf06:	4606      	mov	r6, r0
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d1e0      	bne.n	800cece <__ssputs_r+0x5a>
 800cf0c:	6921      	ldr	r1, [r4, #16]
 800cf0e:	4650      	mov	r0, sl
 800cf10:	f7ff fbe8 	bl	800c6e4 <_free_r>
 800cf14:	230c      	movs	r3, #12
 800cf16:	f8ca 3000 	str.w	r3, [sl]
 800cf1a:	89a3      	ldrh	r3, [r4, #12]
 800cf1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf20:	81a3      	strh	r3, [r4, #12]
 800cf22:	f04f 30ff 	mov.w	r0, #4294967295
 800cf26:	e7e9      	b.n	800cefc <__ssputs_r+0x88>

0800cf28 <_svfiprintf_r>:
 800cf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	4698      	mov	r8, r3
 800cf2e:	898b      	ldrh	r3, [r1, #12]
 800cf30:	061b      	lsls	r3, r3, #24
 800cf32:	b09d      	sub	sp, #116	; 0x74
 800cf34:	4607      	mov	r7, r0
 800cf36:	460d      	mov	r5, r1
 800cf38:	4614      	mov	r4, r2
 800cf3a:	d50e      	bpl.n	800cf5a <_svfiprintf_r+0x32>
 800cf3c:	690b      	ldr	r3, [r1, #16]
 800cf3e:	b963      	cbnz	r3, 800cf5a <_svfiprintf_r+0x32>
 800cf40:	2140      	movs	r1, #64	; 0x40
 800cf42:	f7fd fd4d 	bl	800a9e0 <_malloc_r>
 800cf46:	6028      	str	r0, [r5, #0]
 800cf48:	6128      	str	r0, [r5, #16]
 800cf4a:	b920      	cbnz	r0, 800cf56 <_svfiprintf_r+0x2e>
 800cf4c:	230c      	movs	r3, #12
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295
 800cf54:	e0d0      	b.n	800d0f8 <_svfiprintf_r+0x1d0>
 800cf56:	2340      	movs	r3, #64	; 0x40
 800cf58:	616b      	str	r3, [r5, #20]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf5e:	2320      	movs	r3, #32
 800cf60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf64:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf68:	2330      	movs	r3, #48	; 0x30
 800cf6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d110 <_svfiprintf_r+0x1e8>
 800cf6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf72:	f04f 0901 	mov.w	r9, #1
 800cf76:	4623      	mov	r3, r4
 800cf78:	469a      	mov	sl, r3
 800cf7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf7e:	b10a      	cbz	r2, 800cf84 <_svfiprintf_r+0x5c>
 800cf80:	2a25      	cmp	r2, #37	; 0x25
 800cf82:	d1f9      	bne.n	800cf78 <_svfiprintf_r+0x50>
 800cf84:	ebba 0b04 	subs.w	fp, sl, r4
 800cf88:	d00b      	beq.n	800cfa2 <_svfiprintf_r+0x7a>
 800cf8a:	465b      	mov	r3, fp
 800cf8c:	4622      	mov	r2, r4
 800cf8e:	4629      	mov	r1, r5
 800cf90:	4638      	mov	r0, r7
 800cf92:	f7ff ff6f 	bl	800ce74 <__ssputs_r>
 800cf96:	3001      	adds	r0, #1
 800cf98:	f000 80a9 	beq.w	800d0ee <_svfiprintf_r+0x1c6>
 800cf9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf9e:	445a      	add	r2, fp
 800cfa0:	9209      	str	r2, [sp, #36]	; 0x24
 800cfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f000 80a1 	beq.w	800d0ee <_svfiprintf_r+0x1c6>
 800cfac:	2300      	movs	r3, #0
 800cfae:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfb6:	f10a 0a01 	add.w	sl, sl, #1
 800cfba:	9304      	str	r3, [sp, #16]
 800cfbc:	9307      	str	r3, [sp, #28]
 800cfbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfc2:	931a      	str	r3, [sp, #104]	; 0x68
 800cfc4:	4654      	mov	r4, sl
 800cfc6:	2205      	movs	r2, #5
 800cfc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfcc:	4850      	ldr	r0, [pc, #320]	; (800d110 <_svfiprintf_r+0x1e8>)
 800cfce:	f7f3 f917 	bl	8000200 <memchr>
 800cfd2:	9a04      	ldr	r2, [sp, #16]
 800cfd4:	b9d8      	cbnz	r0, 800d00e <_svfiprintf_r+0xe6>
 800cfd6:	06d0      	lsls	r0, r2, #27
 800cfd8:	bf44      	itt	mi
 800cfda:	2320      	movmi	r3, #32
 800cfdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfe0:	0711      	lsls	r1, r2, #28
 800cfe2:	bf44      	itt	mi
 800cfe4:	232b      	movmi	r3, #43	; 0x2b
 800cfe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfea:	f89a 3000 	ldrb.w	r3, [sl]
 800cfee:	2b2a      	cmp	r3, #42	; 0x2a
 800cff0:	d015      	beq.n	800d01e <_svfiprintf_r+0xf6>
 800cff2:	9a07      	ldr	r2, [sp, #28]
 800cff4:	4654      	mov	r4, sl
 800cff6:	2000      	movs	r0, #0
 800cff8:	f04f 0c0a 	mov.w	ip, #10
 800cffc:	4621      	mov	r1, r4
 800cffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d002:	3b30      	subs	r3, #48	; 0x30
 800d004:	2b09      	cmp	r3, #9
 800d006:	d94d      	bls.n	800d0a4 <_svfiprintf_r+0x17c>
 800d008:	b1b0      	cbz	r0, 800d038 <_svfiprintf_r+0x110>
 800d00a:	9207      	str	r2, [sp, #28]
 800d00c:	e014      	b.n	800d038 <_svfiprintf_r+0x110>
 800d00e:	eba0 0308 	sub.w	r3, r0, r8
 800d012:	fa09 f303 	lsl.w	r3, r9, r3
 800d016:	4313      	orrs	r3, r2
 800d018:	9304      	str	r3, [sp, #16]
 800d01a:	46a2      	mov	sl, r4
 800d01c:	e7d2      	b.n	800cfc4 <_svfiprintf_r+0x9c>
 800d01e:	9b03      	ldr	r3, [sp, #12]
 800d020:	1d19      	adds	r1, r3, #4
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	9103      	str	r1, [sp, #12]
 800d026:	2b00      	cmp	r3, #0
 800d028:	bfbb      	ittet	lt
 800d02a:	425b      	neglt	r3, r3
 800d02c:	f042 0202 	orrlt.w	r2, r2, #2
 800d030:	9307      	strge	r3, [sp, #28]
 800d032:	9307      	strlt	r3, [sp, #28]
 800d034:	bfb8      	it	lt
 800d036:	9204      	strlt	r2, [sp, #16]
 800d038:	7823      	ldrb	r3, [r4, #0]
 800d03a:	2b2e      	cmp	r3, #46	; 0x2e
 800d03c:	d10c      	bne.n	800d058 <_svfiprintf_r+0x130>
 800d03e:	7863      	ldrb	r3, [r4, #1]
 800d040:	2b2a      	cmp	r3, #42	; 0x2a
 800d042:	d134      	bne.n	800d0ae <_svfiprintf_r+0x186>
 800d044:	9b03      	ldr	r3, [sp, #12]
 800d046:	1d1a      	adds	r2, r3, #4
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	9203      	str	r2, [sp, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	bfb8      	it	lt
 800d050:	f04f 33ff 	movlt.w	r3, #4294967295
 800d054:	3402      	adds	r4, #2
 800d056:	9305      	str	r3, [sp, #20]
 800d058:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d120 <_svfiprintf_r+0x1f8>
 800d05c:	7821      	ldrb	r1, [r4, #0]
 800d05e:	2203      	movs	r2, #3
 800d060:	4650      	mov	r0, sl
 800d062:	f7f3 f8cd 	bl	8000200 <memchr>
 800d066:	b138      	cbz	r0, 800d078 <_svfiprintf_r+0x150>
 800d068:	9b04      	ldr	r3, [sp, #16]
 800d06a:	eba0 000a 	sub.w	r0, r0, sl
 800d06e:	2240      	movs	r2, #64	; 0x40
 800d070:	4082      	lsls	r2, r0
 800d072:	4313      	orrs	r3, r2
 800d074:	3401      	adds	r4, #1
 800d076:	9304      	str	r3, [sp, #16]
 800d078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07c:	4825      	ldr	r0, [pc, #148]	; (800d114 <_svfiprintf_r+0x1ec>)
 800d07e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d082:	2206      	movs	r2, #6
 800d084:	f7f3 f8bc 	bl	8000200 <memchr>
 800d088:	2800      	cmp	r0, #0
 800d08a:	d038      	beq.n	800d0fe <_svfiprintf_r+0x1d6>
 800d08c:	4b22      	ldr	r3, [pc, #136]	; (800d118 <_svfiprintf_r+0x1f0>)
 800d08e:	bb1b      	cbnz	r3, 800d0d8 <_svfiprintf_r+0x1b0>
 800d090:	9b03      	ldr	r3, [sp, #12]
 800d092:	3307      	adds	r3, #7
 800d094:	f023 0307 	bic.w	r3, r3, #7
 800d098:	3308      	adds	r3, #8
 800d09a:	9303      	str	r3, [sp, #12]
 800d09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09e:	4433      	add	r3, r6
 800d0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d0a2:	e768      	b.n	800cf76 <_svfiprintf_r+0x4e>
 800d0a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0a8:	460c      	mov	r4, r1
 800d0aa:	2001      	movs	r0, #1
 800d0ac:	e7a6      	b.n	800cffc <_svfiprintf_r+0xd4>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	3401      	adds	r4, #1
 800d0b2:	9305      	str	r3, [sp, #20]
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	f04f 0c0a 	mov.w	ip, #10
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0c0:	3a30      	subs	r2, #48	; 0x30
 800d0c2:	2a09      	cmp	r2, #9
 800d0c4:	d903      	bls.n	800d0ce <_svfiprintf_r+0x1a6>
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d0c6      	beq.n	800d058 <_svfiprintf_r+0x130>
 800d0ca:	9105      	str	r1, [sp, #20]
 800d0cc:	e7c4      	b.n	800d058 <_svfiprintf_r+0x130>
 800d0ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e7f0      	b.n	800d0ba <_svfiprintf_r+0x192>
 800d0d8:	ab03      	add	r3, sp, #12
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	462a      	mov	r2, r5
 800d0de:	4b0f      	ldr	r3, [pc, #60]	; (800d11c <_svfiprintf_r+0x1f4>)
 800d0e0:	a904      	add	r1, sp, #16
 800d0e2:	4638      	mov	r0, r7
 800d0e4:	f7fd fda8 	bl	800ac38 <_printf_float>
 800d0e8:	1c42      	adds	r2, r0, #1
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	d1d6      	bne.n	800d09c <_svfiprintf_r+0x174>
 800d0ee:	89ab      	ldrh	r3, [r5, #12]
 800d0f0:	065b      	lsls	r3, r3, #25
 800d0f2:	f53f af2d 	bmi.w	800cf50 <_svfiprintf_r+0x28>
 800d0f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0f8:	b01d      	add	sp, #116	; 0x74
 800d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fe:	ab03      	add	r3, sp, #12
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	462a      	mov	r2, r5
 800d104:	4b05      	ldr	r3, [pc, #20]	; (800d11c <_svfiprintf_r+0x1f4>)
 800d106:	a904      	add	r1, sp, #16
 800d108:	4638      	mov	r0, r7
 800d10a:	f7fe f839 	bl	800b180 <_printf_i>
 800d10e:	e7eb      	b.n	800d0e8 <_svfiprintf_r+0x1c0>
 800d110:	0800dd24 	.word	0x0800dd24
 800d114:	0800dd2e 	.word	0x0800dd2e
 800d118:	0800ac39 	.word	0x0800ac39
 800d11c:	0800ce75 	.word	0x0800ce75
 800d120:	0800dd2a 	.word	0x0800dd2a

0800d124 <__sflush_r>:
 800d124:	898a      	ldrh	r2, [r1, #12]
 800d126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d12a:	4605      	mov	r5, r0
 800d12c:	0710      	lsls	r0, r2, #28
 800d12e:	460c      	mov	r4, r1
 800d130:	d458      	bmi.n	800d1e4 <__sflush_r+0xc0>
 800d132:	684b      	ldr	r3, [r1, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	dc05      	bgt.n	800d144 <__sflush_r+0x20>
 800d138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	dc02      	bgt.n	800d144 <__sflush_r+0x20>
 800d13e:	2000      	movs	r0, #0
 800d140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d146:	2e00      	cmp	r6, #0
 800d148:	d0f9      	beq.n	800d13e <__sflush_r+0x1a>
 800d14a:	2300      	movs	r3, #0
 800d14c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d150:	682f      	ldr	r7, [r5, #0]
 800d152:	6a21      	ldr	r1, [r4, #32]
 800d154:	602b      	str	r3, [r5, #0]
 800d156:	d032      	beq.n	800d1be <__sflush_r+0x9a>
 800d158:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	075a      	lsls	r2, r3, #29
 800d15e:	d505      	bpl.n	800d16c <__sflush_r+0x48>
 800d160:	6863      	ldr	r3, [r4, #4]
 800d162:	1ac0      	subs	r0, r0, r3
 800d164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d166:	b10b      	cbz	r3, 800d16c <__sflush_r+0x48>
 800d168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d16a:	1ac0      	subs	r0, r0, r3
 800d16c:	2300      	movs	r3, #0
 800d16e:	4602      	mov	r2, r0
 800d170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d172:	6a21      	ldr	r1, [r4, #32]
 800d174:	4628      	mov	r0, r5
 800d176:	47b0      	blx	r6
 800d178:	1c43      	adds	r3, r0, #1
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	d106      	bne.n	800d18c <__sflush_r+0x68>
 800d17e:	6829      	ldr	r1, [r5, #0]
 800d180:	291d      	cmp	r1, #29
 800d182:	d82b      	bhi.n	800d1dc <__sflush_r+0xb8>
 800d184:	4a29      	ldr	r2, [pc, #164]	; (800d22c <__sflush_r+0x108>)
 800d186:	410a      	asrs	r2, r1
 800d188:	07d6      	lsls	r6, r2, #31
 800d18a:	d427      	bmi.n	800d1dc <__sflush_r+0xb8>
 800d18c:	2200      	movs	r2, #0
 800d18e:	6062      	str	r2, [r4, #4]
 800d190:	04d9      	lsls	r1, r3, #19
 800d192:	6922      	ldr	r2, [r4, #16]
 800d194:	6022      	str	r2, [r4, #0]
 800d196:	d504      	bpl.n	800d1a2 <__sflush_r+0x7e>
 800d198:	1c42      	adds	r2, r0, #1
 800d19a:	d101      	bne.n	800d1a0 <__sflush_r+0x7c>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	b903      	cbnz	r3, 800d1a2 <__sflush_r+0x7e>
 800d1a0:	6560      	str	r0, [r4, #84]	; 0x54
 800d1a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1a4:	602f      	str	r7, [r5, #0]
 800d1a6:	2900      	cmp	r1, #0
 800d1a8:	d0c9      	beq.n	800d13e <__sflush_r+0x1a>
 800d1aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1ae:	4299      	cmp	r1, r3
 800d1b0:	d002      	beq.n	800d1b8 <__sflush_r+0x94>
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	f7ff fa96 	bl	800c6e4 <_free_r>
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	6360      	str	r0, [r4, #52]	; 0x34
 800d1bc:	e7c0      	b.n	800d140 <__sflush_r+0x1c>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	47b0      	blx	r6
 800d1c4:	1c41      	adds	r1, r0, #1
 800d1c6:	d1c8      	bne.n	800d15a <__sflush_r+0x36>
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d0c5      	beq.n	800d15a <__sflush_r+0x36>
 800d1ce:	2b1d      	cmp	r3, #29
 800d1d0:	d001      	beq.n	800d1d6 <__sflush_r+0xb2>
 800d1d2:	2b16      	cmp	r3, #22
 800d1d4:	d101      	bne.n	800d1da <__sflush_r+0xb6>
 800d1d6:	602f      	str	r7, [r5, #0]
 800d1d8:	e7b1      	b.n	800d13e <__sflush_r+0x1a>
 800d1da:	89a3      	ldrh	r3, [r4, #12]
 800d1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1e0:	81a3      	strh	r3, [r4, #12]
 800d1e2:	e7ad      	b.n	800d140 <__sflush_r+0x1c>
 800d1e4:	690f      	ldr	r7, [r1, #16]
 800d1e6:	2f00      	cmp	r7, #0
 800d1e8:	d0a9      	beq.n	800d13e <__sflush_r+0x1a>
 800d1ea:	0793      	lsls	r3, r2, #30
 800d1ec:	680e      	ldr	r6, [r1, #0]
 800d1ee:	bf08      	it	eq
 800d1f0:	694b      	ldreq	r3, [r1, #20]
 800d1f2:	600f      	str	r7, [r1, #0]
 800d1f4:	bf18      	it	ne
 800d1f6:	2300      	movne	r3, #0
 800d1f8:	eba6 0807 	sub.w	r8, r6, r7
 800d1fc:	608b      	str	r3, [r1, #8]
 800d1fe:	f1b8 0f00 	cmp.w	r8, #0
 800d202:	dd9c      	ble.n	800d13e <__sflush_r+0x1a>
 800d204:	6a21      	ldr	r1, [r4, #32]
 800d206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d208:	4643      	mov	r3, r8
 800d20a:	463a      	mov	r2, r7
 800d20c:	4628      	mov	r0, r5
 800d20e:	47b0      	blx	r6
 800d210:	2800      	cmp	r0, #0
 800d212:	dc06      	bgt.n	800d222 <__sflush_r+0xfe>
 800d214:	89a3      	ldrh	r3, [r4, #12]
 800d216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d21a:	81a3      	strh	r3, [r4, #12]
 800d21c:	f04f 30ff 	mov.w	r0, #4294967295
 800d220:	e78e      	b.n	800d140 <__sflush_r+0x1c>
 800d222:	4407      	add	r7, r0
 800d224:	eba8 0800 	sub.w	r8, r8, r0
 800d228:	e7e9      	b.n	800d1fe <__sflush_r+0xda>
 800d22a:	bf00      	nop
 800d22c:	dfbffffe 	.word	0xdfbffffe

0800d230 <_fflush_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	690b      	ldr	r3, [r1, #16]
 800d234:	4605      	mov	r5, r0
 800d236:	460c      	mov	r4, r1
 800d238:	b913      	cbnz	r3, 800d240 <_fflush_r+0x10>
 800d23a:	2500      	movs	r5, #0
 800d23c:	4628      	mov	r0, r5
 800d23e:	bd38      	pop	{r3, r4, r5, pc}
 800d240:	b118      	cbz	r0, 800d24a <_fflush_r+0x1a>
 800d242:	6a03      	ldr	r3, [r0, #32]
 800d244:	b90b      	cbnz	r3, 800d24a <_fflush_r+0x1a>
 800d246:	f7fe f949 	bl	800b4dc <__sinit>
 800d24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d0f3      	beq.n	800d23a <_fflush_r+0xa>
 800d252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d254:	07d0      	lsls	r0, r2, #31
 800d256:	d404      	bmi.n	800d262 <_fflush_r+0x32>
 800d258:	0599      	lsls	r1, r3, #22
 800d25a:	d402      	bmi.n	800d262 <_fflush_r+0x32>
 800d25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d25e:	f7fe fbb6 	bl	800b9ce <__retarget_lock_acquire_recursive>
 800d262:	4628      	mov	r0, r5
 800d264:	4621      	mov	r1, r4
 800d266:	f7ff ff5d 	bl	800d124 <__sflush_r>
 800d26a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d26c:	07da      	lsls	r2, r3, #31
 800d26e:	4605      	mov	r5, r0
 800d270:	d4e4      	bmi.n	800d23c <_fflush_r+0xc>
 800d272:	89a3      	ldrh	r3, [r4, #12]
 800d274:	059b      	lsls	r3, r3, #22
 800d276:	d4e1      	bmi.n	800d23c <_fflush_r+0xc>
 800d278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d27a:	f7fe fba9 	bl	800b9d0 <__retarget_lock_release_recursive>
 800d27e:	e7dd      	b.n	800d23c <_fflush_r+0xc>

0800d280 <__swhatbuf_r>:
 800d280:	b570      	push	{r4, r5, r6, lr}
 800d282:	460c      	mov	r4, r1
 800d284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d288:	2900      	cmp	r1, #0
 800d28a:	b096      	sub	sp, #88	; 0x58
 800d28c:	4615      	mov	r5, r2
 800d28e:	461e      	mov	r6, r3
 800d290:	da0d      	bge.n	800d2ae <__swhatbuf_r+0x2e>
 800d292:	89a3      	ldrh	r3, [r4, #12]
 800d294:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d298:	f04f 0100 	mov.w	r1, #0
 800d29c:	bf0c      	ite	eq
 800d29e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d2a2:	2340      	movne	r3, #64	; 0x40
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	6031      	str	r1, [r6, #0]
 800d2a8:	602b      	str	r3, [r5, #0]
 800d2aa:	b016      	add	sp, #88	; 0x58
 800d2ac:	bd70      	pop	{r4, r5, r6, pc}
 800d2ae:	466a      	mov	r2, sp
 800d2b0:	f000 f848 	bl	800d344 <_fstat_r>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	dbec      	blt.n	800d292 <__swhatbuf_r+0x12>
 800d2b8:	9901      	ldr	r1, [sp, #4]
 800d2ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d2be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d2c2:	4259      	negs	r1, r3
 800d2c4:	4159      	adcs	r1, r3
 800d2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2ca:	e7eb      	b.n	800d2a4 <__swhatbuf_r+0x24>

0800d2cc <__smakebuf_r>:
 800d2cc:	898b      	ldrh	r3, [r1, #12]
 800d2ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2d0:	079d      	lsls	r5, r3, #30
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	460c      	mov	r4, r1
 800d2d6:	d507      	bpl.n	800d2e8 <__smakebuf_r+0x1c>
 800d2d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	6123      	str	r3, [r4, #16]
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	6163      	str	r3, [r4, #20]
 800d2e4:	b002      	add	sp, #8
 800d2e6:	bd70      	pop	{r4, r5, r6, pc}
 800d2e8:	ab01      	add	r3, sp, #4
 800d2ea:	466a      	mov	r2, sp
 800d2ec:	f7ff ffc8 	bl	800d280 <__swhatbuf_r>
 800d2f0:	9900      	ldr	r1, [sp, #0]
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f7fd fb73 	bl	800a9e0 <_malloc_r>
 800d2fa:	b948      	cbnz	r0, 800d310 <__smakebuf_r+0x44>
 800d2fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d300:	059a      	lsls	r2, r3, #22
 800d302:	d4ef      	bmi.n	800d2e4 <__smakebuf_r+0x18>
 800d304:	f023 0303 	bic.w	r3, r3, #3
 800d308:	f043 0302 	orr.w	r3, r3, #2
 800d30c:	81a3      	strh	r3, [r4, #12]
 800d30e:	e7e3      	b.n	800d2d8 <__smakebuf_r+0xc>
 800d310:	89a3      	ldrh	r3, [r4, #12]
 800d312:	6020      	str	r0, [r4, #0]
 800d314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d318:	81a3      	strh	r3, [r4, #12]
 800d31a:	9b00      	ldr	r3, [sp, #0]
 800d31c:	6163      	str	r3, [r4, #20]
 800d31e:	9b01      	ldr	r3, [sp, #4]
 800d320:	6120      	str	r0, [r4, #16]
 800d322:	b15b      	cbz	r3, 800d33c <__smakebuf_r+0x70>
 800d324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d328:	4630      	mov	r0, r6
 800d32a:	f000 f81d 	bl	800d368 <_isatty_r>
 800d32e:	b128      	cbz	r0, 800d33c <__smakebuf_r+0x70>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	f023 0303 	bic.w	r3, r3, #3
 800d336:	f043 0301 	orr.w	r3, r3, #1
 800d33a:	81a3      	strh	r3, [r4, #12]
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	431d      	orrs	r5, r3
 800d340:	81a5      	strh	r5, [r4, #12]
 800d342:	e7cf      	b.n	800d2e4 <__smakebuf_r+0x18>

0800d344 <_fstat_r>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	4d07      	ldr	r5, [pc, #28]	; (800d364 <_fstat_r+0x20>)
 800d348:	2300      	movs	r3, #0
 800d34a:	4604      	mov	r4, r0
 800d34c:	4608      	mov	r0, r1
 800d34e:	4611      	mov	r1, r2
 800d350:	602b      	str	r3, [r5, #0]
 800d352:	f7f5 fc58 	bl	8002c06 <_fstat>
 800d356:	1c43      	adds	r3, r0, #1
 800d358:	d102      	bne.n	800d360 <_fstat_r+0x1c>
 800d35a:	682b      	ldr	r3, [r5, #0]
 800d35c:	b103      	cbz	r3, 800d360 <_fstat_r+0x1c>
 800d35e:	6023      	str	r3, [r4, #0]
 800d360:	bd38      	pop	{r3, r4, r5, pc}
 800d362:	bf00      	nop
 800d364:	20006c3c 	.word	0x20006c3c

0800d368 <_isatty_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	4d06      	ldr	r5, [pc, #24]	; (800d384 <_isatty_r+0x1c>)
 800d36c:	2300      	movs	r3, #0
 800d36e:	4604      	mov	r4, r0
 800d370:	4608      	mov	r0, r1
 800d372:	602b      	str	r3, [r5, #0]
 800d374:	f7f5 fc57 	bl	8002c26 <_isatty>
 800d378:	1c43      	adds	r3, r0, #1
 800d37a:	d102      	bne.n	800d382 <_isatty_r+0x1a>
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	b103      	cbz	r3, 800d382 <_isatty_r+0x1a>
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	bd38      	pop	{r3, r4, r5, pc}
 800d384:	20006c3c 	.word	0x20006c3c

0800d388 <__assert_func>:
 800d388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d38a:	4614      	mov	r4, r2
 800d38c:	461a      	mov	r2, r3
 800d38e:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <__assert_func+0x2c>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4605      	mov	r5, r0
 800d394:	68d8      	ldr	r0, [r3, #12]
 800d396:	b14c      	cbz	r4, 800d3ac <__assert_func+0x24>
 800d398:	4b07      	ldr	r3, [pc, #28]	; (800d3b8 <__assert_func+0x30>)
 800d39a:	9100      	str	r1, [sp, #0]
 800d39c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3a0:	4906      	ldr	r1, [pc, #24]	; (800d3bc <__assert_func+0x34>)
 800d3a2:	462b      	mov	r3, r5
 800d3a4:	f000 f872 	bl	800d48c <fiprintf>
 800d3a8:	f000 f882 	bl	800d4b0 <abort>
 800d3ac:	4b04      	ldr	r3, [pc, #16]	; (800d3c0 <__assert_func+0x38>)
 800d3ae:	461c      	mov	r4, r3
 800d3b0:	e7f3      	b.n	800d39a <__assert_func+0x12>
 800d3b2:	bf00      	nop
 800d3b4:	2000015c 	.word	0x2000015c
 800d3b8:	0800dd3f 	.word	0x0800dd3f
 800d3bc:	0800dd4c 	.word	0x0800dd4c
 800d3c0:	0800dd7a 	.word	0x0800dd7a

0800d3c4 <_calloc_r>:
 800d3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3c6:	fba1 2402 	umull	r2, r4, r1, r2
 800d3ca:	b94c      	cbnz	r4, 800d3e0 <_calloc_r+0x1c>
 800d3cc:	4611      	mov	r1, r2
 800d3ce:	9201      	str	r2, [sp, #4]
 800d3d0:	f7fd fb06 	bl	800a9e0 <_malloc_r>
 800d3d4:	9a01      	ldr	r2, [sp, #4]
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	b930      	cbnz	r0, 800d3e8 <_calloc_r+0x24>
 800d3da:	4628      	mov	r0, r5
 800d3dc:	b003      	add	sp, #12
 800d3de:	bd30      	pop	{r4, r5, pc}
 800d3e0:	220c      	movs	r2, #12
 800d3e2:	6002      	str	r2, [r0, #0]
 800d3e4:	2500      	movs	r5, #0
 800d3e6:	e7f8      	b.n	800d3da <_calloc_r+0x16>
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	f7fe fa55 	bl	800b898 <memset>
 800d3ee:	e7f4      	b.n	800d3da <_calloc_r+0x16>

0800d3f0 <__ascii_mbtowc>:
 800d3f0:	b082      	sub	sp, #8
 800d3f2:	b901      	cbnz	r1, 800d3f6 <__ascii_mbtowc+0x6>
 800d3f4:	a901      	add	r1, sp, #4
 800d3f6:	b142      	cbz	r2, 800d40a <__ascii_mbtowc+0x1a>
 800d3f8:	b14b      	cbz	r3, 800d40e <__ascii_mbtowc+0x1e>
 800d3fa:	7813      	ldrb	r3, [r2, #0]
 800d3fc:	600b      	str	r3, [r1, #0]
 800d3fe:	7812      	ldrb	r2, [r2, #0]
 800d400:	1e10      	subs	r0, r2, #0
 800d402:	bf18      	it	ne
 800d404:	2001      	movne	r0, #1
 800d406:	b002      	add	sp, #8
 800d408:	4770      	bx	lr
 800d40a:	4610      	mov	r0, r2
 800d40c:	e7fb      	b.n	800d406 <__ascii_mbtowc+0x16>
 800d40e:	f06f 0001 	mvn.w	r0, #1
 800d412:	e7f8      	b.n	800d406 <__ascii_mbtowc+0x16>

0800d414 <_realloc_r>:
 800d414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d418:	4680      	mov	r8, r0
 800d41a:	4614      	mov	r4, r2
 800d41c:	460e      	mov	r6, r1
 800d41e:	b921      	cbnz	r1, 800d42a <_realloc_r+0x16>
 800d420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d424:	4611      	mov	r1, r2
 800d426:	f7fd badb 	b.w	800a9e0 <_malloc_r>
 800d42a:	b92a      	cbnz	r2, 800d438 <_realloc_r+0x24>
 800d42c:	f7ff f95a 	bl	800c6e4 <_free_r>
 800d430:	4625      	mov	r5, r4
 800d432:	4628      	mov	r0, r5
 800d434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d438:	f000 f841 	bl	800d4be <_malloc_usable_size_r>
 800d43c:	4284      	cmp	r4, r0
 800d43e:	4607      	mov	r7, r0
 800d440:	d802      	bhi.n	800d448 <_realloc_r+0x34>
 800d442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d446:	d812      	bhi.n	800d46e <_realloc_r+0x5a>
 800d448:	4621      	mov	r1, r4
 800d44a:	4640      	mov	r0, r8
 800d44c:	f7fd fac8 	bl	800a9e0 <_malloc_r>
 800d450:	4605      	mov	r5, r0
 800d452:	2800      	cmp	r0, #0
 800d454:	d0ed      	beq.n	800d432 <_realloc_r+0x1e>
 800d456:	42bc      	cmp	r4, r7
 800d458:	4622      	mov	r2, r4
 800d45a:	4631      	mov	r1, r6
 800d45c:	bf28      	it	cs
 800d45e:	463a      	movcs	r2, r7
 800d460:	f7fe fab7 	bl	800b9d2 <memcpy>
 800d464:	4631      	mov	r1, r6
 800d466:	4640      	mov	r0, r8
 800d468:	f7ff f93c 	bl	800c6e4 <_free_r>
 800d46c:	e7e1      	b.n	800d432 <_realloc_r+0x1e>
 800d46e:	4635      	mov	r5, r6
 800d470:	e7df      	b.n	800d432 <_realloc_r+0x1e>

0800d472 <__ascii_wctomb>:
 800d472:	b149      	cbz	r1, 800d488 <__ascii_wctomb+0x16>
 800d474:	2aff      	cmp	r2, #255	; 0xff
 800d476:	bf85      	ittet	hi
 800d478:	238a      	movhi	r3, #138	; 0x8a
 800d47a:	6003      	strhi	r3, [r0, #0]
 800d47c:	700a      	strbls	r2, [r1, #0]
 800d47e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d482:	bf98      	it	ls
 800d484:	2001      	movls	r0, #1
 800d486:	4770      	bx	lr
 800d488:	4608      	mov	r0, r1
 800d48a:	4770      	bx	lr

0800d48c <fiprintf>:
 800d48c:	b40e      	push	{r1, r2, r3}
 800d48e:	b503      	push	{r0, r1, lr}
 800d490:	4601      	mov	r1, r0
 800d492:	ab03      	add	r3, sp, #12
 800d494:	4805      	ldr	r0, [pc, #20]	; (800d4ac <fiprintf+0x20>)
 800d496:	f853 2b04 	ldr.w	r2, [r3], #4
 800d49a:	6800      	ldr	r0, [r0, #0]
 800d49c:	9301      	str	r3, [sp, #4]
 800d49e:	f000 f83f 	bl	800d520 <_vfiprintf_r>
 800d4a2:	b002      	add	sp, #8
 800d4a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4a8:	b003      	add	sp, #12
 800d4aa:	4770      	bx	lr
 800d4ac:	2000015c 	.word	0x2000015c

0800d4b0 <abort>:
 800d4b0:	b508      	push	{r3, lr}
 800d4b2:	2006      	movs	r0, #6
 800d4b4:	f000 f976 	bl	800d7a4 <raise>
 800d4b8:	2001      	movs	r0, #1
 800d4ba:	f7f5 fb55 	bl	8002b68 <_exit>

0800d4be <_malloc_usable_size_r>:
 800d4be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4c2:	1f18      	subs	r0, r3, #4
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	bfbc      	itt	lt
 800d4c8:	580b      	ldrlt	r3, [r1, r0]
 800d4ca:	18c0      	addlt	r0, r0, r3
 800d4cc:	4770      	bx	lr

0800d4ce <__sfputc_r>:
 800d4ce:	6893      	ldr	r3, [r2, #8]
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	b410      	push	{r4}
 800d4d6:	6093      	str	r3, [r2, #8]
 800d4d8:	da08      	bge.n	800d4ec <__sfputc_r+0x1e>
 800d4da:	6994      	ldr	r4, [r2, #24]
 800d4dc:	42a3      	cmp	r3, r4
 800d4de:	db01      	blt.n	800d4e4 <__sfputc_r+0x16>
 800d4e0:	290a      	cmp	r1, #10
 800d4e2:	d103      	bne.n	800d4ec <__sfputc_r+0x1e>
 800d4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4e8:	f7fe b926 	b.w	800b738 <__swbuf_r>
 800d4ec:	6813      	ldr	r3, [r2, #0]
 800d4ee:	1c58      	adds	r0, r3, #1
 800d4f0:	6010      	str	r0, [r2, #0]
 800d4f2:	7019      	strb	r1, [r3, #0]
 800d4f4:	4608      	mov	r0, r1
 800d4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <__sfputs_r>:
 800d4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fe:	4606      	mov	r6, r0
 800d500:	460f      	mov	r7, r1
 800d502:	4614      	mov	r4, r2
 800d504:	18d5      	adds	r5, r2, r3
 800d506:	42ac      	cmp	r4, r5
 800d508:	d101      	bne.n	800d50e <__sfputs_r+0x12>
 800d50a:	2000      	movs	r0, #0
 800d50c:	e007      	b.n	800d51e <__sfputs_r+0x22>
 800d50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d512:	463a      	mov	r2, r7
 800d514:	4630      	mov	r0, r6
 800d516:	f7ff ffda 	bl	800d4ce <__sfputc_r>
 800d51a:	1c43      	adds	r3, r0, #1
 800d51c:	d1f3      	bne.n	800d506 <__sfputs_r+0xa>
 800d51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d520 <_vfiprintf_r>:
 800d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d524:	460d      	mov	r5, r1
 800d526:	b09d      	sub	sp, #116	; 0x74
 800d528:	4614      	mov	r4, r2
 800d52a:	4698      	mov	r8, r3
 800d52c:	4606      	mov	r6, r0
 800d52e:	b118      	cbz	r0, 800d538 <_vfiprintf_r+0x18>
 800d530:	6a03      	ldr	r3, [r0, #32]
 800d532:	b90b      	cbnz	r3, 800d538 <_vfiprintf_r+0x18>
 800d534:	f7fd ffd2 	bl	800b4dc <__sinit>
 800d538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d53a:	07d9      	lsls	r1, r3, #31
 800d53c:	d405      	bmi.n	800d54a <_vfiprintf_r+0x2a>
 800d53e:	89ab      	ldrh	r3, [r5, #12]
 800d540:	059a      	lsls	r2, r3, #22
 800d542:	d402      	bmi.n	800d54a <_vfiprintf_r+0x2a>
 800d544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d546:	f7fe fa42 	bl	800b9ce <__retarget_lock_acquire_recursive>
 800d54a:	89ab      	ldrh	r3, [r5, #12]
 800d54c:	071b      	lsls	r3, r3, #28
 800d54e:	d501      	bpl.n	800d554 <_vfiprintf_r+0x34>
 800d550:	692b      	ldr	r3, [r5, #16]
 800d552:	b99b      	cbnz	r3, 800d57c <_vfiprintf_r+0x5c>
 800d554:	4629      	mov	r1, r5
 800d556:	4630      	mov	r0, r6
 800d558:	f7fe f92c 	bl	800b7b4 <__swsetup_r>
 800d55c:	b170      	cbz	r0, 800d57c <_vfiprintf_r+0x5c>
 800d55e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d560:	07dc      	lsls	r4, r3, #31
 800d562:	d504      	bpl.n	800d56e <_vfiprintf_r+0x4e>
 800d564:	f04f 30ff 	mov.w	r0, #4294967295
 800d568:	b01d      	add	sp, #116	; 0x74
 800d56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d56e:	89ab      	ldrh	r3, [r5, #12]
 800d570:	0598      	lsls	r0, r3, #22
 800d572:	d4f7      	bmi.n	800d564 <_vfiprintf_r+0x44>
 800d574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d576:	f7fe fa2b 	bl	800b9d0 <__retarget_lock_release_recursive>
 800d57a:	e7f3      	b.n	800d564 <_vfiprintf_r+0x44>
 800d57c:	2300      	movs	r3, #0
 800d57e:	9309      	str	r3, [sp, #36]	; 0x24
 800d580:	2320      	movs	r3, #32
 800d582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d586:	f8cd 800c 	str.w	r8, [sp, #12]
 800d58a:	2330      	movs	r3, #48	; 0x30
 800d58c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d740 <_vfiprintf_r+0x220>
 800d590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d594:	f04f 0901 	mov.w	r9, #1
 800d598:	4623      	mov	r3, r4
 800d59a:	469a      	mov	sl, r3
 800d59c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5a0:	b10a      	cbz	r2, 800d5a6 <_vfiprintf_r+0x86>
 800d5a2:	2a25      	cmp	r2, #37	; 0x25
 800d5a4:	d1f9      	bne.n	800d59a <_vfiprintf_r+0x7a>
 800d5a6:	ebba 0b04 	subs.w	fp, sl, r4
 800d5aa:	d00b      	beq.n	800d5c4 <_vfiprintf_r+0xa4>
 800d5ac:	465b      	mov	r3, fp
 800d5ae:	4622      	mov	r2, r4
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	f7ff ffa2 	bl	800d4fc <__sfputs_r>
 800d5b8:	3001      	adds	r0, #1
 800d5ba:	f000 80a9 	beq.w	800d710 <_vfiprintf_r+0x1f0>
 800d5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5c0:	445a      	add	r2, fp
 800d5c2:	9209      	str	r2, [sp, #36]	; 0x24
 800d5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	f000 80a1 	beq.w	800d710 <_vfiprintf_r+0x1f0>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5d8:	f10a 0a01 	add.w	sl, sl, #1
 800d5dc:	9304      	str	r3, [sp, #16]
 800d5de:	9307      	str	r3, [sp, #28]
 800d5e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5e4:	931a      	str	r3, [sp, #104]	; 0x68
 800d5e6:	4654      	mov	r4, sl
 800d5e8:	2205      	movs	r2, #5
 800d5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ee:	4854      	ldr	r0, [pc, #336]	; (800d740 <_vfiprintf_r+0x220>)
 800d5f0:	f7f2 fe06 	bl	8000200 <memchr>
 800d5f4:	9a04      	ldr	r2, [sp, #16]
 800d5f6:	b9d8      	cbnz	r0, 800d630 <_vfiprintf_r+0x110>
 800d5f8:	06d1      	lsls	r1, r2, #27
 800d5fa:	bf44      	itt	mi
 800d5fc:	2320      	movmi	r3, #32
 800d5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d602:	0713      	lsls	r3, r2, #28
 800d604:	bf44      	itt	mi
 800d606:	232b      	movmi	r3, #43	; 0x2b
 800d608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d60c:	f89a 3000 	ldrb.w	r3, [sl]
 800d610:	2b2a      	cmp	r3, #42	; 0x2a
 800d612:	d015      	beq.n	800d640 <_vfiprintf_r+0x120>
 800d614:	9a07      	ldr	r2, [sp, #28]
 800d616:	4654      	mov	r4, sl
 800d618:	2000      	movs	r0, #0
 800d61a:	f04f 0c0a 	mov.w	ip, #10
 800d61e:	4621      	mov	r1, r4
 800d620:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d624:	3b30      	subs	r3, #48	; 0x30
 800d626:	2b09      	cmp	r3, #9
 800d628:	d94d      	bls.n	800d6c6 <_vfiprintf_r+0x1a6>
 800d62a:	b1b0      	cbz	r0, 800d65a <_vfiprintf_r+0x13a>
 800d62c:	9207      	str	r2, [sp, #28]
 800d62e:	e014      	b.n	800d65a <_vfiprintf_r+0x13a>
 800d630:	eba0 0308 	sub.w	r3, r0, r8
 800d634:	fa09 f303 	lsl.w	r3, r9, r3
 800d638:	4313      	orrs	r3, r2
 800d63a:	9304      	str	r3, [sp, #16]
 800d63c:	46a2      	mov	sl, r4
 800d63e:	e7d2      	b.n	800d5e6 <_vfiprintf_r+0xc6>
 800d640:	9b03      	ldr	r3, [sp, #12]
 800d642:	1d19      	adds	r1, r3, #4
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	9103      	str	r1, [sp, #12]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	bfbb      	ittet	lt
 800d64c:	425b      	neglt	r3, r3
 800d64e:	f042 0202 	orrlt.w	r2, r2, #2
 800d652:	9307      	strge	r3, [sp, #28]
 800d654:	9307      	strlt	r3, [sp, #28]
 800d656:	bfb8      	it	lt
 800d658:	9204      	strlt	r2, [sp, #16]
 800d65a:	7823      	ldrb	r3, [r4, #0]
 800d65c:	2b2e      	cmp	r3, #46	; 0x2e
 800d65e:	d10c      	bne.n	800d67a <_vfiprintf_r+0x15a>
 800d660:	7863      	ldrb	r3, [r4, #1]
 800d662:	2b2a      	cmp	r3, #42	; 0x2a
 800d664:	d134      	bne.n	800d6d0 <_vfiprintf_r+0x1b0>
 800d666:	9b03      	ldr	r3, [sp, #12]
 800d668:	1d1a      	adds	r2, r3, #4
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	9203      	str	r2, [sp, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	bfb8      	it	lt
 800d672:	f04f 33ff 	movlt.w	r3, #4294967295
 800d676:	3402      	adds	r4, #2
 800d678:	9305      	str	r3, [sp, #20]
 800d67a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d750 <_vfiprintf_r+0x230>
 800d67e:	7821      	ldrb	r1, [r4, #0]
 800d680:	2203      	movs	r2, #3
 800d682:	4650      	mov	r0, sl
 800d684:	f7f2 fdbc 	bl	8000200 <memchr>
 800d688:	b138      	cbz	r0, 800d69a <_vfiprintf_r+0x17a>
 800d68a:	9b04      	ldr	r3, [sp, #16]
 800d68c:	eba0 000a 	sub.w	r0, r0, sl
 800d690:	2240      	movs	r2, #64	; 0x40
 800d692:	4082      	lsls	r2, r0
 800d694:	4313      	orrs	r3, r2
 800d696:	3401      	adds	r4, #1
 800d698:	9304      	str	r3, [sp, #16]
 800d69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d69e:	4829      	ldr	r0, [pc, #164]	; (800d744 <_vfiprintf_r+0x224>)
 800d6a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6a4:	2206      	movs	r2, #6
 800d6a6:	f7f2 fdab 	bl	8000200 <memchr>
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d03f      	beq.n	800d72e <_vfiprintf_r+0x20e>
 800d6ae:	4b26      	ldr	r3, [pc, #152]	; (800d748 <_vfiprintf_r+0x228>)
 800d6b0:	bb1b      	cbnz	r3, 800d6fa <_vfiprintf_r+0x1da>
 800d6b2:	9b03      	ldr	r3, [sp, #12]
 800d6b4:	3307      	adds	r3, #7
 800d6b6:	f023 0307 	bic.w	r3, r3, #7
 800d6ba:	3308      	adds	r3, #8
 800d6bc:	9303      	str	r3, [sp, #12]
 800d6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6c0:	443b      	add	r3, r7
 800d6c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c4:	e768      	b.n	800d598 <_vfiprintf_r+0x78>
 800d6c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	2001      	movs	r0, #1
 800d6ce:	e7a6      	b.n	800d61e <_vfiprintf_r+0xfe>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	3401      	adds	r4, #1
 800d6d4:	9305      	str	r3, [sp, #20]
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	f04f 0c0a 	mov.w	ip, #10
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6e2:	3a30      	subs	r2, #48	; 0x30
 800d6e4:	2a09      	cmp	r2, #9
 800d6e6:	d903      	bls.n	800d6f0 <_vfiprintf_r+0x1d0>
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d0c6      	beq.n	800d67a <_vfiprintf_r+0x15a>
 800d6ec:	9105      	str	r1, [sp, #20]
 800d6ee:	e7c4      	b.n	800d67a <_vfiprintf_r+0x15a>
 800d6f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e7f0      	b.n	800d6dc <_vfiprintf_r+0x1bc>
 800d6fa:	ab03      	add	r3, sp, #12
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	462a      	mov	r2, r5
 800d700:	4b12      	ldr	r3, [pc, #72]	; (800d74c <_vfiprintf_r+0x22c>)
 800d702:	a904      	add	r1, sp, #16
 800d704:	4630      	mov	r0, r6
 800d706:	f7fd fa97 	bl	800ac38 <_printf_float>
 800d70a:	4607      	mov	r7, r0
 800d70c:	1c78      	adds	r0, r7, #1
 800d70e:	d1d6      	bne.n	800d6be <_vfiprintf_r+0x19e>
 800d710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d712:	07d9      	lsls	r1, r3, #31
 800d714:	d405      	bmi.n	800d722 <_vfiprintf_r+0x202>
 800d716:	89ab      	ldrh	r3, [r5, #12]
 800d718:	059a      	lsls	r2, r3, #22
 800d71a:	d402      	bmi.n	800d722 <_vfiprintf_r+0x202>
 800d71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d71e:	f7fe f957 	bl	800b9d0 <__retarget_lock_release_recursive>
 800d722:	89ab      	ldrh	r3, [r5, #12]
 800d724:	065b      	lsls	r3, r3, #25
 800d726:	f53f af1d 	bmi.w	800d564 <_vfiprintf_r+0x44>
 800d72a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d72c:	e71c      	b.n	800d568 <_vfiprintf_r+0x48>
 800d72e:	ab03      	add	r3, sp, #12
 800d730:	9300      	str	r3, [sp, #0]
 800d732:	462a      	mov	r2, r5
 800d734:	4b05      	ldr	r3, [pc, #20]	; (800d74c <_vfiprintf_r+0x22c>)
 800d736:	a904      	add	r1, sp, #16
 800d738:	4630      	mov	r0, r6
 800d73a:	f7fd fd21 	bl	800b180 <_printf_i>
 800d73e:	e7e4      	b.n	800d70a <_vfiprintf_r+0x1ea>
 800d740:	0800dd24 	.word	0x0800dd24
 800d744:	0800dd2e 	.word	0x0800dd2e
 800d748:	0800ac39 	.word	0x0800ac39
 800d74c:	0800d4fd 	.word	0x0800d4fd
 800d750:	0800dd2a 	.word	0x0800dd2a

0800d754 <_raise_r>:
 800d754:	291f      	cmp	r1, #31
 800d756:	b538      	push	{r3, r4, r5, lr}
 800d758:	4604      	mov	r4, r0
 800d75a:	460d      	mov	r5, r1
 800d75c:	d904      	bls.n	800d768 <_raise_r+0x14>
 800d75e:	2316      	movs	r3, #22
 800d760:	6003      	str	r3, [r0, #0]
 800d762:	f04f 30ff 	mov.w	r0, #4294967295
 800d766:	bd38      	pop	{r3, r4, r5, pc}
 800d768:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d76a:	b112      	cbz	r2, 800d772 <_raise_r+0x1e>
 800d76c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d770:	b94b      	cbnz	r3, 800d786 <_raise_r+0x32>
 800d772:	4620      	mov	r0, r4
 800d774:	f000 f830 	bl	800d7d8 <_getpid_r>
 800d778:	462a      	mov	r2, r5
 800d77a:	4601      	mov	r1, r0
 800d77c:	4620      	mov	r0, r4
 800d77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d782:	f000 b817 	b.w	800d7b4 <_kill_r>
 800d786:	2b01      	cmp	r3, #1
 800d788:	d00a      	beq.n	800d7a0 <_raise_r+0x4c>
 800d78a:	1c59      	adds	r1, r3, #1
 800d78c:	d103      	bne.n	800d796 <_raise_r+0x42>
 800d78e:	2316      	movs	r3, #22
 800d790:	6003      	str	r3, [r0, #0]
 800d792:	2001      	movs	r0, #1
 800d794:	e7e7      	b.n	800d766 <_raise_r+0x12>
 800d796:	2400      	movs	r4, #0
 800d798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d79c:	4628      	mov	r0, r5
 800d79e:	4798      	blx	r3
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	e7e0      	b.n	800d766 <_raise_r+0x12>

0800d7a4 <raise>:
 800d7a4:	4b02      	ldr	r3, [pc, #8]	; (800d7b0 <raise+0xc>)
 800d7a6:	4601      	mov	r1, r0
 800d7a8:	6818      	ldr	r0, [r3, #0]
 800d7aa:	f7ff bfd3 	b.w	800d754 <_raise_r>
 800d7ae:	bf00      	nop
 800d7b0:	2000015c 	.word	0x2000015c

0800d7b4 <_kill_r>:
 800d7b4:	b538      	push	{r3, r4, r5, lr}
 800d7b6:	4d07      	ldr	r5, [pc, #28]	; (800d7d4 <_kill_r+0x20>)
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	4604      	mov	r4, r0
 800d7bc:	4608      	mov	r0, r1
 800d7be:	4611      	mov	r1, r2
 800d7c0:	602b      	str	r3, [r5, #0]
 800d7c2:	f7f5 f9c1 	bl	8002b48 <_kill>
 800d7c6:	1c43      	adds	r3, r0, #1
 800d7c8:	d102      	bne.n	800d7d0 <_kill_r+0x1c>
 800d7ca:	682b      	ldr	r3, [r5, #0]
 800d7cc:	b103      	cbz	r3, 800d7d0 <_kill_r+0x1c>
 800d7ce:	6023      	str	r3, [r4, #0]
 800d7d0:	bd38      	pop	{r3, r4, r5, pc}
 800d7d2:	bf00      	nop
 800d7d4:	20006c3c 	.word	0x20006c3c

0800d7d8 <_getpid_r>:
 800d7d8:	f7f5 b9ae 	b.w	8002b38 <_getpid>

0800d7dc <_init>:
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	bf00      	nop
 800d7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7e2:	bc08      	pop	{r3}
 800d7e4:	469e      	mov	lr, r3
 800d7e6:	4770      	bx	lr

0800d7e8 <_fini>:
 800d7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ea:	bf00      	nop
 800d7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ee:	bc08      	pop	{r3}
 800d7f0:	469e      	mov	lr, r3
 800d7f2:	4770      	bx	lr
