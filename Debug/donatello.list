
donatello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e738  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800e8d8  0800e8d8  0001e8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f088  0800f088  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f088  0800f088  0001f088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f090  0800f090  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f090  0800f090  0001f090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f094  0800f094  0001f094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800f098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006558  200002cc  0800f364  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20006824  0800f364  00026824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146a9  00000000  00000000  0002033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004054  00000000  00000000  000349e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00038a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc6  00000000  00000000  00039cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0f4  00000000  00000000  0003aa76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173bd  00000000  00000000  00055b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000928e9  00000000  00000000  0006cf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e2c  00000000  00000000  000ff810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0010563c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e8c0 	.word	0x0800e8c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800e8c0 	.word	0x0800e8c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <embeddedCliDefaultConfig+0x40>)
 8000f7a:	2240      	movs	r2, #64	; 0x40
 8000f7c:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <embeddedCliDefaultConfig+0x40>)
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <embeddedCliDefaultConfig+0x40>)
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <embeddedCliDefaultConfig+0x40>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <embeddedCliDefaultConfig+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <embeddedCliDefaultConfig+0x40>)
 8000f98:	2208      	movs	r2, #8
 8000f9a:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <embeddedCliDefaultConfig+0x40>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <embeddedCliDefaultConfig+0x40>)
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <embeddedCliDefaultConfig+0x44>)
 8000fa6:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <embeddedCliDefaultConfig+0x40>)
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	200002e8 	.word	0x200002e8
 8000fb8:	0800e8dc 	.word	0x0800e8dc

08000fbc <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	895b      	ldrh	r3, [r3, #10]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	88db      	ldrh	r3, [r3, #6]
 8000fda:	3303      	adds	r3, #3
 8000fdc:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8000fde:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	891b      	ldrh	r3, [r3, #8]
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8000fe8:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8000fea:	89fa      	ldrh	r2, [r7, #14]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	3303      	adds	r3, #3
 8000ff6:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8000ff8:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
 8000ffc:	3303      	adds	r3, #3
 8000ffe:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8001000:	4413      	add	r3, r2
 8001002:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 8001004:	b29b      	uxth	r3, r3
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	b29b      	uxth	r3, r3
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b088      	sub	sp, #32
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	895b      	ldrh	r3, [r3, #10]
 8001026:	2201      	movs	r2, #1
 8001028:	4413      	add	r3, r2
 800102a:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ffc5 	bl	8000fbc <embeddedCliRequiredSize>
 8001032:	4603      	mov	r3, r0
 8001034:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 8001036:	2300      	movs	r3, #0
 8001038:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10f      	bne.n	8001062 <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 8001042:	6938      	ldr	r0, [r7, #16]
 8001044:	f009 fc44 	bl	800a8d0 <malloc>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <embeddedCliNew+0x46>
            return NULL;
 8001058:	2300      	movs	r3, #0
 800105a:	e092      	b.n	8001182 <embeddedCliNew+0x16c>
        allocated = true;
 800105c:	2301      	movs	r3, #1
 800105e:	77fb      	strb	r3, [r7, #31]
 8001060:	e007      	b.n	8001072 <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	8a1b      	ldrh	r3, [r3, #16]
 8001066:	461a      	mov	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4293      	cmp	r3, r2
 800106c:	d901      	bls.n	8001072 <embeddedCliNew+0x5c>
        return NULL;
 800106e:	2300      	movs	r3, #0
 8001070:	e087      	b.n	8001182 <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	2100      	movs	r1, #0
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f00a fbe5 	bl	800b84c <memset>

    cli = (EmbeddedCli *) buf;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3310      	adds	r3, #16
 800108a:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3334      	adds	r3, #52	; 0x34
 8001096:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	889b      	ldrh	r3, [r3, #4]
 80010a8:	3303      	adds	r3, #3
 80010aa:	f023 0303 	bic.w	r3, r3, #3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	88db      	ldrh	r3, [r3, #6]
 80010be:	3303      	adds	r3, #3
 80010c0:	f023 0303 	bic.w	r3, r3, #3
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 80010d0:	8afa      	ldrh	r2, [r7, #22]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	3303      	adds	r3, #3
 80010dc:	f023 0303 	bic.w	r3, r3, #3
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 80010ec:	8afb      	ldrh	r3, [r7, #22]
 80010ee:	3303      	adds	r3, #3
 80010f0:	f023 0303 	bic.w	r3, r3, #3
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	891a      	ldrh	r2, [r3, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8001108:	7ffb      	ldrb	r3, [r7, #31]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d008      	beq.n	8001120 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	b2da      	uxtb	r2, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    if (config->enableAutoComplete)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7c9b      	ldrb	r3, [r3, #18]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d008      	beq.n	800113a <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800112e:	f043 0320 	orr.w	r3, r3, #32
 8001132:	b2da      	uxtb	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	889a      	ldrh	r2, [r3, #4]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2200      	movs	r2, #0
 8001146:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2200      	movs	r2, #0
 800114c:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	88da      	ldrh	r2, [r3, #6]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	845a      	strh	r2, [r3, #34]	; 0x22
    impl->bindingsCount = 0;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2200      	movs	r2, #0
 800115a:	859a      	strh	r2, [r3, #44]	; 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	895b      	ldrh	r3, [r3, #10]
 8001160:	2201      	movs	r2, #1
 8001162:	4413      	add	r3, r2
 8001164:	b29a      	uxth	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	85da      	strh	r2, [r3, #46]	; 0x2e
    impl->lastChar = '\0';
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    impl->invitation = config->invitation;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 800117a:	69b8      	ldr	r0, [r7, #24]
 800117c:	f000 fc52 	bl	8001a24 <initInternalBindings>

    return cli;
 8001180:	69bb      	ldr	r3, [r7, #24]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <embeddedCliReceiveChar>:

EmbeddedCli *embeddedCliNewDefault(void) {
    return embeddedCliNew(embeddedCliDefaultConfig());
}

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3310      	adds	r3, #16
 80011a0:	78fa      	ldrb	r2, [r7, #3]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 ffe0 	bl	800216a <fifoBufPush>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d008      	beq.n	80011c8 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    }
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 8083 	beq.w	80012e8 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d155      	bne.n	80012a2 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	b2da      	uxtb	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        writeToOutput(cli, impl->invitation);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 ff0a 	bl	8002028 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8001214:	e045      	b.n	80012a2 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3310      	adds	r3, #16
 800121a:	4618      	mov	r0, r3
 800121c:	f000 ff7d 	bl	800211a <fifoBufPop>
 8001220:	4603      	mov	r3, r0
 8001222:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	4619      	mov	r1, r3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fa16 	bl	8001668 <onEscapedInput>
 800123c:	e02a      	b.n	8001294 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001244:	2b1b      	cmp	r3, #27
 8001246:	d10c      	bne.n	8001262 <embeddedCliProcess+0x92>
 8001248:	7afb      	ldrb	r3, [r7, #11]
 800124a:	2b5b      	cmp	r3, #91	; 0x5b
 800124c:	d109      	bne.n	8001262 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	b2da      	uxtb	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001260:	e018      	b.n	8001294 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 ff00 	bl	800206a <isControlChar>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	4619      	mov	r1, r3
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fa53 	bl	8001720 <onControlInput>
 800127a:	e00b      	b.n	8001294 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 ff13 	bl	80020aa <isDisplayableChar>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 800128a:	7afb      	ldrb	r3, [r7, #11]
 800128c:	4619      	mov	r1, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 fa16 	bl	80016c0 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 fdb0 	bl	8001dfa <printLiveAutocompletion>

        impl->lastChar = c;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	7afa      	ldrb	r2, [r7, #11]
 800129e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3310      	adds	r3, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 ff16 	bl	80020d8 <fifoBufAvailable>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1b1      	bne.n	8001216 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d014      	beq.n	80012ea <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	8c12      	ldrh	r2, [r2, #32]
 80012ce:	4413      	add	r3, r2
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80012e6:	e000      	b.n	80012ea <embeddedCliProcess+0x11a>
        return;
 80012e8:	bf00      	nop
    }
}
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 80012f0:	b084      	sub	sp, #16
 80012f2:	b4b0      	push	{r4, r5, r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80012fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001310:	429a      	cmp	r2, r3
 8001312:	d101      	bne.n	8001318 <embeddedCliAddBinding+0x28>
        return false;
 8001314:	2300      	movs	r3, #0
 8001316:	e017      	b.n	8001348 <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001320:	4619      	mov	r1, r3
 8001322:	460b      	mov	r3, r1
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	461d      	mov	r5, r3
 800132e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800133e:	3301      	adds	r3, #1
 8001340:	b29a      	uxth	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	859a      	strh	r2, [r3, #44]	; 0x2c
    return true;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bcb0      	pop	{r4, r5, r7}
 8001350:	b004      	add	sp, #16
 8001352:	4770      	bx	lr

08001354 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d031      	beq.n	80013ca <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fe22 	bl	8001fc4 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8001380:	6839      	ldr	r1, [r7, #0]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fe50 	bl	8002028 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <embeddedCliPrint+0x80>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fe4a 	bl	8002028 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d114      	bne.n	80013cc <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fe3d 	bl	8002028 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4619      	mov	r1, r3
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fe37 	bl	8002028 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8c1a      	ldrh	r2, [r3, #32]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	861a      	strh	r2, [r3, #48]	; 0x30

        printLiveAutocompletion(cli);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fd19 	bl	8001dfa <printLiveAutocompletion>
 80013c8:	e000      	b.n	80013cc <embeddedCliPrint+0x78>
        return;
 80013ca:	bf00      	nop
    }
}
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000

080013d8 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d066      	beq.n	80014b4 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 80013e6:	4b35      	ldr	r3, [pc, #212]	; (80014bc <embeddedCliTokenizeArgs+0xe4>)
 80013e8:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 80013ea:	2300      	movs	r3, #0
 80013ec:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 80013ee:	2300      	movs	r3, #0
 80013f0:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]

    int i = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 80013fa:	e047      	b.n	800148c <embeddedCliTokenizeArgs+0xb4>
        ++i;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8001402:	7fbb      	ldrb	r3, [r7, #30]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8001408:	2300      	movs	r3, #0
 800140a:	77bb      	strb	r3, [r7, #30]
 800140c:	e029      	b.n	8001462 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 800140e:	7cfb      	ldrb	r3, [r7, #19]
 8001410:	2b5c      	cmp	r3, #92	; 0x5c
 8001412:	d102      	bne.n	800141a <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8001414:	2301      	movs	r3, #1
 8001416:	77bb      	strb	r3, [r7, #30]
            continue;
 8001418:	e038      	b.n	800148c <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 800141a:	7cfb      	ldrb	r3, [r7, #19]
 800141c:	2b22      	cmp	r3, #34	; 0x22
 800141e:	d110      	bne.n	8001442 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8001420:	7ffb      	ldrb	r3, [r7, #31]
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f083 0301 	eor.w	r3, r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	77fb      	strb	r3, [r7, #31]
 8001434:	7ffb      	ldrb	r3, [r7, #31]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 800143c:	2300      	movs	r3, #0
 800143e:	74fb      	strb	r3, [r7, #19]
 8001440:	e00f      	b.n	8001462 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8001442:	7ffb      	ldrb	r3, [r7, #31]
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <embeddedCliTokenizeArgs+0x8a>
 800144e:	7cfb      	ldrb	r3, [r7, #19]
 8001450:	4619      	mov	r1, r3
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f00a fa02 	bl	800b85c <strchr>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 800145e:	2300      	movs	r3, #0
 8001460:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8001462:	7cfb      	ldrb	r3, [r7, #19]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <embeddedCliTokenizeArgs+0xa4>
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	dd0e      	ble.n	800148c <embeddedCliTokenizeArgs+0xb4>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	3b01      	subs	r3, #1
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	7cfa      	ldrb	r2, [r7, #19]
 8001484:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	3301      	adds	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	74fb      	strb	r3, [r7, #19]
 8001496:	7cfb      	ldrb	r3, [r7, #19]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1af      	bne.n	80013fc <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	3301      	adds	r3, #1
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e000      	b.n	80014b6 <embeddedCliTokenizeArgs+0xde>
        return;
 80014b4:	bf00      	nop
}
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800e8e0 	.word	0x0800e8e0

080014c0 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 ff51 	bl	8002378 <getTokenPosition>
 80014d6:	4603      	mov	r3, r0
 80014d8:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d003      	beq.n	80014ec <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	e000      	b.n	80014ee <embeddedCliGetToken+0x2e>
    else
        return NULL;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	4619      	mov	r1, r3
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 ff36 	bl	8002378 <getTokenPosition>
 800150c:	4603      	mov	r3, r0
 800150e:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8001510:	89fb      	ldrh	r3, [r7, #14]
 8001512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001516:	4293      	cmp	r3, r2
 8001518:	d003      	beq.n	8001522 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 800151a:	89fb      	ldrh	r3, [r7, #14]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	e000      	b.n	8001524 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <embeddedCliGetTokenCount+0x16>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <embeddedCliGetTokenCount+0x1a>
        return 0;
 8001542:	2300      	movs	r3, #0
 8001544:	e019      	b.n	800157a <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 800154a:	2301      	movs	r3, #1
 800154c:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3301      	adds	r3, #1
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8001568:	897b      	ldrh	r3, [r7, #10]
 800156a:	3301      	adds	r3, #1
 800156c:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3301      	adds	r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8001574:	e7eb      	b.n	800154e <embeddedCliGetTokenCount+0x22>
                break;
 8001576:	bf00      	nop
    }

    return tokenCount;
 8001578:	897b      	ldrh	r3, [r7, #10]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	899b      	ldrh	r3, [r3, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d05c      	beq.n	800165c <navigateHistory+0xd4>
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	895a      	ldrh	r2, [r3, #10]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	899b      	ldrh	r3, [r3, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d053      	beq.n	800165c <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	f083 0301 	eor.w	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	895b      	ldrh	r3, [r3, #10]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d049      	beq.n	800165c <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fcfb 	bl	8001fc4 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 fd27 	bl	8002028 <writeToOutput>

    if (navigateUp)
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <navigateHistory+0x66>
        ++impl->history.current;
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	895b      	ldrh	r3, [r3, #10]
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	815a      	strh	r2, [r3, #10]
 80015ec:	e005      	b.n	80015fa <navigateHistory+0x72>
    else
        --impl->history.current;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	895b      	ldrh	r3, [r3, #10]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1d1a      	adds	r2, r3, #4
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	895b      	ldrh	r3, [r3, #10]
 8001602:	4619      	mov	r1, r3
 8001604:	4610      	mov	r0, r2
 8001606:	f000 fe3e 	bl	8002286 <historyGet>
 800160a:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <navigateHistory+0x8e>
        item = "";
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <navigateHistory+0xdc>)
 8001614:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7fe fe42 	bl	80002a0 <strlen>
 800161c:	4603      	mov	r3, r0
 800161e:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	89fa      	ldrh	r2, [r7, #14]
 8001626:	6979      	ldr	r1, [r7, #20]
 8001628:	4618      	mov	r0, r3
 800162a:	f00a f9ac 	bl	800b986 <memcpy>
    impl->cmdBuffer[len] = '\0';
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	69da      	ldr	r2, [r3, #28]
 8001632:	89fb      	ldrh	r3, [r7, #14]
 8001634:	4413      	add	r3, r2
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	89fa      	ldrh	r2, [r7, #14]
 800163e:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fcee 	bl	8002028 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	8c1a      	ldrh	r2, [r3, #32]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	861a      	strh	r2, [r3, #48]	; 0x30

    printLiveAutocompletion(cli);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 fbd0 	bl	8001dfa <printLiveAutocompletion>
 800165a:	e000      	b.n	800165e <navigateHistory+0xd6>
        return;
 800165c:	bf00      	nop
}
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	0800e8e4 	.word	0x0800e8e4

08001668 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	2b3f      	cmp	r3, #63	; 0x3f
 800167e:	d91b      	bls.n	80016b8 <onEscapedInput+0x50>
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	2b7e      	cmp	r3, #126	; 0x7e
 8001684:	d818      	bhi.n	80016b8 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800168c:	f023 0308 	bic.w	r3, r3, #8
 8001690:	b2da      	uxtb	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (c == 'A' || c == 'B') {
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	2b41      	cmp	r3, #65	; 0x41
 800169c:	d002      	beq.n	80016a4 <onEscapedInput+0x3c>
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	2b42      	cmp	r3, #66	; 0x42
 80016a2:	d109      	bne.n	80016b8 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b41      	cmp	r3, #65	; 0x41
 80016a8:	bf0c      	ite	eq
 80016aa:	2301      	moveq	r3, #1
 80016ac:	2300      	movne	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ff68 	bl	8001588 <navigateHistory>
        }
    }
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8c1b      	ldrh	r3, [r3, #32]
 80016d6:	3302      	adds	r3, #2
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80016dc:	4293      	cmp	r3, r2
 80016de:	da1a      	bge.n	8001716 <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	8c12      	ldrh	r2, [r2, #32]
 80016e8:	4413      	add	r3, r2
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8c1b      	ldrh	r3, [r3, #32]
 80016f2:	3301      	adds	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	8c12      	ldrh	r2, [r2, #32]
 8001702:	4413      	add	r3, r2
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	4611      	mov	r1, r2
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
 8001714:	e000      	b.n	8001718 <onCharInput+0x58>
        return;
 8001716:	bf00      	nop
}
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001738:	2b0d      	cmp	r3, #13
 800173a:	d102      	bne.n	8001742 <onControlInput+0x22>
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	2b0a      	cmp	r3, #10
 8001740:	d062      	beq.n	8001808 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8001748:	2b0a      	cmp	r3, #10
 800174a:	d102      	bne.n	8001752 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	2b0d      	cmp	r3, #13
 8001750:	d05a      	beq.n	8001808 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	2b0d      	cmp	r3, #13
 8001756:	d002      	beq.n	800175e <onControlInput+0x3e>
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	2b0a      	cmp	r3, #10
 800175c:	d126      	bne.n	80017ac <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fba6 	bl	8001eb0 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <onControlInput+0xf0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fc5c 	bl	8002028 <writeToOutput>

        if (impl->cmdSize > 0)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8c1b      	ldrh	r3, [r3, #32]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <onControlInput+0x5e>
            parseCommand(cli);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f84b 	bl	8001814 <parseCommand>
        impl->cmdSize = 0;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	8c12      	ldrh	r2, [r2, #32]
 800178c:	4413      	add	r3, r2
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	861a      	strh	r2, [r3, #48]	; 0x30
        impl->history.current = 0;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fc3f 	bl	8002028 <writeToOutput>
 80017aa:	e02e      	b.n	800180a <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d002      	beq.n	80017b8 <onControlInput+0x98>
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	2b7f      	cmp	r3, #127	; 0x7f
 80017b6:	d120      	bne.n	80017fa <onControlInput+0xda>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8c1b      	ldrh	r3, [r3, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01c      	beq.n	80017fa <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2108      	movs	r1, #8
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2120      	movs	r1, #32
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2108      	movs	r1, #8
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8c1b      	ldrh	r3, [r3, #32]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	8c12      	ldrh	r2, [r2, #32]
 80017f2:	4413      	add	r3, r2
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e007      	b.n	800180a <onControlInput+0xea>
    } else if (c == '\t') {
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d104      	bne.n	800180a <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fb55 	bl	8001eb0 <onAutocompleteRequest>
 8001806:	e000      	b.n	800180a <onControlInput+0xea>
        return;
 8001808:	bf00      	nop
    }

}
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000000 	.word	0x20000000

08001814 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b08f      	sub	sp, #60	; 0x3c
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8001822:	2301      	movs	r3, #1
 8001824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8001828:	2300      	movs	r3, #0
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
 800182c:	e00d      	b.n	800184a <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	69da      	ldr	r2, [r3, #28]
 8001832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b20      	cmp	r3, #32
 800183a:	d003      	beq.n	8001844 <parseCommand+0x30>
            isEmpty = false;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8001842:	e008      	b.n	8001856 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8001844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001846:	3301      	adds	r3, #1
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	8c1b      	ldrh	r3, [r3, #32]
 800184e:	461a      	mov	r2, r3
 8001850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001852:	4293      	cmp	r3, r2
 8001854:	dbeb      	blt.n	800182e <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8001856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 80dc 	bne.w	8001a18 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	1d1a      	adds	r2, r3, #4
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	4619      	mov	r1, r3
 800186a:	4610      	mov	r0, r2
 800186c:	f000 fca7 	bl	80021be <historyPut>

    char *cmdName = NULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *cmdArgs = NULL;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
    bool nameFinished = false;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	e030      	b.n	80018e6 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	4413      	add	r3, r2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b20      	cmp	r3, #32
 8001894:	d10f      	bne.n	80018b6 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d105      	bne.n	80018a8 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	69da      	ldr	r2, [r3, #28]
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	4413      	add	r3, r2
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 80018a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d018      	beq.n	80018e0 <parseCommand+0xcc>
                nameFinished = true;
 80018ae:	2301      	movs	r3, #1
 80018b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018b4:	e014      	b.n	80018e0 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	69da      	ldr	r2, [r3, #28]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	4413      	add	r3, r2
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c6:	e00b      	b.n	80018e0 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d108      	bne.n	80018e0 <parseCommand+0xcc>
 80018ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	4413      	add	r3, r2
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	3301      	adds	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	8c1b      	ldrh	r3, [r3, #32]
 80018ea:	461a      	mov	r2, r3
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	4293      	cmp	r3, r2
 80018f0:	dbc8      	blt.n	8001884 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	69da      	ldr	r2, [r3, #28]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	8c1b      	ldrh	r3, [r3, #32]
 80018fa:	3301      	adds	r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8089 	beq.w	8001a1c <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e054      	b.n	80019ba <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001926:	f7fe fc5b 	bl	80001e0 <strcmp>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d141      	bne.n	80019b4 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d040      	beq.n	80019c8 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	7a1b      	ldrb	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 800195c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800195e:	f7ff fd3b 	bl	80013d8 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	b2da      	uxtb	r2, r3
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	691c      	ldr	r4, [r3, #16]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	461a      	mov	r2, r3
 800199a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80019a6:	f023 0310 	bic.w	r3, r3, #16
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            return;
 80019b2:	e034      	b.n	8001a1e <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	3301      	adds	r3, #1
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80019be:	461a      	mov	r2, r3
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4293      	cmp	r3, r2
 80019c4:	dba4      	blt.n	8001910 <parseCommand+0xfc>
 80019c6:	e000      	b.n	80019ca <parseCommand+0x1b6>
                break;
 80019c8:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01d      	beq.n	8001a0e <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        cli->onCommand(cli, &command);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f107 020c 	add.w	r2, r7, #12
 80019f4:	4611      	mov	r1, r2
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001a00:	f023 0310 	bic.w	r3, r3, #16
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001a0c:	e007      	b.n	8001a1e <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8001a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f913 	bl	8001c3c <onUnknownCommand>
 8001a16:	e002      	b.n	8001a1e <parseCommand+0x20a>
        return;
 8001a18:	bf00      	nop
 8001a1a:	e000      	b.n	8001a1e <parseCommand+0x20a>
        return;
 8001a1c:	bf00      	nop
    }
}
 8001a1e:	373c      	adds	r7, #60	; 0x3c
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd90      	pop	{r4, r7, pc}

08001a24 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <initInternalBindings+0x3c>)
 8001a2e:	f107 040c 	add.w	r4, r7, #12
 8001a32:	461d      	mov	r5, r3
 8001a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	6023      	str	r3, [r4, #0]
            "Print list of commands",
            true,
            NULL,
            onHelp
    };
    embeddedCliAddBinding(cli, b);
 8001a3c:	466a      	mov	r2, sp
 8001a3e:	f107 0318 	add.w	r3, r7, #24
 8001a42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a46:	e882 0003 	stmia.w	r2, {r0, r1}
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff fc4d 	bl	80012f0 <embeddedCliAddBinding>
}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	0800e908 	.word	0x0800e908

08001a64 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10a      	bne.n	8001a94 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8001a7e:	496b      	ldr	r1, [pc, #428]	; (8001c2c <onHelp+0x1c8>)
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fad1 	bl	8002028 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8001a86:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <onHelp+0x1cc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 facb 	bl	8002028 <writeToOutput>
        return;
 8001a92:	e0c8      	b.n	8001c26 <onHelp+0x1c2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8001a94:	68b8      	ldr	r0, [r7, #8]
 8001a96:	f7ff fd49 	bl	800152c <embeddedCliGetTokenCount>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8001a9e:	8b7b      	ldrh	r3, [r7, #26]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d146      	bne.n	8001b32 <onHelp+0xce>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa8:	e03c      	b.n	8001b24 <onHelp+0xc0>
            writeToOutput(cli, " * ");
 8001aaa:	4962      	ldr	r1, [pc, #392]	; (8001c34 <onHelp+0x1d0>)
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 fabb 	bl	8002028 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 faae 	bl	8002028 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8001acc:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <onHelp+0x1cc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 faa8 	bl	8002028 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d017      	beq.n	8001b1e <onHelp+0xba>
                cli->writeChar(cli, '\t');
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2109      	movs	r1, #9
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 fa8b 	bl	8002028 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8001b12:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <onHelp+0x1cc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4619      	mov	r1, r3
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fa85 	bl	8002028 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	3301      	adds	r3, #1
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	dbbc      	blt.n	8001aaa <onHelp+0x46>
 8001b30:	e079      	b.n	8001c26 <onHelp+0x1c2>
            }
        }
    } else if (tokenCount == 1) {
 8001b32:	8b7b      	ldrh	r3, [r7, #26]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d16c      	bne.n	8001c12 <onHelp+0x1ae>
        // try find command
        const char *helpStr = NULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	68b8      	ldr	r0, [r7, #8]
 8001b40:	f7ff fcbe 	bl	80014c0 <embeddedCliGetToken>
 8001b44:	6178      	str	r0, [r7, #20]
        bool found = false;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	e020      	b.n	8001b94 <onHelp+0x130>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b56:	6a3a      	ldr	r2, [r7, #32]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6979      	ldr	r1, [r7, #20]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fb3a 	bl	80001e0 <strcmp>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10d      	bne.n	8001b8e <onHelp+0x12a>
                helpStr = impl->bindings[i].help;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b76:	6a3a      	ldr	r2, [r7, #32]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
                found = true;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8001b8c:	e008      	b.n	8001ba0 <onHelp+0x13c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	3301      	adds	r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b98:	461a      	mov	r2, r3
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	dbd8      	blt.n	8001b52 <onHelp+0xee>
            }
        }
        if (found && helpStr != NULL) {
 8001ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <onHelp+0x186>
 8001ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01d      	beq.n	8001bea <onHelp+0x186>
            writeToOutput(cli, " * ");
 8001bae:	4921      	ldr	r1, [pc, #132]	; (8001c34 <onHelp+0x1d0>)
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 fa39 	bl	8002028 <writeToOutput>
            writeToOutput(cli, cmdName);
 8001bb6:	6979      	ldr	r1, [r7, #20]
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 fa35 	bl	8002028 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <onHelp+0x1cc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fa2f 	bl	8002028 <writeToOutput>
            cli->writeChar(cli, '\t');
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2109      	movs	r1, #9
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8001bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fa26 	bl	8002028 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <onHelp+0x1cc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fa20 	bl	8002028 <writeToOutput>
 8001be8:	e01d      	b.n	8001c26 <onHelp+0x1c2>
        } else if (found) {
 8001bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <onHelp+0x1a4>
            writeToOutput(cli, "Help is not available");
 8001bf2:	490e      	ldr	r1, [pc, #56]	; (8001c2c <onHelp+0x1c8>)
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fa17 	bl	8002028 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <onHelp+0x1cc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 fa11 	bl	8002028 <writeToOutput>
 8001c06:	e00e      	b.n	8001c26 <onHelp+0x1c2>
        } else {
            onUnknownCommand(cli, cmdName);
 8001c08:	6979      	ldr	r1, [r7, #20]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f816 	bl	8001c3c <onUnknownCommand>
 8001c10:	e009      	b.n	8001c26 <onHelp+0x1c2>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8001c12:	4909      	ldr	r1, [pc, #36]	; (8001c38 <onHelp+0x1d4>)
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 fa07 	bl	8002028 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <onHelp+0x1cc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 fa01 	bl	8002028 <writeToOutput>
    }
}
 8001c26:	3730      	adds	r7, #48	; 0x30
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	0800e91c 	.word	0x0800e91c
 8001c30:	20000000 	.word	0x20000000
 8001c34:	0800e934 	.word	0x0800e934
 8001c38:	0800e938 	.word	0x0800e938

08001c3c <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8001c46:	490b      	ldr	r1, [pc, #44]	; (8001c74 <onUnknownCommand+0x38>)
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f9ed 	bl	8002028 <writeToOutput>
    writeToOutput(cli, name);
 8001c4e:	6839      	ldr	r1, [r7, #0]
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f9e9 	bl	8002028 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <onUnknownCommand+0x3c>)
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f9e5 	bl	8002028 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <onUnknownCommand+0x40>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f9df 	bl	8002028 <writeToOutput>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	0800e968 	.word	0x0800e968
 8001c78:	0800e97c 	.word	0x0800e97c
 8001c7c:	20000000 	.word	0x20000000

08001c80 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08e      	sub	sp, #56	; 0x38
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	2300      	movs	r3, #0
 8001c92:	82bb      	strh	r3, [r7, #20]
 8001c94:	2300      	movs	r3, #0
 8001c96:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7fe fb01 	bl	80002a0 <strlen>
 8001c9e:	6278      	str	r0, [r7, #36]	; 0x24

    PREPARE_IMPL(cli);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <getAutocompletedCommand+0x34>
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d108      	bne.n	8001cc6 <getAutocompletedCommand+0x46>
        return cmd;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cc0:	e882 0003 	stmia.w	r2, {r0, r1}
 8001cc4:	e095      	b.n	8001df2 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cca:	e083      	b.n	8001dd4 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8001ce0:	69f8      	ldr	r0, [r7, #28]
 8001ce2:	f7fe fadd 	bl	80002a0 <strlen>
 8001ce6:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cee:	4413      	add	r3, r2
 8001cf0:	781a      	ldrb	r2, [r3, #0]
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf8:	440b      	add	r3, r1
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d35e      	bcc.n	8001dc8 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d14:	e010      	b.n	8001d38 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1a:	4413      	add	r3, r2
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	69f9      	ldr	r1, [r7, #28]
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d22:	440b      	add	r3, r1
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d003      	beq.n	8001d32 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                break;
 8001d30:	e006      	b.n	8001d40 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	3301      	adds	r3, #1
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3ea      	bcc.n	8001d16 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8001d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d13e      	bne.n	8001dcc <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d54:	4413      	add	r3, r2
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5e:	440b      	add	r3, r1
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8001d68:	8afb      	ldrh	r3, [r7, #22]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <getAutocompletedCommand+0xf8>
 8001d6e:	8abb      	ldrh	r3, [r7, #20]
 8001d70:	461a      	mov	r2, r3
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d202      	bcs.n	8001d7e <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8001d7e:	8afb      	ldrh	r3, [r7, #22]
 8001d80:	3301      	adds	r3, #1
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8001d86:	8afb      	ldrh	r3, [r7, #22]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d102      	bne.n	8001d92 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	613b      	str	r3, [r7, #16]
            continue;
 8001d90:	e01d      	b.n	8001dce <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	8c1b      	ldrh	r3, [r3, #32]
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d98:	e010      	b.n	8001dbc <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	4413      	add	r3, r2
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	69f9      	ldr	r1, [r7, #28]
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	440b      	add	r3, r1
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d003      	beq.n	8001db6 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	82bb      	strh	r3, [r7, #20]
                break;
 8001db4:	e00b      	b.n	8001dce <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	3301      	adds	r3, #1
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dbc:	8abb      	ldrh	r3, [r7, #20]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d3e9      	bcc.n	8001d9a <getAutocompletedCommand+0x11a>
 8001dc6:	e002      	b.n	8001dce <getAutocompletedCommand+0x14e>
            continue;
 8001dc8:	bf00      	nop
 8001dca:	e000      	b.n	8001dce <getAutocompletedCommand+0x14e>
            continue;
 8001dcc:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	f6ff af75 	blt.w	8001ccc <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	461a      	mov	r2, r3
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001dee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	3738      	adds	r7, #56	; 0x38
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b088      	sub	sp, #32
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d048      	beq.n	8001ea8 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff2d 	bl	8001c80 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8001e26:	8a7b      	ldrh	r3, [r7, #18]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	8c1b      	ldrh	r3, [r3, #32]
 8001e30:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	8c1b      	ldrh	r3, [r3, #32]
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	e00b      	b.n	8001e52 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68f9      	ldr	r1, [r7, #12]
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	440a      	add	r2, r1
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	4611      	mov	r1, r2
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	8a3b      	ldrh	r3, [r7, #16]
 8001e54:	461a      	mov	r2, r3
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d3ee      	bcc.n	8001e3a <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8001e5c:	8a3b      	ldrh	r3, [r7, #16]
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	e007      	b.n	8001e72 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2120      	movs	r1, #32
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001e76:	461a      	mov	r2, r3
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d3f1      	bcc.n	8001e62 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8001e7e:	8a3a      	ldrh	r2, [r7, #16]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	861a      	strh	r2, [r3, #48]	; 0x30
    cli->writeChar(cli, '\r');
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	210d      	movs	r1, #13
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4619      	mov	r1, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8c7 	bl	8002028 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8c1 	bl	8002028 <writeToOutput>
 8001ea6:	e000      	b.n	8001eaa <printLiveAutocompletion+0xb0>
        return;
 8001ea8:	bf00      	nop
}
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fed9 	bl	8001c80 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8001ece:	8a7b      	ldrh	r3, [r7, #18]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d071      	beq.n	8001fb8 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8001ed4:	8a7b      	ldrh	r3, [r7, #18]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d004      	beq.n	8001ee4 <onAutocompleteRequest+0x34>
 8001eda:	8a3a      	ldrh	r2, [r7, #16]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	8c1b      	ldrh	r3, [r3, #32]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d92a      	bls.n	8001f3a <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	8a3a      	ldrh	r2, [r7, #16]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f009 fd4a 	bl	800b986 <memcpy>
        if (cmd.candidateCount == 1) {
 8001ef2:	8a7b      	ldrh	r3, [r7, #18]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d109      	bne.n	8001f0c <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	8a3a      	ldrh	r2, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	2220      	movs	r2, #32
 8001f02:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8001f04:	8a3b      	ldrh	r3, [r7, #16]
 8001f06:	3301      	adds	r3, #1
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	8a3a      	ldrh	r2, [r7, #16]
 8001f12:	4413      	add	r3, r2
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	8c12      	ldrh	r2, [r2, #32]
 8001f20:	4413      	add	r3, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f87f 	bl	8002028 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8001f2a:	8a3a      	ldrh	r2, [r7, #16]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	8c1a      	ldrh	r2, [r3, #32]
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	861a      	strh	r2, [r3, #48]	; 0x30
        return;
 8001f38:	e03f      	b.n	8001fba <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f842 	bl	8001fc4 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e021      	b.n	8001f8a <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d014      	beq.n	8001f82 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 8001f6c:	6979      	ldr	r1, [r7, #20]
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f85a 	bl	8002028 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <onAutocompleteRequest+0x110>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f854 	bl	8002028 <writeToOutput>
 8001f80:	e000      	b.n	8001f84 <onAutocompleteRequest+0xd4>
            continue;
 8001f82:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3301      	adds	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f8e:	461a      	mov	r2, r3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	dbd7      	blt.n	8001f46 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f843 	bl	8002028 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f83d 	bl	8002028 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	8c1a      	ldrh	r2, [r3, #32]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	861a      	strh	r2, [r3, #48]	; 0x30
 8001fb6:	e000      	b.n	8001fba <onAutocompleteRequest+0x10a>
        return;
 8001fb8:	bf00      	nop
}
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000000 	.word	0x20000000

08001fc4 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001fd6:	461c      	mov	r4, r3
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe f95f 	bl	80002a0 <strlen>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4423      	add	r3, r4
 8001fe6:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	210d      	movs	r1, #13
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e007      	b.n	8002008 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3f3      	bcc.n	8001ff8 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	210d      	movs	r1, #13
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4798      	blx	r3
    impl->inputLineLength = 0;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2200      	movs	r2, #0
 800201e:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}

08002028 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8002032:	6838      	ldr	r0, [r7, #0]
 8002034:	f7fe f934 	bl	80002a0 <strlen>
 8002038:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e00b      	b.n	8002058 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	440a      	add	r2, r1
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	4611      	mov	r1, r2
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3301      	adds	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	429a      	cmp	r2, r3
 800205e:	d3ef      	bcc.n	8002040 <writeToOutput+0x18>
    }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <isControlChar>:

static bool isControlChar(char c) {
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	2b0d      	cmp	r3, #13
 8002078:	d00b      	beq.n	8002092 <isControlChar+0x28>
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	2b0a      	cmp	r3, #10
 800207e:	d008      	beq.n	8002092 <isControlChar+0x28>
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	2b08      	cmp	r3, #8
 8002084:	d005      	beq.n	8002092 <isControlChar+0x28>
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	2b09      	cmp	r3, #9
 800208a:	d002      	beq.n	8002092 <isControlChar+0x28>
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2b7f      	cmp	r3, #127	; 0x7f
 8002090:	d101      	bne.n	8002096 <isControlChar+0x2c>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <isControlChar+0x2e>
 8002096:	2300      	movs	r3, #0
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	2b1f      	cmp	r3, #31
 80020b8:	d904      	bls.n	80020c4 <isDisplayableChar+0x1a>
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b7e      	cmp	r3, #126	; 0x7e
 80020be:	d801      	bhi.n	80020c4 <isDisplayableChar+0x1a>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <isDisplayableChar+0x1c>
 80020c4:	2300      	movs	r3, #0
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	88da      	ldrh	r2, [r3, #6]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	889b      	ldrh	r3, [r3, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d306      	bcc.n	80020fa <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	88da      	ldrh	r2, [r3, #6]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	e009      	b.n	800210e <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	891a      	ldrh	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	889b      	ldrh	r3, [r3, #4]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	88db      	ldrh	r3, [r3, #6]
 800210a:	4413      	add	r3, r2
 800210c:	b29b      	uxth	r3, r3
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	889a      	ldrh	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	88db      	ldrh	r3, [r3, #6]
 800212e:	429a      	cmp	r2, r3
 8002130:	d014      	beq.n	800215c <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	8892      	ldrh	r2, [r2, #4]
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	889b      	ldrh	r3, [r3, #4]
 8002144:	3301      	adds	r3, #1
 8002146:	b29b      	uxth	r3, r3
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	8912      	ldrh	r2, [r2, #8]
 800214c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002150:	fb01 f202 	mul.w	r2, r1, r2
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	b29a      	uxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	809a      	strh	r2, [r3, #4]
    }
    return a;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	88db      	ldrh	r3, [r3, #6]
 800217a:	3301      	adds	r3, #1
 800217c:	b29b      	uxth	r3, r3
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	8912      	ldrh	r2, [r2, #8]
 8002182:	fbb3 f1f2 	udiv	r1, r3, r2
 8002186:	fb01 f202 	mul.w	r2, r1, r2
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	889b      	ldrh	r3, [r3, #4]
 8002192:	89fa      	ldrh	r2, [r7, #14]
 8002194:	429a      	cmp	r2, r3
 8002196:	d00b      	beq.n	80021b0 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	88d2      	ldrh	r2, [r2, #6]
 80021a0:	4413      	add	r3, r2
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	89fa      	ldrh	r2, [r7, #14]
 80021aa:	80da      	strh	r2, [r3, #6]
        return true;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <fifoBufPush+0x48>
    }
    return false;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 80021be:	b580      	push	{r7, lr}
 80021c0:	b088      	sub	sp, #32
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80021c8:	6838      	ldr	r0, [r7, #0]
 80021ca:	f7fe f869 	bl	80002a0 <strlen>
 80021ce:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	889b      	ldrh	r3, [r3, #4]
 80021d4:	461a      	mov	r2, r3
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	3301      	adds	r3, #1
 80021da:	429a      	cmp	r2, r3
 80021dc:	d201      	bcs.n	80021e2 <historyPut+0x24>
        return false;
 80021de:	2300      	movs	r3, #0
 80021e0:	e04d      	b.n	800227e <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f86a 	bl	80022be <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 80021ea:	e024      	b.n	8002236 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	891b      	ldrh	r3, [r3, #8]
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f847 	bl	8002286 <historyGet>
 80021f8:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7fe f850 	bl	80002a0 <strlen>
 8002200:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	461a      	mov	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	3301      	adds	r3, #1
 8002212:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	889b      	ldrh	r3, [r3, #4]
 8002218:	461a      	mov	r2, r3
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	3301      	adds	r3, #1
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	429a      	cmp	r2, r3
 8002228:	d20a      	bcs.n	8002240 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	891b      	ldrh	r3, [r3, #8]
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	891b      	ldrh	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1d6      	bne.n	80021ec <historyPut+0x2e>
 800223e:	e000      	b.n	8002242 <historyPut+0x84>
            break;
 8002240:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	891b      	ldrh	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	3301      	adds	r3, #1
 8002252:	18d0      	adds	r0, r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	4619      	mov	r1, r3
 800225c:	f009 fadc 	bl	800b818 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	3301      	adds	r3, #1
 8002268:	461a      	mov	r2, r3
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	f009 fb8b 	bl	800b986 <memcpy>
    ++history->itemsCount;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	891b      	ldrh	r3, [r3, #8]
 8002274:	3301      	adds	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	811a      	strh	r2, [r3, #8]

    return true;
 800227c:	2301      	movs	r3, #1
}
 800227e:	4618      	mov	r0, r3
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <historyGet+0x1c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	891b      	ldrh	r3, [r3, #8]
 800229c:	887a      	ldrh	r2, [r7, #2]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d901      	bls.n	80022a6 <historyGet+0x20>
        return NULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e007      	b.n	80022b6 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff f906 	bl	80014c0 <embeddedCliGetToken>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d04c      	beq.n	8002368 <historyRemove+0xaa>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	891b      	ldrh	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d048      	beq.n	8002368 <historyRemove+0xaa>
        return;
    char *item = NULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80022da:	2301      	movs	r3, #1
 80022dc:	827b      	strh	r3, [r7, #18]
 80022de:	e013      	b.n	8002308 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	8a7a      	ldrh	r2, [r7, #18]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff f904 	bl	80014f6 <embeddedCliGetTokenVariable>
 80022ee:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 80022f0:	6839      	ldr	r1, [r7, #0]
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7fd ff74 	bl	80001e0 <strcmp>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <historyRemove+0x56>
            break;
        }
        item = NULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8002302:	8a7b      	ldrh	r3, [r7, #18]
 8002304:	3301      	adds	r3, #1
 8002306:	827b      	strh	r3, [r7, #18]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	891b      	ldrh	r3, [r3, #8]
 800230c:	8a7a      	ldrh	r2, [r7, #18]
 800230e:	429a      	cmp	r2, r3
 8002310:	d9e6      	bls.n	80022e0 <historyRemove+0x22>
 8002312:	e000      	b.n	8002316 <historyRemove+0x58>
            break;
 8002314:	bf00      	nop
    }
    if (item == NULL)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d027      	beq.n	800236c <historyRemove+0xae>
        return;

    --history->itemsCount;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	891b      	ldrh	r3, [r3, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8002328:	8a7a      	ldrh	r2, [r7, #18]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	891b      	ldrh	r3, [r3, #8]
 800232e:	3301      	adds	r3, #1
 8002330:	429a      	cmp	r2, r3
 8002332:	d01d      	beq.n	8002370 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8002334:	6978      	ldr	r0, [r7, #20]
 8002336:	f7fd ffb3 	bl	80002a0 <strlen>
 800233a:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	889b      	ldrh	r3, [r3, #4]
 8002340:	4619      	mov	r1, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3301      	adds	r3, #1
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	441a      	add	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	1acb      	subs	r3, r1, r3
 8002352:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3301      	adds	r3, #1
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4413      	add	r3, r2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	4619      	mov	r1, r3
 8002360:	6978      	ldr	r0, [r7, #20]
 8002362:	f009 fa59 	bl	800b818 <memmove>
 8002366:	e004      	b.n	8002372 <historyRemove+0xb4>
        return;
 8002368:	bf00      	nop
 800236a:	e002      	b.n	8002372 <historyRemove+0xb4>
        return;
 800236c:	bf00      	nop
 800236e:	e000      	b.n	8002372 <historyRemove+0xb4>
        return;
 8002370:	bf00      	nop
}
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <getTokenPosition+0x18>
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8002390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002394:	e028      	b.n	80023e8 <getTokenPosition+0x70>
    uint16_t i = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 800239a:	2301      	movs	r3, #1
 800239c:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 800239e:	89ba      	ldrh	r2, [r7, #12]
 80023a0:	887b      	ldrh	r3, [r7, #2]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d013      	beq.n	80023ce <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 80023a6:	89fb      	ldrh	r3, [r7, #14]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <getTokenPosition+0x4e>
            ++tokenCount;
 80023b2:	89bb      	ldrh	r3, [r7, #12]
 80023b4:	3301      	adds	r3, #1
 80023b6:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 80023b8:	89fb      	ldrh	r3, [r7, #14]
 80023ba:	3301      	adds	r3, #1
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 80023c6:	89fb      	ldrh	r3, [r7, #14]
 80023c8:	3301      	adds	r3, #1
 80023ca:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 80023cc:	e7e7      	b.n	800239e <getTokenPosition+0x26>
            break;
 80023ce:	bf00      	nop
 80023d0:	e000      	b.n	80023d4 <getTokenPosition+0x5c>
                break;
 80023d2:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 80023d4:	89fb      	ldrh	r3, [r7, #14]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <getTokenPosition+0x6c>
        return i;
 80023e0:	89fb      	ldrh	r3, [r7, #14]
 80023e2:	e001      	b.n	80023e8 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 80023e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <cli_clear>:
static bool cli_is_ready = false;


//============ Private function implementation ===============
// Bindings
void cli_clear(EmbeddedCli *cli, char *args, void *context){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
	// Unused arguments
	cli_printf("\033[2J\033[0;0H");
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <cli_clear+0x1c>)
 8002402:	f000 f8d5 	bl	80025b0 <cli_printf>
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	0800e9b0 	.word	0x0800e9b0

08002414 <onLed>:


void onLed(EmbeddedCli *cli, char *args, void *context) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
    const char *arg1 = embeddedCliGetToken(args, 1);
 8002420:	2101      	movs	r1, #1
 8002422:	68b8      	ldr	r0, [r7, #8]
 8002424:	f7ff f84c 	bl	80014c0 <embeddedCliGetToken>
 8002428:	6178      	str	r0, [r7, #20]
    const char *arg2 = embeddedCliGetToken(args, 2);
 800242a:	2102      	movs	r1, #2
 800242c:	68b8      	ldr	r0, [r7, #8]
 800242e:	f7ff f847 	bl	80014c0 <embeddedCliGetToken>
 8002432:	6138      	str	r0, [r7, #16]
    if (arg1 == NULL || arg2 == NULL) {
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <onLed+0x2c>
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d103      	bne.n	8002448 <onLed+0x34>
        cli_printf("usage: get-led [arg1] [arg2]");
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <onLed+0x44>)
 8002442:	f000 f8b5 	bl	80025b0 <cli_printf>
        return;
 8002446:	e004      	b.n	8002452 <onLed+0x3e>
    }
    // Make sure to check if 'args' != NULL, printf's '%s' formatting does not like a null pointer.
    cli_printf("LED with args: %s and %s", arg1, arg2);
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	6979      	ldr	r1, [r7, #20]
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <onLed+0x48>)
 800244e:	f000 f8af 	bl	80025b0 <cli_printf>
}
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	0800e9bc 	.word	0x0800e9bc
 800245c:	0800e9dc 	.word	0x0800e9dc

08002460 <cli_write_char>:

static void cli_write_char(EmbeddedCli *embeddedCli, char c) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
	uint8_t char_to_send = c;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	73fb      	strb	r3, [r7, #15]

	while(CDC_Transmit_FS(&char_to_send, 1) == USBD_BUSY){}; //This fails often
 8002470:	bf00      	nop
 8002472:	f107 030f 	add.w	r3, r7, #15
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f007 fdd7 	bl	800a02c <CDC_Transmit_FS>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d0f6      	beq.n	8002472 <cli_write_char+0x12>
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <cli_init>:


// ==================== Global function implementation ==========================


void cli_init(void){
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b08e      	sub	sp, #56	; 0x38
 8002494:	af02      	add	r7, sp, #8
	EmbeddedCliConfig *config = embeddedCliDefaultConfig();
 8002496:	f7fe fd6d 	bl	8000f74 <embeddedCliDefaultConfig>
 800249a:	62f8      	str	r0, [r7, #44]	; 0x2c
	config->cliBuffer 			= cliBuffer;
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	4a30      	ldr	r2, [pc, #192]	; (8002560 <cli_init+0xd0>)
 80024a0:	60da      	str	r2, [r3, #12]
	config->cliBufferSize 		= CLI_BUFFER_SIZE;
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024a8:	821a      	strh	r2, [r3, #16]
	config->rxBufferSize 		= CLI_RX_BUFFER_SIZE;
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	2210      	movs	r2, #16
 80024ae:	809a      	strh	r2, [r3, #4]
	config->cmdBufferSize 		= CLI_CMD_BUFFER_SIZE;
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	2220      	movs	r2, #32
 80024b4:	80da      	strh	r2, [r3, #6]
	config->historyBufferSize 	= CLI_HISTORY_SIZE;
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	2220      	movs	r2, #32
 80024ba:	811a      	strh	r2, [r3, #8]
	config->maxBindingCount 	= CLI_MAX_BINDING_COUNT;
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	2220      	movs	r2, #32
 80024c0:	815a      	strh	r2, [r3, #10]
	config->enableAutoComplete =  false;
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	2200      	movs	r2, #0
 80024c6:	749a      	strb	r2, [r3, #18]


	// Create new CLI instance
	cli = embeddedCliNew(config);
 80024c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024ca:	f7fe fda4 	bl	8001016 <embeddedCliNew>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a24      	ldr	r2, [pc, #144]	; (8002564 <cli_init+0xd4>)
 80024d2:	6013      	str	r3, [r2, #0]

	// Assign character write function
	cli->writeChar = cli_write_char;
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <cli_init+0xd4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a23      	ldr	r2, [pc, #140]	; (8002568 <cli_init+0xd8>)
 80024da:	601a      	str	r2, [r3, #0]
	// Please increase the 'CLI_BUFFER_SIZE' in header file.
	// Or decrease max binding / history size.
	// You can get required buffer size by calling
	// uint16_t requiredSize = embeddedCliRequiredSize(config);
	// Then check it's value in debugger
	while (cli == NULL) {
 80024dc:	e001      	b.n	80024e2 <cli_init+0x52>
		HardFault_Handler();
 80024de:	f000 fa98 	bl	8002a12 <HardFault_Handler>
	while (cli == NULL) {
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <cli_init+0xd4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f9      	beq.n	80024de <cli_init+0x4e>

	// Un-comment to add a non-default reaction to unbound commands.
	//cli->onCommand = onCliCommand;

	// Add all the initial command bindings
	CliCommandBinding clear_binding = {
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <cli_init+0xdc>)
 80024ec:	f107 0418 	add.w	r4, r7, #24
 80024f0:	461d      	mov	r5, r3
 80024f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f6:	682b      	ldr	r3, [r5, #0]
 80024f8:	6023      	str	r3, [r4, #0]
			.help = "Clears the console",
			.tokenizeArgs = true,
			.context = NULL,
			.binding = cli_clear
	};
	CliCommandBinding led_binding = {
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <cli_init+0xe0>)
 80024fc:	1d3c      	adds	r4, r7, #4
 80024fe:	461d      	mov	r5, r3
 8002500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	6023      	str	r3, [r4, #0]
			.help = "Get led status",
			.tokenizeArgs = true,
			.context = NULL,
			.binding = onLed
	};
	embeddedCliAddBinding(cli, clear_binding);
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <cli_init+0xd4>)
 800250a:	681c      	ldr	r4, [r3, #0]
 800250c:	466a      	mov	r2, sp
 800250e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002512:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002516:	e882 0003 	stmia.w	r2, {r0, r1}
 800251a:	f107 0318 	add.w	r3, r7, #24
 800251e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002520:	4620      	mov	r0, r4
 8002522:	f7fe fee5 	bl	80012f0 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, led_binding);
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <cli_init+0xd4>)
 8002528:	681c      	ldr	r4, [r3, #0]
 800252a:	466a      	mov	r2, sp
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002534:	e882 0003 	stmia.w	r2, {r0, r1}
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800253c:	4620      	mov	r0, r4
 800253e:	f7fe fed7 	bl	80012f0 <embeddedCliAddBinding>

	// Init the CLI with blank screen
	cli_clear(cli, NULL, NULL);
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <cli_init+0xd4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff52 	bl	80023f4 <cli_clear>

	// CLI has now been initialized, set bool to true to enable interrupts.
	cli_is_ready = true;
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <cli_init+0xe4>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	3730      	adds	r7, #48	; 0x30
 800255a:	46bd      	mov	sp, r7
 800255c:	bdb0      	pop	{r4, r5, r7, pc}
 800255e:	bf00      	nop
 8002560:	20000300 	.word	0x20000300
 8002564:	200002fc 	.word	0x200002fc
 8002568:	08002461 	.word	0x08002461
 800256c:	0800ea14 	.word	0x0800ea14
 8002570:	0800ea40 	.word	0x0800ea40
 8002574:	20000b00 	.word	0x20000b00

08002578 <cli_receive_byte>:

void cli_receive_byte(uint8_t c){
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	if (!cli_is_ready){
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <cli_receive_byte+0x30>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	f083 0301 	eor.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <cli_receive_byte+0x28>
		return;
	}

	embeddedCliReceiveChar(cli, c);
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <cli_receive_byte+0x34>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	79fa      	ldrb	r2, [r7, #7]
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fdf6 	bl	800118a <embeddedCliReceiveChar>
 800259e:	e000      	b.n	80025a2 <cli_receive_byte+0x2a>
		return;
 80025a0:	bf00      	nop
}
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000b00 	.word	0x20000b00
 80025ac:	200002fc 	.word	0x200002fc

080025b0 <cli_printf>:


// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(const char *format, ...) {
 80025b0:	b40f      	push	{r0, r1, r2, r3}
 80025b2:	b580      	push	{r7, lr}
 80025b4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80025b8:	af00      	add	r7, sp, #0
    // Create a buffer to store the formatted string
    char buffer[CLI_PRINT_BUFFER_SIZE];

    // Format the string using snprintf
    va_list args;
    va_start(args, format);
 80025ba:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80025be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80025c6:	601a      	str	r2, [r3, #0]
    int length = vsnprintf(buffer, sizeof(buffer), format, args);
 80025c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025cc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80025d0:	1d38      	adds	r0, r7, #4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80025d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025dc:	f009 f878 	bl	800b6d0 <vsniprintf>
 80025e0:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
    va_end(args);

    // Check if string fitted in buffer else print error to stderr
    if (length < 0) {
 80025e4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	da08      	bge.n	80025fe <cli_printf+0x4e>
        fprintf(stderr, "Error formatting the string\r\n");
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <cli_printf+0x6c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	221d      	movs	r2, #29
 80025f4:	2101      	movs	r1, #1
 80025f6:	480a      	ldr	r0, [pc, #40]	; (8002620 <cli_printf+0x70>)
 80025f8:	f008 ff92 	bl	800b520 <fwrite>
 80025fc:	e006      	b.n	800260c <cli_printf+0x5c>
        return;
    }

    // Call embeddedCliPrint with the formatted string
    embeddedCliPrint(cli, buffer);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <cli_printf+0x74>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1d3a      	adds	r2, r7, #4
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fea4 	bl	8001354 <embeddedCliPrint>
}
 800260c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002610:	46bd      	mov	sp, r7
 8002612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002616:	b004      	add	sp, #16
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	2000015c 	.word	0x2000015c
 8002620:	0800ea54 	.word	0x0800ea54
 8002624:	200002fc 	.word	0x200002fc

08002628 <cli_process>:
 */
EmbeddedCli * cli_get_pointer() {
    return cli;
}

void cli_process(void){
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <cli_process+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fdcd 	bl	80011d0 <embeddedCliProcess>
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200002fc 	.word	0x200002fc

08002640 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a07      	ldr	r2, [pc, #28]	; (800266c <vApplicationGetIdleTaskMemory+0x2c>)
 8002650:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4a06      	ldr	r2, [pc, #24]	; (8002670 <vApplicationGetIdleTaskMemory+0x30>)
 8002656:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2280      	movs	r2, #128	; 0x80
 800265c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000b1c 	.word	0x20000b1c
 8002670:	20000b70 	.word	0x20000b70

08002674 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b08e      	sub	sp, #56	; 0x38
 8002678:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 128);
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <MX_FREERTOS_Init+0x58>)
 800267c:	f107 041c 	add.w	r4, r7, #28
 8002680:	461d      	mov	r5, r3
 8002682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800268a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f006 f9ae 	bl	80089f6 <osThreadCreate>
 800269a:	4603      	mov	r3, r0
 800269c:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <MX_FREERTOS_Init+0x5c>)
 800269e:	6013      	str	r3, [r2, #0]

	/* definition and creation of loggingTask */
	osThreadDef(loggingTask, StartLoggigTask, osPriorityLow, 0, 2056);
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <MX_FREERTOS_Init+0x60>)
 80026a2:	463c      	mov	r4, r7
 80026a4:	461d      	mov	r5, r3
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	loggingTaskHandle = osThreadCreate(osThread(loggingTask), NULL);
 80026b2:	463b      	mov	r3, r7
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f006 f99d 	bl	80089f6 <osThreadCreate>
 80026bc:	4603      	mov	r3, r0
 80026be:	4a06      	ldr	r2, [pc, #24]	; (80026d8 <MX_FREERTOS_Init+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 80026c2:	bf00      	nop
 80026c4:	3738      	adds	r7, #56	; 0x38
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ca:	bf00      	nop
 80026cc:	0800ea80 	.word	0x0800ea80
 80026d0:	20000b14 	.word	0x20000b14
 80026d4:	0800eaa8 	.word	0x0800eaa8
 80026d8:	20000b18 	.word	0x20000b18
 80026dc:	00000000 	.word	0x00000000

080026e0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 80026e8:	f007 fbd0 	bl	8009e8c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for(;;)
	{
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		k += 0.1;
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <StartDefaultTask+0xb0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd ff41 	bl	8000578 <__aeabi_f2d>
 80026f6:	a324      	add	r3, pc, #144	; (adr r3, 8002788 <StartDefaultTask+0xa8>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	f7fd fdde 	bl	80002bc <__adddf3>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	f7fe fa66 	bl	8000bd8 <__aeabi_d2f>
 800270c:	4603      	mov	r3, r0
 800270e:	4a20      	ldr	r2, [pc, #128]	; (8002790 <StartDefaultTask+0xb0>)
 8002710:	6013      	str	r3, [r2, #0]
		x = 10*cos(k);
 8002712:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <StartDefaultTask+0xb0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff2e 	bl	8000578 <__aeabi_f2d>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	ec43 2b10 	vmov	d0, r2, r3
 8002724:	f00b f838 	bl	800d798 <cos>
 8002728:	ec51 0b10 	vmov	r0, r1, d0
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	4b18      	ldr	r3, [pc, #96]	; (8002794 <StartDefaultTask+0xb4>)
 8002732:	f7fd ff79 	bl	8000628 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	f7fe fa4b 	bl	8000bd8 <__aeabi_d2f>
 8002742:	4603      	mov	r3, r0
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <StartDefaultTask+0xb8>)
 8002746:	6013      	str	r3, [r2, #0]
		y = 10*sin(k);
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <StartDefaultTask+0xb0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd ff13 	bl	8000578 <__aeabi_f2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	ec43 2b10 	vmov	d0, r2, r3
 800275a:	f00b f871 	bl	800d840 <sin>
 800275e:	ec51 0b10 	vmov	r0, r1, d0
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <StartDefaultTask+0xb4>)
 8002768:	f7fd ff5e 	bl	8000628 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	f7fe fa30 	bl	8000bd8 <__aeabi_d2f>
 8002778:	4603      	mov	r3, r0
 800277a:	4a08      	ldr	r2, [pc, #32]	; (800279c <StartDefaultTask+0xbc>)
 800277c:	6013      	str	r3, [r2, #0]
		osDelay(50);
 800277e:	2032      	movs	r0, #50	; 0x32
 8002780:	f006 f985 	bl	8008a8e <osDelay>
		k += 0.1;
 8002784:	e7b2      	b.n	80026ec <StartDefaultTask+0xc>
 8002786:	bf00      	nop
 8002788:	9999999a 	.word	0x9999999a
 800278c:	3fb99999 	.word	0x3fb99999
 8002790:	20000b04 	.word	0x20000b04
 8002794:	40240000 	.word	0x40240000
 8002798:	20000b08 	.word	0x20000b08
 800279c:	20000b0c 	.word	0x20000b0c

080027a0 <StartLoggigTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLoggigTask */
void StartLoggigTask(void const * argument)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLoggigTask */
	cli_init();
 80027a8:	f7ff fe72 	bl	8002490 <cli_init>
	/* Infinite loop */
	for(;;)
	{
//		printf("/*%.3f,%.3f,%d*/\r\n", x, y, button);
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80027ac:	2101      	movs	r1, #1
 80027ae:	4804      	ldr	r0, [pc, #16]	; (80027c0 <StartLoggigTask+0x20>)
 80027b0:	f000 fda7 	bl	8003302 <HAL_GPIO_TogglePin>
//		cli_printf("LED with args: %s and %s", "Isak", "Janina");
		cli_process();
 80027b4:	f7ff ff38 	bl	8002628 <cli_process>
		osDelay(100);
 80027b8:	2064      	movs	r0, #100	; 0x64
 80027ba:	f006 f968 	bl	8008a8e <osDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80027be:	e7f5      	b.n	80027ac <StartLoggigTask+0xc>
 80027c0:	40020000 	.word	0x40020000

080027c4 <HAL_GPIO_EXTI_Callback>:
	/* USER CODE END StartLoggigTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
    button = !button;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bf14      	ite	ne
 80027d6:	2301      	movne	r3, #1
 80027d8:	2300      	moveq	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f083 0301 	eor.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80027ea:	701a      	strb	r2, [r3, #0]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	20000b10 	.word	0x20000b10

080027fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <MX_GPIO_Init+0xa8>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a22      	ldr	r2, [pc, #136]	; (80028a4 <MX_GPIO_Init+0xa8>)
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <MX_GPIO_Init+0xa8>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <MX_GPIO_Init+0xa8>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <MX_GPIO_Init+0xa8>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <MX_GPIO_Init+0xa8>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800284a:	2200      	movs	r2, #0
 800284c:	2101      	movs	r1, #1
 800284e:	4816      	ldr	r0, [pc, #88]	; (80028a8 <MX_GPIO_Init+0xac>)
 8002850:	f000 fd3e 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002854:	2301      	movs	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002858:	2301      	movs	r3, #1
 800285a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	4619      	mov	r1, r3
 800286a:	480f      	ldr	r0, [pc, #60]	; (80028a8 <MX_GPIO_Init+0xac>)
 800286c:	f000 fbac 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002870:	2308      	movs	r3, #8
 8002872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002874:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287a:	2301      	movs	r3, #1
 800287c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4619      	mov	r1, r3
 8002884:	4808      	ldr	r0, [pc, #32]	; (80028a8 <MX_GPIO_Init+0xac>)
 8002886:	f000 fb9f 	bl	8002fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2105      	movs	r1, #5
 800288e:	2009      	movs	r0, #9
 8002890:	f000 fb63 	bl	8002f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002894:	2009      	movs	r0, #9
 8002896:	f000 fb7c 	bl	8002f92 <HAL_NVIC_EnableIRQ>

}
 800289a:	bf00      	nop
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40020000 	.word	0x40020000

080028ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028b0:	f000 f9e2 	bl	8002c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028b4:	f000 f808 	bl	80028c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028b8:	f7ff ffa0 	bl	80027fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80028bc:	f7ff feda 	bl	8002674 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80028c0:	f006 f892 	bl	80089e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1){
 80028c4:	e7fe      	b.n	80028c4 <main+0x18>
	...

080028c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b094      	sub	sp, #80	; 0x50
 80028cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ce:	f107 0320 	add.w	r3, r7, #32
 80028d2:	2230      	movs	r2, #48	; 0x30
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f008 ffb8 	bl	800b84c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	4b28      	ldr	r3, [pc, #160]	; (8002994 <SystemClock_Config+0xcc>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	4a27      	ldr	r2, [pc, #156]	; (8002994 <SystemClock_Config+0xcc>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6413      	str	r3, [r2, #64]	; 0x40
 80028fc:	4b25      	ldr	r3, [pc, #148]	; (8002994 <SystemClock_Config+0xcc>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002908:	2300      	movs	r3, #0
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	4b22      	ldr	r3, [pc, #136]	; (8002998 <SystemClock_Config+0xd0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a21      	ldr	r2, [pc, #132]	; (8002998 <SystemClock_Config+0xd0>)
 8002912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <SystemClock_Config+0xd0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002924:	2301      	movs	r3, #1
 8002926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800292e:	2302      	movs	r3, #2
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002938:	2308      	movs	r3, #8
 800293a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800293c:	2360      	movs	r3, #96	; 0x60
 800293e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002940:	2302      	movs	r3, #2
 8002942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002944:	2304      	movs	r3, #4
 8002946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002948:	f107 0320 	add.w	r3, r7, #32
 800294c:	4618      	mov	r0, r3
 800294e:	f001 ff89 	bl	8004864 <HAL_RCC_OscConfig>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002958:	f000 f820 	bl	800299c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800295c:	230f      	movs	r3, #15
 800295e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002960:	2302      	movs	r3, #2
 8002962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	2103      	movs	r1, #3
 8002978:	4618      	mov	r0, r3
 800297a:	f002 f9eb 	bl	8004d54 <HAL_RCC_ClockConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002984:	f000 f80a 	bl	800299c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002988:	f002 faca 	bl	8004f20 <HAL_RCC_EnableCSS>
}
 800298c:	bf00      	nop
 800298e:	3750      	adds	r7, #80	; 0x50
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40023800 	.word	0x40023800
 8002998:	40007000 	.word	0x40007000

0800299c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a0:	b672      	cpsid	i
}
 80029a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    printf("[ERROR] Hard error\r\n");
 80029a4:	4801      	ldr	r0, [pc, #4]	; (80029ac <Error_Handler+0x10>)
 80029a6:	f008 fe1d 	bl	800b5e4 <puts>
    while (1)
 80029aa:	e7fe      	b.n	80029aa <Error_Handler+0xe>
 80029ac:	0800eac4 	.word	0x0800eac4

080029b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_MspInit+0x54>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <HAL_MspInit+0x54>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c4:	6453      	str	r3, [r2, #68]	; 0x44
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <HAL_MspInit+0x54>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_MspInit+0x54>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_MspInit+0x54>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_MspInit+0x54>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	210f      	movs	r1, #15
 80029f2:	f06f 0001 	mvn.w	r0, #1
 80029f6:	f000 fab0 	bl	8002f5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800

08002a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002a0c:	f002 fba4 	bl	8005158 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <NMI_Handler+0x8>

08002a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <HardFault_Handler+0x4>

08002a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <MemManage_Handler+0x4>

08002a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <BusFault_Handler+0x4>

08002a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <UsageFault_Handler+0x4>

08002a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3c:	f000 f96e 	bl	8002d1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002a40:	f006 fda8 	bl	8009594 <xTaskGetSchedulerState>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d001      	beq.n	8002a4e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002a4a:	f006 ffe5 	bl	8009a18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8002a56:	2008      	movs	r0, #8
 8002a58:	f000 fc6e 	bl	8003338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <OTG_FS_IRQHandler+0x10>)
 8002a66:	f000 fdcf 	bl	8003608 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20005fac 	.word	0x20005fac

08002a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return 1;
 8002a78:	2301      	movs	r3, #1
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <_kill>:

int _kill(int pid, int sig)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a8e:	f008 ff4d 	bl	800b92c <__errno>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2216      	movs	r2, #22
 8002a96:	601a      	str	r2, [r3, #0]
  return -1;
 8002a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <_exit>:

void _exit (int status)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ffe7 	bl	8002a84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ab6:	e7fe      	b.n	8002ab6 <_exit+0x12>

08002ab8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	e00a      	b.n	8002ae0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aca:	f3af 8000 	nop.w
 8002ace:	4601      	mov	r1, r0
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	60ba      	str	r2, [r7, #8]
 8002ad6:	b2ca      	uxtb	r2, r1
 8002ad8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3301      	adds	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	dbf0      	blt.n	8002aca <_read+0x12>
  }

  return len;
 8002ae8:	687b      	ldr	r3, [r7, #4]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e009      	b.n	8002b18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	60ba      	str	r2, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	dbf1      	blt.n	8002b04 <_write+0x12>
  }
  return len;
 8002b20:	687b      	ldr	r3, [r7, #4]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <_close>:

int _close(int file)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b52:	605a      	str	r2, [r3, #4]
  return 0;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_isatty>:

int _isatty(int file)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <_sbrk+0x5c>)
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <_sbrk+0x60>)
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <_sbrk+0x64>)
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <_sbrk+0x68>)
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <_sbrk+0x64>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d207      	bcs.n	8002bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bc4:	f008 feb2 	bl	800b92c <__errno>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	220c      	movs	r2, #12
 8002bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	e009      	b.n	8002be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <_sbrk+0x64>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <_sbrk+0x64>)
 8002be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002be6:	68fb      	ldr	r3, [r7, #12]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20020000 	.word	0x20020000
 8002bf4:	00000800 	.word	0x00000800
 8002bf8:	20000d70 	.word	0x20000d70
 8002bfc:	20006828 	.word	0x20006828

08002c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <SystemInit+0x20>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <SystemInit+0x20>)
 8002c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c28:	480d      	ldr	r0, [pc, #52]	; (8002c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c2a:	490e      	ldr	r1, [pc, #56]	; (8002c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c30:	e002      	b.n	8002c38 <LoopCopyDataInit>

08002c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c36:	3304      	adds	r3, #4

08002c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c3c:	d3f9      	bcc.n	8002c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c40:	4c0b      	ldr	r4, [pc, #44]	; (8002c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c44:	e001      	b.n	8002c4a <LoopFillZerobss>

08002c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c48:	3204      	adds	r2, #4

08002c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c4c:	d3fb      	bcc.n	8002c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c4e:	f7ff ffd7 	bl	8002c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c52:	f008 fe71 	bl	800b938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c56:	f7ff fe29 	bl	80028ac <main>
  bx  lr    
 8002c5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c64:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8002c68:	0800f098 	.word	0x0800f098
  ldr r2, =_sbss
 8002c6c:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8002c70:	20006824 	.word	0x20006824

08002c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c74:	e7fe      	b.n	8002c74 <ADC_IRQHandler>
	...

08002c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_Init+0x40>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_Init+0x40>)
 8002c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_Init+0x40>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_Init+0x40>)
 8002c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_Init+0x40>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	f000 f94f 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca6:	200f      	movs	r0, #15
 8002ca8:	f000 f808 	bl	8002cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cac:	f7ff fe80 	bl	80029b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00

08002cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_InitTick+0x54>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x58>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f967 	bl	8002fae <HAL_SYSTICK_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00e      	b.n	8002d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d80a      	bhi.n	8002d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f000 f92f 	bl	8002f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <HAL_InitTick+0x5c>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000004 	.word	0x20000004
 8002d14:	2000000c 	.word	0x2000000c
 8002d18:	20000008 	.word	0x20000008

08002d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	2000000c 	.word	0x2000000c
 8002d40:	20000d74 	.word	0x20000d74

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000d74 	.word	0x20000d74

08002d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff ffee 	bl	8002d44 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d005      	beq.n	8002d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_Delay+0x44>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d82:	bf00      	nop
 8002d84:	f7ff ffde 	bl	8002d44 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d8f7      	bhi.n	8002d84 <HAL_Delay+0x28>
  {
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	2000000c 	.word	0x2000000c

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60d3      	str	r3, [r2, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	; (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	; (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	210f      	movs	r1, #15
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f7ff ff8e 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff29 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f6c:	f7ff ff3e 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f7ff ff8e 	bl	8002e98 <NVIC_EncodePriority>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff5d 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f8a:	bf00      	nop
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff31 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ffa2 	bl	8002f00 <SysTick_Config>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e159      	b.n	8003298 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	f040 8148 	bne.w	8003292 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d005      	beq.n	800301a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003016:	2b02      	cmp	r3, #2
 8003018:	d130      	bne.n	800307c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003050:	2201      	movs	r2, #1
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 0201 	and.w	r2, r3, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b03      	cmp	r3, #3
 8003086:	d017      	beq.n	80030b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d123      	bne.n	800310c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	08da      	lsrs	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3208      	adds	r2, #8
 8003106:	69b9      	ldr	r1, [r7, #24]
 8003108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0203 	and.w	r2, r3, #3
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a2 	beq.w	8003292 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b57      	ldr	r3, [pc, #348]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4a56      	ldr	r2, [pc, #344]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800315c:	6453      	str	r3, [r2, #68]	; 0x44
 800315e:	4b54      	ldr	r3, [pc, #336]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800316a:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_GPIO_Init+0x2ec>)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	220f      	movs	r2, #15
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a49      	ldr	r2, [pc, #292]	; (80032b8 <HAL_GPIO_Init+0x2f0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d019      	beq.n	80031ca <HAL_GPIO_Init+0x202>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a48      	ldr	r2, [pc, #288]	; (80032bc <HAL_GPIO_Init+0x2f4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_GPIO_Init+0x1fe>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a47      	ldr	r2, [pc, #284]	; (80032c0 <HAL_GPIO_Init+0x2f8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00d      	beq.n	80031c2 <HAL_GPIO_Init+0x1fa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a46      	ldr	r2, [pc, #280]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <HAL_GPIO_Init+0x1f6>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a45      	ldr	r2, [pc, #276]	; (80032c8 <HAL_GPIO_Init+0x300>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_GPIO_Init+0x1f2>
 80031b6:	2304      	movs	r3, #4
 80031b8:	e008      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031ba:	2307      	movs	r3, #7
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031be:	2303      	movs	r3, #3
 80031c0:	e004      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e002      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_GPIO_Init+0x204>
 80031ca:	2300      	movs	r3, #0
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f002 0203 	and.w	r2, r2, #3
 80031d2:	0092      	lsls	r2, r2, #2
 80031d4:	4093      	lsls	r3, r2
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031dc:	4935      	ldr	r1, [pc, #212]	; (80032b4 <HAL_GPIO_Init+0x2ec>)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	3302      	adds	r3, #2
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ea:	4b38      	ldr	r3, [pc, #224]	; (80032cc <HAL_GPIO_Init+0x304>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800320e:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003214:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003238:	4a24      	ldr	r2, [pc, #144]	; (80032cc <HAL_GPIO_Init+0x304>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003262:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <HAL_GPIO_Init+0x304>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003268:	4b18      	ldr	r3, [pc, #96]	; (80032cc <HAL_GPIO_Init+0x304>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800328c:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <HAL_GPIO_Init+0x304>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	f67f aea2 	bls.w	8002fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3724      	adds	r7, #36	; 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40013c00 	.word	0x40013c00

080032d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ec:	e003      	b.n	80032f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	041a      	lsls	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003314:	887a      	ldrh	r2, [r7, #2]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4013      	ands	r3, r2
 800331a:	041a      	lsls	r2, r3, #16
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	43d9      	mvns	r1, r3
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	400b      	ands	r3, r1
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	619a      	str	r2, [r3, #24]
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800334e:	4a05      	ldr	r2, [pc, #20]	; (8003364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fa34 	bl	80027c4 <HAL_GPIO_EXTI_Callback>
  }
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40013c00 	.word	0x40013c00

08003368 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336a:	b08f      	sub	sp, #60	; 0x3c
 800336c:	af0a      	add	r7, sp, #40	; 0x28
 800336e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e10f      	b.n	800359a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f006 ff91 	bl	800a2bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2203      	movs	r2, #3
 800339e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fffc 	bl	80053b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	687e      	ldr	r6, [r7, #4]
 80033c6:	466d      	mov	r5, sp
 80033c8:	f106 0410 	add.w	r4, r6, #16
 80033cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80033dc:	1d33      	adds	r3, r6, #4
 80033de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033e0:	6838      	ldr	r0, [r7, #0]
 80033e2:	f001 fed4 	bl	800518e <USB_CoreInit>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0d0      	b.n	800359a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 ffea 	bl	80053d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e04a      	b.n	80034a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	333d      	adds	r3, #61	; 0x3d
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	333c      	adds	r3, #60	; 0x3c
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	b298      	uxth	r0, r3
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3344      	adds	r3, #68	; 0x44
 8003446:	4602      	mov	r2, r0
 8003448:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3340      	adds	r3, #64	; 0x40
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	3348      	adds	r3, #72	; 0x48
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	334c      	adds	r3, #76	; 0x4c
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	3354      	adds	r3, #84	; 0x54
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	3301      	adds	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d3af      	bcc.n	800340a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e044      	b.n	800353a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	3301      	adds	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	d3b5      	bcc.n	80034b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	687e      	ldr	r6, [r7, #4]
 800354c:	466d      	mov	r5, sp
 800354e:	f106 0410 	add.w	r4, r6, #16
 8003552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800355a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800355e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003562:	1d33      	adds	r3, r6, #4
 8003564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003566:	6838      	ldr	r0, [r7, #0]
 8003568:	f001 ff82 	bl	8005470 <USB_DevInit>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e00d      	b.n	800359a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f003 f8d1 	bl	800673a <USB_DevDisconnect>

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_PCD_Start+0x1c>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e020      	b.n	8003600 <HAL_PCD_Start+0x5e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d109      	bne.n	80035e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d005      	beq.n	80035e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 fed4 	bl	8005394 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f003 f881 	bl	80066f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b08d      	sub	sp, #52	; 0x34
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f003 f93f 	bl	80068a2 <USB_GetMode>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 848a 	bne.w	8003f40 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f003 f8a3 	bl	800677c <USB_ReadInterrupts>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8480 	beq.w	8003f3e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f003 f890 	bl	800677c <USB_ReadInterrupts>
 800365c:	4603      	mov	r3, r0
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d107      	bne.n	8003676 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f002 0202 	and.w	r2, r2, #2
 8003674:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f003 f87e 	bl	800677c <USB_ReadInterrupts>
 8003680:	4603      	mov	r3, r0
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b10      	cmp	r3, #16
 8003688:	d161      	bne.n	800374e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0210 	bic.w	r2, r2, #16
 8003698:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f003 020f 	and.w	r2, r3, #15
 80036a6:	4613      	mov	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	3304      	adds	r3, #4
 80036b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	0c5b      	lsrs	r3, r3, #17
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d124      	bne.n	8003710 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d035      	beq.n	800373e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	6a38      	ldr	r0, [r7, #32]
 80036e6:	f002 feb5 	bl	8006454 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f6:	441a      	add	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003708:	441a      	add	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	621a      	str	r2, [r3, #32]
 800370e:	e016      	b.n	800373e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	0c5b      	lsrs	r3, r3, #17
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	2b06      	cmp	r3, #6
 800371a:	d110      	bne.n	800373e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003722:	2208      	movs	r2, #8
 8003724:	4619      	mov	r1, r3
 8003726:	6a38      	ldr	r0, [r7, #32]
 8003728:	f002 fe94 	bl	8006454 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	6a1a      	ldr	r2, [r3, #32]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003738:	441a      	add	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0210 	orr.w	r2, r2, #16
 800374c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f003 f812 	bl	800677c <USB_ReadInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003762:	f040 80a7 	bne.w	80038b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f003 f817 	bl	80067a2 <USB_ReadDevAllOutEpInterrupt>
 8003774:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003776:	e099      	b.n	80038ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 808e 	beq.w	80038a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f003 f83b 	bl	800680a <USB_ReadDevOutEPInterrupt>
 8003794:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00c      	beq.n	80037ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ac:	461a      	mov	r2, r3
 80037ae:	2301      	movs	r3, #1
 80037b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fec3 	bl	8004540 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00c      	beq.n	80037de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d0:	461a      	mov	r2, r3
 80037d2:	2308      	movs	r3, #8
 80037d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 ff99 	bl	8004710 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f4:	461a      	mov	r2, r3
 80037f6:	2310      	movs	r3, #16
 80037f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d030      	beq.n	8003866 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d109      	bne.n	8003824 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800381e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003822:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	3304      	adds	r3, #4
 8003838:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	78db      	ldrb	r3, [r3, #3]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d108      	bne.n	8003854 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	b2db      	uxtb	r3, r3
 800384c:	4619      	mov	r1, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f006 fe30 	bl	800a4b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	461a      	mov	r2, r3
 8003862:	2302      	movs	r3, #2
 8003864:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387c:	461a      	mov	r2, r3
 800387e:	2320      	movs	r3, #32
 8003880:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800389e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	3301      	adds	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f47f af62 	bne.w	8003778 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f002 ff5f 	bl	800677c <USB_ReadInterrupts>
 80038be:	4603      	mov	r3, r0
 80038c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038c8:	f040 80db 	bne.w	8003a82 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f002 ff80 	bl	80067d6 <USB_ReadDevAllInEpInterrupt>
 80038d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80038dc:	e0cd      	b.n	8003a7a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80c2 	beq.w	8003a6e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f002 ffa6 	bl	8006846 <USB_ReadDevInEPInterrupt>
 80038fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d057      	beq.n	80039b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	2201      	movs	r2, #1
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	43db      	mvns	r3, r3
 8003920:	69f9      	ldr	r1, [r7, #28]
 8003922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003926:	4013      	ands	r3, r2
 8003928:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003936:	461a      	mov	r2, r3
 8003938:	2301      	movs	r3, #1
 800393a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d132      	bne.n	80039aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	334c      	adds	r3, #76	; 0x4c
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4403      	add	r3, r0
 8003964:	3348      	adds	r3, #72	; 0x48
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4419      	add	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4403      	add	r3, r0
 8003978:	334c      	adds	r3, #76	; 0x4c
 800397a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	2b00      	cmp	r3, #0
 8003980:	d113      	bne.n	80039aa <HAL_PCD_IRQHandler+0x3a2>
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3354      	adds	r3, #84	; 0x54
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d108      	bne.n	80039aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039a2:	461a      	mov	r2, r3
 80039a4:	2101      	movs	r1, #1
 80039a6:	f002 ffad 	bl	8006904 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f006 fd04 	bl	800a3be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039cc:	461a      	mov	r2, r3
 80039ce:	2308      	movs	r3, #8
 80039d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e8:	461a      	mov	r2, r3
 80039ea:	2310      	movs	r3, #16
 80039ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a04:	461a      	mov	r2, r3
 8003a06:	2340      	movs	r3, #64	; 0x40
 8003a08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d023      	beq.n	8003a5c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a16:	6a38      	ldr	r0, [r7, #32]
 8003a18:	f001 fe8e 	bl	8005738 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	3338      	adds	r3, #56	; 0x38
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	78db      	ldrb	r3, [r3, #3]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d108      	bne.n	8003a4a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f006 fd47 	bl	800a4d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a56:	461a      	mov	r2, r3
 8003a58:	2302      	movs	r3, #2
 8003a5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fcdb 	bl	8004424 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	3301      	adds	r3, #1
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f47f af2e 	bne.w	80038de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f002 fe78 	bl	800677c <USB_ReadInterrupts>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a96:	d122      	bne.n	8003ade <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d108      	bne.n	8003ac8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fec3 	bl	800484c <HAL_PCDEx_LPM_Callback>
 8003ac6:	e002      	b.n	8003ace <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f006 fce5 	bl	800a498 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f002 fe4a 	bl	800677c <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af2:	d112      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d102      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f006 fca1 	bl	800a44c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b18:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 fe2c 	bl	800677c <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	f040 80b7 	bne.w	8003ca0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2110      	movs	r1, #16
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 fdf3 	bl	8005738 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b52:	2300      	movs	r3, #0
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b56:	e046      	b.n	8003be6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b64:	461a      	mov	r2, r3
 8003b66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b6a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b7c:	0151      	lsls	r1, r2, #5
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	440a      	add	r2, r1
 8003b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb0:	0151      	lsls	r1, r2, #5
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bde:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	3301      	adds	r3, #1
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d3b3      	bcc.n	8003b58 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bfe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d016      	beq.n	8003c3a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c1c:	f043 030b 	orr.w	r3, r3, #11
 8003c20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c32:	f043 030b 	orr.w	r3, r3, #11
 8003c36:	6453      	str	r3, [r2, #68]	; 0x44
 8003c38:	e015      	b.n	8003c66 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c60:	f043 030b 	orr.w	r3, r3, #11
 8003c64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f002 fe3a 	bl	8006904 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 fd69 	bl	800677c <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb4:	d124      	bne.n	8003d00 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f002 fdff 	bl	80068be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 fdb4 	bl	8005832 <USB_GetDevSpeed>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681c      	ldr	r4, [r3, #0]
 8003cd6:	f001 fa33 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 8003cda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f001 fab3 	bl	8005250 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f006 fb8f 	bl	800a40e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003cfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f002 fd39 	bl	800677c <USB_ReadInterrupts>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d10a      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f006 fb6c 	bl	800a3f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f002 0208 	and.w	r2, r2, #8
 8003d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 fd24 	bl	800677c <USB_ReadInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b80      	cmp	r3, #128	; 0x80
 8003d3c:	d122      	bne.n	8003d84 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4e:	e014      	b.n	8003d7a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d105      	bne.n	8003d74 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fb27 	bl	80043c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	3301      	adds	r3, #1
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d3e5      	bcc.n	8003d50 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f002 fcf7 	bl	800677c <USB_ReadInterrupts>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d98:	d13b      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9e:	e02b      	b.n	8003df8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	3340      	adds	r3, #64	; 0x40
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d115      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003dc6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	da12      	bge.n	8003df2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	333f      	adds	r3, #63	; 0x3f
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fae8 	bl	80043c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	3301      	adds	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d3ce      	bcc.n	8003da0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f002 fcb0 	bl	800677c <USB_ReadInterrupts>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e26:	d155      	bne.n	8003ed4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e28:	2301      	movs	r3, #1
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2c:	e045      	b.n	8003eba <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e42:	4613      	mov	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d12e      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	da2b      	bge.n	8003eb4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003e68:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d121      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e82:	2201      	movs	r2, #1
 8003e84:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eb0:	6053      	str	r3, [r2, #4]
            break;
 8003eb2:	e007      	b.n	8003ec4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d3b4      	bcc.n	8003e2e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f002 fc4f 	bl	800677c <USB_ReadInterrupts>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee8:	d10a      	bne.n	8003f00 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f006 fb06 	bl	800a4fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f002 fc39 	bl	800677c <USB_ReadInterrupts>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d115      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f006 faf6 	bl	800a518 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	e000      	b.n	8003f40 <HAL_PCD_IRQHandler+0x938>
      return;
 8003f3e:	bf00      	nop
    }
  }
}
 8003f40:	3734      	adds	r7, #52	; 0x34
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd90      	pop	{r4, r7, pc}

08003f46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_PCD_SetAddress+0x1a>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e013      	b.n	8003f88 <HAL_PCD_SetAddress+0x42>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f002 fb97 	bl	80066ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	4608      	mov	r0, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	70fb      	strb	r3, [r7, #3]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	803b      	strh	r3, [r7, #0]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	da0f      	bge.n	8003fd6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	f003 020f 	and.w	r2, r3, #15
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	3338      	adds	r3, #56	; 0x38
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4413      	add	r3, r2
 8003fca:	3304      	adds	r3, #4
 8003fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	705a      	strb	r2, [r3, #1]
 8003fd4:	e00f      	b.n	8003ff6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	f003 020f 	and.w	r2, r3, #15
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	3304      	adds	r3, #4
 8003fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004002:	883a      	ldrh	r2, [r7, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	78ba      	ldrb	r2, [r7, #2]
 800400c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	785b      	ldrb	r3, [r3, #1]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d004      	beq.n	8004020 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004020:	78bb      	ldrb	r3, [r7, #2]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d102      	bne.n	800402c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_PCD_EP_Open+0xaa>
 8004036:	2302      	movs	r3, #2
 8004038:	e00e      	b.n	8004058 <HAL_PCD_EP_Open+0xc8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68f9      	ldr	r1, [r7, #12]
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fc17 	bl	800587c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004056:	7afb      	ldrb	r3, [r7, #11]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800406c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004070:	2b00      	cmp	r3, #0
 8004072:	da0f      	bge.n	8004094 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	3338      	adds	r3, #56	; 0x38
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4413      	add	r3, r2
 8004088:	3304      	adds	r3, #4
 800408a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	705a      	strb	r2, [r3, #1]
 8004092:	e00f      	b.n	80040b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 020f 	and.w	r2, r3, #15
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	3304      	adds	r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_PCD_EP_Close+0x6e>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e00e      	b.n	80040ec <HAL_PCD_EP_Close+0x8c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 fc55 	bl	800598c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	460b      	mov	r3, r1
 8004102:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004104:	7afb      	ldrb	r3, [r7, #11]
 8004106:	f003 020f 	and.w	r2, r3, #15
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	3304      	adds	r3, #4
 800411c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2200      	movs	r2, #0
 8004134:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004136:	7afb      	ldrb	r3, [r7, #11]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	b2da      	uxtb	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004150:	7afb      	ldrb	r3, [r7, #11]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	6979      	ldr	r1, [r7, #20]
 8004168:	f001 ff34 	bl	8005fd4 <USB_EP0StartXfer>
 800416c:	e008      	b.n	8004180 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	6979      	ldr	r1, [r7, #20]
 800417c:	f001 fce2 	bl	8005b44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	460b      	mov	r3, r1
 8004194:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	f003 020f 	and.w	r2, r3, #15
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80041ac:	681b      	ldr	r3, [r3, #0]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b086      	sub	sp, #24
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
 80041c6:	460b      	mov	r3, r1
 80041c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ca:	7afb      	ldrb	r3, [r7, #11]
 80041cc:	f003 020f 	and.w	r2, r3, #15
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	3338      	adds	r3, #56	; 0x38
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4413      	add	r3, r2
 80041de:	3304      	adds	r3, #4
 80041e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2201      	movs	r2, #1
 80041f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fa:	7afb      	ldrb	r3, [r7, #11]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	b2da      	uxtb	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004214:	7afb      	ldrb	r3, [r7, #11]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	6979      	ldr	r1, [r7, #20]
 800422c:	f001 fed2 	bl	8005fd4 <USB_EP0StartXfer>
 8004230:	e008      	b.n	8004244 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	6979      	ldr	r1, [r7, #20]
 8004240:	f001 fc80 	bl	8005b44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	f003 020f 	and.w	r2, r3, #15
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d901      	bls.n	800426c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e050      	b.n	800430e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800426c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004270:	2b00      	cmp	r3, #0
 8004272:	da0f      	bge.n	8004294 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	f003 020f 	and.w	r2, r3, #15
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	3338      	adds	r3, #56	; 0x38
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4413      	add	r3, r2
 8004288:	3304      	adds	r3, #4
 800428a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	705a      	strb	r2, [r3, #1]
 8004292:	e00d      	b.n	80042b0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	3304      	adds	r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_PCD_EP_SetStall+0x82>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e01e      	b.n	800430e <HAL_PCD_EP_SetStall+0xc0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68f9      	ldr	r1, [r7, #12]
 80042de:	4618      	mov	r0, r3
 80042e0:	f002 f910 	bl	8006504 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	b2d9      	uxtb	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042fe:	461a      	mov	r2, r3
 8004300:	f002 fb00 	bl	8006904 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	460b      	mov	r3, r1
 8004320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	f003 020f 	and.w	r2, r3, #15
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d901      	bls.n	8004334 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e042      	b.n	80043ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004338:	2b00      	cmp	r3, #0
 800433a:	da0f      	bge.n	800435c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	3338      	adds	r3, #56	; 0x38
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	705a      	strb	r2, [r3, #1]
 800435a:	e00f      	b.n	800437c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 020f 	and.w	r2, r3, #15
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	3304      	adds	r3, #4
 8004374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_PCD_EP_ClrStall+0x86>
 8004398:	2302      	movs	r3, #2
 800439a:	e00e      	b.n	80043ba <HAL_PCD_EP_ClrStall+0xa4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68f9      	ldr	r1, [r7, #12]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f002 f918 	bl	80065e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	da0c      	bge.n	80043f0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	3338      	adds	r3, #56	; 0x38
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	3304      	adds	r3, #4
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	e00c      	b.n	800440a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	f003 020f 	and.w	r2, r3, #15
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	3304      	adds	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	4618      	mov	r0, r3
 8004412:	f001 ff37 	bl	8006284 <USB_EPStopXfer>
 8004416:	4603      	mov	r3, r0
 8004418:	72fb      	strb	r3, [r7, #11]

  return ret;
 800441a:	7afb      	ldrb	r3, [r7, #11]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af02      	add	r7, sp, #8
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	3338      	adds	r3, #56	; 0x38
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	4413      	add	r3, r2
 8004448:	3304      	adds	r3, #4
 800444a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1a      	ldr	r2, [r3, #32]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	429a      	cmp	r2, r3
 8004456:	d901      	bls.n	800445c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e06c      	b.n	8004536 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	429a      	cmp	r2, r3
 8004470:	d902      	bls.n	8004478 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	3303      	adds	r3, #3
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004480:	e02b      	b.n	80044da <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	429a      	cmp	r2, r3
 8004496:	d902      	bls.n	800449e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	3303      	adds	r3, #3
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6919      	ldr	r1, [r3, #16]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	4603      	mov	r3, r0
 80044bc:	6978      	ldr	r0, [r7, #20]
 80044be:	f001 ff8b 	bl	80063d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	441a      	add	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1a      	ldr	r2, [r3, #32]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	441a      	add	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d809      	bhi.n	8004504 <PCD_WriteEmptyTxFifo+0xe0>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a1a      	ldr	r2, [r3, #32]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d203      	bcs.n	8004504 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1be      	bne.n	8004482 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	429a      	cmp	r2, r3
 800450e:	d811      	bhi.n	8004534 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	2201      	movs	r2, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	43db      	mvns	r3, r3
 800452a:	6939      	ldr	r1, [r7, #16]
 800452c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004530:	4013      	ands	r3, r2
 8004532:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	333c      	adds	r3, #60	; 0x3c
 8004558:	3304      	adds	r3, #4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d17b      	bne.n	800466e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d015      	beq.n	80045ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	4a61      	ldr	r2, [pc, #388]	; (8004708 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	f240 80b9 	bls.w	80046fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80b3 	beq.w	80046fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a2:	461a      	mov	r2, r3
 80045a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a8:	6093      	str	r3, [r2, #8]
 80045aa:	e0a7      	b.n	80046fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c2:	461a      	mov	r2, r3
 80045c4:	2320      	movs	r3, #32
 80045c6:	6093      	str	r3, [r2, #8]
 80045c8:	e098      	b.n	80046fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f040 8093 	bne.w	80046fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	4a4b      	ldr	r2, [pc, #300]	; (8004708 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d90f      	bls.n	80045fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	461a      	mov	r2, r3
 80045f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fa:	6093      	str	r3, [r2, #8]
 80045fc:	e07e      	b.n	80046fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4413      	add	r3, r2
 8004610:	3304      	adds	r3, #4
 8004612:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	0159      	lsls	r1, r3, #5
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	440b      	add	r3, r1
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800462a:	1ad2      	subs	r2, r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d114      	bne.n	8004660 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004648:	461a      	mov	r2, r3
 800464a:	2101      	movs	r1, #1
 800464c:	f002 f95a 	bl	8006904 <USB_EP0_OutStart>
 8004650:	e006      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	441a      	add	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f005 fe8e 	bl	800a388 <HAL_PCD_DataOutStageCallback>
 800466c:	e046      	b.n	80046fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	4a26      	ldr	r2, [pc, #152]	; (800470c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d124      	bne.n	80046c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468c:	461a      	mov	r2, r3
 800468e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004692:	6093      	str	r3, [r2, #8]
 8004694:	e032      	b.n	80046fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ac:	461a      	mov	r2, r3
 80046ae:	2320      	movs	r3, #32
 80046b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f005 fe65 	bl	800a388 <HAL_PCD_DataOutStageCallback>
 80046be:	e01d      	b.n	80046fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d114      	bne.n	80046f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046e8:	461a      	mov	r2, r3
 80046ea:	2100      	movs	r1, #0
 80046ec:	f002 f90a 	bl	8006904 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f005 fe46 	bl	800a388 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3720      	adds	r7, #32
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	4f54300a 	.word	0x4f54300a
 800470c:	4f54310a 	.word	0x4f54310a

08004710 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	333c      	adds	r3, #60	; 0x3c
 8004728:	3304      	adds	r3, #4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a15      	ldr	r2, [pc, #84]	; (8004798 <PCD_EP_OutSetupPacket_int+0x88>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d90e      	bls.n	8004764 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	461a      	mov	r2, r3
 800475e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004762:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f005 fdfd 	bl	800a364 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <PCD_EP_OutSetupPacket_int+0x88>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d90c      	bls.n	800478c <PCD_EP_OutSetupPacket_int+0x7c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d108      	bne.n	800478c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004784:	461a      	mov	r2, r3
 8004786:	2101      	movs	r1, #1
 8004788:	f002 f8bc 	bl	8006904 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	4f54300a 	.word	0x4f54300a

0800479c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	70fb      	strb	r3, [r7, #3]
 80047a8:	4613      	mov	r3, r2
 80047aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d107      	bne.n	80047ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047ba:	883b      	ldrh	r3, [r7, #0]
 80047bc:	0419      	lsls	r1, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	629a      	str	r2, [r3, #40]	; 0x28
 80047c8:	e028      	b.n	800481c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4413      	add	r3, r2
 80047d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047d8:	2300      	movs	r3, #0
 80047da:	73fb      	strb	r3, [r7, #15]
 80047dc:	e00d      	b.n	80047fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	3340      	adds	r3, #64	; 0x40
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	4413      	add	r3, r2
 80047f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	3301      	adds	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	3b01      	subs	r3, #1
 8004800:	429a      	cmp	r2, r3
 8004802:	d3ec      	bcc.n	80047de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004804:	883b      	ldrh	r3, [r7, #0]
 8004806:	0418      	lsls	r0, r3, #16
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	3b01      	subs	r3, #1
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	4302      	orrs	r2, r0
 8004814:	3340      	adds	r3, #64	; 0x40
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e267      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d075      	beq.n	800496e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004882:	4b88      	ldr	r3, [pc, #544]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b04      	cmp	r3, #4
 800488c:	d00c      	beq.n	80048a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800488e:	4b85      	ldr	r3, [pc, #532]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004896:	2b08      	cmp	r3, #8
 8004898:	d112      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800489a:	4b82      	ldr	r3, [pc, #520]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a6:	d10b      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	4b7e      	ldr	r3, [pc, #504]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d05b      	beq.n	800496c <HAL_RCC_OscConfig+0x108>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d157      	bne.n	800496c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e242      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_OscConfig+0x74>
 80048ca:	4b76      	ldr	r3, [pc, #472]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a75      	ldr	r2, [pc, #468]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e01d      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x98>
 80048e2:	4b70      	ldr	r3, [pc, #448]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a6f      	ldr	r2, [pc, #444]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b6d      	ldr	r3, [pc, #436]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a6c      	ldr	r2, [pc, #432]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048fc:	4b69      	ldr	r3, [pc, #420]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a68      	ldr	r2, [pc, #416]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4b66      	ldr	r3, [pc, #408]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a65      	ldr	r2, [pc, #404]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800490e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d013      	beq.n	8004944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fe fa12 	bl	8002d44 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004924:	f7fe fa0e 	bl	8002d44 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	; 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e207      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b5b      	ldr	r3, [pc, #364]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0xc0>
 8004942:	e014      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fe f9fe 	bl	8002d44 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494c:	f7fe f9fa 	bl	8002d44 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e1f3      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495e:	4b51      	ldr	r3, [pc, #324]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0xe8>
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d063      	beq.n	8004a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497a:	4b4a      	ldr	r3, [pc, #296]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004986:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800498e:	2b08      	cmp	r3, #8
 8004990:	d11c      	bne.n	80049cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004992:	4b44      	ldr	r3, [pc, #272]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	4b41      	ldr	r3, [pc, #260]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_RCC_OscConfig+0x152>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e1c7      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b6:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4937      	ldr	r1, [pc, #220]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ca:	e03a      	b.n	8004a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d4:	4b34      	ldr	r3, [pc, #208]	; (8004aa8 <HAL_RCC_OscConfig+0x244>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049da:	f7fe f9b3 	bl	8002d44 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e2:	f7fe f9af 	bl	8002d44 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e1a8      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a00:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4925      	ldr	r1, [pc, #148]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
 8004a14:	e015      	b.n	8004a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCC_OscConfig+0x244>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fe f992 	bl	8002d44 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a24:	f7fe f98e 	bl	8002d44 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e187      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d036      	beq.n	8004abc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d016      	beq.n	8004a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <HAL_RCC_OscConfig+0x248>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fe f972 	bl	8002d44 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fe f96e 	bl	8002d44 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e167      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_RCC_OscConfig+0x240>)
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x200>
 8004a82:	e01b      	b.n	8004abc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a84:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_OscConfig+0x248>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8a:	f7fe f95b 	bl	8002d44 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a90:	e00e      	b.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fe f957 	bl	8002d44 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d907      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e150      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	42470000 	.word	0x42470000
 8004aac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	4b88      	ldr	r3, [pc, #544]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ea      	bne.n	8004a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8097 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ace:	4b81      	ldr	r3, [pc, #516]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	4b7d      	ldr	r3, [pc, #500]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	4a7c      	ldr	r2, [pc, #496]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aea:	4b7a      	ldr	r3, [pc, #488]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afa:	4b77      	ldr	r3, [pc, #476]	; (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d118      	bne.n	8004b38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b06:	4b74      	ldr	r3, [pc, #464]	; (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a73      	ldr	r2, [pc, #460]	; (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b12:	f7fe f917 	bl	8002d44 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1a:	f7fe f913 	bl	8002d44 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e10c      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2c:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <HAL_RCC_OscConfig+0x474>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d106      	bne.n	8004b4e <HAL_RCC_OscConfig+0x2ea>
 8004b40:	4b64      	ldr	r3, [pc, #400]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	4a63      	ldr	r2, [pc, #396]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4c:	e01c      	b.n	8004b88 <HAL_RCC_OscConfig+0x324>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d10c      	bne.n	8004b70 <HAL_RCC_OscConfig+0x30c>
 8004b56:	4b5f      	ldr	r3, [pc, #380]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	4a5e      	ldr	r2, [pc, #376]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	f043 0304 	orr.w	r3, r3, #4
 8004b60:	6713      	str	r3, [r2, #112]	; 0x70
 8004b62:	4b5c      	ldr	r3, [pc, #368]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	4a5b      	ldr	r2, [pc, #364]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6e:	e00b      	b.n	8004b88 <HAL_RCC_OscConfig+0x324>
 8004b70:	4b58      	ldr	r3, [pc, #352]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4a57      	ldr	r2, [pc, #348]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7c:	4b55      	ldr	r3, [pc, #340]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4a54      	ldr	r2, [pc, #336]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004b82:	f023 0304 	bic.w	r3, r3, #4
 8004b86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fe f8d8 	bl	8002d44 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b98:	f7fe f8d4 	bl	8002d44 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0cb      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bae:	4b49      	ldr	r3, [pc, #292]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0ee      	beq.n	8004b98 <HAL_RCC_OscConfig+0x334>
 8004bba:	e014      	b.n	8004be6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bbc:	f7fe f8c2 	bl	8002d44 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc2:	e00a      	b.n	8004bda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc4:	f7fe f8be 	bl	8002d44 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e0b5      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bda:	4b3e      	ldr	r3, [pc, #248]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ee      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d105      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bec:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	4a38      	ldr	r2, [pc, #224]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80a1 	beq.w	8004d44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c02:	4b34      	ldr	r3, [pc, #208]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d05c      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d141      	bne.n	8004c9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c16:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <HAL_RCC_OscConfig+0x478>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fe f892 	bl	8002d44 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c24:	f7fe f88e 	bl	8002d44 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e087      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c36:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	491b      	ldr	r1, [pc, #108]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_RCC_OscConfig+0x478>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c72:	f7fe f867 	bl	8002d44 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fe f863 	bl	8002d44 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e05c      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8c:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x416>
 8004c98:	e054      	b.n	8004d44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9a:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <HAL_RCC_OscConfig+0x478>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fe f850 	bl	8002d44 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7fe f84c 	bl	8002d44 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e045      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x444>
 8004cc6:	e03d      	b.n	8004d44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e038      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40007000 	.word	0x40007000
 8004cdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <HAL_RCC_OscConfig+0x4ec>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d028      	beq.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d121      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d11a      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d111      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800

08004d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0cc      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d68:	4b68      	ldr	r3, [pc, #416]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d90c      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b65      	ldr	r3, [pc, #404]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b63      	ldr	r3, [pc, #396]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0b8      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d020      	beq.n	8004dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004da8:	4b59      	ldr	r3, [pc, #356]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	4a58      	ldr	r2, [pc, #352]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc0:	4b53      	ldr	r3, [pc, #332]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a52      	ldr	r2, [pc, #328]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dcc:	4b50      	ldr	r3, [pc, #320]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	494d      	ldr	r1, [pc, #308]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d044      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df2:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d119      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e07f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d107      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e12:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e06f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e22:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e067      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e32:	4b37      	ldr	r3, [pc, #220]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4934      	ldr	r1, [pc, #208]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e44:	f7fd ff7e 	bl	8002d44 <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4a:	e00a      	b.n	8004e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4c:	f7fd ff7a 	bl	8002d44 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e04f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e62:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 020c 	and.w	r2, r3, #12
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d1eb      	bne.n	8004e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e74:	4b25      	ldr	r3, [pc, #148]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d20c      	bcs.n	8004e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e032      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea8:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4916      	ldr	r1, [pc, #88]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	490e      	ldr	r1, [pc, #56]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eda:	f000 f82d 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	490a      	ldr	r1, [pc, #40]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004eec:	5ccb      	ldrb	r3, [r1, r3]
 8004eee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef2:	4a09      	ldr	r2, [pc, #36]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <HAL_RCC_ClockConfig+0x1c8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fd fede 	bl	8002cbc <HAL_InitTick>

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40023c00 	.word	0x40023c00
 8004f10:	40023800 	.word	0x40023800
 8004f14:	0800eb28 	.word	0x0800eb28
 8004f18:	20000004 	.word	0x20000004
 8004f1c:	20000008 	.word	0x20000008

08004f20 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004f24:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <HAL_RCC_EnableCSS+0x14>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	4247004c 	.word	0x4247004c

08004f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f3c:	b094      	sub	sp, #80	; 0x50
 8004f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	647b      	str	r3, [r7, #68]	; 0x44
 8004f44:	2300      	movs	r3, #0
 8004f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f48:	2300      	movs	r3, #0
 8004f4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f50:	4b79      	ldr	r3, [pc, #484]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d00d      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x40>
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	f200 80e1 	bhi.w	8005124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0x34>
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d003      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f6a:	e0db      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f6c:	4b73      	ldr	r3, [pc, #460]	; (800513c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f70:	e0db      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f72:	4b72      	ldr	r3, [pc, #456]	; (800513c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f76:	e0d8      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f78:	4b6f      	ldr	r3, [pc, #444]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f82:	4b6d      	ldr	r3, [pc, #436]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d063      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8e:	4b6a      	ldr	r3, [pc, #424]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	2200      	movs	r2, #0
 8004f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004faa:	4622      	mov	r2, r4
 8004fac:	462b      	mov	r3, r5
 8004fae:	f04f 0000 	mov.w	r0, #0
 8004fb2:	f04f 0100 	mov.w	r1, #0
 8004fb6:	0159      	lsls	r1, r3, #5
 8004fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fbc:	0150      	lsls	r0, r2, #5
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	1a51      	subs	r1, r2, r1
 8004fc6:	6139      	str	r1, [r7, #16]
 8004fc8:	4629      	mov	r1, r5
 8004fca:	eb63 0301 	sbc.w	r3, r3, r1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fdc:	4659      	mov	r1, fp
 8004fde:	018b      	lsls	r3, r1, #6
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	018a      	lsls	r2, r1, #6
 8004fea:	4651      	mov	r1, sl
 8004fec:	ebb2 0801 	subs.w	r8, r2, r1
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800500a:	4690      	mov	r8, r2
 800500c:	4699      	mov	r9, r3
 800500e:	4623      	mov	r3, r4
 8005010:	eb18 0303 	adds.w	r3, r8, r3
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	462b      	mov	r3, r5
 8005018:	eb49 0303 	adc.w	r3, r9, r3
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800502a:	4629      	mov	r1, r5
 800502c:	028b      	lsls	r3, r1, #10
 800502e:	4621      	mov	r1, r4
 8005030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005034:	4621      	mov	r1, r4
 8005036:	028a      	lsls	r2, r1, #10
 8005038:	4610      	mov	r0, r2
 800503a:	4619      	mov	r1, r3
 800503c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503e:	2200      	movs	r2, #0
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
 8005042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005048:	f7fb fe16 	bl	8000c78 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005054:	e058      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005056:	4b38      	ldr	r3, [pc, #224]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	2200      	movs	r2, #0
 800505e:	4618      	mov	r0, r3
 8005060:	4611      	mov	r1, r2
 8005062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005066:	623b      	str	r3, [r7, #32]
 8005068:	2300      	movs	r3, #0
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
 800506c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	0159      	lsls	r1, r3, #5
 800507e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005082:	0150      	lsls	r0, r2, #5
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4641      	mov	r1, r8
 800508a:	ebb2 0a01 	subs.w	sl, r2, r1
 800508e:	4649      	mov	r1, r9
 8005090:	eb63 0b01 	sbc.w	fp, r3, r1
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050a8:	ebb2 040a 	subs.w	r4, r2, sl
 80050ac:	eb63 050b 	sbc.w	r5, r3, fp
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	00eb      	lsls	r3, r5, #3
 80050ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050be:	00e2      	lsls	r2, r4, #3
 80050c0:	4614      	mov	r4, r2
 80050c2:	461d      	mov	r5, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	18e3      	adds	r3, r4, r3
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	464b      	mov	r3, r9
 80050cc:	eb45 0303 	adc.w	r3, r5, r3
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050de:	4629      	mov	r1, r5
 80050e0:	028b      	lsls	r3, r1, #10
 80050e2:	4621      	mov	r1, r4
 80050e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050e8:	4621      	mov	r1, r4
 80050ea:	028a      	lsls	r2, r1, #10
 80050ec:	4610      	mov	r0, r2
 80050ee:	4619      	mov	r1, r3
 80050f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f2:	2200      	movs	r2, #0
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	61fa      	str	r2, [r7, #28]
 80050f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050fc:	f7fb fdbc 	bl	8000c78 <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4613      	mov	r3, r2
 8005106:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	3301      	adds	r3, #1
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005118:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800511a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005122:	e002      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <HAL_RCC_GetSysClockFreq+0x204>)
 8005126:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800512a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800512c:	4618      	mov	r0, r3
 800512e:	3750      	adds	r7, #80	; 0x50
 8005130:	46bd      	mov	sp, r7
 8005132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800
 800513c:	00f42400 	.word	0x00f42400

08005140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <HAL_RCC_GetHCLKFreq+0x14>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000004 	.word	0x20000004

08005158 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_RCC_NMI_IRQHandler+0x20>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005164:	2b80      	cmp	r3, #128	; 0x80
 8005166:	d104      	bne.n	8005172 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005168:	f000 f80a 	bl	8005180 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_NMI_IRQHandler+0x24>)
 800516e:	2280      	movs	r2, #128	; 0x80
 8005170:	701a      	strb	r2, [r3, #0]
  }
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800
 800517c:	4002380e 	.word	0x4002380e

08005180 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800518e:	b084      	sub	sp, #16
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	f107 001c 	add.w	r0, r7, #28
 800519c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d122      	bne.n	80051ec <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d105      	bne.n	80051e0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 fbed 	bl	80069c0 <USB_CoreReset>
 80051e6:	4603      	mov	r3, r0
 80051e8:	73fb      	strb	r3, [r7, #15]
 80051ea:	e01a      	b.n	8005222 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fbe1 	bl	80069c0 <USB_CoreReset>
 80051fe:	4603      	mov	r3, r0
 8005200:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
 8005214:	e005      	b.n	8005222 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10b      	bne.n	8005240 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f043 0206 	orr.w	r2, r3, #6
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f043 0220 	orr.w	r2, r3, #32
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800524c:	b004      	add	sp, #16
 800524e:	4770      	bx	lr

08005250 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d165      	bne.n	8005330 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4a41      	ldr	r2, [pc, #260]	; (800536c <USB_SetTurnaroundTime+0x11c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d906      	bls.n	800527a <USB_SetTurnaroundTime+0x2a>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4a40      	ldr	r2, [pc, #256]	; (8005370 <USB_SetTurnaroundTime+0x120>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d202      	bcs.n	800527a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005274:	230f      	movs	r3, #15
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e062      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4a3c      	ldr	r2, [pc, #240]	; (8005370 <USB_SetTurnaroundTime+0x120>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d306      	bcc.n	8005290 <USB_SetTurnaroundTime+0x40>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4a3b      	ldr	r2, [pc, #236]	; (8005374 <USB_SetTurnaroundTime+0x124>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d202      	bcs.n	8005290 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800528a:	230e      	movs	r3, #14
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e057      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4a38      	ldr	r2, [pc, #224]	; (8005374 <USB_SetTurnaroundTime+0x124>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d306      	bcc.n	80052a6 <USB_SetTurnaroundTime+0x56>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4a37      	ldr	r2, [pc, #220]	; (8005378 <USB_SetTurnaroundTime+0x128>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d202      	bcs.n	80052a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052a0:	230d      	movs	r3, #13
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e04c      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4a33      	ldr	r2, [pc, #204]	; (8005378 <USB_SetTurnaroundTime+0x128>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d306      	bcc.n	80052bc <USB_SetTurnaroundTime+0x6c>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4a32      	ldr	r2, [pc, #200]	; (800537c <USB_SetTurnaroundTime+0x12c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d802      	bhi.n	80052bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052b6:	230c      	movs	r3, #12
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	e041      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a2f      	ldr	r2, [pc, #188]	; (800537c <USB_SetTurnaroundTime+0x12c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d906      	bls.n	80052d2 <USB_SetTurnaroundTime+0x82>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a2e      	ldr	r2, [pc, #184]	; (8005380 <USB_SetTurnaroundTime+0x130>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d802      	bhi.n	80052d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052cc:	230b      	movs	r3, #11
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e036      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4a2a      	ldr	r2, [pc, #168]	; (8005380 <USB_SetTurnaroundTime+0x130>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d906      	bls.n	80052e8 <USB_SetTurnaroundTime+0x98>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4a29      	ldr	r2, [pc, #164]	; (8005384 <USB_SetTurnaroundTime+0x134>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d802      	bhi.n	80052e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052e2:	230a      	movs	r3, #10
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e02b      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a26      	ldr	r2, [pc, #152]	; (8005384 <USB_SetTurnaroundTime+0x134>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d906      	bls.n	80052fe <USB_SetTurnaroundTime+0xae>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4a25      	ldr	r2, [pc, #148]	; (8005388 <USB_SetTurnaroundTime+0x138>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d202      	bcs.n	80052fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052f8:	2309      	movs	r3, #9
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e020      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a21      	ldr	r2, [pc, #132]	; (8005388 <USB_SetTurnaroundTime+0x138>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d306      	bcc.n	8005314 <USB_SetTurnaroundTime+0xc4>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4a20      	ldr	r2, [pc, #128]	; (800538c <USB_SetTurnaroundTime+0x13c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d802      	bhi.n	8005314 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800530e:	2308      	movs	r3, #8
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e015      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4a1d      	ldr	r2, [pc, #116]	; (800538c <USB_SetTurnaroundTime+0x13c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d906      	bls.n	800532a <USB_SetTurnaroundTime+0xda>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <USB_SetTurnaroundTime+0x140>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d202      	bcs.n	800532a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005324:	2307      	movs	r3, #7
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e00a      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800532a:	2306      	movs	r3, #6
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e007      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005336:	2309      	movs	r3, #9
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e001      	b.n	8005340 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800533c:	2309      	movs	r3, #9
 800533e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	029b      	lsls	r3, r3, #10
 8005354:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	00d8acbf 	.word	0x00d8acbf
 8005370:	00e4e1c0 	.word	0x00e4e1c0
 8005374:	00f42400 	.word	0x00f42400
 8005378:	01067380 	.word	0x01067380
 800537c:	011a499f 	.word	0x011a499f
 8005380:	01312cff 	.word	0x01312cff
 8005384:	014ca43f 	.word	0x014ca43f
 8005388:	016e3600 	.word	0x016e3600
 800538c:	01a6ab1f 	.word	0x01a6ab1f
 8005390:	01e84800 	.word	0x01e84800

08005394 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f043 0201 	orr.w	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 0201 	bic.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d115      	bne.n	8005426 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005406:	2001      	movs	r0, #1
 8005408:	f7fd fca8 	bl	8002d5c <HAL_Delay>
      ms++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f001 fa45 	bl	80068a2 <USB_GetMode>
 8005418:	4603      	mov	r3, r0
 800541a:	2b01      	cmp	r3, #1
 800541c:	d01e      	beq.n	800545c <USB_SetCurrentMode+0x84>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b31      	cmp	r3, #49	; 0x31
 8005422:	d9f0      	bls.n	8005406 <USB_SetCurrentMode+0x2e>
 8005424:	e01a      	b.n	800545c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d115      	bne.n	8005458 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005438:	2001      	movs	r0, #1
 800543a:	f7fd fc8f 	bl	8002d5c <HAL_Delay>
      ms++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3301      	adds	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 fa2c 	bl	80068a2 <USB_GetMode>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <USB_SetCurrentMode+0x84>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b31      	cmp	r3, #49	; 0x31
 8005454:	d9f0      	bls.n	8005438 <USB_SetCurrentMode+0x60>
 8005456:	e001      	b.n	800545c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e005      	b.n	8005468 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b32      	cmp	r3, #50	; 0x32
 8005460:	d101      	bne.n	8005466 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005470:	b084      	sub	sp, #16
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800547e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	e009      	b.n	80054a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3340      	adds	r3, #64	; 0x40
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	3301      	adds	r3, #1
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b0e      	cmp	r3, #14
 80054a8:	d9f2      	bls.n	8005490 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d11c      	bne.n	80054ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054be:	f043 0302 	orr.w	r3, r3, #2
 80054c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
 80054e8:	e00b      	b.n	8005502 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005508:	461a      	mov	r2, r3
 800550a:	2300      	movs	r3, #0
 800550c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005514:	4619      	mov	r1, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551c:	461a      	mov	r2, r3
 800551e:	680b      	ldr	r3, [r1, #0]
 8005520:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	2b01      	cmp	r3, #1
 8005526:	d10c      	bne.n	8005542 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800552e:	2100      	movs	r1, #0
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f965 	bl	8005800 <USB_SetDevSpeed>
 8005536:	e008      	b.n	800554a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005538:	2101      	movs	r1, #1
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f960 	bl	8005800 <USB_SetDevSpeed>
 8005540:	e003      	b.n	800554a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005542:	2103      	movs	r1, #3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f95b 	bl	8005800 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800554a:	2110      	movs	r1, #16
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f8f3 	bl	8005738 <USB_FlushTxFifo>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f91f 	bl	80057a0 <USB_FlushRxFifo>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	461a      	mov	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	461a      	mov	r2, r3
 8005580:	2300      	movs	r3, #0
 8005582:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	461a      	mov	r2, r3
 800558c:	2300      	movs	r3, #0
 800558e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005590:	2300      	movs	r3, #0
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	e043      	b.n	800561e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ac:	d118      	bne.n	80055e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c0:	461a      	mov	r2, r3
 80055c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	e013      	b.n	80055f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d6:	461a      	mov	r2, r3
 80055d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	e008      	b.n	80055f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	461a      	mov	r2, r3
 80055ee:	2300      	movs	r3, #0
 80055f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	461a      	mov	r2, r3
 8005600:	2300      	movs	r3, #0
 8005602:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005610:	461a      	mov	r2, r3
 8005612:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005616:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	3301      	adds	r3, #1
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	429a      	cmp	r2, r3
 8005624:	d3b7      	bcc.n	8005596 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005626:	2300      	movs	r3, #0
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	e043      	b.n	80056b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800563e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005642:	d118      	bne.n	8005676 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10a      	bne.n	8005660 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	461a      	mov	r2, r3
 8005658:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e013      	b.n	8005688 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	461a      	mov	r2, r3
 800566e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	e008      	b.n	8005688 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	461a      	mov	r2, r3
 8005684:	2300      	movs	r3, #0
 8005686:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	461a      	mov	r2, r3
 8005696:	2300      	movs	r3, #0
 8005698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	461a      	mov	r2, r3
 80056a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3301      	adds	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d3b7      	bcc.n	800562c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f043 0210 	orr.w	r2, r3, #16
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699a      	ldr	r2, [r3, #24]
 80056f4:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <USB_DevInit+0x2c4>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f043 0208 	orr.w	r2, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800570e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d107      	bne.n	8005724 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800571c:	f043 0304 	orr.w	r3, r3, #4
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005730:	b004      	add	sp, #16
 8005732:	4770      	bx	lr
 8005734:	803c3800 	.word	0x803c3800

08005738 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3301      	adds	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4a13      	ldr	r2, [pc, #76]	; (800579c <USB_FlushTxFifo+0x64>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e01b      	b.n	8005790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	daf2      	bge.n	8005746 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	019b      	lsls	r3, r3, #6
 8005768:	f043 0220 	orr.w	r2, r3, #32
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4a08      	ldr	r2, [pc, #32]	; (800579c <USB_FlushTxFifo+0x64>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e006      	b.n	8005790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b20      	cmp	r3, #32
 800578c:	d0f0      	beq.n	8005770 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	00030d40 	.word	0x00030d40

080057a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4a11      	ldr	r2, [pc, #68]	; (80057fc <USB_FlushRxFifo+0x5c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e018      	b.n	80057f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	daf2      	bge.n	80057ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2210      	movs	r2, #16
 80057ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3301      	adds	r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a08      	ldr	r2, [pc, #32]	; (80057fc <USB_FlushRxFifo+0x5c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e006      	b.n	80057f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	2b10      	cmp	r3, #16
 80057ec:	d0f0      	beq.n	80057d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	00030d40 	.word	0x00030d40

08005800 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005820:	4313      	orrs	r3, r2
 8005822:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005832:	b480      	push	{r7}
 8005834:	b087      	sub	sp, #28
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0306 	and.w	r3, r3, #6
 800584a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
 8005856:	e00a      	b.n	800586e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d002      	beq.n	8005864 <USB_GetDevSpeed+0x32>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b06      	cmp	r3, #6
 8005862:	d102      	bne.n	800586a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005864:	2302      	movs	r3, #2
 8005866:	75fb      	strb	r3, [r7, #23]
 8005868:	e001      	b.n	800586e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800586a:	230f      	movs	r3, #15
 800586c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005870:	4618      	mov	r0, r3
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d13a      	bne.n	800590e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	2101      	movs	r1, #1
 80058aa:	fa01 f303 	lsl.w	r3, r1, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	68f9      	ldr	r1, [r7, #12]
 80058b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d155      	bne.n	800597c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	791b      	ldrb	r3, [r3, #4]
 80058ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	059b      	lsls	r3, r3, #22
 80058f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058f4:	4313      	orrs	r3, r2
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	0151      	lsls	r1, r2, #5
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	440a      	add	r2, r1
 80058fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e036      	b.n	800597c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005914:	69da      	ldr	r2, [r3, #28]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	2101      	movs	r1, #1
 8005920:	fa01 f303 	lsl.w	r3, r1, r3
 8005924:	041b      	lsls	r3, r3, #16
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800592c:	4313      	orrs	r3, r2
 800592e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d11a      	bne.n	800597c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	791b      	ldrb	r3, [r3, #4]
 8005960:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005962:	430b      	orrs	r3, r1
 8005964:	4313      	orrs	r3, r2
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	440a      	add	r2, r1
 800596e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d161      	bne.n	8005a6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059be:	d11f      	bne.n	8005a00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	2101      	movs	r1, #1
 8005a12:	fa01 f303 	lsl.w	r3, r1, r3
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a20:	4013      	ands	r3, r2
 8005a22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	2101      	movs	r1, #1
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a44:	4013      	ands	r3, r2
 8005a46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	0159      	lsls	r1, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	440b      	add	r3, r1
 8005a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a62:	4619      	mov	r1, r3
 8005a64:	4b35      	ldr	r3, [pc, #212]	; (8005b3c <USB_DeactivateEndpoint+0x1b0>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]
 8005a6a:	e060      	b.n	8005b2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a82:	d11f      	bne.n	8005ac4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005aa2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ada:	041b      	lsls	r3, r3, #16
 8005adc:	43db      	mvns	r3, r3
 8005ade:	68f9      	ldr	r1, [r7, #12]
 8005ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	2101      	movs	r1, #1
 8005afa:	fa01 f303 	lsl.w	r3, r1, r3
 8005afe:	041b      	lsls	r3, r3, #16
 8005b00:	43db      	mvns	r3, r3
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	0159      	lsls	r1, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	440b      	add	r3, r1
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	4619      	mov	r1, r3
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <USB_DeactivateEndpoint+0x1b4>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	ec337800 	.word	0xec337800
 8005b40:	eff37800 	.word	0xeff37800

08005b44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	; 0x28
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	f040 815c 	bne.w	8005e1e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d132      	bne.n	8005bd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bcc:	0cdb      	lsrs	r3, r3, #19
 8005bce:	04db      	lsls	r3, r3, #19
 8005bd0:	6113      	str	r3, [r2, #16]
 8005bd2:	e074      	b.n	8005cbe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bee:	0cdb      	lsrs	r3, r3, #19
 8005bf0:	04db      	lsls	r3, r3, #19
 8005bf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6999      	ldr	r1, [r3, #24]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	440b      	add	r3, r1
 8005c30:	1e59      	subs	r1, r3, #1
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c3a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c3c:	4b9d      	ldr	r3, [pc, #628]	; (8005eb4 <USB_EPStartXfer+0x370>)
 8005c3e:	400b      	ands	r3, r1
 8005c40:	69b9      	ldr	r1, [r7, #24]
 8005c42:	0148      	lsls	r0, r1, #5
 8005c44:	69f9      	ldr	r1, [r7, #28]
 8005c46:	4401      	add	r1, r0
 8005c48:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c66:	69b9      	ldr	r1, [r7, #24]
 8005c68:	0148      	lsls	r0, r1, #5
 8005c6a:	69f9      	ldr	r1, [r7, #28]
 8005c6c:	4401      	add	r1, r0
 8005c6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c72:	4313      	orrs	r3, r2
 8005c74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	791b      	ldrb	r3, [r3, #4]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d11f      	bne.n	8005cbe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cbc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d14b      	bne.n	8005d5c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	791b      	ldrb	r3, [r3, #4]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d128      	bne.n	8005d3a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d110      	bne.n	8005d1a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	e00f      	b.n	8005d3a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d38:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e133      	b.n	8005fc4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d7a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	791b      	ldrb	r3, [r3, #4]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d015      	beq.n	8005db0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 811b 	beq.w	8005fc4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	2101      	movs	r1, #1
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	69f9      	ldr	r1, [r7, #28]
 8005da6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005daa:	4313      	orrs	r3, r2
 8005dac:	634b      	str	r3, [r1, #52]	; 0x34
 8005dae:	e109      	b.n	8005fc4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d110      	bne.n	8005de2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	e00f      	b.n	8005e02 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e00:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6919      	ldr	r1, [r3, #16]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	b298      	uxth	r0, r3
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	4603      	mov	r3, r0
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fade 	bl	80063d8 <USB_WritePacket>
 8005e1c:	e0d2      	b.n	8005fc4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e38:	0cdb      	lsrs	r3, r3, #19
 8005e3a:	04db      	lsls	r3, r3, #19
 8005e3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d126      	bne.n	8005eb8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e80:	69b9      	ldr	r1, [r7, #24]
 8005e82:	0148      	lsls	r0, r1, #5
 8005e84:	69f9      	ldr	r1, [r7, #28]
 8005e86:	4401      	add	r1, r0
 8005e88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eae:	6113      	str	r3, [r2, #16]
 8005eb0:	e03a      	b.n	8005f28 <USB_EPStartXfer+0x3e4>
 8005eb2:	bf00      	nop
 8005eb4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	1e5a      	subs	r2, r3, #1
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	8afa      	ldrh	r2, [r7, #22]
 8005ed4:	fb03 f202 	mul.w	r2, r3, r2
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	8afb      	ldrh	r3, [r7, #22]
 8005eec:	04d9      	lsls	r1, r3, #19
 8005eee:	4b38      	ldr	r3, [pc, #224]	; (8005fd0 <USB_EPStartXfer+0x48c>)
 8005ef0:	400b      	ands	r3, r1
 8005ef2:	69b9      	ldr	r1, [r7, #24]
 8005ef4:	0148      	lsls	r0, r1, #5
 8005ef6:	69f9      	ldr	r1, [r7, #28]
 8005ef8:	4401      	add	r1, r0
 8005efa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005efe:	4313      	orrs	r3, r2
 8005f00:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f18:	69b9      	ldr	r1, [r7, #24]
 8005f1a:	0148      	lsls	r0, r1, #5
 8005f1c:	69f9      	ldr	r1, [r7, #28]
 8005f1e:	4401      	add	r1, r0
 8005f20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f24:	4313      	orrs	r3, r2
 8005f26:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10d      	bne.n	8005f4a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6919      	ldr	r1, [r3, #16]
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f46:	460a      	mov	r2, r1
 8005f48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	791b      	ldrb	r3, [r3, #4]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d128      	bne.n	8005fa4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d110      	bne.n	8005f84 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	e00f      	b.n	8005fa4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	1ff80000 	.word	0x1ff80000

08005fd4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	785b      	ldrb	r3, [r3, #1]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	f040 80ce 	bne.w	8006192 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d132      	bne.n	8006064 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	440a      	add	r2, r1
 8006014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800601c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006020:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	440a      	add	r2, r1
 8006038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006040:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605c:	0cdb      	lsrs	r3, r3, #19
 800605e:	04db      	lsls	r3, r3, #19
 8006060:	6113      	str	r3, [r2, #16]
 8006062:	e04e      	b.n	8006102 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607e:	0cdb      	lsrs	r3, r3, #19
 8006080:	04db      	lsls	r3, r3, #19
 8006082:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d903      	bls.n	80060bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f2:	6939      	ldr	r1, [r7, #16]
 80060f4:	0148      	lsls	r0, r1, #5
 80060f6:	6979      	ldr	r1, [r7, #20]
 80060f8:	4401      	add	r1, r0
 80060fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060fe:	4313      	orrs	r3, r2
 8006100:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d11e      	bne.n	8006146 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d009      	beq.n	8006124 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e097      	b.n	8006276 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006160:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006164:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 8083 	beq.w	8006276 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f003 030f 	and.w	r3, r3, #15
 8006180:	2101      	movs	r1, #1
 8006182:	fa01 f303 	lsl.w	r3, r1, r3
 8006186:	6979      	ldr	r1, [r7, #20]
 8006188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800618c:	4313      	orrs	r3, r2
 800618e:	634b      	str	r3, [r1, #52]	; 0x34
 8006190:	e071      	b.n	8006276 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ac:	0cdb      	lsrs	r3, r3, #19
 80061ae:	04db      	lsls	r3, r3, #19
 80061b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800620c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006224:	6939      	ldr	r1, [r7, #16]
 8006226:	0148      	lsls	r0, r1, #5
 8006228:	6979      	ldr	r1, [r7, #20]
 800622a:	4401      	add	r1, r0
 800622c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006230:	4313      	orrs	r3, r2
 8006232:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d10d      	bne.n	8006256 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6919      	ldr	r1, [r3, #16]
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006252:	460a      	mov	r2, r1
 8006254:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006270:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006274:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	785b      	ldrb	r3, [r3, #1]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d14a      	bne.n	8006338 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ba:	f040 8086 	bne.w	80063ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	7812      	ldrb	r2, [r2, #0]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	7812      	ldrb	r2, [r2, #0]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006304:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006312:	4293      	cmp	r3, r2
 8006314:	d902      	bls.n	800631c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	75fb      	strb	r3, [r7, #23]
          break;
 800631a:	e056      	b.n	80063ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006334:	d0e7      	beq.n	8006306 <USB_EPStopXfer+0x82>
 8006336:	e048      	b.n	80063ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800634c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006350:	d13b      	bne.n	80063ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	7812      	ldrb	r2, [r2, #0]
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	440a      	add	r2, r1
 800636c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006370:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006374:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	7812      	ldrb	r2, [r2, #0]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006398:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3301      	adds	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d902      	bls.n	80063b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	75fb      	strb	r3, [r7, #23]
          break;
 80063ae:	e00c      	b.n	80063ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c8:	d0e7      	beq.n	800639a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063d8:	b480      	push	{r7}
 80063da:	b089      	sub	sp, #36	; 0x24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4611      	mov	r1, r2
 80063e4:	461a      	mov	r2, r3
 80063e6:	460b      	mov	r3, r1
 80063e8:	71fb      	strb	r3, [r7, #7]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d123      	bne.n	8006446 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063fe:	88bb      	ldrh	r3, [r7, #4]
 8006400:	3303      	adds	r3, #3
 8006402:	089b      	lsrs	r3, r3, #2
 8006404:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006406:	2300      	movs	r3, #0
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e018      	b.n	800643e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	031a      	lsls	r2, r3, #12
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	4413      	add	r3, r2
 8006414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006418:	461a      	mov	r2, r3
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	3301      	adds	r3, #1
 8006424:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3301      	adds	r3, #1
 800642a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	3301      	adds	r3, #1
 8006430:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	3301      	adds	r3, #1
 8006436:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	3301      	adds	r3, #1
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	d3e2      	bcc.n	800640c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3724      	adds	r7, #36	; 0x24
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006454:	b480      	push	{r7}
 8006456:	b08b      	sub	sp, #44	; 0x2c
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	089b      	lsrs	r3, r3, #2
 800646e:	b29b      	uxth	r3, r3
 8006470:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800647a:	2300      	movs	r3, #0
 800647c:	623b      	str	r3, [r7, #32]
 800647e:	e014      	b.n	80064aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	601a      	str	r2, [r3, #0]
    pDest++;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	3301      	adds	r3, #1
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	3301      	adds	r3, #1
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	3301      	adds	r3, #1
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	3301      	adds	r3, #1
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	3301      	adds	r3, #1
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	6a3a      	ldr	r2, [r7, #32]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3e6      	bcc.n	8006480 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064b2:	8bfb      	ldrh	r3, [r7, #30]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01e      	beq.n	80064f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c2:	461a      	mov	r2, r3
 80064c4:	f107 0310 	add.w	r3, r7, #16
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	701a      	strb	r2, [r3, #0]
      i++;
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	3301      	adds	r3, #1
 80064e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	3301      	adds	r3, #1
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064ea:	8bfb      	ldrh	r3, [r7, #30]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064f0:	8bfb      	ldrh	r3, [r7, #30]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1ea      	bne.n	80064cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	372c      	adds	r7, #44	; 0x2c
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d12c      	bne.n	800657a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	db12      	blt.n	8006558 <USB_EPSetStall+0x54>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00f      	beq.n	8006558 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006556:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006572:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	e02b      	b.n	80065d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	db12      	blt.n	80065b2 <USB_EPSetStall+0xae>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00f      	beq.n	80065b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d128      	bne.n	800664e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800661a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	791b      	ldrb	r3, [r3, #4]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d003      	beq.n	800662c <USB_EPClearStall+0x4c>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	791b      	ldrb	r3, [r3, #4]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d138      	bne.n	800669e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e027      	b.n	800669e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	440a      	add	r2, r1
 8006664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800666c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	791b      	ldrb	r3, [r3, #4]
 8006672:	2b03      	cmp	r3, #3
 8006674:	d003      	beq.n	800667e <USB_EPClearStall+0x9e>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	791b      	ldrb	r3, [r3, #4]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d10f      	bne.n	800669e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	440a      	add	r2, r1
 8006694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800669c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066e0:	68f9      	ldr	r1, [r7, #12]
 80066e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066e6:	4313      	orrs	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006712:	f023 0303 	bic.w	r3, r3, #3
 8006716:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006726:	f023 0302 	bic.w	r3, r3, #2
 800672a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006754:	f023 0303 	bic.w	r3, r3, #3
 8006758:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006768:	f043 0302 	orr.w	r3, r3, #2
 800676c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4013      	ands	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006794:	68fb      	ldr	r3, [r7, #12]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	4013      	ands	r3, r2
 80067c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	0c1b      	lsrs	r3, r3, #16
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b085      	sub	sp, #20
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	4013      	ands	r3, r2
 80067f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	b29b      	uxth	r3, r3
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	4013      	ands	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006838:	68bb      	ldr	r3, [r7, #8]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006846:	b480      	push	{r7}
 8006848:	b087      	sub	sp, #28
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006868:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	01db      	lsls	r3, r3, #7
 8006878:	b2db      	uxtb	r3, r3
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4013      	ands	r3, r2
 8006892:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006894:	68bb      	ldr	r3, [r7, #8]
}
 8006896:	4618      	mov	r0, r3
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0301 	and.w	r3, r3, #1
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068dc:	f023 0307 	bic.w	r3, r3, #7
 80068e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	460b      	mov	r3, r1
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	333c      	adds	r3, #60	; 0x3c
 800691a:	3304      	adds	r3, #4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4a26      	ldr	r2, [pc, #152]	; (80069bc <USB_EP0_OutStart+0xb8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d90a      	bls.n	800693e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006938:	d101      	bne.n	800693e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	e037      	b.n	80069ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006944:	461a      	mov	r2, r3
 8006946:	2300      	movs	r3, #0
 8006948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800695c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800696c:	f043 0318 	orr.w	r3, r3, #24
 8006970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006980:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006984:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006986:	7afb      	ldrb	r3, [r7, #11]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10f      	bne.n	80069ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	4f54300a 	.word	0x4f54300a

080069c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <USB_CoreReset+0x64>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e01b      	b.n	8006a16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	daf2      	bge.n	80069cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f043 0201 	orr.w	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3301      	adds	r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <USB_CoreReset+0x64>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d901      	bls.n	8006a08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e006      	b.n	8006a16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d0f0      	beq.n	80069f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	00030d40 	.word	0x00030d40

08006a28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a34:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a38:	f003 ff06 	bl	800a848 <USBD_static_malloc>
 8006a3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d109      	bne.n	8006a58 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	32b0      	adds	r2, #176	; 0xb0
 8006a4e:	2100      	movs	r1, #0
 8006a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a54:	2302      	movs	r3, #2
 8006a56:	e0d4      	b.n	8006c02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a58:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f004 fef4 	bl	800b84c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	32b0      	adds	r2, #176	; 0xb0
 8006a6e:	68f9      	ldr	r1, [r7, #12]
 8006a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	32b0      	adds	r2, #176	; 0xb0
 8006a7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	7c1b      	ldrb	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d138      	bne.n	8006b02 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a90:	4b5e      	ldr	r3, [pc, #376]	; (8006c0c <USBD_CDC_Init+0x1e4>)
 8006a92:	7819      	ldrb	r1, [r3, #0]
 8006a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a98:	2202      	movs	r2, #2
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f003 fdb1 	bl	800a602 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006aa0:	4b5a      	ldr	r3, [pc, #360]	; (8006c0c <USBD_CDC_Init+0x1e4>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 020f 	and.w	r2, r3, #15
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	3324      	adds	r3, #36	; 0x24
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006aba:	4b55      	ldr	r3, [pc, #340]	; (8006c10 <USBD_CDC_Init+0x1e8>)
 8006abc:	7819      	ldrb	r1, [r3, #0]
 8006abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f003 fd9c 	bl	800a602 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006aca:	4b51      	ldr	r3, [pc, #324]	; (8006c10 <USBD_CDC_Init+0x1e8>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	f003 020f 	and.w	r2, r3, #15
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ae6:	4b4b      	ldr	r3, [pc, #300]	; (8006c14 <USBD_CDC_Init+0x1ec>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	f003 020f 	and.w	r2, r3, #15
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	3326      	adds	r3, #38	; 0x26
 8006afc:	2210      	movs	r2, #16
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	e035      	b.n	8006b6e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b02:	4b42      	ldr	r3, [pc, #264]	; (8006c0c <USBD_CDC_Init+0x1e4>)
 8006b04:	7819      	ldrb	r1, [r3, #0]
 8006b06:	2340      	movs	r3, #64	; 0x40
 8006b08:	2202      	movs	r2, #2
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f003 fd79 	bl	800a602 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b10:	4b3e      	ldr	r3, [pc, #248]	; (8006c0c <USBD_CDC_Init+0x1e4>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 020f 	and.w	r2, r3, #15
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	3324      	adds	r3, #36	; 0x24
 8006b26:	2201      	movs	r2, #1
 8006b28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b2a:	4b39      	ldr	r3, [pc, #228]	; (8006c10 <USBD_CDC_Init+0x1e8>)
 8006b2c:	7819      	ldrb	r1, [r3, #0]
 8006b2e:	2340      	movs	r3, #64	; 0x40
 8006b30:	2202      	movs	r2, #2
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f003 fd65 	bl	800a602 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b38:	4b35      	ldr	r3, [pc, #212]	; (8006c10 <USBD_CDC_Init+0x1e8>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f003 020f 	and.w	r2, r3, #15
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b50:	2201      	movs	r2, #1
 8006b52:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b54:	4b2f      	ldr	r3, [pc, #188]	; (8006c14 <USBD_CDC_Init+0x1ec>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 020f 	and.w	r2, r3, #15
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	3326      	adds	r3, #38	; 0x26
 8006b6a:	2210      	movs	r2, #16
 8006b6c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b6e:	4b29      	ldr	r3, [pc, #164]	; (8006c14 <USBD_CDC_Init+0x1ec>)
 8006b70:	7819      	ldrb	r1, [r3, #0]
 8006b72:	2308      	movs	r3, #8
 8006b74:	2203      	movs	r2, #3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f003 fd43 	bl	800a602 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b7c:	4b25      	ldr	r3, [pc, #148]	; (8006c14 <USBD_CDC_Init+0x1ec>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	3324      	adds	r3, #36	; 0x24
 8006b92:	2201      	movs	r2, #1
 8006b94:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	33b0      	adds	r3, #176	; 0xb0
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e018      	b.n	8006c02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	7c1b      	ldrb	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bd8:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <USBD_CDC_Init+0x1e8>)
 8006bda:	7819      	ldrb	r1, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f003 fdfa 	bl	800a7e0 <USBD_LL_PrepareReceive>
 8006bec:	e008      	b.n	8006c00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bee:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <USBD_CDC_Init+0x1e8>)
 8006bf0:	7819      	ldrb	r1, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bf8:	2340      	movs	r3, #64	; 0x40
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f003 fdf0 	bl	800a7e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000097 	.word	0x20000097
 8006c10:	20000098 	.word	0x20000098
 8006c14:	20000099 	.word	0x20000099

08006c18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c24:	4b3a      	ldr	r3, [pc, #232]	; (8006d10 <USBD_CDC_DeInit+0xf8>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f003 fd0f 	bl	800a64e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c30:	4b37      	ldr	r3, [pc, #220]	; (8006d10 <USBD_CDC_DeInit+0xf8>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	f003 020f 	and.w	r2, r3, #15
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	440b      	add	r3, r1
 8006c44:	3324      	adds	r3, #36	; 0x24
 8006c46:	2200      	movs	r2, #0
 8006c48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c4a:	4b32      	ldr	r3, [pc, #200]	; (8006d14 <USBD_CDC_DeInit+0xfc>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f003 fcfc 	bl	800a64e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c56:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <USBD_CDC_DeInit+0xfc>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	f003 020f 	and.w	r2, r3, #15
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c6e:	2200      	movs	r2, #0
 8006c70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c72:	4b29      	ldr	r3, [pc, #164]	; (8006d18 <USBD_CDC_DeInit+0x100>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f003 fce8 	bl	800a64e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c7e:	4b26      	ldr	r3, [pc, #152]	; (8006d18 <USBD_CDC_DeInit+0x100>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f003 020f 	and.w	r2, r3, #15
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	440b      	add	r3, r1
 8006c92:	3324      	adds	r3, #36	; 0x24
 8006c94:	2200      	movs	r2, #0
 8006c96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006c98:	4b1f      	ldr	r3, [pc, #124]	; (8006d18 <USBD_CDC_DeInit+0x100>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f003 020f 	and.w	r2, r3, #15
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	3326      	adds	r3, #38	; 0x26
 8006cae:	2200      	movs	r2, #0
 8006cb0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	32b0      	adds	r2, #176	; 0xb0
 8006cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01f      	beq.n	8006d04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	33b0      	adds	r3, #176	; 0xb0
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	32b0      	adds	r2, #176	; 0xb0
 8006ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f003 fdbc 	bl	800a864 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	32b0      	adds	r2, #176	; 0xb0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000097 	.word	0x20000097
 8006d14:	20000098 	.word	0x20000098
 8006d18:	20000099 	.word	0x20000099

08006d1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	32b0      	adds	r2, #176	; 0xb0
 8006d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e0bf      	b.n	8006ecc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d050      	beq.n	8006dfa <USBD_CDC_Setup+0xde>
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	f040 80af 	bne.w	8006ebc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	88db      	ldrh	r3, [r3, #6]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d03a      	beq.n	8006ddc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	b25b      	sxtb	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	da1b      	bge.n	8006da8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	33b0      	adds	r3, #176	; 0xb0
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	88d2      	ldrh	r2, [r2, #6]
 8006d8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	88db      	ldrh	r3, [r3, #6]
 8006d92:	2b07      	cmp	r3, #7
 8006d94:	bf28      	it	cs
 8006d96:	2307      	movcs	r3, #7
 8006d98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	89fa      	ldrh	r2, [r7, #14]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 fd89 	bl	80088b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006da6:	e090      	b.n	8006eca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	785a      	ldrb	r2, [r3, #1]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	88db      	ldrh	r3, [r3, #6]
 8006db6:	2b3f      	cmp	r3, #63	; 0x3f
 8006db8:	d803      	bhi.n	8006dc2 <USBD_CDC_Setup+0xa6>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	88db      	ldrh	r3, [r3, #6]
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	e000      	b.n	8006dc4 <USBD_CDC_Setup+0xa8>
 8006dc2:	2240      	movs	r2, #64	; 0x40
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006dca:	6939      	ldr	r1, [r7, #16]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 fd9b 	bl	8008910 <USBD_CtlPrepareRx>
      break;
 8006dda:	e076      	b.n	8006eca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	33b0      	adds	r3, #176	; 0xb0
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	7850      	ldrb	r0, [r2, #1]
 8006df2:	2200      	movs	r2, #0
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	4798      	blx	r3
      break;
 8006df8:	e067      	b.n	8006eca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b0b      	cmp	r3, #11
 8006e00:	d851      	bhi.n	8006ea6 <USBD_CDC_Setup+0x18a>
 8006e02:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <USBD_CDC_Setup+0xec>)
 8006e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e08:	08006e39 	.word	0x08006e39
 8006e0c:	08006eb5 	.word	0x08006eb5
 8006e10:	08006ea7 	.word	0x08006ea7
 8006e14:	08006ea7 	.word	0x08006ea7
 8006e18:	08006ea7 	.word	0x08006ea7
 8006e1c:	08006ea7 	.word	0x08006ea7
 8006e20:	08006ea7 	.word	0x08006ea7
 8006e24:	08006ea7 	.word	0x08006ea7
 8006e28:	08006ea7 	.word	0x08006ea7
 8006e2c:	08006ea7 	.word	0x08006ea7
 8006e30:	08006e63 	.word	0x08006e63
 8006e34:	08006e8d 	.word	0x08006e8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d107      	bne.n	8006e54 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e44:	f107 030a 	add.w	r3, r7, #10
 8006e48:	2202      	movs	r2, #2
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 fd33 	bl	80088b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e52:	e032      	b.n	8006eba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 fcbd 	bl	80087d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	75fb      	strb	r3, [r7, #23]
          break;
 8006e60:	e02b      	b.n	8006eba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d107      	bne.n	8006e7e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e6e:	f107 030d 	add.w	r3, r7, #13
 8006e72:	2201      	movs	r2, #1
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 fd1e 	bl	80088b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e7c:	e01d      	b.n	8006eba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 fca8 	bl	80087d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e86:	2303      	movs	r3, #3
 8006e88:	75fb      	strb	r3, [r7, #23]
          break;
 8006e8a:	e016      	b.n	8006eba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d00f      	beq.n	8006eb8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 fc9b 	bl	80087d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ea4:	e008      	b.n	8006eb8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fc94 	bl	80087d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb2:	e002      	b.n	8006eba <USBD_CDC_Setup+0x19e>
          break;
 8006eb4:	bf00      	nop
 8006eb6:	e008      	b.n	8006eca <USBD_CDC_Setup+0x1ae>
          break;
 8006eb8:	bf00      	nop
      }
      break;
 8006eba:	e006      	b.n	8006eca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fc89 	bl	80087d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ee6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	32b0      	adds	r2, #176	; 0xb0
 8006ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e065      	b.n	8006fca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	32b0      	adds	r2, #176	; 0xb0
 8006f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	f003 020f 	and.w	r2, r3, #15
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	3318      	adds	r3, #24
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d02f      	beq.n	8006f88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	f003 020f 	and.w	r2, r3, #15
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	4613      	mov	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	440b      	add	r3, r1
 8006f3a:	3318      	adds	r3, #24
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	f003 010f 	and.w	r1, r3, #15
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	460b      	mov	r3, r1
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	440b      	add	r3, r1
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4403      	add	r3, r0
 8006f50:	3348      	adds	r3, #72	; 0x48
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f58:	fb01 f303 	mul.w	r3, r1, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d112      	bne.n	8006f88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	f003 020f 	and.w	r2, r3, #15
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	3318      	adds	r3, #24
 8006f76:	2200      	movs	r2, #0
 8006f78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f7a:	78f9      	ldrb	r1, [r7, #3]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2200      	movs	r2, #0
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f003 fc0c 	bl	800a79e <USBD_LL_Transmit>
 8006f86:	e01f      	b.n	8006fc8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	33b0      	adds	r3, #176	; 0xb0
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d010      	beq.n	8006fc8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	33b0      	adds	r3, #176	; 0xb0
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fc4:	78fa      	ldrb	r2, [r7, #3]
 8006fc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	32b0      	adds	r2, #176	; 0xb0
 8006fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	32b0      	adds	r2, #176	; 0xb0
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007000:	2303      	movs	r3, #3
 8007002:	e01a      	b.n	800703a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f003 fc0a 	bl	800a822 <USBD_LL_GetRxDataSize>
 800700e:	4602      	mov	r2, r0
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	33b0      	adds	r3, #176	; 0xb0
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007034:	4611      	mov	r1, r2
 8007036:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	32b0      	adds	r2, #176	; 0xb0
 8007054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007058:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007060:	2303      	movs	r3, #3
 8007062:	e025      	b.n	80070b0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	33b0      	adds	r3, #176	; 0xb0
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01a      	beq.n	80070ae <USBD_CDC_EP0_RxReady+0x6c>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800707e:	2bff      	cmp	r3, #255	; 0xff
 8007080:	d015      	beq.n	80070ae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	33b0      	adds	r3, #176	; 0xb0
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800709a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070a2:	b292      	uxth	r2, r2
 80070a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	22ff      	movs	r2, #255	; 0xff
 80070aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070c0:	2182      	movs	r1, #130	; 0x82
 80070c2:	4818      	ldr	r0, [pc, #96]	; (8007124 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070c4:	f000 fd4f 	bl	8007b66 <USBD_GetEpDesc>
 80070c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070ca:	2101      	movs	r1, #1
 80070cc:	4815      	ldr	r0, [pc, #84]	; (8007124 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070ce:	f000 fd4a 	bl	8007b66 <USBD_GetEpDesc>
 80070d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070d4:	2181      	movs	r1, #129	; 0x81
 80070d6:	4813      	ldr	r0, [pc, #76]	; (8007124 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070d8:	f000 fd45 	bl	8007b66 <USBD_GetEpDesc>
 80070dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2210      	movs	r2, #16
 80070e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d006      	beq.n	80070fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070f8:	711a      	strb	r2, [r3, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d006      	beq.n	8007112 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800710c:	711a      	strb	r2, [r3, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2243      	movs	r2, #67	; 0x43
 8007116:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007118:	4b02      	ldr	r3, [pc, #8]	; (8007124 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000054 	.word	0x20000054

08007128 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007130:	2182      	movs	r1, #130	; 0x82
 8007132:	4818      	ldr	r0, [pc, #96]	; (8007194 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007134:	f000 fd17 	bl	8007b66 <USBD_GetEpDesc>
 8007138:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800713a:	2101      	movs	r1, #1
 800713c:	4815      	ldr	r0, [pc, #84]	; (8007194 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800713e:	f000 fd12 	bl	8007b66 <USBD_GetEpDesc>
 8007142:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007144:	2181      	movs	r1, #129	; 0x81
 8007146:	4813      	ldr	r0, [pc, #76]	; (8007194 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007148:	f000 fd0d 	bl	8007b66 <USBD_GetEpDesc>
 800714c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2210      	movs	r2, #16
 8007158:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d006      	beq.n	800716e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2200      	movs	r2, #0
 8007164:	711a      	strb	r2, [r3, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f042 0202 	orr.w	r2, r2, #2
 800716c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d006      	beq.n	8007182 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	711a      	strb	r2, [r3, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f042 0202 	orr.w	r2, r2, #2
 8007180:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2243      	movs	r2, #67	; 0x43
 8007186:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007188:	4b02      	ldr	r3, [pc, #8]	; (8007194 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000054 	.word	0x20000054

08007198 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071a0:	2182      	movs	r1, #130	; 0x82
 80071a2:	4818      	ldr	r0, [pc, #96]	; (8007204 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071a4:	f000 fcdf 	bl	8007b66 <USBD_GetEpDesc>
 80071a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071aa:	2101      	movs	r1, #1
 80071ac:	4815      	ldr	r0, [pc, #84]	; (8007204 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071ae:	f000 fcda 	bl	8007b66 <USBD_GetEpDesc>
 80071b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071b4:	2181      	movs	r1, #129	; 0x81
 80071b6:	4813      	ldr	r0, [pc, #76]	; (8007204 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071b8:	f000 fcd5 	bl	8007b66 <USBD_GetEpDesc>
 80071bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2210      	movs	r2, #16
 80071c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d006      	beq.n	80071de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d8:	711a      	strb	r2, [r3, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071ec:	711a      	strb	r2, [r3, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2243      	movs	r2, #67	; 0x43
 80071f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071f8:	4b02      	ldr	r3, [pc, #8]	; (8007204 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20000054 	.word	0x20000054

08007208 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	220a      	movs	r2, #10
 8007214:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007216:	4b03      	ldr	r3, [pc, #12]	; (8007224 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20000010 	.word	0x20000010

08007228 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	e009      	b.n	8007250 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	33b0      	adds	r3, #176	; 0xb0
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	32b0      	adds	r2, #176	; 0xb0
 8007272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007276:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800727e:	2303      	movs	r3, #3
 8007280:	e008      	b.n	8007294 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	371c      	adds	r7, #28
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	32b0      	adds	r2, #176	; 0xb0
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e004      	b.n	80072ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
	...

080072dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	32b0      	adds	r2, #176	; 0xb0
 80072ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80072f4:	2301      	movs	r3, #1
 80072f6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	32b0      	adds	r2, #176	; 0xb0
 8007302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800730a:	2303      	movs	r3, #3
 800730c:	e025      	b.n	800735a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007314:	2b00      	cmp	r3, #0
 8007316:	d11f      	bne.n	8007358 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2201      	movs	r2, #1
 800731c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007320:	4b10      	ldr	r3, [pc, #64]	; (8007364 <USBD_CDC_TransmitPacket+0x88>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	f003 020f 	and.w	r2, r3, #15
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4403      	add	r3, r0
 800733a:	3318      	adds	r3, #24
 800733c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800733e:	4b09      	ldr	r3, [pc, #36]	; (8007364 <USBD_CDC_TransmitPacket+0x88>)
 8007340:	7819      	ldrb	r1, [r3, #0]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f003 fa25 	bl	800a79e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000097 	.word	0x20000097

08007368 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	32b0      	adds	r2, #176	; 0xb0
 800737a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	32b0      	adds	r2, #176	; 0xb0
 800738a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007392:	2303      	movs	r3, #3
 8007394:	e018      	b.n	80073c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	7c1b      	ldrb	r3, [r3, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800739e:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <USBD_CDC_ReceivePacket+0x68>)
 80073a0:	7819      	ldrb	r1, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f003 fa17 	bl	800a7e0 <USBD_LL_PrepareReceive>
 80073b2:	e008      	b.n	80073c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <USBD_CDC_ReceivePacket+0x68>)
 80073b6:	7819      	ldrb	r1, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073be:	2340      	movs	r3, #64	; 0x40
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f003 fa0d 	bl	800a7e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000098 	.word	0x20000098

080073d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e01f      	b.n	800742c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	79fa      	ldrb	r2, [r7, #7]
 800741e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f003 f887 	bl	800a534 <USBD_LL_Init>
 8007426:	4603      	mov	r3, r0
 8007428:	75fb      	strb	r3, [r7, #23]

  return ret;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007448:	2303      	movs	r3, #3
 800744a:	e025      	b.n	8007498 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	32ae      	adds	r2, #174	; 0xae
 800745e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00f      	beq.n	8007488 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	32ae      	adds	r2, #174	; 0xae
 8007472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	f107 020e 	add.w	r2, r7, #14
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
 8007480:	4602      	mov	r2, r0
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f003 f88f 	bl	800a5cc <USBD_LL_Start>
 80074ae:	4603      	mov	r3, r0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d009      	beq.n	80074fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	4611      	mov	r1, r2
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	4611      	mov	r1, r2
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	4618      	mov	r0, r3
 800754e:	f001 f908 	bl	8008762 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007560:	461a      	mov	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	2b02      	cmp	r3, #2
 8007574:	d01a      	beq.n	80075ac <USBD_LL_SetupStage+0x72>
 8007576:	2b02      	cmp	r3, #2
 8007578:	d822      	bhi.n	80075c0 <USBD_LL_SetupStage+0x86>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <USBD_LL_SetupStage+0x4a>
 800757e:	2b01      	cmp	r3, #1
 8007580:	d00a      	beq.n	8007598 <USBD_LL_SetupStage+0x5e>
 8007582:	e01d      	b.n	80075c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fb5f 	bl	8007c50 <USBD_StdDevReq>
 8007592:	4603      	mov	r3, r0
 8007594:	73fb      	strb	r3, [r7, #15]
      break;
 8007596:	e020      	b.n	80075da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fbc7 	bl	8007d34 <USBD_StdItfReq>
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
      break;
 80075aa:	e016      	b.n	80075da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fc29 	bl	8007e0c <USBD_StdEPReq>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73fb      	strb	r3, [r7, #15]
      break;
 80075be:	e00c      	b.n	80075da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f003 f85c 	bl	800a68c <USBD_LL_StallEP>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73fb      	strb	r3, [r7, #15]
      break;
 80075d8:	bf00      	nop
  }

  return ret;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	460b      	mov	r3, r1
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80075f6:	7afb      	ldrb	r3, [r7, #11]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d16e      	bne.n	80076da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800760a:	2b03      	cmp	r3, #3
 800760c:	f040 8098 	bne.w	8007740 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	429a      	cmp	r2, r3
 800761a:	d913      	bls.n	8007644 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	1ad2      	subs	r2, r2, r3
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	4293      	cmp	r3, r2
 8007634:	bf28      	it	cs
 8007636:	4613      	movcs	r3, r2
 8007638:	461a      	mov	r2, r3
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f001 f984 	bl	800894a <USBD_CtlContinueRx>
 8007642:	e07d      	b.n	8007740 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800764a:	f003 031f 	and.w	r3, r3, #31
 800764e:	2b02      	cmp	r3, #2
 8007650:	d014      	beq.n	800767c <USBD_LL_DataOutStage+0x98>
 8007652:	2b02      	cmp	r3, #2
 8007654:	d81d      	bhi.n	8007692 <USBD_LL_DataOutStage+0xae>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <USBD_LL_DataOutStage+0x7c>
 800765a:	2b01      	cmp	r3, #1
 800765c:	d003      	beq.n	8007666 <USBD_LL_DataOutStage+0x82>
 800765e:	e018      	b.n	8007692 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	75bb      	strb	r3, [r7, #22]
            break;
 8007664:	e018      	b.n	8007698 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800766c:	b2db      	uxtb	r3, r3
 800766e:	4619      	mov	r1, r3
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 fa5e 	bl	8007b32 <USBD_CoreFindIF>
 8007676:	4603      	mov	r3, r0
 8007678:	75bb      	strb	r3, [r7, #22]
            break;
 800767a:	e00d      	b.n	8007698 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007682:	b2db      	uxtb	r3, r3
 8007684:	4619      	mov	r1, r3
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fa60 	bl	8007b4c <USBD_CoreFindEP>
 800768c:	4603      	mov	r3, r0
 800768e:	75bb      	strb	r3, [r7, #22]
            break;
 8007690:	e002      	b.n	8007698 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	75bb      	strb	r3, [r7, #22]
            break;
 8007696:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007698:	7dbb      	ldrb	r3, [r7, #22]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d119      	bne.n	80076d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d113      	bne.n	80076d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076aa:	7dba      	ldrb	r2, [r7, #22]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	32ae      	adds	r2, #174	; 0xae
 80076b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00b      	beq.n	80076d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076ba:	7dba      	ldrb	r2, [r7, #22]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80076c2:	7dba      	ldrb	r2, [r7, #22]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	32ae      	adds	r2, #174	; 0xae
 80076c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f001 f94a 	bl	800896c <USBD_CtlSendStatus>
 80076d8:	e032      	b.n	8007740 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	4619      	mov	r1, r3
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fa31 	bl	8007b4c <USBD_CoreFindEP>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076ee:	7dbb      	ldrb	r3, [r7, #22]
 80076f0:	2bff      	cmp	r3, #255	; 0xff
 80076f2:	d025      	beq.n	8007740 <USBD_LL_DataOutStage+0x15c>
 80076f4:	7dbb      	ldrb	r3, [r7, #22]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d122      	bne.n	8007740 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b03      	cmp	r3, #3
 8007704:	d117      	bne.n	8007736 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007706:	7dba      	ldrb	r2, [r7, #22]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	32ae      	adds	r2, #174	; 0xae
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00f      	beq.n	8007736 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007716:	7dba      	ldrb	r2, [r7, #22]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800771e:	7dba      	ldrb	r2, [r7, #22]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	32ae      	adds	r2, #174	; 0xae
 8007724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	7afa      	ldrb	r2, [r7, #11]
 800772c:	4611      	mov	r1, r2
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	4798      	blx	r3
 8007732:	4603      	mov	r3, r0
 8007734:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	e000      	b.n	8007742 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b086      	sub	sp, #24
 800774e:	af00      	add	r7, sp, #0
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	460b      	mov	r3, r1
 8007754:	607a      	str	r2, [r7, #4]
 8007756:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007758:	7afb      	ldrb	r3, [r7, #11]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d16f      	bne.n	800783e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3314      	adds	r3, #20
 8007762:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800776a:	2b02      	cmp	r3, #2
 800776c:	d15a      	bne.n	8007824 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	429a      	cmp	r2, r3
 8007778:	d914      	bls.n	80077a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	461a      	mov	r2, r3
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f001 f8ac 	bl	80088ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007796:	2300      	movs	r3, #0
 8007798:	2200      	movs	r2, #0
 800779a:	2100      	movs	r1, #0
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f003 f81f 	bl	800a7e0 <USBD_LL_PrepareReceive>
 80077a2:	e03f      	b.n	8007824 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d11c      	bne.n	80077ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d316      	bcc.n	80077ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d20f      	bcs.n	80077ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077ca:	2200      	movs	r2, #0
 80077cc:	2100      	movs	r1, #0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f001 f88d 	bl	80088ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077dc:	2300      	movs	r3, #0
 80077de:	2200      	movs	r2, #0
 80077e0:	2100      	movs	r1, #0
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f002 fffc 	bl	800a7e0 <USBD_LL_PrepareReceive>
 80077e8:	e01c      	b.n	8007824 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d10f      	bne.n	8007816 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007816:	2180      	movs	r1, #128	; 0x80
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f002 ff37 	bl	800a68c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f001 f8b7 	bl	8008992 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d03a      	beq.n	80078a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f7ff fe42 	bl	80074b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800783c:	e032      	b.n	80078a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007844:	b2db      	uxtb	r3, r3
 8007846:	4619      	mov	r1, r3
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 f97f 	bl	8007b4c <USBD_CoreFindEP>
 800784e:	4603      	mov	r3, r0
 8007850:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	2bff      	cmp	r3, #255	; 0xff
 8007856:	d025      	beq.n	80078a4 <USBD_LL_DataInStage+0x15a>
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d122      	bne.n	80078a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b03      	cmp	r3, #3
 8007868:	d11c      	bne.n	80078a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800786a:	7dfa      	ldrb	r2, [r7, #23]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	32ae      	adds	r2, #174	; 0xae
 8007870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d014      	beq.n	80078a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800787a:	7dfa      	ldrb	r2, [r7, #23]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007882:	7dfa      	ldrb	r2, [r7, #23]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	32ae      	adds	r2, #174	; 0xae
 8007888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	7afa      	ldrb	r2, [r7, #11]
 8007890:	4611      	mov	r1, r2
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	4798      	blx	r3
 8007896:	4603      	mov	r3, r0
 8007898:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800789a:	7dbb      	ldrb	r3, [r7, #22]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80078a0:	7dbb      	ldrb	r3, [r7, #22]
 80078a2:	e000      	b.n	80078a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d014      	beq.n	8007914 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00e      	beq.n	8007914 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6852      	ldr	r2, [r2, #4]
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	4611      	mov	r1, r2
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007914:	2340      	movs	r3, #64	; 0x40
 8007916:	2200      	movs	r2, #0
 8007918:	2100      	movs	r1, #0
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f002 fe71 	bl	800a602 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2240      	movs	r2, #64	; 0x40
 800792c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007930:	2340      	movs	r3, #64	; 0x40
 8007932:	2200      	movs	r2, #0
 8007934:	2180      	movs	r1, #128	; 0x80
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f002 fe63 	bl	800a602 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2240      	movs	r2, #64	; 0x40
 8007946:	621a      	str	r2, [r3, #32]

  return ret;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007980:	b2da      	uxtb	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2204      	movs	r2, #4
 800798c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d106      	bne.n	80079c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d110      	bne.n	8007a04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	32ae      	adds	r2, #174	; 0xae
 8007a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e01c      	b.n	8007a6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d115      	bne.n	8007a68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	32ae      	adds	r2, #174	; 0xae
 8007a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	32ae      	adds	r2, #174	; 0xae
 8007a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	78fa      	ldrb	r2, [r7, #3]
 8007a62:	4611      	mov	r1, r2
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b082      	sub	sp, #8
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	32ae      	adds	r2, #174	; 0xae
 8007a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e01c      	b.n	8007ace <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d115      	bne.n	8007acc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	32ae      	adds	r2, #174	; 0xae
 8007aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	32ae      	adds	r2, #174	; 0xae
 8007abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	78fa      	ldrb	r2, [r7, #3]
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00e      	beq.n	8007b28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6852      	ldr	r2, [r2, #4]
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	4611      	mov	r1, r2
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	885b      	ldrh	r3, [r3, #2]
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d920      	bls.n	8007bd0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b96:	e013      	b.n	8007bc0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b98:	f107 030a 	add.w	r3, r7, #10
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6978      	ldr	r0, [r7, #20]
 8007ba0:	f000 f81b 	bl	8007bda <USBD_GetNextDesc>
 8007ba4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	785b      	ldrb	r3, [r3, #1]
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	d108      	bne.n	8007bc0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	789b      	ldrb	r3, [r3, #2]
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d008      	beq.n	8007bce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	885b      	ldrh	r3, [r3, #2]
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	897b      	ldrh	r3, [r7, #10]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d8e5      	bhi.n	8007b98 <USBD_GetEpDesc+0x32>
 8007bcc:	e000      	b.n	8007bd0 <USBD_GetEpDesc+0x6a>
          break;
 8007bce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007bd0:	693b      	ldr	r3, [r7, #16]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	881a      	ldrh	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	4413      	add	r3, r2
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4413      	add	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c06:	68fb      	ldr	r3, [r7, #12]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c32:	8a3b      	ldrh	r3, [r7, #16]
 8007c34:	021b      	lsls	r3, r3, #8
 8007c36:	b21a      	sxth	r2, r3
 8007c38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	b21b      	sxth	r3, r3
 8007c40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c42:	89fb      	ldrh	r3, [r7, #14]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c66:	2b40      	cmp	r3, #64	; 0x40
 8007c68:	d005      	beq.n	8007c76 <USBD_StdDevReq+0x26>
 8007c6a:	2b40      	cmp	r3, #64	; 0x40
 8007c6c:	d857      	bhi.n	8007d1e <USBD_StdDevReq+0xce>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00f      	beq.n	8007c92 <USBD_StdDevReq+0x42>
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	d153      	bne.n	8007d1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	32ae      	adds	r2, #174	; 0xae
 8007c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c90:	e04a      	b.n	8007d28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	2b09      	cmp	r3, #9
 8007c98:	d83b      	bhi.n	8007d12 <USBD_StdDevReq+0xc2>
 8007c9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <USBD_StdDevReq+0x50>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cf5 	.word	0x08007cf5
 8007ca4:	08007d09 	.word	0x08007d09
 8007ca8:	08007d13 	.word	0x08007d13
 8007cac:	08007cff 	.word	0x08007cff
 8007cb0:	08007d13 	.word	0x08007d13
 8007cb4:	08007cd3 	.word	0x08007cd3
 8007cb8:	08007cc9 	.word	0x08007cc9
 8007cbc:	08007d13 	.word	0x08007d13
 8007cc0:	08007ceb 	.word	0x08007ceb
 8007cc4:	08007cdd 	.word	0x08007cdd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa3c 	bl	8008148 <USBD_GetDescriptor>
          break;
 8007cd0:	e024      	b.n	8007d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fba1 	bl	800841c <USBD_SetAddress>
          break;
 8007cda:	e01f      	b.n	8007d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fbe0 	bl	80084a4 <USBD_SetConfig>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73fb      	strb	r3, [r7, #15]
          break;
 8007ce8:	e018      	b.n	8007d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fc83 	bl	80085f8 <USBD_GetConfig>
          break;
 8007cf2:	e013      	b.n	8007d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fcb4 	bl	8008664 <USBD_GetStatus>
          break;
 8007cfc:	e00e      	b.n	8007d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fce3 	bl	80086cc <USBD_SetFeature>
          break;
 8007d06:	e009      	b.n	8007d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fd07 	bl	800871e <USBD_ClrFeature>
          break;
 8007d10:	e004      	b.n	8007d1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fd5e 	bl	80087d6 <USBD_CtlError>
          break;
 8007d1a:	bf00      	nop
      }
      break;
 8007d1c:	e004      	b.n	8007d28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fd58 	bl	80087d6 <USBD_CtlError>
      break;
 8007d26:	bf00      	nop
  }

  return ret;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop

08007d34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d4a:	2b40      	cmp	r3, #64	; 0x40
 8007d4c:	d005      	beq.n	8007d5a <USBD_StdItfReq+0x26>
 8007d4e:	2b40      	cmp	r3, #64	; 0x40
 8007d50:	d852      	bhi.n	8007df8 <USBD_StdItfReq+0xc4>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <USBD_StdItfReq+0x26>
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	d14e      	bne.n	8007df8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d840      	bhi.n	8007dea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	889b      	ldrh	r3, [r3, #4]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d836      	bhi.n	8007de0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	889b      	ldrh	r3, [r3, #4]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fed9 	bl	8007b32 <USBD_CoreFindIF>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2bff      	cmp	r3, #255	; 0xff
 8007d88:	d01d      	beq.n	8007dc6 <USBD_StdItfReq+0x92>
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d11a      	bne.n	8007dc6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d90:	7bba      	ldrb	r2, [r7, #14]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	32ae      	adds	r2, #174	; 0xae
 8007d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00f      	beq.n	8007dc0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007da0:	7bba      	ldrb	r2, [r7, #14]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007da8:	7bba      	ldrb	r2, [r7, #14]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	32ae      	adds	r2, #174	; 0xae
 8007dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4798      	blx	r3
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007dbe:	e004      	b.n	8007dca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007dc4:	e001      	b.n	8007dca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	88db      	ldrh	r3, [r3, #6]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d110      	bne.n	8007df4 <USBD_StdItfReq+0xc0>
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10d      	bne.n	8007df4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fdc7 	bl	800896c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dde:	e009      	b.n	8007df4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fcf7 	bl	80087d6 <USBD_CtlError>
          break;
 8007de8:	e004      	b.n	8007df4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fcf2 	bl	80087d6 <USBD_CtlError>
          break;
 8007df2:	e000      	b.n	8007df6 <USBD_StdItfReq+0xc2>
          break;
 8007df4:	bf00      	nop
      }
      break;
 8007df6:	e004      	b.n	8007e02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fceb 	bl	80087d6 <USBD_CtlError>
      break;
 8007e00:	bf00      	nop
  }

  return ret;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	889b      	ldrh	r3, [r3, #4]
 8007e1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e28:	2b40      	cmp	r3, #64	; 0x40
 8007e2a:	d007      	beq.n	8007e3c <USBD_StdEPReq+0x30>
 8007e2c:	2b40      	cmp	r3, #64	; 0x40
 8007e2e:	f200 817f 	bhi.w	8008130 <USBD_StdEPReq+0x324>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d02a      	beq.n	8007e8c <USBD_StdEPReq+0x80>
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	f040 817a 	bne.w	8008130 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff fe83 	bl	8007b4c <USBD_CoreFindEP>
 8007e46:	4603      	mov	r3, r0
 8007e48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e4a:	7b7b      	ldrb	r3, [r7, #13]
 8007e4c:	2bff      	cmp	r3, #255	; 0xff
 8007e4e:	f000 8174 	beq.w	800813a <USBD_StdEPReq+0x32e>
 8007e52:	7b7b      	ldrb	r3, [r7, #13]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f040 8170 	bne.w	800813a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e5a:	7b7a      	ldrb	r2, [r7, #13]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e62:	7b7a      	ldrb	r2, [r7, #13]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	32ae      	adds	r2, #174	; 0xae
 8007e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 8163 	beq.w	800813a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e74:	7b7a      	ldrb	r2, [r7, #13]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	32ae      	adds	r2, #174	; 0xae
 8007e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	4798      	blx	r3
 8007e86:	4603      	mov	r3, r0
 8007e88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e8a:	e156      	b.n	800813a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d008      	beq.n	8007ea6 <USBD_StdEPReq+0x9a>
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	f300 8145 	bgt.w	8008124 <USBD_StdEPReq+0x318>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 809b 	beq.w	8007fd6 <USBD_StdEPReq+0x1ca>
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d03c      	beq.n	8007f1e <USBD_StdEPReq+0x112>
 8007ea4:	e13e      	b.n	8008124 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d002      	beq.n	8007eb8 <USBD_StdEPReq+0xac>
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d016      	beq.n	8007ee4 <USBD_StdEPReq+0xd8>
 8007eb6:	e02c      	b.n	8007f12 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00d      	beq.n	8007eda <USBD_StdEPReq+0xce>
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b80      	cmp	r3, #128	; 0x80
 8007ec2:	d00a      	beq.n	8007eda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f002 fbdf 	bl	800a68c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ece:	2180      	movs	r1, #128	; 0x80
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f002 fbdb 	bl	800a68c <USBD_LL_StallEP>
 8007ed6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ed8:	e020      	b.n	8007f1c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fc7a 	bl	80087d6 <USBD_CtlError>
              break;
 8007ee2:	e01b      	b.n	8007f1c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	885b      	ldrh	r3, [r3, #2]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10e      	bne.n	8007f0a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00b      	beq.n	8007f0a <USBD_StdEPReq+0xfe>
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	2b80      	cmp	r3, #128	; 0x80
 8007ef6:	d008      	beq.n	8007f0a <USBD_StdEPReq+0xfe>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	88db      	ldrh	r3, [r3, #6]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f002 fbc1 	bl	800a68c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fd2e 	bl	800896c <USBD_CtlSendStatus>

              break;
 8007f10:	e004      	b.n	8007f1c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fc5e 	bl	80087d6 <USBD_CtlError>
              break;
 8007f1a:	bf00      	nop
          }
          break;
 8007f1c:	e107      	b.n	800812e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d002      	beq.n	8007f30 <USBD_StdEPReq+0x124>
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d016      	beq.n	8007f5c <USBD_StdEPReq+0x150>
 8007f2e:	e04b      	b.n	8007fc8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00d      	beq.n	8007f52 <USBD_StdEPReq+0x146>
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	d00a      	beq.n	8007f52 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f002 fba3 	bl	800a68c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f46:	2180      	movs	r1, #128	; 0x80
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f002 fb9f 	bl	800a68c <USBD_LL_StallEP>
 8007f4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f50:	e040      	b.n	8007fd4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fc3e 	bl	80087d6 <USBD_CtlError>
              break;
 8007f5a:	e03b      	b.n	8007fd4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	885b      	ldrh	r3, [r3, #2]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d136      	bne.n	8007fd2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d004      	beq.n	8007f78 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f002 fba9 	bl	800a6ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fcf7 	bl	800896c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff fde2 	bl	8007b4c <USBD_CoreFindEP>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f8c:	7b7b      	ldrb	r3, [r7, #13]
 8007f8e:	2bff      	cmp	r3, #255	; 0xff
 8007f90:	d01f      	beq.n	8007fd2 <USBD_StdEPReq+0x1c6>
 8007f92:	7b7b      	ldrb	r3, [r7, #13]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11c      	bne.n	8007fd2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f98:	7b7a      	ldrb	r2, [r7, #13]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007fa0:	7b7a      	ldrb	r2, [r7, #13]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	32ae      	adds	r2, #174	; 0xae
 8007fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d010      	beq.n	8007fd2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007fb0:	7b7a      	ldrb	r2, [r7, #13]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	32ae      	adds	r2, #174	; 0xae
 8007fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007fc6:	e004      	b.n	8007fd2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fc03 	bl	80087d6 <USBD_CtlError>
              break;
 8007fd0:	e000      	b.n	8007fd4 <USBD_StdEPReq+0x1c8>
              break;
 8007fd2:	bf00      	nop
          }
          break;
 8007fd4:	e0ab      	b.n	800812e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d002      	beq.n	8007fe8 <USBD_StdEPReq+0x1dc>
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d032      	beq.n	800804c <USBD_StdEPReq+0x240>
 8007fe6:	e097      	b.n	8008118 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <USBD_StdEPReq+0x1f2>
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b80      	cmp	r3, #128	; 0x80
 8007ff2:	d004      	beq.n	8007ffe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fbed 	bl	80087d6 <USBD_CtlError>
                break;
 8007ffc:	e091      	b.n	8008122 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008002:	2b00      	cmp	r3, #0
 8008004:	da0b      	bge.n	800801e <USBD_StdEPReq+0x212>
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	3310      	adds	r3, #16
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	3304      	adds	r3, #4
 800801c:	e00b      	b.n	8008036 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	4413      	add	r3, r2
 8008034:	3304      	adds	r3, #4
 8008036:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2202      	movs	r2, #2
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fc37 	bl	80088b8 <USBD_CtlSendData>
              break;
 800804a:	e06a      	b.n	8008122 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800804c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008050:	2b00      	cmp	r3, #0
 8008052:	da11      	bge.n	8008078 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008054:	7bbb      	ldrb	r3, [r7, #14]
 8008056:	f003 020f 	and.w	r2, r3, #15
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	4613      	mov	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	3324      	adds	r3, #36	; 0x24
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d117      	bne.n	800809e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fbb0 	bl	80087d6 <USBD_CtlError>
                  break;
 8008076:	e054      	b.n	8008122 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	f003 020f 	and.w	r2, r3, #15
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fb9d 	bl	80087d6 <USBD_CtlError>
                  break;
 800809c:	e041      	b.n	8008122 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800809e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	da0b      	bge.n	80080be <USBD_StdEPReq+0x2b2>
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	3310      	adds	r3, #16
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4413      	add	r3, r2
 80080ba:	3304      	adds	r3, #4
 80080bc:	e00b      	b.n	80080d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	4413      	add	r3, r2
 80080d4:	3304      	adds	r3, #4
 80080d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <USBD_StdEPReq+0x2d8>
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	2b80      	cmp	r3, #128	; 0x80
 80080e2:	d103      	bne.n	80080ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	e00e      	b.n	800810a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f002 fb09 	bl	800a708 <USBD_LL_IsStallEP>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2201      	movs	r2, #1
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	e002      	b.n	800810a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2202      	movs	r2, #2
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fbd1 	bl	80088b8 <USBD_CtlSendData>
              break;
 8008116:	e004      	b.n	8008122 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fb5b 	bl	80087d6 <USBD_CtlError>
              break;
 8008120:	bf00      	nop
          }
          break;
 8008122:	e004      	b.n	800812e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fb55 	bl	80087d6 <USBD_CtlError>
          break;
 800812c:	bf00      	nop
      }
      break;
 800812e:	e005      	b.n	800813c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fb4f 	bl	80087d6 <USBD_CtlError>
      break;
 8008138:	e000      	b.n	800813c <USBD_StdEPReq+0x330>
      break;
 800813a:	bf00      	nop
  }

  return ret;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	885b      	ldrh	r3, [r3, #2]
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	b29b      	uxth	r3, r3
 8008166:	3b01      	subs	r3, #1
 8008168:	2b06      	cmp	r3, #6
 800816a:	f200 8128 	bhi.w	80083be <USBD_GetDescriptor+0x276>
 800816e:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <USBD_GetDescriptor+0x2c>)
 8008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008174:	08008191 	.word	0x08008191
 8008178:	080081a9 	.word	0x080081a9
 800817c:	080081e9 	.word	0x080081e9
 8008180:	080083bf 	.word	0x080083bf
 8008184:	080083bf 	.word	0x080083bf
 8008188:	0800835f 	.word	0x0800835f
 800818c:	0800838b 	.word	0x0800838b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7c12      	ldrb	r2, [r2, #16]
 800819c:	f107 0108 	add.w	r1, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
      break;
 80081a6:	e112      	b.n	80083ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	7c1b      	ldrb	r3, [r3, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10d      	bne.n	80081cc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	f107 0208 	add.w	r2, r7, #8
 80081bc:	4610      	mov	r0, r2
 80081be:	4798      	blx	r3
 80081c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3301      	adds	r3, #1
 80081c6:	2202      	movs	r2, #2
 80081c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081ca:	e100      	b.n	80083ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	f107 0208 	add.w	r2, r7, #8
 80081d8:	4610      	mov	r0, r2
 80081da:	4798      	blx	r3
 80081dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	2202      	movs	r2, #2
 80081e4:	701a      	strb	r2, [r3, #0]
      break;
 80081e6:	e0f2      	b.n	80083ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	885b      	ldrh	r3, [r3, #2]
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b05      	cmp	r3, #5
 80081f0:	f200 80ac 	bhi.w	800834c <USBD_GetDescriptor+0x204>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <USBD_GetDescriptor+0xb4>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	08008215 	.word	0x08008215
 8008200:	08008249 	.word	0x08008249
 8008204:	0800827d 	.word	0x0800827d
 8008208:	080082b1 	.word	0x080082b1
 800820c:	080082e5 	.word	0x080082e5
 8008210:	08008319 	.word	0x08008319
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7c12      	ldrb	r2, [r2, #16]
 800822c:	f107 0108 	add.w	r1, r7, #8
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
 8008234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008236:	e091      	b.n	800835c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 facb 	bl	80087d6 <USBD_CtlError>
            err++;
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	3301      	adds	r3, #1
 8008244:	72fb      	strb	r3, [r7, #11]
          break;
 8008246:	e089      	b.n	800835c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	7c12      	ldrb	r2, [r2, #16]
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	4610      	mov	r0, r2
 8008266:	4798      	blx	r3
 8008268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826a:	e077      	b.n	800835c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fab1 	bl	80087d6 <USBD_CtlError>
            err++;
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	3301      	adds	r3, #1
 8008278:	72fb      	strb	r3, [r7, #11]
          break;
 800827a:	e06f      	b.n	800835c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	7c12      	ldrb	r2, [r2, #16]
 8008294:	f107 0108 	add.w	r1, r7, #8
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800829e:	e05d      	b.n	800835c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa97 	bl	80087d6 <USBD_CtlError>
            err++;
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	3301      	adds	r3, #1
 80082ac:	72fb      	strb	r3, [r7, #11]
          break;
 80082ae:	e055      	b.n	800835c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00b      	beq.n	80082d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	7c12      	ldrb	r2, [r2, #16]
 80082c8:	f107 0108 	add.w	r1, r7, #8
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082d2:	e043      	b.n	800835c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fa7d 	bl	80087d6 <USBD_CtlError>
            err++;
 80082dc:	7afb      	ldrb	r3, [r7, #11]
 80082de:	3301      	adds	r3, #1
 80082e0:	72fb      	strb	r3, [r7, #11]
          break;
 80082e2:	e03b      	b.n	800835c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	7c12      	ldrb	r2, [r2, #16]
 80082fc:	f107 0108 	add.w	r1, r7, #8
 8008300:	4610      	mov	r0, r2
 8008302:	4798      	blx	r3
 8008304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008306:	e029      	b.n	800835c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa63 	bl	80087d6 <USBD_CtlError>
            err++;
 8008310:	7afb      	ldrb	r3, [r7, #11]
 8008312:	3301      	adds	r3, #1
 8008314:	72fb      	strb	r3, [r7, #11]
          break;
 8008316:	e021      	b.n	800835c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	7c12      	ldrb	r2, [r2, #16]
 8008330:	f107 0108 	add.w	r1, r7, #8
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800833a:	e00f      	b.n	800835c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fa49 	bl	80087d6 <USBD_CtlError>
            err++;
 8008344:	7afb      	ldrb	r3, [r7, #11]
 8008346:	3301      	adds	r3, #1
 8008348:	72fb      	strb	r3, [r7, #11]
          break;
 800834a:	e007      	b.n	800835c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa41 	bl	80087d6 <USBD_CtlError>
          err++;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	3301      	adds	r3, #1
 8008358:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800835a:	bf00      	nop
      }
      break;
 800835c:	e037      	b.n	80083ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	7c1b      	ldrb	r3, [r3, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d109      	bne.n	800837a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836e:	f107 0208 	add.w	r2, r7, #8
 8008372:	4610      	mov	r0, r2
 8008374:	4798      	blx	r3
 8008376:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008378:	e029      	b.n	80083ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fa2a 	bl	80087d6 <USBD_CtlError>
        err++;
 8008382:	7afb      	ldrb	r3, [r7, #11]
 8008384:	3301      	adds	r3, #1
 8008386:	72fb      	strb	r3, [r7, #11]
      break;
 8008388:	e021      	b.n	80083ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	7c1b      	ldrb	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10d      	bne.n	80083ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839a:	f107 0208 	add.w	r2, r7, #8
 800839e:	4610      	mov	r0, r2
 80083a0:	4798      	blx	r3
 80083a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3301      	adds	r3, #1
 80083a8:	2207      	movs	r2, #7
 80083aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083ac:	e00f      	b.n	80083ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fa10 	bl	80087d6 <USBD_CtlError>
        err++;
 80083b6:	7afb      	ldrb	r3, [r7, #11]
 80083b8:	3301      	adds	r3, #1
 80083ba:	72fb      	strb	r3, [r7, #11]
      break;
 80083bc:	e007      	b.n	80083ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa08 	bl	80087d6 <USBD_CtlError>
      err++;
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	3301      	adds	r3, #1
 80083ca:	72fb      	strb	r3, [r7, #11]
      break;
 80083cc:	bf00      	nop
  }

  if (err != 0U)
 80083ce:	7afb      	ldrb	r3, [r7, #11]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d11e      	bne.n	8008412 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	88db      	ldrh	r3, [r3, #6]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d016      	beq.n	800840a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80083dc:	893b      	ldrh	r3, [r7, #8]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00e      	beq.n	8008400 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	88da      	ldrh	r2, [r3, #6]
 80083e6:	893b      	ldrh	r3, [r7, #8]
 80083e8:	4293      	cmp	r3, r2
 80083ea:	bf28      	it	cs
 80083ec:	4613      	movcs	r3, r2
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083f2:	893b      	ldrh	r3, [r7, #8]
 80083f4:	461a      	mov	r2, r3
 80083f6:	68f9      	ldr	r1, [r7, #12]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fa5d 	bl	80088b8 <USBD_CtlSendData>
 80083fe:	e009      	b.n	8008414 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f9e7 	bl	80087d6 <USBD_CtlError>
 8008408:	e004      	b.n	8008414 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 faae 	bl	800896c <USBD_CtlSendStatus>
 8008410:	e000      	b.n	8008414 <USBD_GetDescriptor+0x2cc>
    return;
 8008412:	bf00      	nop
  }
}
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop

0800841c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	889b      	ldrh	r3, [r3, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d131      	bne.n	8008492 <USBD_SetAddress+0x76>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	88db      	ldrh	r3, [r3, #6]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d12d      	bne.n	8008492 <USBD_SetAddress+0x76>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	885b      	ldrh	r3, [r3, #2]
 800843a:	2b7f      	cmp	r3, #127	; 0x7f
 800843c:	d829      	bhi.n	8008492 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	885b      	ldrh	r3, [r3, #2]
 8008442:	b2db      	uxtb	r3, r3
 8008444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008448:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d104      	bne.n	8008460 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f9bc 	bl	80087d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800845e:	e01d      	b.n	800849c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	7bfa      	ldrb	r2, [r7, #15]
 8008464:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f002 f977 	bl	800a760 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa7a 	bl	800896c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d004      	beq.n	8008488 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2202      	movs	r2, #2
 8008482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008486:	e009      	b.n	800849c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008490:	e004      	b.n	800849c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f99e 	bl	80087d6 <USBD_CtlError>
  }
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	885b      	ldrh	r3, [r3, #2]
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	4b4e      	ldr	r3, [pc, #312]	; (80085f4 <USBD_SetConfig+0x150>)
 80084ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084bc:	4b4d      	ldr	r3, [pc, #308]	; (80085f4 <USBD_SetConfig+0x150>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d905      	bls.n	80084d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f985 	bl	80087d6 <USBD_CtlError>
    return USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e08c      	b.n	80085ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d002      	beq.n	80084e2 <USBD_SetConfig+0x3e>
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d029      	beq.n	8008534 <USBD_SetConfig+0x90>
 80084e0:	e075      	b.n	80085ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084e2:	4b44      	ldr	r3, [pc, #272]	; (80085f4 <USBD_SetConfig+0x150>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d020      	beq.n	800852c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80084ea:	4b42      	ldr	r3, [pc, #264]	; (80085f4 <USBD_SetConfig+0x150>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084f4:	4b3f      	ldr	r3, [pc, #252]	; (80085f4 <USBD_SetConfig+0x150>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fe ffe7 	bl	80074ce <USBD_SetClassConfig>
 8008500:	4603      	mov	r3, r0
 8008502:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d008      	beq.n	800851c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f962 	bl	80087d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800851a:	e065      	b.n	80085e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fa25 	bl	800896c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2203      	movs	r2, #3
 8008526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800852a:	e05d      	b.n	80085e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fa1d 	bl	800896c <USBD_CtlSendStatus>
      break;
 8008532:	e059      	b.n	80085e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008534:	4b2f      	ldr	r3, [pc, #188]	; (80085f4 <USBD_SetConfig+0x150>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d112      	bne.n	8008562 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008544:	4b2b      	ldr	r3, [pc, #172]	; (80085f4 <USBD_SetConfig+0x150>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	461a      	mov	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800854e:	4b29      	ldr	r3, [pc, #164]	; (80085f4 <USBD_SetConfig+0x150>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7fe ffd6 	bl	8007506 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa06 	bl	800896c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008560:	e042      	b.n	80085e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008562:	4b24      	ldr	r3, [pc, #144]	; (80085f4 <USBD_SetConfig+0x150>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	429a      	cmp	r2, r3
 800856e:	d02a      	beq.n	80085c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7fe ffc4 	bl	8007506 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800857e:	4b1d      	ldr	r3, [pc, #116]	; (80085f4 <USBD_SetConfig+0x150>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008588:	4b1a      	ldr	r3, [pc, #104]	; (80085f4 <USBD_SetConfig+0x150>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fe ff9d 	bl	80074ce <USBD_SetClassConfig>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00f      	beq.n	80085be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f918 	bl	80087d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7fe ffa9 	bl	8007506 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085bc:	e014      	b.n	80085e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f9d4 	bl	800896c <USBD_CtlSendStatus>
      break;
 80085c4:	e010      	b.n	80085e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f9d0 	bl	800896c <USBD_CtlSendStatus>
      break;
 80085cc:	e00c      	b.n	80085e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f900 	bl	80087d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085d6:	4b07      	ldr	r3, [pc, #28]	; (80085f4 <USBD_SetConfig+0x150>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7fe ff92 	bl	8007506 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085e2:	2303      	movs	r3, #3
 80085e4:	73fb      	strb	r3, [r7, #15]
      break;
 80085e6:	bf00      	nop
  }

  return ret;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20000d78 	.word	0x20000d78

080085f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	88db      	ldrh	r3, [r3, #6]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d004      	beq.n	8008614 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f8e2 	bl	80087d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008612:	e023      	b.n	800865c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b02      	cmp	r3, #2
 800861e:	dc02      	bgt.n	8008626 <USBD_GetConfig+0x2e>
 8008620:	2b00      	cmp	r3, #0
 8008622:	dc03      	bgt.n	800862c <USBD_GetConfig+0x34>
 8008624:	e015      	b.n	8008652 <USBD_GetConfig+0x5a>
 8008626:	2b03      	cmp	r3, #3
 8008628:	d00b      	beq.n	8008642 <USBD_GetConfig+0x4a>
 800862a:	e012      	b.n	8008652 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3308      	adds	r3, #8
 8008636:	2201      	movs	r2, #1
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f93c 	bl	80088b8 <USBD_CtlSendData>
        break;
 8008640:	e00c      	b.n	800865c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3304      	adds	r3, #4
 8008646:	2201      	movs	r2, #1
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f934 	bl	80088b8 <USBD_CtlSendData>
        break;
 8008650:	e004      	b.n	800865c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f8be 	bl	80087d6 <USBD_CtlError>
        break;
 800865a:	bf00      	nop
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008674:	b2db      	uxtb	r3, r3
 8008676:	3b01      	subs	r3, #1
 8008678:	2b02      	cmp	r3, #2
 800867a:	d81e      	bhi.n	80086ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	88db      	ldrh	r3, [r3, #6]
 8008680:	2b02      	cmp	r3, #2
 8008682:	d004      	beq.n	800868e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f8a5 	bl	80087d6 <USBD_CtlError>
        break;
 800868c:	e01a      	b.n	80086c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f043 0202 	orr.w	r2, r3, #2
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	330c      	adds	r3, #12
 80086ae:	2202      	movs	r2, #2
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f900 	bl	80088b8 <USBD_CtlSendData>
      break;
 80086b8:	e004      	b.n	80086c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f88a 	bl	80087d6 <USBD_CtlError>
      break;
 80086c2:	bf00      	nop
  }
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	885b      	ldrh	r3, [r3, #2]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d107      	bne.n	80086ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f940 	bl	800896c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80086ec:	e013      	b.n	8008716 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	885b      	ldrh	r3, [r3, #2]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d10b      	bne.n	800870e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	889b      	ldrh	r3, [r3, #4]
 80086fa:	0a1b      	lsrs	r3, r3, #8
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f930 	bl	800896c <USBD_CtlSendStatus>
}
 800870c:	e003      	b.n	8008716 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f860 	bl	80087d6 <USBD_CtlError>
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b082      	sub	sp, #8
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872e:	b2db      	uxtb	r3, r3
 8008730:	3b01      	subs	r3, #1
 8008732:	2b02      	cmp	r3, #2
 8008734:	d80b      	bhi.n	800874e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	885b      	ldrh	r3, [r3, #2]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d10c      	bne.n	8008758 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f910 	bl	800896c <USBD_CtlSendStatus>
      }
      break;
 800874c:	e004      	b.n	8008758 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f840 	bl	80087d6 <USBD_CtlError>
      break;
 8008756:	e000      	b.n	800875a <USBD_ClrFeature+0x3c>
      break;
 8008758:	bf00      	nop
  }
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	781a      	ldrb	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	781a      	ldrb	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3301      	adds	r3, #1
 800878a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7ff fa41 	bl	8007c14 <SWAPBYTE>
 8008792:	4603      	mov	r3, r0
 8008794:	461a      	mov	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3301      	adds	r3, #1
 800879e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3301      	adds	r3, #1
 80087a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7ff fa34 	bl	8007c14 <SWAPBYTE>
 80087ac:	4603      	mov	r3, r0
 80087ae:	461a      	mov	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3301      	adds	r3, #1
 80087be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f7ff fa27 	bl	8007c14 <SWAPBYTE>
 80087c6:	4603      	mov	r3, r0
 80087c8:	461a      	mov	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	80da      	strh	r2, [r3, #6]
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087e0:	2180      	movs	r1, #128	; 0x80
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 ff52 	bl	800a68c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087e8:	2100      	movs	r1, #0
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 ff4e 	bl	800a68c <USBD_LL_StallEP>
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d036      	beq.n	800887c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008812:	6938      	ldr	r0, [r7, #16]
 8008814:	f000 f836 	bl	8008884 <USBD_GetLen>
 8008818:	4603      	mov	r3, r0
 800881a:	3301      	adds	r3, #1
 800881c:	b29b      	uxth	r3, r3
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	4413      	add	r3, r2
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	7812      	ldrb	r2, [r2, #0]
 8008830:	701a      	strb	r2, [r3, #0]
  idx++;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	3301      	adds	r3, #1
 8008836:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	2203      	movs	r2, #3
 8008840:	701a      	strb	r2, [r3, #0]
  idx++;
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	3301      	adds	r3, #1
 8008846:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008848:	e013      	b.n	8008872 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	4413      	add	r3, r2
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	7812      	ldrb	r2, [r2, #0]
 8008854:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	3301      	adds	r3, #1
 800885a:	613b      	str	r3, [r7, #16]
    idx++;
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	3301      	adds	r3, #1
 8008860:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	4413      	add	r3, r2
 8008868:	2200      	movs	r2, #0
 800886a:	701a      	strb	r2, [r3, #0]
    idx++;
 800886c:	7dfb      	ldrb	r3, [r7, #23]
 800886e:	3301      	adds	r3, #1
 8008870:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e7      	bne.n	800884a <USBD_GetString+0x52>
 800887a:	e000      	b.n	800887e <USBD_GetString+0x86>
    return;
 800887c:	bf00      	nop
  }
}
 800887e:	3718      	adds	r7, #24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008894:	e005      	b.n	80088a2 <USBD_GetLen+0x1e>
  {
    len++;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	3301      	adds	r3, #1
 800889a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	3301      	adds	r3, #1
 80088a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1f5      	bne.n	8008896 <USBD_GetLen+0x12>
  }

  return len;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	2100      	movs	r1, #0
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f001 ff5d 	bl	800a79e <USBD_LL_Transmit>

  return USBD_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	2100      	movs	r1, #0
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f001 ff4c 	bl	800a79e <USBD_LL_Transmit>

  return USBD_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2203      	movs	r2, #3
 8008920:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	2100      	movs	r1, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f001 ff50 	bl	800a7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	2100      	movs	r1, #0
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f001 ff3f 	bl	800a7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2204      	movs	r2, #4
 8008978:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800897c:	2300      	movs	r3, #0
 800897e:	2200      	movs	r2, #0
 8008980:	2100      	movs	r1, #0
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 ff0b 	bl	800a79e <USBD_LL_Transmit>

  return USBD_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2205      	movs	r2, #5
 800899e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089a2:	2300      	movs	r3, #0
 80089a4:	2200      	movs	r2, #0
 80089a6:	2100      	movs	r1, #0
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 ff19 	bl	800a7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80089c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089ca:	2b84      	cmp	r3, #132	; 0x84
 80089cc:	d005      	beq.n	80089da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80089ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4413      	add	r3, r2
 80089d6:	3303      	adds	r3, #3
 80089d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80089da:	68fb      	ldr	r3, [r7, #12]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80089ec:	f000 fade 	bl	8008fac <vTaskStartScheduler>
  
  return osOK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80089f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089f8:	b089      	sub	sp, #36	; 0x24
 80089fa:	af04      	add	r7, sp, #16
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d020      	beq.n	8008a4a <osThreadCreate+0x54>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01c      	beq.n	8008a4a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685c      	ldr	r4, [r3, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691e      	ldr	r6, [r3, #16]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff ffc8 	bl	80089b8 <makeFreeRtosPriority>
 8008a28:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a32:	9202      	str	r2, [sp, #8]
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	9100      	str	r1, [sp, #0]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	4632      	mov	r2, r6
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 f8ed 	bl	8008c1e <xTaskCreateStatic>
 8008a44:	4603      	mov	r3, r0
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	e01c      	b.n	8008a84 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685c      	ldr	r4, [r3, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a56:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff ffaa 	bl	80089b8 <makeFreeRtosPriority>
 8008a64:	4602      	mov	r2, r0
 8008a66:	f107 030c 	add.w	r3, r7, #12
 8008a6a:	9301      	str	r3, [sp, #4]
 8008a6c:	9200      	str	r2, [sp, #0]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	4632      	mov	r2, r6
 8008a72:	4629      	mov	r1, r5
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 f92f 	bl	8008cd8 <xTaskCreate>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d001      	beq.n	8008a84 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008a80:	2300      	movs	r3, #0
 8008a82:	e000      	b.n	8008a86 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008a84:	68fb      	ldr	r3, [r7, #12]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a8e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <osDelay+0x16>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	e000      	b.n	8008aa6 <osDelay+0x18>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 fa4c 	bl	8008f44 <vTaskDelay>
  
  return osOK;
 8008aac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f103 0208 	add.w	r2, r3, #8
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ace:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f103 0208 	add.w	r2, r3, #8
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f103 0208 	add.w	r2, r3, #8
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008af6:	b480      	push	{r7}
 8008af8:	b083      	sub	sp, #12
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	601a      	str	r2, [r3, #0]
}
 8008b4c:	bf00      	nop
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d103      	bne.n	8008b78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	e00c      	b.n	8008b92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	e002      	b.n	8008b86 <vListInsert+0x2e>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d2f6      	bcs.n	8008b80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	601a      	str	r2, [r3, #0]
}
 8008bbe:	bf00      	nop
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b085      	sub	sp, #20
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6892      	ldr	r2, [r2, #8]
 8008be0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6852      	ldr	r2, [r2, #4]
 8008bea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d103      	bne.n	8008bfe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689a      	ldr	r2, [r3, #8]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	1e5a      	subs	r2, r3, #1
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b08e      	sub	sp, #56	; 0x38
 8008c22:	af04      	add	r7, sp, #16
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	607a      	str	r2, [r7, #4]
 8008c2a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10a      	bne.n	8008c48 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <xTaskCreateStatic+0x46>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	61fb      	str	r3, [r7, #28]
}
 8008c60:	bf00      	nop
 8008c62:	e7fe      	b.n	8008c62 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c64:	2354      	movs	r3, #84	; 0x54
 8008c66:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	2b54      	cmp	r3, #84	; 0x54
 8008c6c:	d00a      	beq.n	8008c84 <xTaskCreateStatic+0x66>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	61bb      	str	r3, [r7, #24]
}
 8008c80:	bf00      	nop
 8008c82:	e7fe      	b.n	8008c82 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01e      	beq.n	8008cca <xTaskCreateStatic+0xac>
 8008c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d01b      	beq.n	8008cca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9303      	str	r3, [sp, #12]
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008caa:	9302      	str	r3, [sp, #8]
 8008cac:	f107 0314 	add.w	r3, r7, #20
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 f850 	bl	8008d62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cc4:	f000 f8d4 	bl	8008e70 <prvAddNewTaskToReadyList>
 8008cc8:	e001      	b.n	8008cce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008cce:	697b      	ldr	r3, [r7, #20]
	}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3728      	adds	r7, #40	; 0x28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08c      	sub	sp, #48	; 0x30
 8008cdc:	af04      	add	r7, sp, #16
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ce8:	88fb      	ldrh	r3, [r7, #6]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fee3 	bl	8009ab8 <pvPortMalloc>
 8008cf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00e      	beq.n	8008d18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cfa:	2054      	movs	r0, #84	; 0x54
 8008cfc:	f000 fedc 	bl	8009ab8 <pvPortMalloc>
 8008d00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8008d0e:	e005      	b.n	8008d1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d10:	6978      	ldr	r0, [r7, #20]
 8008d12:	f000 ff9d 	bl	8009c50 <vPortFree>
 8008d16:	e001      	b.n	8008d1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d017      	beq.n	8008d52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d2a:	88fa      	ldrh	r2, [r7, #6]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9303      	str	r3, [sp, #12]
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	9302      	str	r3, [sp, #8]
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f80e 	bl	8008d62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d46:	69f8      	ldr	r0, [r7, #28]
 8008d48:	f000 f892 	bl	8008e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	61bb      	str	r3, [r7, #24]
 8008d50:	e002      	b.n	8008d58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d52:	f04f 33ff 	mov.w	r3, #4294967295
 8008d56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d58:	69bb      	ldr	r3, [r7, #24]
	}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3720      	adds	r7, #32
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b088      	sub	sp, #32
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	607a      	str	r2, [r7, #4]
 8008d6e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f023 0307 	bic.w	r3, r3, #7
 8008d88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	f003 0307 	and.w	r3, r3, #7
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <prvInitialiseNewTask+0x48>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	617b      	str	r3, [r7, #20]
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01f      	beq.n	8008df0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008db0:	2300      	movs	r3, #0
 8008db2:	61fb      	str	r3, [r7, #28]
 8008db4:	e012      	b.n	8008ddc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	7819      	ldrb	r1, [r3, #0]
 8008dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3334      	adds	r3, #52	; 0x34
 8008dc6:	460a      	mov	r2, r1
 8008dc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	4413      	add	r3, r2
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d006      	beq.n	8008de4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b0f      	cmp	r3, #15
 8008de0:	d9e9      	bls.n	8008db6 <prvInitialiseNewTask+0x54>
 8008de2:	e000      	b.n	8008de6 <prvInitialiseNewTask+0x84>
			{
				break;
 8008de4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008dee:	e003      	b.n	8008df8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2b06      	cmp	r3, #6
 8008dfc:	d901      	bls.n	8008e02 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dfe:	2306      	movs	r3, #6
 8008e00:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e0c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	2200      	movs	r2, #0
 8008e12:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	3304      	adds	r3, #4
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff fe6c 	bl	8008af6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	3318      	adds	r3, #24
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff fe67 	bl	8008af6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	f1c3 0207 	rsb	r2, r3, #7
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	2200      	movs	r2, #0
 8008e42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	68f9      	ldr	r1, [r7, #12]
 8008e50:	69b8      	ldr	r0, [r7, #24]
 8008e52:	f000 fc23 	bl	800969c <pxPortInitialiseStack>
 8008e56:	4602      	mov	r2, r0
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e68:	bf00      	nop
 8008e6a:	3720      	adds	r7, #32
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e78:	f000 fd3c 	bl	80098f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e7c:	4b2a      	ldr	r3, [pc, #168]	; (8008f28 <prvAddNewTaskToReadyList+0xb8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3301      	adds	r3, #1
 8008e82:	4a29      	ldr	r2, [pc, #164]	; (8008f28 <prvAddNewTaskToReadyList+0xb8>)
 8008e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e86:	4b29      	ldr	r3, [pc, #164]	; (8008f2c <prvAddNewTaskToReadyList+0xbc>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d109      	bne.n	8008ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e8e:	4a27      	ldr	r2, [pc, #156]	; (8008f2c <prvAddNewTaskToReadyList+0xbc>)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e94:	4b24      	ldr	r3, [pc, #144]	; (8008f28 <prvAddNewTaskToReadyList+0xb8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d110      	bne.n	8008ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e9c:	f000 fabc 	bl	8009418 <prvInitialiseTaskLists>
 8008ea0:	e00d      	b.n	8008ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ea2:	4b23      	ldr	r3, [pc, #140]	; (8008f30 <prvAddNewTaskToReadyList+0xc0>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d109      	bne.n	8008ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008eaa:	4b20      	ldr	r3, [pc, #128]	; (8008f2c <prvAddNewTaskToReadyList+0xbc>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d802      	bhi.n	8008ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008eb8:	4a1c      	ldr	r2, [pc, #112]	; (8008f2c <prvAddNewTaskToReadyList+0xbc>)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ebe:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <prvAddNewTaskToReadyList+0xc4>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	4a1b      	ldr	r2, [pc, #108]	; (8008f34 <prvAddNewTaskToReadyList+0xc4>)
 8008ec6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	2201      	movs	r2, #1
 8008ece:	409a      	lsls	r2, r3
 8008ed0:	4b19      	ldr	r3, [pc, #100]	; (8008f38 <prvAddNewTaskToReadyList+0xc8>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	4a18      	ldr	r2, [pc, #96]	; (8008f38 <prvAddNewTaskToReadyList+0xc8>)
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ede:	4613      	mov	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4a15      	ldr	r2, [pc, #84]	; (8008f3c <prvAddNewTaskToReadyList+0xcc>)
 8008ee8:	441a      	add	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3304      	adds	r3, #4
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	f7ff fe0d 	bl	8008b10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ef6:	f000 fd2d 	bl	8009954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008efa:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <prvAddNewTaskToReadyList+0xc0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00e      	beq.n	8008f20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f02:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <prvAddNewTaskToReadyList+0xbc>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d207      	bcs.n	8008f20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f10:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <prvAddNewTaskToReadyList+0xd0>)
 8008f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20000e7c 	.word	0x20000e7c
 8008f2c:	20000d7c 	.word	0x20000d7c
 8008f30:	20000e88 	.word	0x20000e88
 8008f34:	20000e98 	.word	0x20000e98
 8008f38:	20000e84 	.word	0x20000e84
 8008f3c:	20000d80 	.word	0x20000d80
 8008f40:	e000ed04 	.word	0xe000ed04

08008f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d017      	beq.n	8008f86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f56:	4b13      	ldr	r3, [pc, #76]	; (8008fa4 <vTaskDelay+0x60>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <vTaskDelay+0x30>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	60bb      	str	r3, [r7, #8]
}
 8008f70:	bf00      	nop
 8008f72:	e7fe      	b.n	8008f72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f74:	f000 f87a 	bl	800906c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f78:	2100      	movs	r1, #0
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fb28 	bl	80095d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f80:	f000 f882 	bl	8009088 <xTaskResumeAll>
 8008f84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d107      	bne.n	8008f9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <vTaskDelay+0x64>)
 8008f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20000ea4 	.word	0x20000ea4
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08a      	sub	sp, #40	; 0x28
 8008fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fba:	463a      	mov	r2, r7
 8008fbc:	1d39      	adds	r1, r7, #4
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7f9 fb3c 	bl	8002640 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	9202      	str	r2, [sp, #8]
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	460a      	mov	r2, r1
 8008fda:	491e      	ldr	r1, [pc, #120]	; (8009054 <vTaskStartScheduler+0xa8>)
 8008fdc:	481e      	ldr	r0, [pc, #120]	; (8009058 <vTaskStartScheduler+0xac>)
 8008fde:	f7ff fe1e 	bl	8008c1e <xTaskCreateStatic>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	4a1d      	ldr	r2, [pc, #116]	; (800905c <vTaskStartScheduler+0xb0>)
 8008fe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008fe8:	4b1c      	ldr	r3, [pc, #112]	; (800905c <vTaskStartScheduler+0xb0>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	e001      	b.n	8008ffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d116      	bne.n	800902e <vTaskStartScheduler+0x82>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	613b      	str	r3, [r7, #16]
}
 8009012:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009014:	4b12      	ldr	r3, [pc, #72]	; (8009060 <vTaskStartScheduler+0xb4>)
 8009016:	f04f 32ff 	mov.w	r2, #4294967295
 800901a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800901c:	4b11      	ldr	r3, [pc, #68]	; (8009064 <vTaskStartScheduler+0xb8>)
 800901e:	2201      	movs	r2, #1
 8009020:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009022:	4b11      	ldr	r3, [pc, #68]	; (8009068 <vTaskStartScheduler+0xbc>)
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009028:	f000 fbc2 	bl	80097b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800902c:	e00e      	b.n	800904c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d10a      	bne.n	800904c <vTaskStartScheduler+0xa0>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	60fb      	str	r3, [r7, #12]
}
 8009048:	bf00      	nop
 800904a:	e7fe      	b.n	800904a <vTaskStartScheduler+0x9e>
}
 800904c:	bf00      	nop
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	0800ead8 	.word	0x0800ead8
 8009058:	080093e9 	.word	0x080093e9
 800905c:	20000ea0 	.word	0x20000ea0
 8009060:	20000e9c 	.word	0x20000e9c
 8009064:	20000e88 	.word	0x20000e88
 8009068:	20000e80 	.word	0x20000e80

0800906c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009070:	4b04      	ldr	r3, [pc, #16]	; (8009084 <vTaskSuspendAll+0x18>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3301      	adds	r3, #1
 8009076:	4a03      	ldr	r2, [pc, #12]	; (8009084 <vTaskSuspendAll+0x18>)
 8009078:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800907a:	bf00      	nop
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	20000ea4 	.word	0x20000ea4

08009088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009092:	2300      	movs	r3, #0
 8009094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009096:	4b41      	ldr	r3, [pc, #260]	; (800919c <xTaskResumeAll+0x114>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10a      	bne.n	80090b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	603b      	str	r3, [r7, #0]
}
 80090b0:	bf00      	nop
 80090b2:	e7fe      	b.n	80090b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090b4:	f000 fc1e 	bl	80098f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090b8:	4b38      	ldr	r3, [pc, #224]	; (800919c <xTaskResumeAll+0x114>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3b01      	subs	r3, #1
 80090be:	4a37      	ldr	r2, [pc, #220]	; (800919c <xTaskResumeAll+0x114>)
 80090c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090c2:	4b36      	ldr	r3, [pc, #216]	; (800919c <xTaskResumeAll+0x114>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d161      	bne.n	800918e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090ca:	4b35      	ldr	r3, [pc, #212]	; (80091a0 <xTaskResumeAll+0x118>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d05d      	beq.n	800918e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090d2:	e02e      	b.n	8009132 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d4:	4b33      	ldr	r3, [pc, #204]	; (80091a4 <xTaskResumeAll+0x11c>)
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3318      	adds	r3, #24
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff fd72 	bl	8008bca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3304      	adds	r3, #4
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff fd6d 	bl	8008bca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	2201      	movs	r2, #1
 80090f6:	409a      	lsls	r2, r3
 80090f8:	4b2b      	ldr	r3, [pc, #172]	; (80091a8 <xTaskResumeAll+0x120>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	4a2a      	ldr	r2, [pc, #168]	; (80091a8 <xTaskResumeAll+0x120>)
 8009100:	6013      	str	r3, [r2, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4a27      	ldr	r2, [pc, #156]	; (80091ac <xTaskResumeAll+0x124>)
 8009110:	441a      	add	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3304      	adds	r3, #4
 8009116:	4619      	mov	r1, r3
 8009118:	4610      	mov	r0, r2
 800911a:	f7ff fcf9 	bl	8008b10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009122:	4b23      	ldr	r3, [pc, #140]	; (80091b0 <xTaskResumeAll+0x128>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	429a      	cmp	r2, r3
 800912a:	d302      	bcc.n	8009132 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800912c:	4b21      	ldr	r3, [pc, #132]	; (80091b4 <xTaskResumeAll+0x12c>)
 800912e:	2201      	movs	r2, #1
 8009130:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009132:	4b1c      	ldr	r3, [pc, #112]	; (80091a4 <xTaskResumeAll+0x11c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1cc      	bne.n	80090d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009140:	f000 fa08 	bl	8009554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009144:	4b1c      	ldr	r3, [pc, #112]	; (80091b8 <xTaskResumeAll+0x130>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d010      	beq.n	8009172 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009150:	f000 f836 	bl	80091c0 <xTaskIncrementTick>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800915a:	4b16      	ldr	r3, [pc, #88]	; (80091b4 <xTaskResumeAll+0x12c>)
 800915c:	2201      	movs	r2, #1
 800915e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3b01      	subs	r3, #1
 8009164:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1f1      	bne.n	8009150 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800916c:	4b12      	ldr	r3, [pc, #72]	; (80091b8 <xTaskResumeAll+0x130>)
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009172:	4b10      	ldr	r3, [pc, #64]	; (80091b4 <xTaskResumeAll+0x12c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d009      	beq.n	800918e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800917a:	2301      	movs	r3, #1
 800917c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800917e:	4b0f      	ldr	r3, [pc, #60]	; (80091bc <xTaskResumeAll+0x134>)
 8009180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800918e:	f000 fbe1 	bl	8009954 <vPortExitCritical>

	return xAlreadyYielded;
 8009192:	68bb      	ldr	r3, [r7, #8]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	20000ea4 	.word	0x20000ea4
 80091a0:	20000e7c 	.word	0x20000e7c
 80091a4:	20000e3c 	.word	0x20000e3c
 80091a8:	20000e84 	.word	0x20000e84
 80091ac:	20000d80 	.word	0x20000d80
 80091b0:	20000d7c 	.word	0x20000d7c
 80091b4:	20000e90 	.word	0x20000e90
 80091b8:	20000e8c 	.word	0x20000e8c
 80091bc:	e000ed04 	.word	0xe000ed04

080091c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091c6:	2300      	movs	r3, #0
 80091c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ca:	4b4e      	ldr	r3, [pc, #312]	; (8009304 <xTaskIncrementTick+0x144>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f040 808e 	bne.w	80092f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091d4:	4b4c      	ldr	r3, [pc, #304]	; (8009308 <xTaskIncrementTick+0x148>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3301      	adds	r3, #1
 80091da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091dc:	4a4a      	ldr	r2, [pc, #296]	; (8009308 <xTaskIncrementTick+0x148>)
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d120      	bne.n	800922a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80091e8:	4b48      	ldr	r3, [pc, #288]	; (800930c <xTaskIncrementTick+0x14c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <xTaskIncrementTick+0x48>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	603b      	str	r3, [r7, #0]
}
 8009204:	bf00      	nop
 8009206:	e7fe      	b.n	8009206 <xTaskIncrementTick+0x46>
 8009208:	4b40      	ldr	r3, [pc, #256]	; (800930c <xTaskIncrementTick+0x14c>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	4b40      	ldr	r3, [pc, #256]	; (8009310 <xTaskIncrementTick+0x150>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a3e      	ldr	r2, [pc, #248]	; (800930c <xTaskIncrementTick+0x14c>)
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	4a3e      	ldr	r2, [pc, #248]	; (8009310 <xTaskIncrementTick+0x150>)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	4b3d      	ldr	r3, [pc, #244]	; (8009314 <xTaskIncrementTick+0x154>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3301      	adds	r3, #1
 8009222:	4a3c      	ldr	r2, [pc, #240]	; (8009314 <xTaskIncrementTick+0x154>)
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	f000 f995 	bl	8009554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800922a:	4b3b      	ldr	r3, [pc, #236]	; (8009318 <xTaskIncrementTick+0x158>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	429a      	cmp	r2, r3
 8009232:	d348      	bcc.n	80092c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009234:	4b35      	ldr	r3, [pc, #212]	; (800930c <xTaskIncrementTick+0x14c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d104      	bne.n	8009248 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800923e:	4b36      	ldr	r3, [pc, #216]	; (8009318 <xTaskIncrementTick+0x158>)
 8009240:	f04f 32ff 	mov.w	r2, #4294967295
 8009244:	601a      	str	r2, [r3, #0]
					break;
 8009246:	e03e      	b.n	80092c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009248:	4b30      	ldr	r3, [pc, #192]	; (800930c <xTaskIncrementTick+0x14c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	429a      	cmp	r2, r3
 800925e:	d203      	bcs.n	8009268 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009260:	4a2d      	ldr	r2, [pc, #180]	; (8009318 <xTaskIncrementTick+0x158>)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009266:	e02e      	b.n	80092c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	3304      	adds	r3, #4
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff fcac 	bl	8008bca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009276:	2b00      	cmp	r3, #0
 8009278:	d004      	beq.n	8009284 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	3318      	adds	r3, #24
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff fca3 	bl	8008bca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	2201      	movs	r2, #1
 800928a:	409a      	lsls	r2, r3
 800928c:	4b23      	ldr	r3, [pc, #140]	; (800931c <xTaskIncrementTick+0x15c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4313      	orrs	r3, r2
 8009292:	4a22      	ldr	r2, [pc, #136]	; (800931c <xTaskIncrementTick+0x15c>)
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4a1f      	ldr	r2, [pc, #124]	; (8009320 <xTaskIncrementTick+0x160>)
 80092a4:	441a      	add	r2, r3
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4619      	mov	r1, r3
 80092ac:	4610      	mov	r0, r2
 80092ae:	f7ff fc2f 	bl	8008b10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b6:	4b1b      	ldr	r3, [pc, #108]	; (8009324 <xTaskIncrementTick+0x164>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092bc:	429a      	cmp	r2, r3
 80092be:	d3b9      	bcc.n	8009234 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092c0:	2301      	movs	r3, #1
 80092c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092c4:	e7b6      	b.n	8009234 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092c6:	4b17      	ldr	r3, [pc, #92]	; (8009324 <xTaskIncrementTick+0x164>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092cc:	4914      	ldr	r1, [pc, #80]	; (8009320 <xTaskIncrementTick+0x160>)
 80092ce:	4613      	mov	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	440b      	add	r3, r1
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d901      	bls.n	80092e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80092de:	2301      	movs	r3, #1
 80092e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092e2:	4b11      	ldr	r3, [pc, #68]	; (8009328 <xTaskIncrementTick+0x168>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d007      	beq.n	80092fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80092ea:	2301      	movs	r3, #1
 80092ec:	617b      	str	r3, [r7, #20]
 80092ee:	e004      	b.n	80092fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092f0:	4b0e      	ldr	r3, [pc, #56]	; (800932c <xTaskIncrementTick+0x16c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	4a0d      	ldr	r2, [pc, #52]	; (800932c <xTaskIncrementTick+0x16c>)
 80092f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092fa:	697b      	ldr	r3, [r7, #20]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3718      	adds	r7, #24
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20000ea4 	.word	0x20000ea4
 8009308:	20000e80 	.word	0x20000e80
 800930c:	20000e34 	.word	0x20000e34
 8009310:	20000e38 	.word	0x20000e38
 8009314:	20000e94 	.word	0x20000e94
 8009318:	20000e9c 	.word	0x20000e9c
 800931c:	20000e84 	.word	0x20000e84
 8009320:	20000d80 	.word	0x20000d80
 8009324:	20000d7c 	.word	0x20000d7c
 8009328:	20000e90 	.word	0x20000e90
 800932c:	20000e8c 	.word	0x20000e8c

08009330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009336:	4b27      	ldr	r3, [pc, #156]	; (80093d4 <vTaskSwitchContext+0xa4>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800933e:	4b26      	ldr	r3, [pc, #152]	; (80093d8 <vTaskSwitchContext+0xa8>)
 8009340:	2201      	movs	r2, #1
 8009342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009344:	e03f      	b.n	80093c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009346:	4b24      	ldr	r3, [pc, #144]	; (80093d8 <vTaskSwitchContext+0xa8>)
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800934c:	4b23      	ldr	r3, [pc, #140]	; (80093dc <vTaskSwitchContext+0xac>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	fab3 f383 	clz	r3, r3
 8009358:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800935a:	7afb      	ldrb	r3, [r7, #11]
 800935c:	f1c3 031f 	rsb	r3, r3, #31
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	491f      	ldr	r1, [pc, #124]	; (80093e0 <vTaskSwitchContext+0xb0>)
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4613      	mov	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	440b      	add	r3, r1
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <vTaskSwitchContext+0x5c>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	607b      	str	r3, [r7, #4]
}
 8009388:	bf00      	nop
 800938a:	e7fe      	b.n	800938a <vTaskSwitchContext+0x5a>
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4613      	mov	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4a12      	ldr	r2, [pc, #72]	; (80093e0 <vTaskSwitchContext+0xb0>)
 8009398:	4413      	add	r3, r2
 800939a:	613b      	str	r3, [r7, #16]
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	605a      	str	r2, [r3, #4]
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	3308      	adds	r3, #8
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d104      	bne.n	80093bc <vTaskSwitchContext+0x8c>
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	605a      	str	r2, [r3, #4]
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	4a08      	ldr	r2, [pc, #32]	; (80093e4 <vTaskSwitchContext+0xb4>)
 80093c4:	6013      	str	r3, [r2, #0]
}
 80093c6:	bf00      	nop
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000ea4 	.word	0x20000ea4
 80093d8:	20000e90 	.word	0x20000e90
 80093dc:	20000e84 	.word	0x20000e84
 80093e0:	20000d80 	.word	0x20000d80
 80093e4:	20000d7c 	.word	0x20000d7c

080093e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093f0:	f000 f852 	bl	8009498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093f4:	4b06      	ldr	r3, [pc, #24]	; (8009410 <prvIdleTask+0x28>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d9f9      	bls.n	80093f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093fc:	4b05      	ldr	r3, [pc, #20]	; (8009414 <prvIdleTask+0x2c>)
 80093fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800940c:	e7f0      	b.n	80093f0 <prvIdleTask+0x8>
 800940e:	bf00      	nop
 8009410:	20000d80 	.word	0x20000d80
 8009414:	e000ed04 	.word	0xe000ed04

08009418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800941e:	2300      	movs	r3, #0
 8009420:	607b      	str	r3, [r7, #4]
 8009422:	e00c      	b.n	800943e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4a12      	ldr	r2, [pc, #72]	; (8009478 <prvInitialiseTaskLists+0x60>)
 8009430:	4413      	add	r3, r2
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff fb3f 	bl	8008ab6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3301      	adds	r3, #1
 800943c:	607b      	str	r3, [r7, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b06      	cmp	r3, #6
 8009442:	d9ef      	bls.n	8009424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009444:	480d      	ldr	r0, [pc, #52]	; (800947c <prvInitialiseTaskLists+0x64>)
 8009446:	f7ff fb36 	bl	8008ab6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800944a:	480d      	ldr	r0, [pc, #52]	; (8009480 <prvInitialiseTaskLists+0x68>)
 800944c:	f7ff fb33 	bl	8008ab6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009450:	480c      	ldr	r0, [pc, #48]	; (8009484 <prvInitialiseTaskLists+0x6c>)
 8009452:	f7ff fb30 	bl	8008ab6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009456:	480c      	ldr	r0, [pc, #48]	; (8009488 <prvInitialiseTaskLists+0x70>)
 8009458:	f7ff fb2d 	bl	8008ab6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800945c:	480b      	ldr	r0, [pc, #44]	; (800948c <prvInitialiseTaskLists+0x74>)
 800945e:	f7ff fb2a 	bl	8008ab6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009462:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <prvInitialiseTaskLists+0x78>)
 8009464:	4a05      	ldr	r2, [pc, #20]	; (800947c <prvInitialiseTaskLists+0x64>)
 8009466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009468:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <prvInitialiseTaskLists+0x7c>)
 800946a:	4a05      	ldr	r2, [pc, #20]	; (8009480 <prvInitialiseTaskLists+0x68>)
 800946c:	601a      	str	r2, [r3, #0]
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000d80 	.word	0x20000d80
 800947c:	20000e0c 	.word	0x20000e0c
 8009480:	20000e20 	.word	0x20000e20
 8009484:	20000e3c 	.word	0x20000e3c
 8009488:	20000e50 	.word	0x20000e50
 800948c:	20000e68 	.word	0x20000e68
 8009490:	20000e34 	.word	0x20000e34
 8009494:	20000e38 	.word	0x20000e38

08009498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800949e:	e019      	b.n	80094d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094a0:	f000 fa28 	bl	80098f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a4:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <prvCheckTasksWaitingTermination+0x50>)
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff fb8a 	bl	8008bca <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094b6:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <prvCheckTasksWaitingTermination+0x54>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	4a0b      	ldr	r2, [pc, #44]	; (80094ec <prvCheckTasksWaitingTermination+0x54>)
 80094be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094c0:	4b0b      	ldr	r3, [pc, #44]	; (80094f0 <prvCheckTasksWaitingTermination+0x58>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	4a0a      	ldr	r2, [pc, #40]	; (80094f0 <prvCheckTasksWaitingTermination+0x58>)
 80094c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094ca:	f000 fa43 	bl	8009954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f810 	bl	80094f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094d4:	4b06      	ldr	r3, [pc, #24]	; (80094f0 <prvCheckTasksWaitingTermination+0x58>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1e1      	bne.n	80094a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20000e50 	.word	0x20000e50
 80094ec:	20000e7c 	.word	0x20000e7c
 80094f0:	20000e64 	.word	0x20000e64

080094f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009502:	2b00      	cmp	r3, #0
 8009504:	d108      	bne.n	8009518 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fba0 	bl	8009c50 <vPortFree>
				vPortFree( pxTCB );
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb9d 	bl	8009c50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009516:	e018      	b.n	800954a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800951e:	2b01      	cmp	r3, #1
 8009520:	d103      	bne.n	800952a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fb94 	bl	8009c50 <vPortFree>
	}
 8009528:	e00f      	b.n	800954a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009530:	2b02      	cmp	r3, #2
 8009532:	d00a      	beq.n	800954a <prvDeleteTCB+0x56>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	60fb      	str	r3, [r7, #12]
}
 8009546:	bf00      	nop
 8009548:	e7fe      	b.n	8009548 <prvDeleteTCB+0x54>
	}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800955a:	4b0c      	ldr	r3, [pc, #48]	; (800958c <prvResetNextTaskUnblockTime+0x38>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009564:	4b0a      	ldr	r3, [pc, #40]	; (8009590 <prvResetNextTaskUnblockTime+0x3c>)
 8009566:	f04f 32ff 	mov.w	r2, #4294967295
 800956a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800956c:	e008      	b.n	8009580 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800956e:	4b07      	ldr	r3, [pc, #28]	; (800958c <prvResetNextTaskUnblockTime+0x38>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	4a04      	ldr	r2, [pc, #16]	; (8009590 <prvResetNextTaskUnblockTime+0x3c>)
 800957e:	6013      	str	r3, [r2, #0]
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	20000e34 	.word	0x20000e34
 8009590:	20000e9c 	.word	0x20000e9c

08009594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800959a:	4b0b      	ldr	r3, [pc, #44]	; (80095c8 <xTaskGetSchedulerState+0x34>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095a2:	2301      	movs	r3, #1
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	e008      	b.n	80095ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095a8:	4b08      	ldr	r3, [pc, #32]	; (80095cc <xTaskGetSchedulerState+0x38>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095b0:	2302      	movs	r3, #2
 80095b2:	607b      	str	r3, [r7, #4]
 80095b4:	e001      	b.n	80095ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095b6:	2300      	movs	r3, #0
 80095b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095ba:	687b      	ldr	r3, [r7, #4]
	}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	20000e88 	.word	0x20000e88
 80095cc:	20000ea4 	.word	0x20000ea4

080095d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095da:	4b29      	ldr	r3, [pc, #164]	; (8009680 <prvAddCurrentTaskToDelayedList+0xb0>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095e0:	4b28      	ldr	r3, [pc, #160]	; (8009684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff faef 	bl	8008bca <uxListRemove>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10b      	bne.n	800960a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095f2:	4b24      	ldr	r3, [pc, #144]	; (8009684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f8:	2201      	movs	r2, #1
 80095fa:	fa02 f303 	lsl.w	r3, r2, r3
 80095fe:	43da      	mvns	r2, r3
 8009600:	4b21      	ldr	r3, [pc, #132]	; (8009688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4013      	ands	r3, r2
 8009606:	4a20      	ldr	r2, [pc, #128]	; (8009688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009608:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009610:	d10a      	bne.n	8009628 <prvAddCurrentTaskToDelayedList+0x58>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d007      	beq.n	8009628 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009618:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <prvAddCurrentTaskToDelayedList+0xb4>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3304      	adds	r3, #4
 800961e:	4619      	mov	r1, r3
 8009620:	481a      	ldr	r0, [pc, #104]	; (800968c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009622:	f7ff fa75 	bl	8008b10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009626:	e026      	b.n	8009676 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009630:	4b14      	ldr	r3, [pc, #80]	; (8009684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	429a      	cmp	r2, r3
 800963e:	d209      	bcs.n	8009654 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009640:	4b13      	ldr	r3, [pc, #76]	; (8009690 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	4b0f      	ldr	r3, [pc, #60]	; (8009684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3304      	adds	r3, #4
 800964a:	4619      	mov	r1, r3
 800964c:	4610      	mov	r0, r2
 800964e:	f7ff fa83 	bl	8008b58 <vListInsert>
}
 8009652:	e010      	b.n	8009676 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009654:	4b0f      	ldr	r3, [pc, #60]	; (8009694 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	4b0a      	ldr	r3, [pc, #40]	; (8009684 <prvAddCurrentTaskToDelayedList+0xb4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3304      	adds	r3, #4
 800965e:	4619      	mov	r1, r3
 8009660:	4610      	mov	r0, r2
 8009662:	f7ff fa79 	bl	8008b58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009666:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	429a      	cmp	r2, r3
 800966e:	d202      	bcs.n	8009676 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009670:	4a09      	ldr	r2, [pc, #36]	; (8009698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	6013      	str	r3, [r2, #0]
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	20000e80 	.word	0x20000e80
 8009684:	20000d7c 	.word	0x20000d7c
 8009688:	20000e84 	.word	0x20000e84
 800968c:	20000e68 	.word	0x20000e68
 8009690:	20000e38 	.word	0x20000e38
 8009694:	20000e34 	.word	0x20000e34
 8009698:	20000e9c 	.word	0x20000e9c

0800969c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3b04      	subs	r3, #4
 80096ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3b04      	subs	r3, #4
 80096ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f023 0201 	bic.w	r2, r3, #1
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3b04      	subs	r3, #4
 80096ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096cc:	4a0c      	ldr	r2, [pc, #48]	; (8009700 <pxPortInitialiseStack+0x64>)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3b14      	subs	r3, #20
 80096d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3b04      	subs	r3, #4
 80096e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f06f 0202 	mvn.w	r2, #2
 80096ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3b20      	subs	r3, #32
 80096f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096f2:	68fb      	ldr	r3, [r7, #12]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	08009705 	.word	0x08009705

08009704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800970e:	4b12      	ldr	r3, [pc, #72]	; (8009758 <prvTaskExitError+0x54>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009716:	d00a      	beq.n	800972e <prvTaskExitError+0x2a>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	60fb      	str	r3, [r7, #12]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <prvTaskExitError+0x28>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	60bb      	str	r3, [r7, #8]
}
 8009740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009742:	bf00      	nop
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0fc      	beq.n	8009744 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800974a:	bf00      	nop
 800974c:	bf00      	nop
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	2000009c 	.word	0x2000009c
 800975c:	00000000 	.word	0x00000000

08009760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009760:	4b07      	ldr	r3, [pc, #28]	; (8009780 <pxCurrentTCBConst2>)
 8009762:	6819      	ldr	r1, [r3, #0]
 8009764:	6808      	ldr	r0, [r1, #0]
 8009766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976a:	f380 8809 	msr	PSP, r0
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8811 	msr	BASEPRI, r0
 800977a:	4770      	bx	lr
 800977c:	f3af 8000 	nop.w

08009780 <pxCurrentTCBConst2>:
 8009780:	20000d7c 	.word	0x20000d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop

08009788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009788:	4808      	ldr	r0, [pc, #32]	; (80097ac <prvPortStartFirstTask+0x24>)
 800978a:	6800      	ldr	r0, [r0, #0]
 800978c:	6800      	ldr	r0, [r0, #0]
 800978e:	f380 8808 	msr	MSP, r0
 8009792:	f04f 0000 	mov.w	r0, #0
 8009796:	f380 8814 	msr	CONTROL, r0
 800979a:	b662      	cpsie	i
 800979c:	b661      	cpsie	f
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	df00      	svc	0
 80097a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097aa:	bf00      	nop
 80097ac:	e000ed08 	.word	0xe000ed08

080097b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097b6:	4b46      	ldr	r3, [pc, #280]	; (80098d0 <xPortStartScheduler+0x120>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a46      	ldr	r2, [pc, #280]	; (80098d4 <xPortStartScheduler+0x124>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d10a      	bne.n	80097d6 <xPortStartScheduler+0x26>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	613b      	str	r3, [r7, #16]
}
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097d6:	4b3e      	ldr	r3, [pc, #248]	; (80098d0 <xPortStartScheduler+0x120>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a3f      	ldr	r2, [pc, #252]	; (80098d8 <xPortStartScheduler+0x128>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d10a      	bne.n	80097f6 <xPortStartScheduler+0x46>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	60fb      	str	r3, [r7, #12]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097f6:	4b39      	ldr	r3, [pc, #228]	; (80098dc <xPortStartScheduler+0x12c>)
 80097f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	22ff      	movs	r2, #255	; 0xff
 8009806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	b2db      	uxtb	r3, r3
 800980e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009818:	b2da      	uxtb	r2, r3
 800981a:	4b31      	ldr	r3, [pc, #196]	; (80098e0 <xPortStartScheduler+0x130>)
 800981c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800981e:	4b31      	ldr	r3, [pc, #196]	; (80098e4 <xPortStartScheduler+0x134>)
 8009820:	2207      	movs	r2, #7
 8009822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009824:	e009      	b.n	800983a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009826:	4b2f      	ldr	r3, [pc, #188]	; (80098e4 <xPortStartScheduler+0x134>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3b01      	subs	r3, #1
 800982c:	4a2d      	ldr	r2, [pc, #180]	; (80098e4 <xPortStartScheduler+0x134>)
 800982e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	b2db      	uxtb	r3, r3
 8009838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009842:	2b80      	cmp	r3, #128	; 0x80
 8009844:	d0ef      	beq.n	8009826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009846:	4b27      	ldr	r3, [pc, #156]	; (80098e4 <xPortStartScheduler+0x134>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f1c3 0307 	rsb	r3, r3, #7
 800984e:	2b04      	cmp	r3, #4
 8009850:	d00a      	beq.n	8009868 <xPortStartScheduler+0xb8>
	__asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	60bb      	str	r3, [r7, #8]
}
 8009864:	bf00      	nop
 8009866:	e7fe      	b.n	8009866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009868:	4b1e      	ldr	r3, [pc, #120]	; (80098e4 <xPortStartScheduler+0x134>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	021b      	lsls	r3, r3, #8
 800986e:	4a1d      	ldr	r2, [pc, #116]	; (80098e4 <xPortStartScheduler+0x134>)
 8009870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009872:	4b1c      	ldr	r3, [pc, #112]	; (80098e4 <xPortStartScheduler+0x134>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800987a:	4a1a      	ldr	r2, [pc, #104]	; (80098e4 <xPortStartScheduler+0x134>)
 800987c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	b2da      	uxtb	r2, r3
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009886:	4b18      	ldr	r3, [pc, #96]	; (80098e8 <xPortStartScheduler+0x138>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <xPortStartScheduler+0x138>)
 800988c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009892:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <xPortStartScheduler+0x138>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a14      	ldr	r2, [pc, #80]	; (80098e8 <xPortStartScheduler+0x138>)
 8009898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800989c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800989e:	f000 f8dd 	bl	8009a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098a2:	4b12      	ldr	r3, [pc, #72]	; (80098ec <xPortStartScheduler+0x13c>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098a8:	f000 f8fc 	bl	8009aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098ac:	4b10      	ldr	r3, [pc, #64]	; (80098f0 <xPortStartScheduler+0x140>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a0f      	ldr	r2, [pc, #60]	; (80098f0 <xPortStartScheduler+0x140>)
 80098b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098b8:	f7ff ff66 	bl	8009788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098bc:	f7ff fd38 	bl	8009330 <vTaskSwitchContext>
	prvTaskExitError();
 80098c0:	f7ff ff20 	bl	8009704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	e000ed00 	.word	0xe000ed00
 80098d4:	410fc271 	.word	0x410fc271
 80098d8:	410fc270 	.word	0x410fc270
 80098dc:	e000e400 	.word	0xe000e400
 80098e0:	20000ea8 	.word	0x20000ea8
 80098e4:	20000eac 	.word	0x20000eac
 80098e8:	e000ed20 	.word	0xe000ed20
 80098ec:	2000009c 	.word	0x2000009c
 80098f0:	e000ef34 	.word	0xe000ef34

080098f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	607b      	str	r3, [r7, #4]
}
 800990c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800990e:	4b0f      	ldr	r3, [pc, #60]	; (800994c <vPortEnterCritical+0x58>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3301      	adds	r3, #1
 8009914:	4a0d      	ldr	r2, [pc, #52]	; (800994c <vPortEnterCritical+0x58>)
 8009916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009918:	4b0c      	ldr	r3, [pc, #48]	; (800994c <vPortEnterCritical+0x58>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d10f      	bne.n	8009940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009920:	4b0b      	ldr	r3, [pc, #44]	; (8009950 <vPortEnterCritical+0x5c>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <vPortEnterCritical+0x4c>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	603b      	str	r3, [r7, #0]
}
 800993c:	bf00      	nop
 800993e:	e7fe      	b.n	800993e <vPortEnterCritical+0x4a>
	}
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	2000009c 	.word	0x2000009c
 8009950:	e000ed04 	.word	0xe000ed04

08009954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800995a:	4b12      	ldr	r3, [pc, #72]	; (80099a4 <vPortExitCritical+0x50>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10a      	bne.n	8009978 <vPortExitCritical+0x24>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	607b      	str	r3, [r7, #4]
}
 8009974:	bf00      	nop
 8009976:	e7fe      	b.n	8009976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009978:	4b0a      	ldr	r3, [pc, #40]	; (80099a4 <vPortExitCritical+0x50>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3b01      	subs	r3, #1
 800997e:	4a09      	ldr	r2, [pc, #36]	; (80099a4 <vPortExitCritical+0x50>)
 8009980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009982:	4b08      	ldr	r3, [pc, #32]	; (80099a4 <vPortExitCritical+0x50>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d105      	bne.n	8009996 <vPortExitCritical+0x42>
 800998a:	2300      	movs	r3, #0
 800998c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009996:	bf00      	nop
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	2000009c 	.word	0x2000009c
	...

080099b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099b0:	f3ef 8009 	mrs	r0, PSP
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <pxCurrentTCBConst>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	f01e 0f10 	tst.w	lr, #16
 80099c0:	bf08      	it	eq
 80099c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ca:	6010      	str	r0, [r2, #0]
 80099cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099d4:	f380 8811 	msr	BASEPRI, r0
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f7ff fca6 	bl	8009330 <vTaskSwitchContext>
 80099e4:	f04f 0000 	mov.w	r0, #0
 80099e8:	f380 8811 	msr	BASEPRI, r0
 80099ec:	bc09      	pop	{r0, r3}
 80099ee:	6819      	ldr	r1, [r3, #0]
 80099f0:	6808      	ldr	r0, [r1, #0]
 80099f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f6:	f01e 0f10 	tst.w	lr, #16
 80099fa:	bf08      	it	eq
 80099fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a00:	f380 8809 	msr	PSP, r0
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	f3af 8000 	nop.w

08009a10 <pxCurrentTCBConst>:
 8009a10:	20000d7c 	.word	0x20000d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop

08009a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	607b      	str	r3, [r7, #4]
}
 8009a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a32:	f7ff fbc5 	bl	80091c0 <xTaskIncrementTick>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a3c:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <xPortSysTickHandler+0x40>)
 8009a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	2300      	movs	r3, #0
 8009a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f383 8811 	msr	BASEPRI, r3
}
 8009a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <vPortSetupTimerInterrupt+0x34>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a66:	4b0b      	ldr	r3, [pc, #44]	; (8009a94 <vPortSetupTimerInterrupt+0x38>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <vPortSetupTimerInterrupt+0x3c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a0a      	ldr	r2, [pc, #40]	; (8009a9c <vPortSetupTimerInterrupt+0x40>)
 8009a72:	fba2 2303 	umull	r2, r3, r2, r3
 8009a76:	099b      	lsrs	r3, r3, #6
 8009a78:	4a09      	ldr	r2, [pc, #36]	; (8009aa0 <vPortSetupTimerInterrupt+0x44>)
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a7e:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <vPortSetupTimerInterrupt+0x34>)
 8009a80:	2207      	movs	r2, #7
 8009a82:	601a      	str	r2, [r3, #0]
}
 8009a84:	bf00      	nop
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	e000e010 	.word	0xe000e010
 8009a94:	e000e018 	.word	0xe000e018
 8009a98:	20000004 	.word	0x20000004
 8009a9c:	10624dd3 	.word	0x10624dd3
 8009aa0:	e000e014 	.word	0xe000e014

08009aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ab4 <vPortEnableVFP+0x10>
 8009aa8:	6801      	ldr	r1, [r0, #0]
 8009aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009aae:	6001      	str	r1, [r0, #0]
 8009ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ab2:	bf00      	nop
 8009ab4:	e000ed88 	.word	0xe000ed88

08009ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08a      	sub	sp, #40	; 0x28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ac4:	f7ff fad2 	bl	800906c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ac8:	4b5b      	ldr	r3, [pc, #364]	; (8009c38 <pvPortMalloc+0x180>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ad0:	f000 f920 	bl	8009d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ad4:	4b59      	ldr	r3, [pc, #356]	; (8009c3c <pvPortMalloc+0x184>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4013      	ands	r3, r2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f040 8093 	bne.w	8009c08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d01d      	beq.n	8009b24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ae8:	2208      	movs	r2, #8
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4413      	add	r3, r2
 8009aee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f003 0307 	and.w	r3, r3, #7
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d014      	beq.n	8009b24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f023 0307 	bic.w	r3, r3, #7
 8009b00:	3308      	adds	r3, #8
 8009b02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f003 0307 	and.w	r3, r3, #7
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00a      	beq.n	8009b24 <pvPortMalloc+0x6c>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	617b      	str	r3, [r7, #20]
}
 8009b20:	bf00      	nop
 8009b22:	e7fe      	b.n	8009b22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d06e      	beq.n	8009c08 <pvPortMalloc+0x150>
 8009b2a:	4b45      	ldr	r3, [pc, #276]	; (8009c40 <pvPortMalloc+0x188>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d869      	bhi.n	8009c08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b34:	4b43      	ldr	r3, [pc, #268]	; (8009c44 <pvPortMalloc+0x18c>)
 8009b36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b38:	4b42      	ldr	r3, [pc, #264]	; (8009c44 <pvPortMalloc+0x18c>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b3e:	e004      	b.n	8009b4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d903      	bls.n	8009b5c <pvPortMalloc+0xa4>
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1f1      	bne.n	8009b40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b5c:	4b36      	ldr	r3, [pc, #216]	; (8009c38 <pvPortMalloc+0x180>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d050      	beq.n	8009c08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2208      	movs	r2, #8
 8009b6c:	4413      	add	r3, r2
 8009b6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	2308      	movs	r3, #8
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d91f      	bls.n	8009bc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	f003 0307 	and.w	r3, r3, #7
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <pvPortMalloc+0xf8>
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	613b      	str	r3, [r7, #16]
}
 8009bac:	bf00      	nop
 8009bae:	e7fe      	b.n	8009bae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	1ad2      	subs	r2, r2, r3
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bc2:	69b8      	ldr	r0, [r7, #24]
 8009bc4:	f000 f908 	bl	8009dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bc8:	4b1d      	ldr	r3, [pc, #116]	; (8009c40 <pvPortMalloc+0x188>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	4a1b      	ldr	r2, [pc, #108]	; (8009c40 <pvPortMalloc+0x188>)
 8009bd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bd6:	4b1a      	ldr	r3, [pc, #104]	; (8009c40 <pvPortMalloc+0x188>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <pvPortMalloc+0x190>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d203      	bcs.n	8009bea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009be2:	4b17      	ldr	r3, [pc, #92]	; (8009c40 <pvPortMalloc+0x188>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a18      	ldr	r2, [pc, #96]	; (8009c48 <pvPortMalloc+0x190>)
 8009be8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <pvPortMalloc+0x184>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bfe:	4b13      	ldr	r3, [pc, #76]	; (8009c4c <pvPortMalloc+0x194>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3301      	adds	r3, #1
 8009c04:	4a11      	ldr	r2, [pc, #68]	; (8009c4c <pvPortMalloc+0x194>)
 8009c06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c08:	f7ff fa3e 	bl	8009088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	f003 0307 	and.w	r3, r3, #7
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <pvPortMalloc+0x174>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	60fb      	str	r3, [r7, #12]
}
 8009c28:	bf00      	nop
 8009c2a:	e7fe      	b.n	8009c2a <pvPortMalloc+0x172>
	return pvReturn;
 8009c2c:	69fb      	ldr	r3, [r7, #28]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3728      	adds	r7, #40	; 0x28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20004ab8 	.word	0x20004ab8
 8009c3c:	20004acc 	.word	0x20004acc
 8009c40:	20004abc 	.word	0x20004abc
 8009c44:	20004ab0 	.word	0x20004ab0
 8009c48:	20004ac0 	.word	0x20004ac0
 8009c4c:	20004ac4 	.word	0x20004ac4

08009c50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d04d      	beq.n	8009cfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c62:	2308      	movs	r3, #8
 8009c64:	425b      	negs	r3, r3
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	4413      	add	r3, r2
 8009c6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	4b24      	ldr	r3, [pc, #144]	; (8009d08 <vPortFree+0xb8>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4013      	ands	r3, r2
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10a      	bne.n	8009c94 <vPortFree+0x44>
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	60fb      	str	r3, [r7, #12]
}
 8009c90:	bf00      	nop
 8009c92:	e7fe      	b.n	8009c92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00a      	beq.n	8009cb2 <vPortFree+0x62>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	60bb      	str	r3, [r7, #8]
}
 8009cae:	bf00      	nop
 8009cb0:	e7fe      	b.n	8009cb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	4b14      	ldr	r3, [pc, #80]	; (8009d08 <vPortFree+0xb8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4013      	ands	r3, r2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d01e      	beq.n	8009cfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d11a      	bne.n	8009cfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <vPortFree+0xb8>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	401a      	ands	r2, r3
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cd8:	f7ff f9c8 	bl	800906c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	4b0a      	ldr	r3, [pc, #40]	; (8009d0c <vPortFree+0xbc>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	4a09      	ldr	r2, [pc, #36]	; (8009d0c <vPortFree+0xbc>)
 8009ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cea:	6938      	ldr	r0, [r7, #16]
 8009cec:	f000 f874 	bl	8009dd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cf0:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <vPortFree+0xc0>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	4a06      	ldr	r2, [pc, #24]	; (8009d10 <vPortFree+0xc0>)
 8009cf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cfa:	f7ff f9c5 	bl	8009088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cfe:	bf00      	nop
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20004acc 	.word	0x20004acc
 8009d0c:	20004abc 	.word	0x20004abc
 8009d10:	20004ac8 	.word	0x20004ac8

08009d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d20:	4b27      	ldr	r3, [pc, #156]	; (8009dc0 <prvHeapInit+0xac>)
 8009d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00c      	beq.n	8009d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3307      	adds	r3, #7
 8009d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0307 	bic.w	r3, r3, #7
 8009d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	4a1f      	ldr	r2, [pc, #124]	; (8009dc0 <prvHeapInit+0xac>)
 8009d44:	4413      	add	r3, r2
 8009d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d4c:	4a1d      	ldr	r2, [pc, #116]	; (8009dc4 <prvHeapInit+0xb0>)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d52:	4b1c      	ldr	r3, [pc, #112]	; (8009dc4 <prvHeapInit+0xb0>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d60:	2208      	movs	r2, #8
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f023 0307 	bic.w	r3, r3, #7
 8009d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4a15      	ldr	r2, [pc, #84]	; (8009dc8 <prvHeapInit+0xb4>)
 8009d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <prvHeapInit+0xb4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d7e:	4b12      	ldr	r3, [pc, #72]	; (8009dc8 <prvHeapInit+0xb4>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d94:	4b0c      	ldr	r3, [pc, #48]	; (8009dc8 <prvHeapInit+0xb4>)
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	4a0a      	ldr	r2, [pc, #40]	; (8009dcc <prvHeapInit+0xb8>)
 8009da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	4a09      	ldr	r2, [pc, #36]	; (8009dd0 <prvHeapInit+0xbc>)
 8009daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dac:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <prvHeapInit+0xc0>)
 8009dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009db2:	601a      	str	r2, [r3, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	20000eb0 	.word	0x20000eb0
 8009dc4:	20004ab0 	.word	0x20004ab0
 8009dc8:	20004ab8 	.word	0x20004ab8
 8009dcc:	20004ac0 	.word	0x20004ac0
 8009dd0:	20004abc 	.word	0x20004abc
 8009dd4:	20004acc 	.word	0x20004acc

08009dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009de0:	4b28      	ldr	r3, [pc, #160]	; (8009e84 <prvInsertBlockIntoFreeList+0xac>)
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	e002      	b.n	8009dec <prvInsertBlockIntoFreeList+0x14>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d8f7      	bhi.n	8009de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	4413      	add	r3, r2
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d108      	bne.n	8009e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	441a      	add	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	441a      	add	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d118      	bne.n	8009e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	4b15      	ldr	r3, [pc, #84]	; (8009e88 <prvInsertBlockIntoFreeList+0xb0>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d00d      	beq.n	8009e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	441a      	add	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	e008      	b.n	8009e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e56:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <prvInsertBlockIntoFreeList+0xb0>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	e003      	b.n	8009e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d002      	beq.n	8009e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e76:	bf00      	nop
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20004ab0 	.word	0x20004ab0
 8009e88:	20004ab8 	.word	0x20004ab8

08009e8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e90:	2200      	movs	r2, #0
 8009e92:	4912      	ldr	r1, [pc, #72]	; (8009edc <MX_USB_DEVICE_Init+0x50>)
 8009e94:	4812      	ldr	r0, [pc, #72]	; (8009ee0 <MX_USB_DEVICE_Init+0x54>)
 8009e96:	f7fd fa9d 	bl	80073d4 <USBD_Init>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009ea0:	f7f8 fd7c 	bl	800299c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009ea4:	490f      	ldr	r1, [pc, #60]	; (8009ee4 <MX_USB_DEVICE_Init+0x58>)
 8009ea6:	480e      	ldr	r0, [pc, #56]	; (8009ee0 <MX_USB_DEVICE_Init+0x54>)
 8009ea8:	f7fd fac4 	bl	8007434 <USBD_RegisterClass>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009eb2:	f7f8 fd73 	bl	800299c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009eb6:	490c      	ldr	r1, [pc, #48]	; (8009ee8 <MX_USB_DEVICE_Init+0x5c>)
 8009eb8:	4809      	ldr	r0, [pc, #36]	; (8009ee0 <MX_USB_DEVICE_Init+0x54>)
 8009eba:	f7fd f9b5 	bl	8007228 <USBD_CDC_RegisterInterface>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ec4:	f7f8 fd6a 	bl	800299c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ec8:	4805      	ldr	r0, [pc, #20]	; (8009ee0 <MX_USB_DEVICE_Init+0x54>)
 8009eca:	f7fd fae9 	bl	80074a0 <USBD_Start>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ed4:	f7f8 fd62 	bl	800299c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ed8:	bf00      	nop
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	200000b4 	.word	0x200000b4
 8009ee0:	20004ad0 	.word	0x20004ad0
 8009ee4:	2000001c 	.word	0x2000001c
 8009ee8:	200000a0 	.word	0x200000a0

08009eec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	4905      	ldr	r1, [pc, #20]	; (8009f08 <CDC_Init_FS+0x1c>)
 8009ef4:	4805      	ldr	r0, [pc, #20]	; (8009f0c <CDC_Init_FS+0x20>)
 8009ef6:	f7fd f9b1 	bl	800725c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009efa:	4905      	ldr	r1, [pc, #20]	; (8009f10 <CDC_Init_FS+0x24>)
 8009efc:	4803      	ldr	r0, [pc, #12]	; (8009f0c <CDC_Init_FS+0x20>)
 8009efe:	f7fd f9cf 	bl	80072a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	200055ac 	.word	0x200055ac
 8009f0c:	20004ad0 	.word	0x20004ad0
 8009f10:	20004dac 	.word	0x20004dac

08009f14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f14:	b480      	push	{r7}
 8009f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	6039      	str	r1, [r7, #0]
 8009f2e:	71fb      	strb	r3, [r7, #7]
 8009f30:	4613      	mov	r3, r2
 8009f32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	2b23      	cmp	r3, #35	; 0x23
 8009f38:	d84a      	bhi.n	8009fd0 <CDC_Control_FS+0xac>
 8009f3a:	a201      	add	r2, pc, #4	; (adr r2, 8009f40 <CDC_Control_FS+0x1c>)
 8009f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f40:	08009fd1 	.word	0x08009fd1
 8009f44:	08009fd1 	.word	0x08009fd1
 8009f48:	08009fd1 	.word	0x08009fd1
 8009f4c:	08009fd1 	.word	0x08009fd1
 8009f50:	08009fd1 	.word	0x08009fd1
 8009f54:	08009fd1 	.word	0x08009fd1
 8009f58:	08009fd1 	.word	0x08009fd1
 8009f5c:	08009fd1 	.word	0x08009fd1
 8009f60:	08009fd1 	.word	0x08009fd1
 8009f64:	08009fd1 	.word	0x08009fd1
 8009f68:	08009fd1 	.word	0x08009fd1
 8009f6c:	08009fd1 	.word	0x08009fd1
 8009f70:	08009fd1 	.word	0x08009fd1
 8009f74:	08009fd1 	.word	0x08009fd1
 8009f78:	08009fd1 	.word	0x08009fd1
 8009f7c:	08009fd1 	.word	0x08009fd1
 8009f80:	08009fd1 	.word	0x08009fd1
 8009f84:	08009fd1 	.word	0x08009fd1
 8009f88:	08009fd1 	.word	0x08009fd1
 8009f8c:	08009fd1 	.word	0x08009fd1
 8009f90:	08009fd1 	.word	0x08009fd1
 8009f94:	08009fd1 	.word	0x08009fd1
 8009f98:	08009fd1 	.word	0x08009fd1
 8009f9c:	08009fd1 	.word	0x08009fd1
 8009fa0:	08009fd1 	.word	0x08009fd1
 8009fa4:	08009fd1 	.word	0x08009fd1
 8009fa8:	08009fd1 	.word	0x08009fd1
 8009fac:	08009fd1 	.word	0x08009fd1
 8009fb0:	08009fd1 	.word	0x08009fd1
 8009fb4:	08009fd1 	.word	0x08009fd1
 8009fb8:	08009fd1 	.word	0x08009fd1
 8009fbc:	08009fd1 	.word	0x08009fd1
 8009fc0:	08009fd1 	.word	0x08009fd1
 8009fc4:	08009fd1 	.word	0x08009fd1
 8009fc8:	08009fd1 	.word	0x08009fd1
 8009fcc:	08009fd1 	.word	0x08009fd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009fd0:	bf00      	nop
  }

  return (USBD_OK);
 8009fd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	480e      	ldr	r0, [pc, #56]	; (800a028 <CDC_Receive_FS+0x48>)
 8009fee:	f7fd f957 	bl	80072a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009ff2:	480d      	ldr	r0, [pc, #52]	; (800a028 <CDC_Receive_FS+0x48>)
 8009ff4:	f7fd f9b8 	bl	8007368 <USBD_CDC_ReceivePacket>

  // Received characters should individually be sent to the CLI
  for(int i = 0; i < *Len; i++){
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	e009      	b.n	800a012 <CDC_Receive_FS+0x32>
	  cli_receive_byte(Buf[i]);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	4413      	add	r3, r2
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	4618      	mov	r0, r3
 800a008:	f7f8 fab6 	bl	8002578 <cli_receive_byte>
  for(int i = 0; i < *Len; i++){
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	3301      	adds	r3, #1
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d8f0      	bhi.n	8009ffe <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 800a01c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20004ad0 	.word	0x20004ad0

0800a02c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a03c:	4b0d      	ldr	r3, [pc, #52]	; (800a074 <CDC_Transmit_FS+0x48>)
 800a03e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a042:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a04e:	2301      	movs	r3, #1
 800a050:	e00b      	b.n	800a06a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a052:	887b      	ldrh	r3, [r7, #2]
 800a054:	461a      	mov	r2, r3
 800a056:	6879      	ldr	r1, [r7, #4]
 800a058:	4806      	ldr	r0, [pc, #24]	; (800a074 <CDC_Transmit_FS+0x48>)
 800a05a:	f7fd f8ff 	bl	800725c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a05e:	4805      	ldr	r0, [pc, #20]	; (800a074 <CDC_Transmit_FS+0x48>)
 800a060:	f7fd f93c 	bl	80072dc <USBD_CDC_TransmitPacket>
 800a064:	4603      	mov	r3, r0
 800a066:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20004ad0 	.word	0x20004ad0

0800a078 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a078:	b480      	push	{r7}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	4613      	mov	r3, r2
 800a084:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a08a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	371c      	adds	r7, #28
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
	...

0800a09c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	6039      	str	r1, [r7, #0]
 800a0a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2212      	movs	r2, #18
 800a0ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0ae:	4b03      	ldr	r3, [pc, #12]	; (800a0bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	200000d0 	.word	0x200000d0

0800a0c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	6039      	str	r1, [r7, #0]
 800a0ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2204      	movs	r2, #4
 800a0d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a0d2:	4b03      	ldr	r3, [pc, #12]	; (800a0e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	200000e4 	.word	0x200000e4

0800a0e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	6039      	str	r1, [r7, #0]
 800a0ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0f0:	79fb      	ldrb	r3, [r7, #7]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d105      	bne.n	800a102 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	4907      	ldr	r1, [pc, #28]	; (800a118 <USBD_FS_ProductStrDescriptor+0x34>)
 800a0fa:	4808      	ldr	r0, [pc, #32]	; (800a11c <USBD_FS_ProductStrDescriptor+0x38>)
 800a0fc:	f7fe fb7c 	bl	80087f8 <USBD_GetString>
 800a100:	e004      	b.n	800a10c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4904      	ldr	r1, [pc, #16]	; (800a118 <USBD_FS_ProductStrDescriptor+0x34>)
 800a106:	4805      	ldr	r0, [pc, #20]	; (800a11c <USBD_FS_ProductStrDescriptor+0x38>)
 800a108:	f7fe fb76 	bl	80087f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a10c:	4b02      	ldr	r3, [pc, #8]	; (800a118 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20005dac 	.word	0x20005dac
 800a11c:	0800eae0 	.word	0x0800eae0

0800a120 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	4603      	mov	r3, r0
 800a128:	6039      	str	r1, [r7, #0]
 800a12a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	4904      	ldr	r1, [pc, #16]	; (800a140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a130:	4804      	ldr	r0, [pc, #16]	; (800a144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a132:	f7fe fb61 	bl	80087f8 <USBD_GetString>
  return USBD_StrDesc;
 800a136:	4b02      	ldr	r3, [pc, #8]	; (800a140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20005dac 	.word	0x20005dac
 800a144:	0800eaf8 	.word	0x0800eaf8

0800a148 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	4603      	mov	r3, r0
 800a150:	6039      	str	r1, [r7, #0]
 800a152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	221a      	movs	r2, #26
 800a158:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a15a:	f000 f843 	bl	800a1e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a15e:	4b02      	ldr	r3, [pc, #8]	; (800a168 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	200000e8 	.word	0x200000e8

0800a16c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	6039      	str	r1, [r7, #0]
 800a176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a178:	79fb      	ldrb	r3, [r7, #7]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d105      	bne.n	800a18a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	4907      	ldr	r1, [pc, #28]	; (800a1a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a182:	4808      	ldr	r0, [pc, #32]	; (800a1a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a184:	f7fe fb38 	bl	80087f8 <USBD_GetString>
 800a188:	e004      	b.n	800a194 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	4904      	ldr	r1, [pc, #16]	; (800a1a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a18e:	4805      	ldr	r0, [pc, #20]	; (800a1a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a190:	f7fe fb32 	bl	80087f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a194:	4b02      	ldr	r3, [pc, #8]	; (800a1a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a196:	4618      	mov	r0, r3
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	20005dac 	.word	0x20005dac
 800a1a4:	0800eb0c 	.word	0x0800eb0c

0800a1a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	6039      	str	r1, [r7, #0]
 800a1b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1b4:	79fb      	ldrb	r3, [r7, #7]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d105      	bne.n	800a1c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	4907      	ldr	r1, [pc, #28]	; (800a1dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1be:	4808      	ldr	r0, [pc, #32]	; (800a1e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1c0:	f7fe fb1a 	bl	80087f8 <USBD_GetString>
 800a1c4:	e004      	b.n	800a1d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	4904      	ldr	r1, [pc, #16]	; (800a1dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1ca:	4805      	ldr	r0, [pc, #20]	; (800a1e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1cc:	f7fe fb14 	bl	80087f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1d0:	4b02      	ldr	r3, [pc, #8]	; (800a1dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20005dac 	.word	0x20005dac
 800a1e0:	0800eb18 	.word	0x0800eb18

0800a1e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a1ea:	4b0f      	ldr	r3, [pc, #60]	; (800a228 <Get_SerialNum+0x44>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a1f0:	4b0e      	ldr	r3, [pc, #56]	; (800a22c <Get_SerialNum+0x48>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a1f6:	4b0e      	ldr	r3, [pc, #56]	; (800a230 <Get_SerialNum+0x4c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4413      	add	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d009      	beq.n	800a21e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a20a:	2208      	movs	r2, #8
 800a20c:	4909      	ldr	r1, [pc, #36]	; (800a234 <Get_SerialNum+0x50>)
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 f814 	bl	800a23c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a214:	2204      	movs	r2, #4
 800a216:	4908      	ldr	r1, [pc, #32]	; (800a238 <Get_SerialNum+0x54>)
 800a218:	68b8      	ldr	r0, [r7, #8]
 800a21a:	f000 f80f 	bl	800a23c <IntToUnicode>
  }
}
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	1fff7a10 	.word	0x1fff7a10
 800a22c:	1fff7a14 	.word	0x1fff7a14
 800a230:	1fff7a18 	.word	0x1fff7a18
 800a234:	200000ea 	.word	0x200000ea
 800a238:	200000fa 	.word	0x200000fa

0800a23c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	4613      	mov	r3, r2
 800a248:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a24e:	2300      	movs	r3, #0
 800a250:	75fb      	strb	r3, [r7, #23]
 800a252:	e027      	b.n	800a2a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	0f1b      	lsrs	r3, r3, #28
 800a258:	2b09      	cmp	r3, #9
 800a25a:	d80b      	bhi.n	800a274 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	0f1b      	lsrs	r3, r3, #28
 800a260:	b2da      	uxtb	r2, r3
 800a262:	7dfb      	ldrb	r3, [r7, #23]
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	4619      	mov	r1, r3
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	440b      	add	r3, r1
 800a26c:	3230      	adds	r2, #48	; 0x30
 800a26e:	b2d2      	uxtb	r2, r2
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	e00a      	b.n	800a28a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	0f1b      	lsrs	r3, r3, #28
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4619      	mov	r1, r3
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	440b      	add	r3, r1
 800a284:	3237      	adds	r2, #55	; 0x37
 800a286:	b2d2      	uxtb	r2, r2
 800a288:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	011b      	lsls	r3, r3, #4
 800a28e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a290:	7dfb      	ldrb	r3, [r7, #23]
 800a292:	005b      	lsls	r3, r3, #1
 800a294:	3301      	adds	r3, #1
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	4413      	add	r3, r2
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a29e:	7dfb      	ldrb	r3, [r7, #23]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	75fb      	strb	r3, [r7, #23]
 800a2a4:	7dfa      	ldrb	r2, [r7, #23]
 800a2a6:	79fb      	ldrb	r3, [r7, #7]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d3d3      	bcc.n	800a254 <IntToUnicode+0x18>
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	371c      	adds	r7, #28
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
	...

0800a2bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08a      	sub	sp, #40	; 0x28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2c4:	f107 0314 	add.w	r3, r7, #20
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	605a      	str	r2, [r3, #4]
 800a2ce:	609a      	str	r2, [r3, #8]
 800a2d0:	60da      	str	r2, [r3, #12]
 800a2d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2dc:	d13a      	bne.n	800a354 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2de:	2300      	movs	r3, #0
 800a2e0:	613b      	str	r3, [r7, #16]
 800a2e2:	4b1e      	ldr	r3, [pc, #120]	; (800a35c <HAL_PCD_MspInit+0xa0>)
 800a2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e6:	4a1d      	ldr	r2, [pc, #116]	; (800a35c <HAL_PCD_MspInit+0xa0>)
 800a2e8:	f043 0301 	orr.w	r3, r3, #1
 800a2ec:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ee:	4b1b      	ldr	r3, [pc, #108]	; (800a35c <HAL_PCD_MspInit+0xa0>)
 800a2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	613b      	str	r3, [r7, #16]
 800a2f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a2fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a2fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a300:	2302      	movs	r3, #2
 800a302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a304:	2300      	movs	r3, #0
 800a306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a308:	2303      	movs	r3, #3
 800a30a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a30c:	230a      	movs	r3, #10
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a310:	f107 0314 	add.w	r3, r7, #20
 800a314:	4619      	mov	r1, r3
 800a316:	4812      	ldr	r0, [pc, #72]	; (800a360 <HAL_PCD_MspInit+0xa4>)
 800a318:	f7f8 fe56 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a31c:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <HAL_PCD_MspInit+0xa0>)
 800a31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a320:	4a0e      	ldr	r2, [pc, #56]	; (800a35c <HAL_PCD_MspInit+0xa0>)
 800a322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a326:	6353      	str	r3, [r2, #52]	; 0x34
 800a328:	2300      	movs	r3, #0
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	4b0b      	ldr	r3, [pc, #44]	; (800a35c <HAL_PCD_MspInit+0xa0>)
 800a32e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a330:	4a0a      	ldr	r2, [pc, #40]	; (800a35c <HAL_PCD_MspInit+0xa0>)
 800a332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a336:	6453      	str	r3, [r2, #68]	; 0x44
 800a338:	4b08      	ldr	r3, [pc, #32]	; (800a35c <HAL_PCD_MspInit+0xa0>)
 800a33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a340:	60fb      	str	r3, [r7, #12]
 800a342:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a344:	2200      	movs	r2, #0
 800a346:	2105      	movs	r1, #5
 800a348:	2043      	movs	r0, #67	; 0x43
 800a34a:	f7f8 fe06 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a34e:	2043      	movs	r0, #67	; 0x43
 800a350:	f7f8 fe1f 	bl	8002f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a354:	bf00      	nop
 800a356:	3728      	adds	r7, #40	; 0x28
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	40023800 	.word	0x40023800
 800a360:	40020000 	.word	0x40020000

0800a364 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a378:	4619      	mov	r1, r3
 800a37a:	4610      	mov	r0, r2
 800a37c:	f7fd f8dd 	bl	800753a <USBD_LL_SetupStage>
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a39a:	78fa      	ldrb	r2, [r7, #3]
 800a39c:	6879      	ldr	r1, [r7, #4]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	00db      	lsls	r3, r3, #3
 800a3a2:	4413      	add	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	440b      	add	r3, r1
 800a3a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	78fb      	ldrb	r3, [r7, #3]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	f7fd f917 	bl	80075e4 <USBD_LL_DataOutStage>
}
 800a3b6:	bf00      	nop
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b082      	sub	sp, #8
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a3d0:	78fa      	ldrb	r2, [r7, #3]
 800a3d2:	6879      	ldr	r1, [r7, #4]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	4413      	add	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	440b      	add	r3, r1
 800a3de:	334c      	adds	r3, #76	; 0x4c
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	78fb      	ldrb	r3, [r7, #3]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	f7fd f9b0 	bl	800774a <USBD_LL_DataInStage>
}
 800a3ea:	bf00      	nop
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a400:	4618      	mov	r0, r3
 800a402:	f7fd fae4 	bl	80079ce <USBD_LL_SOF>
}
 800a406:	bf00      	nop
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a416:	2301      	movs	r3, #1
 800a418:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d001      	beq.n	800a426 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a422:	f7f8 fabb 	bl	800299c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a42c:	7bfa      	ldrb	r2, [r7, #15]
 800a42e:	4611      	mov	r1, r2
 800a430:	4618      	mov	r0, r3
 800a432:	f7fd fa8e 	bl	8007952 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fd fa36 	bl	80078ae <USBD_LL_Reset>
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fd fa89 	bl	8007972 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	6812      	ldr	r2, [r2, #0]
 800a46e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a1b      	ldr	r3, [r3, #32]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a480:	4b04      	ldr	r3, [pc, #16]	; (800a494 <HAL_PCD_SuspendCallback+0x48>)
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	4a03      	ldr	r2, [pc, #12]	; (800a494 <HAL_PCD_SuspendCallback+0x48>)
 800a486:	f043 0306 	orr.w	r3, r3, #6
 800a48a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	e000ed00 	.word	0xe000ed00

0800a498 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fd fa79 	bl	800799e <USBD_LL_Resume>
}
 800a4ac:	bf00      	nop
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4c6:	78fa      	ldrb	r2, [r7, #3]
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fd fad1 	bl	8007a72 <USBD_LL_IsoOUTIncomplete>
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4ea:	78fa      	ldrb	r2, [r7, #3]
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fd fa8d 	bl	8007a0e <USBD_LL_IsoINIncomplete>
}
 800a4f4:	bf00      	nop
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fd fae3 	bl	8007ad6 <USBD_LL_DevConnected>
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a526:	4618      	mov	r0, r3
 800a528:	f7fd fae0 	bl	8007aec <USBD_LL_DevDisconnected>
}
 800a52c:	bf00      	nop
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d13c      	bne.n	800a5be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a544:	4a20      	ldr	r2, [pc, #128]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a1e      	ldr	r2, [pc, #120]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a550:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a554:	4b1c      	ldr	r3, [pc, #112]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a556:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a55a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a55c:	4b1a      	ldr	r3, [pc, #104]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a55e:	2204      	movs	r2, #4
 800a560:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a562:	4b19      	ldr	r3, [pc, #100]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a564:	2202      	movs	r2, #2
 800a566:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a568:	4b17      	ldr	r3, [pc, #92]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a56e:	4b16      	ldr	r3, [pc, #88]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a570:	2202      	movs	r2, #2
 800a572:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a574:	4b14      	ldr	r3, [pc, #80]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a576:	2200      	movs	r2, #0
 800a578:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a57a:	4b13      	ldr	r3, [pc, #76]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a580:	4b11      	ldr	r3, [pc, #68]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a582:	2200      	movs	r2, #0
 800a584:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a586:	4b10      	ldr	r3, [pc, #64]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a588:	2200      	movs	r2, #0
 800a58a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a58c:	4b0e      	ldr	r3, [pc, #56]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a58e:	2200      	movs	r2, #0
 800a590:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a592:	480d      	ldr	r0, [pc, #52]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a594:	f7f8 fee8 	bl	8003368 <HAL_PCD_Init>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a59e:	f7f8 f9fd 	bl	800299c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a5a2:	2180      	movs	r1, #128	; 0x80
 800a5a4:	4808      	ldr	r0, [pc, #32]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a5a6:	f7fa f940 	bl	800482a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a5aa:	2240      	movs	r2, #64	; 0x40
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4806      	ldr	r0, [pc, #24]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a5b0:	f7fa f8f4 	bl	800479c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a5b4:	2280      	movs	r2, #128	; 0x80
 800a5b6:	2101      	movs	r1, #1
 800a5b8:	4803      	ldr	r0, [pc, #12]	; (800a5c8 <USBD_LL_Init+0x94>)
 800a5ba:	f7fa f8ef 	bl	800479c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20005fac 	.word	0x20005fac

0800a5cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7f8 ffdd 	bl	80035a2 <HAL_PCD_Start>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 f942 	bl	800a878 <USBD_Get_USB_Status>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	4608      	mov	r0, r1
 800a60c:	4611      	mov	r1, r2
 800a60e:	461a      	mov	r2, r3
 800a610:	4603      	mov	r3, r0
 800a612:	70fb      	strb	r3, [r7, #3]
 800a614:	460b      	mov	r3, r1
 800a616:	70bb      	strb	r3, [r7, #2]
 800a618:	4613      	mov	r3, r2
 800a61a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a62a:	78bb      	ldrb	r3, [r7, #2]
 800a62c:	883a      	ldrh	r2, [r7, #0]
 800a62e:	78f9      	ldrb	r1, [r7, #3]
 800a630:	f7f9 fcae 	bl	8003f90 <HAL_PCD_EP_Open>
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 f91c 	bl	800a878 <USBD_Get_USB_Status>
 800a640:	4603      	mov	r3, r0
 800a642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a644:	7bbb      	ldrb	r3, [r7, #14]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	460b      	mov	r3, r1
 800a658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a668:	78fa      	ldrb	r2, [r7, #3]
 800a66a:	4611      	mov	r1, r2
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7f9 fcf7 	bl	8004060 <HAL_PCD_EP_Close>
 800a672:	4603      	mov	r3, r0
 800a674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 f8fd 	bl	800a878 <USBD_Get_USB_Status>
 800a67e:	4603      	mov	r3, r0
 800a680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a682:	7bbb      	ldrb	r3, [r7, #14]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6a6:	78fa      	ldrb	r2, [r7, #3]
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7f9 fdcf 	bl	800424e <HAL_PCD_EP_SetStall>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 f8de 	bl	800a878 <USBD_Get_USB_Status>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6e4:	78fa      	ldrb	r2, [r7, #3]
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7f9 fe14 	bl	8004316 <HAL_PCD_EP_ClrStall>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 f8bf 	bl	800a878 <USBD_Get_USB_Status>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	460b      	mov	r3, r1
 800a712:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a71a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a71c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a720:	2b00      	cmp	r3, #0
 800a722:	da0b      	bge.n	800a73c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a72a:	68f9      	ldr	r1, [r7, #12]
 800a72c:	4613      	mov	r3, r2
 800a72e:	00db      	lsls	r3, r3, #3
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	440b      	add	r3, r1
 800a736:	333e      	adds	r3, #62	; 0x3e
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	e00b      	b.n	800a754 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a742:	68f9      	ldr	r1, [r7, #12]
 800a744:	4613      	mov	r3, r2
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	4413      	add	r3, r2
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	440b      	add	r3, r1
 800a74e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a752:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a754:	4618      	mov	r0, r3
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	460b      	mov	r3, r1
 800a76a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a77a:	78fa      	ldrb	r2, [r7, #3]
 800a77c:	4611      	mov	r1, r2
 800a77e:	4618      	mov	r0, r3
 800a780:	f7f9 fbe1 	bl	8003f46 <HAL_PCD_SetAddress>
 800a784:	4603      	mov	r3, r0
 800a786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a788:	7bfb      	ldrb	r3, [r7, #15]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 f874 	bl	800a878 <USBD_Get_USB_Status>
 800a790:	4603      	mov	r3, r0
 800a792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a794:	7bbb      	ldrb	r3, [r7, #14]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b086      	sub	sp, #24
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	603b      	str	r3, [r7, #0]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a7bc:	7af9      	ldrb	r1, [r7, #11]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	f7f9 fcfa 	bl	80041ba <HAL_PCD_EP_Transmit>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f853 	bl	800a878 <USBD_Get_USB_Status>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	603b      	str	r3, [r7, #0]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a7fe:	7af9      	ldrb	r1, [r7, #11]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	f7f9 fc76 	bl	80040f4 <HAL_PCD_EP_Receive>
 800a808:	4603      	mov	r3, r0
 800a80a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 f832 	bl	800a878 <USBD_Get_USB_Status>
 800a814:	4603      	mov	r3, r0
 800a816:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a818:	7dbb      	ldrb	r3, [r7, #22]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	460b      	mov	r3, r1
 800a82c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a834:	78fa      	ldrb	r2, [r7, #3]
 800a836:	4611      	mov	r1, r2
 800a838:	4618      	mov	r0, r3
 800a83a:	f7f9 fca6 	bl	800418a <HAL_PCD_EP_GetRxCount>
 800a83e:	4603      	mov	r3, r0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a850:	4b03      	ldr	r3, [pc, #12]	; (800a860 <USBD_static_malloc+0x18>)
}
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	200064b8 	.word	0x200064b8

0800a864 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]

}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a886:	79fb      	ldrb	r3, [r7, #7]
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d817      	bhi.n	800a8bc <USBD_Get_USB_Status+0x44>
 800a88c:	a201      	add	r2, pc, #4	; (adr r2, 800a894 <USBD_Get_USB_Status+0x1c>)
 800a88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a892:	bf00      	nop
 800a894:	0800a8a5 	.word	0x0800a8a5
 800a898:	0800a8ab 	.word	0x0800a8ab
 800a89c:	0800a8b1 	.word	0x0800a8b1
 800a8a0:	0800a8b7 	.word	0x0800a8b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a8:	e00b      	b.n	800a8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ae:	e008      	b.n	800a8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b4:	e005      	b.n	800a8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ba:	e002      	b.n	800a8c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c0:	bf00      	nop
  }
  return usb_status;
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <malloc>:
 800a8d0:	4b02      	ldr	r3, [pc, #8]	; (800a8dc <malloc+0xc>)
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	6818      	ldr	r0, [r3, #0]
 800a8d6:	f000 b823 	b.w	800a920 <_malloc_r>
 800a8da:	bf00      	nop
 800a8dc:	2000015c 	.word	0x2000015c

0800a8e0 <sbrk_aligned>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	4e0e      	ldr	r6, [pc, #56]	; (800a91c <sbrk_aligned+0x3c>)
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	6831      	ldr	r1, [r6, #0]
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	b911      	cbnz	r1, 800a8f2 <sbrk_aligned+0x12>
 800a8ec:	f000 fffc 	bl	800b8e8 <_sbrk_r>
 800a8f0:	6030      	str	r0, [r6, #0]
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f000 fff7 	bl	800b8e8 <_sbrk_r>
 800a8fa:	1c43      	adds	r3, r0, #1
 800a8fc:	d00a      	beq.n	800a914 <sbrk_aligned+0x34>
 800a8fe:	1cc4      	adds	r4, r0, #3
 800a900:	f024 0403 	bic.w	r4, r4, #3
 800a904:	42a0      	cmp	r0, r4
 800a906:	d007      	beq.n	800a918 <sbrk_aligned+0x38>
 800a908:	1a21      	subs	r1, r4, r0
 800a90a:	4628      	mov	r0, r5
 800a90c:	f000 ffec 	bl	800b8e8 <_sbrk_r>
 800a910:	3001      	adds	r0, #1
 800a912:	d101      	bne.n	800a918 <sbrk_aligned+0x38>
 800a914:	f04f 34ff 	mov.w	r4, #4294967295
 800a918:	4620      	mov	r0, r4
 800a91a:	bd70      	pop	{r4, r5, r6, pc}
 800a91c:	200066dc 	.word	0x200066dc

0800a920 <_malloc_r>:
 800a920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a924:	1ccd      	adds	r5, r1, #3
 800a926:	f025 0503 	bic.w	r5, r5, #3
 800a92a:	3508      	adds	r5, #8
 800a92c:	2d0c      	cmp	r5, #12
 800a92e:	bf38      	it	cc
 800a930:	250c      	movcc	r5, #12
 800a932:	2d00      	cmp	r5, #0
 800a934:	4607      	mov	r7, r0
 800a936:	db01      	blt.n	800a93c <_malloc_r+0x1c>
 800a938:	42a9      	cmp	r1, r5
 800a93a:	d905      	bls.n	800a948 <_malloc_r+0x28>
 800a93c:	230c      	movs	r3, #12
 800a93e:	603b      	str	r3, [r7, #0]
 800a940:	2600      	movs	r6, #0
 800a942:	4630      	mov	r0, r6
 800a944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a948:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa1c <_malloc_r+0xfc>
 800a94c:	f000 f868 	bl	800aa20 <__malloc_lock>
 800a950:	f8d8 3000 	ldr.w	r3, [r8]
 800a954:	461c      	mov	r4, r3
 800a956:	bb5c      	cbnz	r4, 800a9b0 <_malloc_r+0x90>
 800a958:	4629      	mov	r1, r5
 800a95a:	4638      	mov	r0, r7
 800a95c:	f7ff ffc0 	bl	800a8e0 <sbrk_aligned>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	4604      	mov	r4, r0
 800a964:	d155      	bne.n	800aa12 <_malloc_r+0xf2>
 800a966:	f8d8 4000 	ldr.w	r4, [r8]
 800a96a:	4626      	mov	r6, r4
 800a96c:	2e00      	cmp	r6, #0
 800a96e:	d145      	bne.n	800a9fc <_malloc_r+0xdc>
 800a970:	2c00      	cmp	r4, #0
 800a972:	d048      	beq.n	800aa06 <_malloc_r+0xe6>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	4631      	mov	r1, r6
 800a978:	4638      	mov	r0, r7
 800a97a:	eb04 0903 	add.w	r9, r4, r3
 800a97e:	f000 ffb3 	bl	800b8e8 <_sbrk_r>
 800a982:	4581      	cmp	r9, r0
 800a984:	d13f      	bne.n	800aa06 <_malloc_r+0xe6>
 800a986:	6821      	ldr	r1, [r4, #0]
 800a988:	1a6d      	subs	r5, r5, r1
 800a98a:	4629      	mov	r1, r5
 800a98c:	4638      	mov	r0, r7
 800a98e:	f7ff ffa7 	bl	800a8e0 <sbrk_aligned>
 800a992:	3001      	adds	r0, #1
 800a994:	d037      	beq.n	800aa06 <_malloc_r+0xe6>
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	442b      	add	r3, r5
 800a99a:	6023      	str	r3, [r4, #0]
 800a99c:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d038      	beq.n	800aa16 <_malloc_r+0xf6>
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	42a2      	cmp	r2, r4
 800a9a8:	d12b      	bne.n	800aa02 <_malloc_r+0xe2>
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	605a      	str	r2, [r3, #4]
 800a9ae:	e00f      	b.n	800a9d0 <_malloc_r+0xb0>
 800a9b0:	6822      	ldr	r2, [r4, #0]
 800a9b2:	1b52      	subs	r2, r2, r5
 800a9b4:	d41f      	bmi.n	800a9f6 <_malloc_r+0xd6>
 800a9b6:	2a0b      	cmp	r2, #11
 800a9b8:	d917      	bls.n	800a9ea <_malloc_r+0xca>
 800a9ba:	1961      	adds	r1, r4, r5
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	6025      	str	r5, [r4, #0]
 800a9c0:	bf18      	it	ne
 800a9c2:	6059      	strne	r1, [r3, #4]
 800a9c4:	6863      	ldr	r3, [r4, #4]
 800a9c6:	bf08      	it	eq
 800a9c8:	f8c8 1000 	streq.w	r1, [r8]
 800a9cc:	5162      	str	r2, [r4, r5]
 800a9ce:	604b      	str	r3, [r1, #4]
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	f104 060b 	add.w	r6, r4, #11
 800a9d6:	f000 f829 	bl	800aa2c <__malloc_unlock>
 800a9da:	f026 0607 	bic.w	r6, r6, #7
 800a9de:	1d23      	adds	r3, r4, #4
 800a9e0:	1af2      	subs	r2, r6, r3
 800a9e2:	d0ae      	beq.n	800a942 <_malloc_r+0x22>
 800a9e4:	1b9b      	subs	r3, r3, r6
 800a9e6:	50a3      	str	r3, [r4, r2]
 800a9e8:	e7ab      	b.n	800a942 <_malloc_r+0x22>
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	6862      	ldr	r2, [r4, #4]
 800a9ee:	d1dd      	bne.n	800a9ac <_malloc_r+0x8c>
 800a9f0:	f8c8 2000 	str.w	r2, [r8]
 800a9f4:	e7ec      	b.n	800a9d0 <_malloc_r+0xb0>
 800a9f6:	4623      	mov	r3, r4
 800a9f8:	6864      	ldr	r4, [r4, #4]
 800a9fa:	e7ac      	b.n	800a956 <_malloc_r+0x36>
 800a9fc:	4634      	mov	r4, r6
 800a9fe:	6876      	ldr	r6, [r6, #4]
 800aa00:	e7b4      	b.n	800a96c <_malloc_r+0x4c>
 800aa02:	4613      	mov	r3, r2
 800aa04:	e7cc      	b.n	800a9a0 <_malloc_r+0x80>
 800aa06:	230c      	movs	r3, #12
 800aa08:	603b      	str	r3, [r7, #0]
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	f000 f80e 	bl	800aa2c <__malloc_unlock>
 800aa10:	e797      	b.n	800a942 <_malloc_r+0x22>
 800aa12:	6025      	str	r5, [r4, #0]
 800aa14:	e7dc      	b.n	800a9d0 <_malloc_r+0xb0>
 800aa16:	605b      	str	r3, [r3, #4]
 800aa18:	deff      	udf	#255	; 0xff
 800aa1a:	bf00      	nop
 800aa1c:	200066d8 	.word	0x200066d8

0800aa20 <__malloc_lock>:
 800aa20:	4801      	ldr	r0, [pc, #4]	; (800aa28 <__malloc_lock+0x8>)
 800aa22:	f000 bfae 	b.w	800b982 <__retarget_lock_acquire_recursive>
 800aa26:	bf00      	nop
 800aa28:	20006820 	.word	0x20006820

0800aa2c <__malloc_unlock>:
 800aa2c:	4801      	ldr	r0, [pc, #4]	; (800aa34 <__malloc_unlock+0x8>)
 800aa2e:	f000 bfa9 	b.w	800b984 <__retarget_lock_release_recursive>
 800aa32:	bf00      	nop
 800aa34:	20006820 	.word	0x20006820

0800aa38 <__cvt>:
 800aa38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa3c:	ec55 4b10 	vmov	r4, r5, d0
 800aa40:	2d00      	cmp	r5, #0
 800aa42:	460e      	mov	r6, r1
 800aa44:	4619      	mov	r1, r3
 800aa46:	462b      	mov	r3, r5
 800aa48:	bfbb      	ittet	lt
 800aa4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa4e:	461d      	movlt	r5, r3
 800aa50:	2300      	movge	r3, #0
 800aa52:	232d      	movlt	r3, #45	; 0x2d
 800aa54:	700b      	strb	r3, [r1, #0]
 800aa56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa5c:	4691      	mov	r9, r2
 800aa5e:	f023 0820 	bic.w	r8, r3, #32
 800aa62:	bfbc      	itt	lt
 800aa64:	4622      	movlt	r2, r4
 800aa66:	4614      	movlt	r4, r2
 800aa68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa6c:	d005      	beq.n	800aa7a <__cvt+0x42>
 800aa6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aa72:	d100      	bne.n	800aa76 <__cvt+0x3e>
 800aa74:	3601      	adds	r6, #1
 800aa76:	2102      	movs	r1, #2
 800aa78:	e000      	b.n	800aa7c <__cvt+0x44>
 800aa7a:	2103      	movs	r1, #3
 800aa7c:	ab03      	add	r3, sp, #12
 800aa7e:	9301      	str	r3, [sp, #4]
 800aa80:	ab02      	add	r3, sp, #8
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	ec45 4b10 	vmov	d0, r4, r5
 800aa88:	4653      	mov	r3, sl
 800aa8a:	4632      	mov	r2, r6
 800aa8c:	f001 f814 	bl	800bab8 <_dtoa_r>
 800aa90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aa94:	4607      	mov	r7, r0
 800aa96:	d102      	bne.n	800aa9e <__cvt+0x66>
 800aa98:	f019 0f01 	tst.w	r9, #1
 800aa9c:	d022      	beq.n	800aae4 <__cvt+0xac>
 800aa9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aaa2:	eb07 0906 	add.w	r9, r7, r6
 800aaa6:	d110      	bne.n	800aaca <__cvt+0x92>
 800aaa8:	783b      	ldrb	r3, [r7, #0]
 800aaaa:	2b30      	cmp	r3, #48	; 0x30
 800aaac:	d10a      	bne.n	800aac4 <__cvt+0x8c>
 800aaae:	2200      	movs	r2, #0
 800aab0:	2300      	movs	r3, #0
 800aab2:	4620      	mov	r0, r4
 800aab4:	4629      	mov	r1, r5
 800aab6:	f7f6 f81f 	bl	8000af8 <__aeabi_dcmpeq>
 800aaba:	b918      	cbnz	r0, 800aac4 <__cvt+0x8c>
 800aabc:	f1c6 0601 	rsb	r6, r6, #1
 800aac0:	f8ca 6000 	str.w	r6, [sl]
 800aac4:	f8da 3000 	ldr.w	r3, [sl]
 800aac8:	4499      	add	r9, r3
 800aaca:	2200      	movs	r2, #0
 800aacc:	2300      	movs	r3, #0
 800aace:	4620      	mov	r0, r4
 800aad0:	4629      	mov	r1, r5
 800aad2:	f7f6 f811 	bl	8000af8 <__aeabi_dcmpeq>
 800aad6:	b108      	cbz	r0, 800aadc <__cvt+0xa4>
 800aad8:	f8cd 900c 	str.w	r9, [sp, #12]
 800aadc:	2230      	movs	r2, #48	; 0x30
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	454b      	cmp	r3, r9
 800aae2:	d307      	bcc.n	800aaf4 <__cvt+0xbc>
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aae8:	1bdb      	subs	r3, r3, r7
 800aaea:	4638      	mov	r0, r7
 800aaec:	6013      	str	r3, [r2, #0]
 800aaee:	b004      	add	sp, #16
 800aaf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf4:	1c59      	adds	r1, r3, #1
 800aaf6:	9103      	str	r1, [sp, #12]
 800aaf8:	701a      	strb	r2, [r3, #0]
 800aafa:	e7f0      	b.n	800aade <__cvt+0xa6>

0800aafc <__exponent>:
 800aafc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aafe:	4603      	mov	r3, r0
 800ab00:	2900      	cmp	r1, #0
 800ab02:	bfb8      	it	lt
 800ab04:	4249      	neglt	r1, r1
 800ab06:	f803 2b02 	strb.w	r2, [r3], #2
 800ab0a:	bfb4      	ite	lt
 800ab0c:	222d      	movlt	r2, #45	; 0x2d
 800ab0e:	222b      	movge	r2, #43	; 0x2b
 800ab10:	2909      	cmp	r1, #9
 800ab12:	7042      	strb	r2, [r0, #1]
 800ab14:	dd2a      	ble.n	800ab6c <__exponent+0x70>
 800ab16:	f10d 0207 	add.w	r2, sp, #7
 800ab1a:	4617      	mov	r7, r2
 800ab1c:	260a      	movs	r6, #10
 800ab1e:	4694      	mov	ip, r2
 800ab20:	fb91 f5f6 	sdiv	r5, r1, r6
 800ab24:	fb06 1415 	mls	r4, r6, r5, r1
 800ab28:	3430      	adds	r4, #48	; 0x30
 800ab2a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ab2e:	460c      	mov	r4, r1
 800ab30:	2c63      	cmp	r4, #99	; 0x63
 800ab32:	f102 32ff 	add.w	r2, r2, #4294967295
 800ab36:	4629      	mov	r1, r5
 800ab38:	dcf1      	bgt.n	800ab1e <__exponent+0x22>
 800ab3a:	3130      	adds	r1, #48	; 0x30
 800ab3c:	f1ac 0402 	sub.w	r4, ip, #2
 800ab40:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ab44:	1c41      	adds	r1, r0, #1
 800ab46:	4622      	mov	r2, r4
 800ab48:	42ba      	cmp	r2, r7
 800ab4a:	d30a      	bcc.n	800ab62 <__exponent+0x66>
 800ab4c:	f10d 0209 	add.w	r2, sp, #9
 800ab50:	eba2 020c 	sub.w	r2, r2, ip
 800ab54:	42bc      	cmp	r4, r7
 800ab56:	bf88      	it	hi
 800ab58:	2200      	movhi	r2, #0
 800ab5a:	4413      	add	r3, r2
 800ab5c:	1a18      	subs	r0, r3, r0
 800ab5e:	b003      	add	sp, #12
 800ab60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab62:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ab66:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ab6a:	e7ed      	b.n	800ab48 <__exponent+0x4c>
 800ab6c:	2330      	movs	r3, #48	; 0x30
 800ab6e:	3130      	adds	r1, #48	; 0x30
 800ab70:	7083      	strb	r3, [r0, #2]
 800ab72:	70c1      	strb	r1, [r0, #3]
 800ab74:	1d03      	adds	r3, r0, #4
 800ab76:	e7f1      	b.n	800ab5c <__exponent+0x60>

0800ab78 <_printf_float>:
 800ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7c:	ed2d 8b02 	vpush	{d8}
 800ab80:	b08d      	sub	sp, #52	; 0x34
 800ab82:	460c      	mov	r4, r1
 800ab84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab88:	4616      	mov	r6, r2
 800ab8a:	461f      	mov	r7, r3
 800ab8c:	4605      	mov	r5, r0
 800ab8e:	f000 fe73 	bl	800b878 <_localeconv_r>
 800ab92:	f8d0 a000 	ldr.w	sl, [r0]
 800ab96:	4650      	mov	r0, sl
 800ab98:	f7f5 fb82 	bl	80002a0 <strlen>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	930a      	str	r3, [sp, #40]	; 0x28
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	9305      	str	r3, [sp, #20]
 800aba4:	f8d8 3000 	ldr.w	r3, [r8]
 800aba8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800abac:	3307      	adds	r3, #7
 800abae:	f023 0307 	bic.w	r3, r3, #7
 800abb2:	f103 0208 	add.w	r2, r3, #8
 800abb6:	f8c8 2000 	str.w	r2, [r8]
 800abba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abc2:	9307      	str	r3, [sp, #28]
 800abc4:	f8cd 8018 	str.w	r8, [sp, #24]
 800abc8:	ee08 0a10 	vmov	s16, r0
 800abcc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800abd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abd4:	4b9e      	ldr	r3, [pc, #632]	; (800ae50 <_printf_float+0x2d8>)
 800abd6:	f04f 32ff 	mov.w	r2, #4294967295
 800abda:	f7f5 ffbf 	bl	8000b5c <__aeabi_dcmpun>
 800abde:	bb88      	cbnz	r0, 800ac44 <_printf_float+0xcc>
 800abe0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abe4:	4b9a      	ldr	r3, [pc, #616]	; (800ae50 <_printf_float+0x2d8>)
 800abe6:	f04f 32ff 	mov.w	r2, #4294967295
 800abea:	f7f5 ff99 	bl	8000b20 <__aeabi_dcmple>
 800abee:	bb48      	cbnz	r0, 800ac44 <_printf_float+0xcc>
 800abf0:	2200      	movs	r2, #0
 800abf2:	2300      	movs	r3, #0
 800abf4:	4640      	mov	r0, r8
 800abf6:	4649      	mov	r1, r9
 800abf8:	f7f5 ff88 	bl	8000b0c <__aeabi_dcmplt>
 800abfc:	b110      	cbz	r0, 800ac04 <_printf_float+0x8c>
 800abfe:	232d      	movs	r3, #45	; 0x2d
 800ac00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac04:	4a93      	ldr	r2, [pc, #588]	; (800ae54 <_printf_float+0x2dc>)
 800ac06:	4b94      	ldr	r3, [pc, #592]	; (800ae58 <_printf_float+0x2e0>)
 800ac08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac0c:	bf94      	ite	ls
 800ac0e:	4690      	movls	r8, r2
 800ac10:	4698      	movhi	r8, r3
 800ac12:	2303      	movs	r3, #3
 800ac14:	6123      	str	r3, [r4, #16]
 800ac16:	9b05      	ldr	r3, [sp, #20]
 800ac18:	f023 0304 	bic.w	r3, r3, #4
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	f04f 0900 	mov.w	r9, #0
 800ac22:	9700      	str	r7, [sp, #0]
 800ac24:	4633      	mov	r3, r6
 800ac26:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac28:	4621      	mov	r1, r4
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f000 f9da 	bl	800afe4 <_printf_common>
 800ac30:	3001      	adds	r0, #1
 800ac32:	f040 8090 	bne.w	800ad56 <_printf_float+0x1de>
 800ac36:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3a:	b00d      	add	sp, #52	; 0x34
 800ac3c:	ecbd 8b02 	vpop	{d8}
 800ac40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac44:	4642      	mov	r2, r8
 800ac46:	464b      	mov	r3, r9
 800ac48:	4640      	mov	r0, r8
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	f7f5 ff86 	bl	8000b5c <__aeabi_dcmpun>
 800ac50:	b140      	cbz	r0, 800ac64 <_printf_float+0xec>
 800ac52:	464b      	mov	r3, r9
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	bfbc      	itt	lt
 800ac58:	232d      	movlt	r3, #45	; 0x2d
 800ac5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac5e:	4a7f      	ldr	r2, [pc, #508]	; (800ae5c <_printf_float+0x2e4>)
 800ac60:	4b7f      	ldr	r3, [pc, #508]	; (800ae60 <_printf_float+0x2e8>)
 800ac62:	e7d1      	b.n	800ac08 <_printf_float+0x90>
 800ac64:	6863      	ldr	r3, [r4, #4]
 800ac66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ac6a:	9206      	str	r2, [sp, #24]
 800ac6c:	1c5a      	adds	r2, r3, #1
 800ac6e:	d13f      	bne.n	800acf0 <_printf_float+0x178>
 800ac70:	2306      	movs	r3, #6
 800ac72:	6063      	str	r3, [r4, #4]
 800ac74:	9b05      	ldr	r3, [sp, #20]
 800ac76:	6861      	ldr	r1, [r4, #4]
 800ac78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9303      	str	r3, [sp, #12]
 800ac80:	ab0a      	add	r3, sp, #40	; 0x28
 800ac82:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ac86:	ab09      	add	r3, sp, #36	; 0x24
 800ac88:	ec49 8b10 	vmov	d0, r8, r9
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	6022      	str	r2, [r4, #0]
 800ac90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac94:	4628      	mov	r0, r5
 800ac96:	f7ff fecf 	bl	800aa38 <__cvt>
 800ac9a:	9b06      	ldr	r3, [sp, #24]
 800ac9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac9e:	2b47      	cmp	r3, #71	; 0x47
 800aca0:	4680      	mov	r8, r0
 800aca2:	d108      	bne.n	800acb6 <_printf_float+0x13e>
 800aca4:	1cc8      	adds	r0, r1, #3
 800aca6:	db02      	blt.n	800acae <_printf_float+0x136>
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	4299      	cmp	r1, r3
 800acac:	dd41      	ble.n	800ad32 <_printf_float+0x1ba>
 800acae:	f1ab 0302 	sub.w	r3, fp, #2
 800acb2:	fa5f fb83 	uxtb.w	fp, r3
 800acb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800acba:	d820      	bhi.n	800acfe <_printf_float+0x186>
 800acbc:	3901      	subs	r1, #1
 800acbe:	465a      	mov	r2, fp
 800acc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800acc4:	9109      	str	r1, [sp, #36]	; 0x24
 800acc6:	f7ff ff19 	bl	800aafc <__exponent>
 800acca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800accc:	1813      	adds	r3, r2, r0
 800acce:	2a01      	cmp	r2, #1
 800acd0:	4681      	mov	r9, r0
 800acd2:	6123      	str	r3, [r4, #16]
 800acd4:	dc02      	bgt.n	800acdc <_printf_float+0x164>
 800acd6:	6822      	ldr	r2, [r4, #0]
 800acd8:	07d2      	lsls	r2, r2, #31
 800acda:	d501      	bpl.n	800ace0 <_printf_float+0x168>
 800acdc:	3301      	adds	r3, #1
 800acde:	6123      	str	r3, [r4, #16]
 800ace0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d09c      	beq.n	800ac22 <_printf_float+0xaa>
 800ace8:	232d      	movs	r3, #45	; 0x2d
 800acea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acee:	e798      	b.n	800ac22 <_printf_float+0xaa>
 800acf0:	9a06      	ldr	r2, [sp, #24]
 800acf2:	2a47      	cmp	r2, #71	; 0x47
 800acf4:	d1be      	bne.n	800ac74 <_printf_float+0xfc>
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1bc      	bne.n	800ac74 <_printf_float+0xfc>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e7b9      	b.n	800ac72 <_printf_float+0xfa>
 800acfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad02:	d118      	bne.n	800ad36 <_printf_float+0x1be>
 800ad04:	2900      	cmp	r1, #0
 800ad06:	6863      	ldr	r3, [r4, #4]
 800ad08:	dd0b      	ble.n	800ad22 <_printf_float+0x1aa>
 800ad0a:	6121      	str	r1, [r4, #16]
 800ad0c:	b913      	cbnz	r3, 800ad14 <_printf_float+0x19c>
 800ad0e:	6822      	ldr	r2, [r4, #0]
 800ad10:	07d0      	lsls	r0, r2, #31
 800ad12:	d502      	bpl.n	800ad1a <_printf_float+0x1a2>
 800ad14:	3301      	adds	r3, #1
 800ad16:	440b      	add	r3, r1
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad1c:	f04f 0900 	mov.w	r9, #0
 800ad20:	e7de      	b.n	800ace0 <_printf_float+0x168>
 800ad22:	b913      	cbnz	r3, 800ad2a <_printf_float+0x1b2>
 800ad24:	6822      	ldr	r2, [r4, #0]
 800ad26:	07d2      	lsls	r2, r2, #31
 800ad28:	d501      	bpl.n	800ad2e <_printf_float+0x1b6>
 800ad2a:	3302      	adds	r3, #2
 800ad2c:	e7f4      	b.n	800ad18 <_printf_float+0x1a0>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e7f2      	b.n	800ad18 <_printf_float+0x1a0>
 800ad32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad38:	4299      	cmp	r1, r3
 800ad3a:	db05      	blt.n	800ad48 <_printf_float+0x1d0>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	6121      	str	r1, [r4, #16]
 800ad40:	07d8      	lsls	r0, r3, #31
 800ad42:	d5ea      	bpl.n	800ad1a <_printf_float+0x1a2>
 800ad44:	1c4b      	adds	r3, r1, #1
 800ad46:	e7e7      	b.n	800ad18 <_printf_float+0x1a0>
 800ad48:	2900      	cmp	r1, #0
 800ad4a:	bfd4      	ite	le
 800ad4c:	f1c1 0202 	rsble	r2, r1, #2
 800ad50:	2201      	movgt	r2, #1
 800ad52:	4413      	add	r3, r2
 800ad54:	e7e0      	b.n	800ad18 <_printf_float+0x1a0>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	055a      	lsls	r2, r3, #21
 800ad5a:	d407      	bmi.n	800ad6c <_printf_float+0x1f4>
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	4642      	mov	r2, r8
 800ad60:	4631      	mov	r1, r6
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	d12c      	bne.n	800adc4 <_printf_float+0x24c>
 800ad6a:	e764      	b.n	800ac36 <_printf_float+0xbe>
 800ad6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad70:	f240 80e0 	bls.w	800af34 <_printf_float+0x3bc>
 800ad74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	f7f5 febc 	bl	8000af8 <__aeabi_dcmpeq>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d034      	beq.n	800adee <_printf_float+0x276>
 800ad84:	4a37      	ldr	r2, [pc, #220]	; (800ae64 <_printf_float+0x2ec>)
 800ad86:	2301      	movs	r3, #1
 800ad88:	4631      	mov	r1, r6
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	47b8      	blx	r7
 800ad8e:	3001      	adds	r0, #1
 800ad90:	f43f af51 	beq.w	800ac36 <_printf_float+0xbe>
 800ad94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	db02      	blt.n	800ada2 <_printf_float+0x22a>
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	07d8      	lsls	r0, r3, #31
 800ada0:	d510      	bpl.n	800adc4 <_printf_float+0x24c>
 800ada2:	ee18 3a10 	vmov	r3, s16
 800ada6:	4652      	mov	r2, sl
 800ada8:	4631      	mov	r1, r6
 800adaa:	4628      	mov	r0, r5
 800adac:	47b8      	blx	r7
 800adae:	3001      	adds	r0, #1
 800adb0:	f43f af41 	beq.w	800ac36 <_printf_float+0xbe>
 800adb4:	f04f 0800 	mov.w	r8, #0
 800adb8:	f104 091a 	add.w	r9, r4, #26
 800adbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adbe:	3b01      	subs	r3, #1
 800adc0:	4543      	cmp	r3, r8
 800adc2:	dc09      	bgt.n	800add8 <_printf_float+0x260>
 800adc4:	6823      	ldr	r3, [r4, #0]
 800adc6:	079b      	lsls	r3, r3, #30
 800adc8:	f100 8107 	bmi.w	800afda <_printf_float+0x462>
 800adcc:	68e0      	ldr	r0, [r4, #12]
 800adce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800add0:	4298      	cmp	r0, r3
 800add2:	bfb8      	it	lt
 800add4:	4618      	movlt	r0, r3
 800add6:	e730      	b.n	800ac3a <_printf_float+0xc2>
 800add8:	2301      	movs	r3, #1
 800adda:	464a      	mov	r2, r9
 800addc:	4631      	mov	r1, r6
 800adde:	4628      	mov	r0, r5
 800ade0:	47b8      	blx	r7
 800ade2:	3001      	adds	r0, #1
 800ade4:	f43f af27 	beq.w	800ac36 <_printf_float+0xbe>
 800ade8:	f108 0801 	add.w	r8, r8, #1
 800adec:	e7e6      	b.n	800adbc <_printf_float+0x244>
 800adee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	dc39      	bgt.n	800ae68 <_printf_float+0x2f0>
 800adf4:	4a1b      	ldr	r2, [pc, #108]	; (800ae64 <_printf_float+0x2ec>)
 800adf6:	2301      	movs	r3, #1
 800adf8:	4631      	mov	r1, r6
 800adfa:	4628      	mov	r0, r5
 800adfc:	47b8      	blx	r7
 800adfe:	3001      	adds	r0, #1
 800ae00:	f43f af19 	beq.w	800ac36 <_printf_float+0xbe>
 800ae04:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	d102      	bne.n	800ae12 <_printf_float+0x29a>
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	07d9      	lsls	r1, r3, #31
 800ae10:	d5d8      	bpl.n	800adc4 <_printf_float+0x24c>
 800ae12:	ee18 3a10 	vmov	r3, s16
 800ae16:	4652      	mov	r2, sl
 800ae18:	4631      	mov	r1, r6
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	47b8      	blx	r7
 800ae1e:	3001      	adds	r0, #1
 800ae20:	f43f af09 	beq.w	800ac36 <_printf_float+0xbe>
 800ae24:	f04f 0900 	mov.w	r9, #0
 800ae28:	f104 0a1a 	add.w	sl, r4, #26
 800ae2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2e:	425b      	negs	r3, r3
 800ae30:	454b      	cmp	r3, r9
 800ae32:	dc01      	bgt.n	800ae38 <_printf_float+0x2c0>
 800ae34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae36:	e792      	b.n	800ad5e <_printf_float+0x1e6>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	4652      	mov	r2, sl
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4628      	mov	r0, r5
 800ae40:	47b8      	blx	r7
 800ae42:	3001      	adds	r0, #1
 800ae44:	f43f aef7 	beq.w	800ac36 <_printf_float+0xbe>
 800ae48:	f109 0901 	add.w	r9, r9, #1
 800ae4c:	e7ee      	b.n	800ae2c <_printf_float+0x2b4>
 800ae4e:	bf00      	nop
 800ae50:	7fefffff 	.word	0x7fefffff
 800ae54:	0800eb38 	.word	0x0800eb38
 800ae58:	0800eb3c 	.word	0x0800eb3c
 800ae5c:	0800eb40 	.word	0x0800eb40
 800ae60:	0800eb44 	.word	0x0800eb44
 800ae64:	0800eb48 	.word	0x0800eb48
 800ae68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	bfa8      	it	ge
 800ae70:	461a      	movge	r2, r3
 800ae72:	2a00      	cmp	r2, #0
 800ae74:	4691      	mov	r9, r2
 800ae76:	dc37      	bgt.n	800aee8 <_printf_float+0x370>
 800ae78:	f04f 0b00 	mov.w	fp, #0
 800ae7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae80:	f104 021a 	add.w	r2, r4, #26
 800ae84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae86:	9305      	str	r3, [sp, #20]
 800ae88:	eba3 0309 	sub.w	r3, r3, r9
 800ae8c:	455b      	cmp	r3, fp
 800ae8e:	dc33      	bgt.n	800aef8 <_printf_float+0x380>
 800ae90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae94:	429a      	cmp	r2, r3
 800ae96:	db3b      	blt.n	800af10 <_printf_float+0x398>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	07da      	lsls	r2, r3, #31
 800ae9c:	d438      	bmi.n	800af10 <_printf_float+0x398>
 800ae9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aea2:	eba2 0903 	sub.w	r9, r2, r3
 800aea6:	9b05      	ldr	r3, [sp, #20]
 800aea8:	1ad2      	subs	r2, r2, r3
 800aeaa:	4591      	cmp	r9, r2
 800aeac:	bfa8      	it	ge
 800aeae:	4691      	movge	r9, r2
 800aeb0:	f1b9 0f00 	cmp.w	r9, #0
 800aeb4:	dc35      	bgt.n	800af22 <_printf_float+0x3aa>
 800aeb6:	f04f 0800 	mov.w	r8, #0
 800aeba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aebe:	f104 0a1a 	add.w	sl, r4, #26
 800aec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aec6:	1a9b      	subs	r3, r3, r2
 800aec8:	eba3 0309 	sub.w	r3, r3, r9
 800aecc:	4543      	cmp	r3, r8
 800aece:	f77f af79 	ble.w	800adc4 <_printf_float+0x24c>
 800aed2:	2301      	movs	r3, #1
 800aed4:	4652      	mov	r2, sl
 800aed6:	4631      	mov	r1, r6
 800aed8:	4628      	mov	r0, r5
 800aeda:	47b8      	blx	r7
 800aedc:	3001      	adds	r0, #1
 800aede:	f43f aeaa 	beq.w	800ac36 <_printf_float+0xbe>
 800aee2:	f108 0801 	add.w	r8, r8, #1
 800aee6:	e7ec      	b.n	800aec2 <_printf_float+0x34a>
 800aee8:	4613      	mov	r3, r2
 800aeea:	4631      	mov	r1, r6
 800aeec:	4642      	mov	r2, r8
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b8      	blx	r7
 800aef2:	3001      	adds	r0, #1
 800aef4:	d1c0      	bne.n	800ae78 <_printf_float+0x300>
 800aef6:	e69e      	b.n	800ac36 <_printf_float+0xbe>
 800aef8:	2301      	movs	r3, #1
 800aefa:	4631      	mov	r1, r6
 800aefc:	4628      	mov	r0, r5
 800aefe:	9205      	str	r2, [sp, #20]
 800af00:	47b8      	blx	r7
 800af02:	3001      	adds	r0, #1
 800af04:	f43f ae97 	beq.w	800ac36 <_printf_float+0xbe>
 800af08:	9a05      	ldr	r2, [sp, #20]
 800af0a:	f10b 0b01 	add.w	fp, fp, #1
 800af0e:	e7b9      	b.n	800ae84 <_printf_float+0x30c>
 800af10:	ee18 3a10 	vmov	r3, s16
 800af14:	4652      	mov	r2, sl
 800af16:	4631      	mov	r1, r6
 800af18:	4628      	mov	r0, r5
 800af1a:	47b8      	blx	r7
 800af1c:	3001      	adds	r0, #1
 800af1e:	d1be      	bne.n	800ae9e <_printf_float+0x326>
 800af20:	e689      	b.n	800ac36 <_printf_float+0xbe>
 800af22:	9a05      	ldr	r2, [sp, #20]
 800af24:	464b      	mov	r3, r9
 800af26:	4442      	add	r2, r8
 800af28:	4631      	mov	r1, r6
 800af2a:	4628      	mov	r0, r5
 800af2c:	47b8      	blx	r7
 800af2e:	3001      	adds	r0, #1
 800af30:	d1c1      	bne.n	800aeb6 <_printf_float+0x33e>
 800af32:	e680      	b.n	800ac36 <_printf_float+0xbe>
 800af34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af36:	2a01      	cmp	r2, #1
 800af38:	dc01      	bgt.n	800af3e <_printf_float+0x3c6>
 800af3a:	07db      	lsls	r3, r3, #31
 800af3c:	d53a      	bpl.n	800afb4 <_printf_float+0x43c>
 800af3e:	2301      	movs	r3, #1
 800af40:	4642      	mov	r2, r8
 800af42:	4631      	mov	r1, r6
 800af44:	4628      	mov	r0, r5
 800af46:	47b8      	blx	r7
 800af48:	3001      	adds	r0, #1
 800af4a:	f43f ae74 	beq.w	800ac36 <_printf_float+0xbe>
 800af4e:	ee18 3a10 	vmov	r3, s16
 800af52:	4652      	mov	r2, sl
 800af54:	4631      	mov	r1, r6
 800af56:	4628      	mov	r0, r5
 800af58:	47b8      	blx	r7
 800af5a:	3001      	adds	r0, #1
 800af5c:	f43f ae6b 	beq.w	800ac36 <_printf_float+0xbe>
 800af60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af64:	2200      	movs	r2, #0
 800af66:	2300      	movs	r3, #0
 800af68:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800af6c:	f7f5 fdc4 	bl	8000af8 <__aeabi_dcmpeq>
 800af70:	b9d8      	cbnz	r0, 800afaa <_printf_float+0x432>
 800af72:	f10a 33ff 	add.w	r3, sl, #4294967295
 800af76:	f108 0201 	add.w	r2, r8, #1
 800af7a:	4631      	mov	r1, r6
 800af7c:	4628      	mov	r0, r5
 800af7e:	47b8      	blx	r7
 800af80:	3001      	adds	r0, #1
 800af82:	d10e      	bne.n	800afa2 <_printf_float+0x42a>
 800af84:	e657      	b.n	800ac36 <_printf_float+0xbe>
 800af86:	2301      	movs	r3, #1
 800af88:	4652      	mov	r2, sl
 800af8a:	4631      	mov	r1, r6
 800af8c:	4628      	mov	r0, r5
 800af8e:	47b8      	blx	r7
 800af90:	3001      	adds	r0, #1
 800af92:	f43f ae50 	beq.w	800ac36 <_printf_float+0xbe>
 800af96:	f108 0801 	add.w	r8, r8, #1
 800af9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af9c:	3b01      	subs	r3, #1
 800af9e:	4543      	cmp	r3, r8
 800afa0:	dcf1      	bgt.n	800af86 <_printf_float+0x40e>
 800afa2:	464b      	mov	r3, r9
 800afa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800afa8:	e6da      	b.n	800ad60 <_printf_float+0x1e8>
 800afaa:	f04f 0800 	mov.w	r8, #0
 800afae:	f104 0a1a 	add.w	sl, r4, #26
 800afb2:	e7f2      	b.n	800af9a <_printf_float+0x422>
 800afb4:	2301      	movs	r3, #1
 800afb6:	4642      	mov	r2, r8
 800afb8:	e7df      	b.n	800af7a <_printf_float+0x402>
 800afba:	2301      	movs	r3, #1
 800afbc:	464a      	mov	r2, r9
 800afbe:	4631      	mov	r1, r6
 800afc0:	4628      	mov	r0, r5
 800afc2:	47b8      	blx	r7
 800afc4:	3001      	adds	r0, #1
 800afc6:	f43f ae36 	beq.w	800ac36 <_printf_float+0xbe>
 800afca:	f108 0801 	add.w	r8, r8, #1
 800afce:	68e3      	ldr	r3, [r4, #12]
 800afd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afd2:	1a5b      	subs	r3, r3, r1
 800afd4:	4543      	cmp	r3, r8
 800afd6:	dcf0      	bgt.n	800afba <_printf_float+0x442>
 800afd8:	e6f8      	b.n	800adcc <_printf_float+0x254>
 800afda:	f04f 0800 	mov.w	r8, #0
 800afde:	f104 0919 	add.w	r9, r4, #25
 800afe2:	e7f4      	b.n	800afce <_printf_float+0x456>

0800afe4 <_printf_common>:
 800afe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe8:	4616      	mov	r6, r2
 800afea:	4699      	mov	r9, r3
 800afec:	688a      	ldr	r2, [r1, #8]
 800afee:	690b      	ldr	r3, [r1, #16]
 800aff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aff4:	4293      	cmp	r3, r2
 800aff6:	bfb8      	it	lt
 800aff8:	4613      	movlt	r3, r2
 800affa:	6033      	str	r3, [r6, #0]
 800affc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b000:	4607      	mov	r7, r0
 800b002:	460c      	mov	r4, r1
 800b004:	b10a      	cbz	r2, 800b00a <_printf_common+0x26>
 800b006:	3301      	adds	r3, #1
 800b008:	6033      	str	r3, [r6, #0]
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	0699      	lsls	r1, r3, #26
 800b00e:	bf42      	ittt	mi
 800b010:	6833      	ldrmi	r3, [r6, #0]
 800b012:	3302      	addmi	r3, #2
 800b014:	6033      	strmi	r3, [r6, #0]
 800b016:	6825      	ldr	r5, [r4, #0]
 800b018:	f015 0506 	ands.w	r5, r5, #6
 800b01c:	d106      	bne.n	800b02c <_printf_common+0x48>
 800b01e:	f104 0a19 	add.w	sl, r4, #25
 800b022:	68e3      	ldr	r3, [r4, #12]
 800b024:	6832      	ldr	r2, [r6, #0]
 800b026:	1a9b      	subs	r3, r3, r2
 800b028:	42ab      	cmp	r3, r5
 800b02a:	dc26      	bgt.n	800b07a <_printf_common+0x96>
 800b02c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b030:	1e13      	subs	r3, r2, #0
 800b032:	6822      	ldr	r2, [r4, #0]
 800b034:	bf18      	it	ne
 800b036:	2301      	movne	r3, #1
 800b038:	0692      	lsls	r2, r2, #26
 800b03a:	d42b      	bmi.n	800b094 <_printf_common+0xb0>
 800b03c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b040:	4649      	mov	r1, r9
 800b042:	4638      	mov	r0, r7
 800b044:	47c0      	blx	r8
 800b046:	3001      	adds	r0, #1
 800b048:	d01e      	beq.n	800b088 <_printf_common+0xa4>
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	6922      	ldr	r2, [r4, #16]
 800b04e:	f003 0306 	and.w	r3, r3, #6
 800b052:	2b04      	cmp	r3, #4
 800b054:	bf02      	ittt	eq
 800b056:	68e5      	ldreq	r5, [r4, #12]
 800b058:	6833      	ldreq	r3, [r6, #0]
 800b05a:	1aed      	subeq	r5, r5, r3
 800b05c:	68a3      	ldr	r3, [r4, #8]
 800b05e:	bf0c      	ite	eq
 800b060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b064:	2500      	movne	r5, #0
 800b066:	4293      	cmp	r3, r2
 800b068:	bfc4      	itt	gt
 800b06a:	1a9b      	subgt	r3, r3, r2
 800b06c:	18ed      	addgt	r5, r5, r3
 800b06e:	2600      	movs	r6, #0
 800b070:	341a      	adds	r4, #26
 800b072:	42b5      	cmp	r5, r6
 800b074:	d11a      	bne.n	800b0ac <_printf_common+0xc8>
 800b076:	2000      	movs	r0, #0
 800b078:	e008      	b.n	800b08c <_printf_common+0xa8>
 800b07a:	2301      	movs	r3, #1
 800b07c:	4652      	mov	r2, sl
 800b07e:	4649      	mov	r1, r9
 800b080:	4638      	mov	r0, r7
 800b082:	47c0      	blx	r8
 800b084:	3001      	adds	r0, #1
 800b086:	d103      	bne.n	800b090 <_printf_common+0xac>
 800b088:	f04f 30ff 	mov.w	r0, #4294967295
 800b08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b090:	3501      	adds	r5, #1
 800b092:	e7c6      	b.n	800b022 <_printf_common+0x3e>
 800b094:	18e1      	adds	r1, r4, r3
 800b096:	1c5a      	adds	r2, r3, #1
 800b098:	2030      	movs	r0, #48	; 0x30
 800b09a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b09e:	4422      	add	r2, r4
 800b0a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0a8:	3302      	adds	r3, #2
 800b0aa:	e7c7      	b.n	800b03c <_printf_common+0x58>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	4622      	mov	r2, r4
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	47c0      	blx	r8
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	d0e6      	beq.n	800b088 <_printf_common+0xa4>
 800b0ba:	3601      	adds	r6, #1
 800b0bc:	e7d9      	b.n	800b072 <_printf_common+0x8e>
	...

0800b0c0 <_printf_i>:
 800b0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c4:	7e0f      	ldrb	r7, [r1, #24]
 800b0c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0c8:	2f78      	cmp	r7, #120	; 0x78
 800b0ca:	4691      	mov	r9, r2
 800b0cc:	4680      	mov	r8, r0
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	469a      	mov	sl, r3
 800b0d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0d6:	d807      	bhi.n	800b0e8 <_printf_i+0x28>
 800b0d8:	2f62      	cmp	r7, #98	; 0x62
 800b0da:	d80a      	bhi.n	800b0f2 <_printf_i+0x32>
 800b0dc:	2f00      	cmp	r7, #0
 800b0de:	f000 80d4 	beq.w	800b28a <_printf_i+0x1ca>
 800b0e2:	2f58      	cmp	r7, #88	; 0x58
 800b0e4:	f000 80c0 	beq.w	800b268 <_printf_i+0x1a8>
 800b0e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0f0:	e03a      	b.n	800b168 <_printf_i+0xa8>
 800b0f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0f6:	2b15      	cmp	r3, #21
 800b0f8:	d8f6      	bhi.n	800b0e8 <_printf_i+0x28>
 800b0fa:	a101      	add	r1, pc, #4	; (adr r1, 800b100 <_printf_i+0x40>)
 800b0fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b100:	0800b159 	.word	0x0800b159
 800b104:	0800b16d 	.word	0x0800b16d
 800b108:	0800b0e9 	.word	0x0800b0e9
 800b10c:	0800b0e9 	.word	0x0800b0e9
 800b110:	0800b0e9 	.word	0x0800b0e9
 800b114:	0800b0e9 	.word	0x0800b0e9
 800b118:	0800b16d 	.word	0x0800b16d
 800b11c:	0800b0e9 	.word	0x0800b0e9
 800b120:	0800b0e9 	.word	0x0800b0e9
 800b124:	0800b0e9 	.word	0x0800b0e9
 800b128:	0800b0e9 	.word	0x0800b0e9
 800b12c:	0800b271 	.word	0x0800b271
 800b130:	0800b199 	.word	0x0800b199
 800b134:	0800b22b 	.word	0x0800b22b
 800b138:	0800b0e9 	.word	0x0800b0e9
 800b13c:	0800b0e9 	.word	0x0800b0e9
 800b140:	0800b293 	.word	0x0800b293
 800b144:	0800b0e9 	.word	0x0800b0e9
 800b148:	0800b199 	.word	0x0800b199
 800b14c:	0800b0e9 	.word	0x0800b0e9
 800b150:	0800b0e9 	.word	0x0800b0e9
 800b154:	0800b233 	.word	0x0800b233
 800b158:	682b      	ldr	r3, [r5, #0]
 800b15a:	1d1a      	adds	r2, r3, #4
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	602a      	str	r2, [r5, #0]
 800b160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b168:	2301      	movs	r3, #1
 800b16a:	e09f      	b.n	800b2ac <_printf_i+0x1ec>
 800b16c:	6820      	ldr	r0, [r4, #0]
 800b16e:	682b      	ldr	r3, [r5, #0]
 800b170:	0607      	lsls	r7, r0, #24
 800b172:	f103 0104 	add.w	r1, r3, #4
 800b176:	6029      	str	r1, [r5, #0]
 800b178:	d501      	bpl.n	800b17e <_printf_i+0xbe>
 800b17a:	681e      	ldr	r6, [r3, #0]
 800b17c:	e003      	b.n	800b186 <_printf_i+0xc6>
 800b17e:	0646      	lsls	r6, r0, #25
 800b180:	d5fb      	bpl.n	800b17a <_printf_i+0xba>
 800b182:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b186:	2e00      	cmp	r6, #0
 800b188:	da03      	bge.n	800b192 <_printf_i+0xd2>
 800b18a:	232d      	movs	r3, #45	; 0x2d
 800b18c:	4276      	negs	r6, r6
 800b18e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b192:	485a      	ldr	r0, [pc, #360]	; (800b2fc <_printf_i+0x23c>)
 800b194:	230a      	movs	r3, #10
 800b196:	e012      	b.n	800b1be <_printf_i+0xfe>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	6820      	ldr	r0, [r4, #0]
 800b19c:	1d19      	adds	r1, r3, #4
 800b19e:	6029      	str	r1, [r5, #0]
 800b1a0:	0605      	lsls	r5, r0, #24
 800b1a2:	d501      	bpl.n	800b1a8 <_printf_i+0xe8>
 800b1a4:	681e      	ldr	r6, [r3, #0]
 800b1a6:	e002      	b.n	800b1ae <_printf_i+0xee>
 800b1a8:	0641      	lsls	r1, r0, #25
 800b1aa:	d5fb      	bpl.n	800b1a4 <_printf_i+0xe4>
 800b1ac:	881e      	ldrh	r6, [r3, #0]
 800b1ae:	4853      	ldr	r0, [pc, #332]	; (800b2fc <_printf_i+0x23c>)
 800b1b0:	2f6f      	cmp	r7, #111	; 0x6f
 800b1b2:	bf0c      	ite	eq
 800b1b4:	2308      	moveq	r3, #8
 800b1b6:	230a      	movne	r3, #10
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1be:	6865      	ldr	r5, [r4, #4]
 800b1c0:	60a5      	str	r5, [r4, #8]
 800b1c2:	2d00      	cmp	r5, #0
 800b1c4:	bfa2      	ittt	ge
 800b1c6:	6821      	ldrge	r1, [r4, #0]
 800b1c8:	f021 0104 	bicge.w	r1, r1, #4
 800b1cc:	6021      	strge	r1, [r4, #0]
 800b1ce:	b90e      	cbnz	r6, 800b1d4 <_printf_i+0x114>
 800b1d0:	2d00      	cmp	r5, #0
 800b1d2:	d04b      	beq.n	800b26c <_printf_i+0x1ac>
 800b1d4:	4615      	mov	r5, r2
 800b1d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1da:	fb03 6711 	mls	r7, r3, r1, r6
 800b1de:	5dc7      	ldrb	r7, [r0, r7]
 800b1e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1e4:	4637      	mov	r7, r6
 800b1e6:	42bb      	cmp	r3, r7
 800b1e8:	460e      	mov	r6, r1
 800b1ea:	d9f4      	bls.n	800b1d6 <_printf_i+0x116>
 800b1ec:	2b08      	cmp	r3, #8
 800b1ee:	d10b      	bne.n	800b208 <_printf_i+0x148>
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	07de      	lsls	r6, r3, #31
 800b1f4:	d508      	bpl.n	800b208 <_printf_i+0x148>
 800b1f6:	6923      	ldr	r3, [r4, #16]
 800b1f8:	6861      	ldr	r1, [r4, #4]
 800b1fa:	4299      	cmp	r1, r3
 800b1fc:	bfde      	ittt	le
 800b1fe:	2330      	movle	r3, #48	; 0x30
 800b200:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b204:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b208:	1b52      	subs	r2, r2, r5
 800b20a:	6122      	str	r2, [r4, #16]
 800b20c:	f8cd a000 	str.w	sl, [sp]
 800b210:	464b      	mov	r3, r9
 800b212:	aa03      	add	r2, sp, #12
 800b214:	4621      	mov	r1, r4
 800b216:	4640      	mov	r0, r8
 800b218:	f7ff fee4 	bl	800afe4 <_printf_common>
 800b21c:	3001      	adds	r0, #1
 800b21e:	d14a      	bne.n	800b2b6 <_printf_i+0x1f6>
 800b220:	f04f 30ff 	mov.w	r0, #4294967295
 800b224:	b004      	add	sp, #16
 800b226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	f043 0320 	orr.w	r3, r3, #32
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	4833      	ldr	r0, [pc, #204]	; (800b300 <_printf_i+0x240>)
 800b234:	2778      	movs	r7, #120	; 0x78
 800b236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	6829      	ldr	r1, [r5, #0]
 800b23e:	061f      	lsls	r7, r3, #24
 800b240:	f851 6b04 	ldr.w	r6, [r1], #4
 800b244:	d402      	bmi.n	800b24c <_printf_i+0x18c>
 800b246:	065f      	lsls	r7, r3, #25
 800b248:	bf48      	it	mi
 800b24a:	b2b6      	uxthmi	r6, r6
 800b24c:	07df      	lsls	r7, r3, #31
 800b24e:	bf48      	it	mi
 800b250:	f043 0320 	orrmi.w	r3, r3, #32
 800b254:	6029      	str	r1, [r5, #0]
 800b256:	bf48      	it	mi
 800b258:	6023      	strmi	r3, [r4, #0]
 800b25a:	b91e      	cbnz	r6, 800b264 <_printf_i+0x1a4>
 800b25c:	6823      	ldr	r3, [r4, #0]
 800b25e:	f023 0320 	bic.w	r3, r3, #32
 800b262:	6023      	str	r3, [r4, #0]
 800b264:	2310      	movs	r3, #16
 800b266:	e7a7      	b.n	800b1b8 <_printf_i+0xf8>
 800b268:	4824      	ldr	r0, [pc, #144]	; (800b2fc <_printf_i+0x23c>)
 800b26a:	e7e4      	b.n	800b236 <_printf_i+0x176>
 800b26c:	4615      	mov	r5, r2
 800b26e:	e7bd      	b.n	800b1ec <_printf_i+0x12c>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	6826      	ldr	r6, [r4, #0]
 800b274:	6961      	ldr	r1, [r4, #20]
 800b276:	1d18      	adds	r0, r3, #4
 800b278:	6028      	str	r0, [r5, #0]
 800b27a:	0635      	lsls	r5, r6, #24
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	d501      	bpl.n	800b284 <_printf_i+0x1c4>
 800b280:	6019      	str	r1, [r3, #0]
 800b282:	e002      	b.n	800b28a <_printf_i+0x1ca>
 800b284:	0670      	lsls	r0, r6, #25
 800b286:	d5fb      	bpl.n	800b280 <_printf_i+0x1c0>
 800b288:	8019      	strh	r1, [r3, #0]
 800b28a:	2300      	movs	r3, #0
 800b28c:	6123      	str	r3, [r4, #16]
 800b28e:	4615      	mov	r5, r2
 800b290:	e7bc      	b.n	800b20c <_printf_i+0x14c>
 800b292:	682b      	ldr	r3, [r5, #0]
 800b294:	1d1a      	adds	r2, r3, #4
 800b296:	602a      	str	r2, [r5, #0]
 800b298:	681d      	ldr	r5, [r3, #0]
 800b29a:	6862      	ldr	r2, [r4, #4]
 800b29c:	2100      	movs	r1, #0
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f7f4 ffae 	bl	8000200 <memchr>
 800b2a4:	b108      	cbz	r0, 800b2aa <_printf_i+0x1ea>
 800b2a6:	1b40      	subs	r0, r0, r5
 800b2a8:	6060      	str	r0, [r4, #4]
 800b2aa:	6863      	ldr	r3, [r4, #4]
 800b2ac:	6123      	str	r3, [r4, #16]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b4:	e7aa      	b.n	800b20c <_printf_i+0x14c>
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	462a      	mov	r2, r5
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	4640      	mov	r0, r8
 800b2be:	47d0      	blx	sl
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	d0ad      	beq.n	800b220 <_printf_i+0x160>
 800b2c4:	6823      	ldr	r3, [r4, #0]
 800b2c6:	079b      	lsls	r3, r3, #30
 800b2c8:	d413      	bmi.n	800b2f2 <_printf_i+0x232>
 800b2ca:	68e0      	ldr	r0, [r4, #12]
 800b2cc:	9b03      	ldr	r3, [sp, #12]
 800b2ce:	4298      	cmp	r0, r3
 800b2d0:	bfb8      	it	lt
 800b2d2:	4618      	movlt	r0, r3
 800b2d4:	e7a6      	b.n	800b224 <_printf_i+0x164>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	4632      	mov	r2, r6
 800b2da:	4649      	mov	r1, r9
 800b2dc:	4640      	mov	r0, r8
 800b2de:	47d0      	blx	sl
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	d09d      	beq.n	800b220 <_printf_i+0x160>
 800b2e4:	3501      	adds	r5, #1
 800b2e6:	68e3      	ldr	r3, [r4, #12]
 800b2e8:	9903      	ldr	r1, [sp, #12]
 800b2ea:	1a5b      	subs	r3, r3, r1
 800b2ec:	42ab      	cmp	r3, r5
 800b2ee:	dcf2      	bgt.n	800b2d6 <_printf_i+0x216>
 800b2f0:	e7eb      	b.n	800b2ca <_printf_i+0x20a>
 800b2f2:	2500      	movs	r5, #0
 800b2f4:	f104 0619 	add.w	r6, r4, #25
 800b2f8:	e7f5      	b.n	800b2e6 <_printf_i+0x226>
 800b2fa:	bf00      	nop
 800b2fc:	0800eb4a 	.word	0x0800eb4a
 800b300:	0800eb5b 	.word	0x0800eb5b

0800b304 <std>:
 800b304:	2300      	movs	r3, #0
 800b306:	b510      	push	{r4, lr}
 800b308:	4604      	mov	r4, r0
 800b30a:	e9c0 3300 	strd	r3, r3, [r0]
 800b30e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b312:	6083      	str	r3, [r0, #8]
 800b314:	8181      	strh	r1, [r0, #12]
 800b316:	6643      	str	r3, [r0, #100]	; 0x64
 800b318:	81c2      	strh	r2, [r0, #14]
 800b31a:	6183      	str	r3, [r0, #24]
 800b31c:	4619      	mov	r1, r3
 800b31e:	2208      	movs	r2, #8
 800b320:	305c      	adds	r0, #92	; 0x5c
 800b322:	f000 fa93 	bl	800b84c <memset>
 800b326:	4b0d      	ldr	r3, [pc, #52]	; (800b35c <std+0x58>)
 800b328:	6263      	str	r3, [r4, #36]	; 0x24
 800b32a:	4b0d      	ldr	r3, [pc, #52]	; (800b360 <std+0x5c>)
 800b32c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b32e:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <std+0x60>)
 800b330:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b332:	4b0d      	ldr	r3, [pc, #52]	; (800b368 <std+0x64>)
 800b334:	6323      	str	r3, [r4, #48]	; 0x30
 800b336:	4b0d      	ldr	r3, [pc, #52]	; (800b36c <std+0x68>)
 800b338:	6224      	str	r4, [r4, #32]
 800b33a:	429c      	cmp	r4, r3
 800b33c:	d006      	beq.n	800b34c <std+0x48>
 800b33e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b342:	4294      	cmp	r4, r2
 800b344:	d002      	beq.n	800b34c <std+0x48>
 800b346:	33d0      	adds	r3, #208	; 0xd0
 800b348:	429c      	cmp	r4, r3
 800b34a:	d105      	bne.n	800b358 <std+0x54>
 800b34c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b354:	f000 bb14 	b.w	800b980 <__retarget_lock_init_recursive>
 800b358:	bd10      	pop	{r4, pc}
 800b35a:	bf00      	nop
 800b35c:	0800b5f5 	.word	0x0800b5f5
 800b360:	0800b617 	.word	0x0800b617
 800b364:	0800b64f 	.word	0x0800b64f
 800b368:	0800b673 	.word	0x0800b673
 800b36c:	200066e0 	.word	0x200066e0

0800b370 <stdio_exit_handler>:
 800b370:	4a02      	ldr	r2, [pc, #8]	; (800b37c <stdio_exit_handler+0xc>)
 800b372:	4903      	ldr	r1, [pc, #12]	; (800b380 <stdio_exit_handler+0x10>)
 800b374:	4803      	ldr	r0, [pc, #12]	; (800b384 <stdio_exit_handler+0x14>)
 800b376:	f000 b869 	b.w	800b44c <_fwalk_sglue>
 800b37a:	bf00      	nop
 800b37c:	20000104 	.word	0x20000104
 800b380:	0800d1e9 	.word	0x0800d1e9
 800b384:	20000110 	.word	0x20000110

0800b388 <cleanup_stdio>:
 800b388:	6841      	ldr	r1, [r0, #4]
 800b38a:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <cleanup_stdio+0x34>)
 800b38c:	4299      	cmp	r1, r3
 800b38e:	b510      	push	{r4, lr}
 800b390:	4604      	mov	r4, r0
 800b392:	d001      	beq.n	800b398 <cleanup_stdio+0x10>
 800b394:	f001 ff28 	bl	800d1e8 <_fflush_r>
 800b398:	68a1      	ldr	r1, [r4, #8]
 800b39a:	4b09      	ldr	r3, [pc, #36]	; (800b3c0 <cleanup_stdio+0x38>)
 800b39c:	4299      	cmp	r1, r3
 800b39e:	d002      	beq.n	800b3a6 <cleanup_stdio+0x1e>
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f001 ff21 	bl	800d1e8 <_fflush_r>
 800b3a6:	68e1      	ldr	r1, [r4, #12]
 800b3a8:	4b06      	ldr	r3, [pc, #24]	; (800b3c4 <cleanup_stdio+0x3c>)
 800b3aa:	4299      	cmp	r1, r3
 800b3ac:	d004      	beq.n	800b3b8 <cleanup_stdio+0x30>
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b4:	f001 bf18 	b.w	800d1e8 <_fflush_r>
 800b3b8:	bd10      	pop	{r4, pc}
 800b3ba:	bf00      	nop
 800b3bc:	200066e0 	.word	0x200066e0
 800b3c0:	20006748 	.word	0x20006748
 800b3c4:	200067b0 	.word	0x200067b0

0800b3c8 <global_stdio_init.part.0>:
 800b3c8:	b510      	push	{r4, lr}
 800b3ca:	4b0b      	ldr	r3, [pc, #44]	; (800b3f8 <global_stdio_init.part.0+0x30>)
 800b3cc:	4c0b      	ldr	r4, [pc, #44]	; (800b3fc <global_stdio_init.part.0+0x34>)
 800b3ce:	4a0c      	ldr	r2, [pc, #48]	; (800b400 <global_stdio_init.part.0+0x38>)
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	2104      	movs	r1, #4
 800b3d8:	f7ff ff94 	bl	800b304 <std>
 800b3dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	2109      	movs	r1, #9
 800b3e4:	f7ff ff8e 	bl	800b304 <std>
 800b3e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b3ec:	2202      	movs	r2, #2
 800b3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f2:	2112      	movs	r1, #18
 800b3f4:	f7ff bf86 	b.w	800b304 <std>
 800b3f8:	20006818 	.word	0x20006818
 800b3fc:	200066e0 	.word	0x200066e0
 800b400:	0800b371 	.word	0x0800b371

0800b404 <__sfp_lock_acquire>:
 800b404:	4801      	ldr	r0, [pc, #4]	; (800b40c <__sfp_lock_acquire+0x8>)
 800b406:	f000 babc 	b.w	800b982 <__retarget_lock_acquire_recursive>
 800b40a:	bf00      	nop
 800b40c:	20006821 	.word	0x20006821

0800b410 <__sfp_lock_release>:
 800b410:	4801      	ldr	r0, [pc, #4]	; (800b418 <__sfp_lock_release+0x8>)
 800b412:	f000 bab7 	b.w	800b984 <__retarget_lock_release_recursive>
 800b416:	bf00      	nop
 800b418:	20006821 	.word	0x20006821

0800b41c <__sinit>:
 800b41c:	b510      	push	{r4, lr}
 800b41e:	4604      	mov	r4, r0
 800b420:	f7ff fff0 	bl	800b404 <__sfp_lock_acquire>
 800b424:	6a23      	ldr	r3, [r4, #32]
 800b426:	b11b      	cbz	r3, 800b430 <__sinit+0x14>
 800b428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b42c:	f7ff bff0 	b.w	800b410 <__sfp_lock_release>
 800b430:	4b04      	ldr	r3, [pc, #16]	; (800b444 <__sinit+0x28>)
 800b432:	6223      	str	r3, [r4, #32]
 800b434:	4b04      	ldr	r3, [pc, #16]	; (800b448 <__sinit+0x2c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1f5      	bne.n	800b428 <__sinit+0xc>
 800b43c:	f7ff ffc4 	bl	800b3c8 <global_stdio_init.part.0>
 800b440:	e7f2      	b.n	800b428 <__sinit+0xc>
 800b442:	bf00      	nop
 800b444:	0800b389 	.word	0x0800b389
 800b448:	20006818 	.word	0x20006818

0800b44c <_fwalk_sglue>:
 800b44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b450:	4607      	mov	r7, r0
 800b452:	4688      	mov	r8, r1
 800b454:	4614      	mov	r4, r2
 800b456:	2600      	movs	r6, #0
 800b458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b45c:	f1b9 0901 	subs.w	r9, r9, #1
 800b460:	d505      	bpl.n	800b46e <_fwalk_sglue+0x22>
 800b462:	6824      	ldr	r4, [r4, #0]
 800b464:	2c00      	cmp	r4, #0
 800b466:	d1f7      	bne.n	800b458 <_fwalk_sglue+0xc>
 800b468:	4630      	mov	r0, r6
 800b46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b46e:	89ab      	ldrh	r3, [r5, #12]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d907      	bls.n	800b484 <_fwalk_sglue+0x38>
 800b474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b478:	3301      	adds	r3, #1
 800b47a:	d003      	beq.n	800b484 <_fwalk_sglue+0x38>
 800b47c:	4629      	mov	r1, r5
 800b47e:	4638      	mov	r0, r7
 800b480:	47c0      	blx	r8
 800b482:	4306      	orrs	r6, r0
 800b484:	3568      	adds	r5, #104	; 0x68
 800b486:	e7e9      	b.n	800b45c <_fwalk_sglue+0x10>

0800b488 <_fwrite_r>:
 800b488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b48c:	9c08      	ldr	r4, [sp, #32]
 800b48e:	468a      	mov	sl, r1
 800b490:	4690      	mov	r8, r2
 800b492:	fb02 f903 	mul.w	r9, r2, r3
 800b496:	4606      	mov	r6, r0
 800b498:	b118      	cbz	r0, 800b4a2 <_fwrite_r+0x1a>
 800b49a:	6a03      	ldr	r3, [r0, #32]
 800b49c:	b90b      	cbnz	r3, 800b4a2 <_fwrite_r+0x1a>
 800b49e:	f7ff ffbd 	bl	800b41c <__sinit>
 800b4a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4a4:	07dd      	lsls	r5, r3, #31
 800b4a6:	d405      	bmi.n	800b4b4 <_fwrite_r+0x2c>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	0598      	lsls	r0, r3, #22
 800b4ac:	d402      	bmi.n	800b4b4 <_fwrite_r+0x2c>
 800b4ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4b0:	f000 fa67 	bl	800b982 <__retarget_lock_acquire_recursive>
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	0719      	lsls	r1, r3, #28
 800b4b8:	d516      	bpl.n	800b4e8 <_fwrite_r+0x60>
 800b4ba:	6923      	ldr	r3, [r4, #16]
 800b4bc:	b1a3      	cbz	r3, 800b4e8 <_fwrite_r+0x60>
 800b4be:	2500      	movs	r5, #0
 800b4c0:	454d      	cmp	r5, r9
 800b4c2:	d01f      	beq.n	800b504 <_fwrite_r+0x7c>
 800b4c4:	68a7      	ldr	r7, [r4, #8]
 800b4c6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800b4ca:	3f01      	subs	r7, #1
 800b4cc:	2f00      	cmp	r7, #0
 800b4ce:	60a7      	str	r7, [r4, #8]
 800b4d0:	da04      	bge.n	800b4dc <_fwrite_r+0x54>
 800b4d2:	69a3      	ldr	r3, [r4, #24]
 800b4d4:	429f      	cmp	r7, r3
 800b4d6:	db0f      	blt.n	800b4f8 <_fwrite_r+0x70>
 800b4d8:	290a      	cmp	r1, #10
 800b4da:	d00d      	beq.n	800b4f8 <_fwrite_r+0x70>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	1c5a      	adds	r2, r3, #1
 800b4e0:	6022      	str	r2, [r4, #0]
 800b4e2:	7019      	strb	r1, [r3, #0]
 800b4e4:	3501      	adds	r5, #1
 800b4e6:	e7eb      	b.n	800b4c0 <_fwrite_r+0x38>
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f000 f93c 	bl	800b768 <__swsetup_r>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d0e4      	beq.n	800b4be <_fwrite_r+0x36>
 800b4f4:	2500      	movs	r5, #0
 800b4f6:	e005      	b.n	800b504 <_fwrite_r+0x7c>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f000 f8f6 	bl	800b6ec <__swbuf_r>
 800b500:	3001      	adds	r0, #1
 800b502:	d1ef      	bne.n	800b4e4 <_fwrite_r+0x5c>
 800b504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b506:	07da      	lsls	r2, r3, #31
 800b508:	d405      	bmi.n	800b516 <_fwrite_r+0x8e>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	059b      	lsls	r3, r3, #22
 800b50e:	d402      	bmi.n	800b516 <_fwrite_r+0x8e>
 800b510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b512:	f000 fa37 	bl	800b984 <__retarget_lock_release_recursive>
 800b516:	fbb5 f0f8 	udiv	r0, r5, r8
 800b51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800b520 <fwrite>:
 800b520:	b507      	push	{r0, r1, r2, lr}
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	4613      	mov	r3, r2
 800b526:	460a      	mov	r2, r1
 800b528:	4601      	mov	r1, r0
 800b52a:	4803      	ldr	r0, [pc, #12]	; (800b538 <fwrite+0x18>)
 800b52c:	6800      	ldr	r0, [r0, #0]
 800b52e:	f7ff ffab 	bl	800b488 <_fwrite_r>
 800b532:	b003      	add	sp, #12
 800b534:	f85d fb04 	ldr.w	pc, [sp], #4
 800b538:	2000015c 	.word	0x2000015c

0800b53c <_puts_r>:
 800b53c:	6a03      	ldr	r3, [r0, #32]
 800b53e:	b570      	push	{r4, r5, r6, lr}
 800b540:	6884      	ldr	r4, [r0, #8]
 800b542:	4605      	mov	r5, r0
 800b544:	460e      	mov	r6, r1
 800b546:	b90b      	cbnz	r3, 800b54c <_puts_r+0x10>
 800b548:	f7ff ff68 	bl	800b41c <__sinit>
 800b54c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b54e:	07db      	lsls	r3, r3, #31
 800b550:	d405      	bmi.n	800b55e <_puts_r+0x22>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	0598      	lsls	r0, r3, #22
 800b556:	d402      	bmi.n	800b55e <_puts_r+0x22>
 800b558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b55a:	f000 fa12 	bl	800b982 <__retarget_lock_acquire_recursive>
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	0719      	lsls	r1, r3, #28
 800b562:	d513      	bpl.n	800b58c <_puts_r+0x50>
 800b564:	6923      	ldr	r3, [r4, #16]
 800b566:	b18b      	cbz	r3, 800b58c <_puts_r+0x50>
 800b568:	3e01      	subs	r6, #1
 800b56a:	68a3      	ldr	r3, [r4, #8]
 800b56c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b570:	3b01      	subs	r3, #1
 800b572:	60a3      	str	r3, [r4, #8]
 800b574:	b9e9      	cbnz	r1, 800b5b2 <_puts_r+0x76>
 800b576:	2b00      	cmp	r3, #0
 800b578:	da2e      	bge.n	800b5d8 <_puts_r+0x9c>
 800b57a:	4622      	mov	r2, r4
 800b57c:	210a      	movs	r1, #10
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 f8b4 	bl	800b6ec <__swbuf_r>
 800b584:	3001      	adds	r0, #1
 800b586:	d007      	beq.n	800b598 <_puts_r+0x5c>
 800b588:	250a      	movs	r5, #10
 800b58a:	e007      	b.n	800b59c <_puts_r+0x60>
 800b58c:	4621      	mov	r1, r4
 800b58e:	4628      	mov	r0, r5
 800b590:	f000 f8ea 	bl	800b768 <__swsetup_r>
 800b594:	2800      	cmp	r0, #0
 800b596:	d0e7      	beq.n	800b568 <_puts_r+0x2c>
 800b598:	f04f 35ff 	mov.w	r5, #4294967295
 800b59c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b59e:	07da      	lsls	r2, r3, #31
 800b5a0:	d405      	bmi.n	800b5ae <_puts_r+0x72>
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	059b      	lsls	r3, r3, #22
 800b5a6:	d402      	bmi.n	800b5ae <_puts_r+0x72>
 800b5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5aa:	f000 f9eb 	bl	800b984 <__retarget_lock_release_recursive>
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	bd70      	pop	{r4, r5, r6, pc}
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	da04      	bge.n	800b5c0 <_puts_r+0x84>
 800b5b6:	69a2      	ldr	r2, [r4, #24]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	dc06      	bgt.n	800b5ca <_puts_r+0x8e>
 800b5bc:	290a      	cmp	r1, #10
 800b5be:	d004      	beq.n	800b5ca <_puts_r+0x8e>
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	6022      	str	r2, [r4, #0]
 800b5c6:	7019      	strb	r1, [r3, #0]
 800b5c8:	e7cf      	b.n	800b56a <_puts_r+0x2e>
 800b5ca:	4622      	mov	r2, r4
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f000 f88d 	bl	800b6ec <__swbuf_r>
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	d1c9      	bne.n	800b56a <_puts_r+0x2e>
 800b5d6:	e7df      	b.n	800b598 <_puts_r+0x5c>
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	250a      	movs	r5, #10
 800b5dc:	1c5a      	adds	r2, r3, #1
 800b5de:	6022      	str	r2, [r4, #0]
 800b5e0:	701d      	strb	r5, [r3, #0]
 800b5e2:	e7db      	b.n	800b59c <_puts_r+0x60>

0800b5e4 <puts>:
 800b5e4:	4b02      	ldr	r3, [pc, #8]	; (800b5f0 <puts+0xc>)
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	f7ff bfa7 	b.w	800b53c <_puts_r>
 800b5ee:	bf00      	nop
 800b5f0:	2000015c 	.word	0x2000015c

0800b5f4 <__sread>:
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5fc:	f000 f962 	bl	800b8c4 <_read_r>
 800b600:	2800      	cmp	r0, #0
 800b602:	bfab      	itete	ge
 800b604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b606:	89a3      	ldrhlt	r3, [r4, #12]
 800b608:	181b      	addge	r3, r3, r0
 800b60a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b60e:	bfac      	ite	ge
 800b610:	6563      	strge	r3, [r4, #84]	; 0x54
 800b612:	81a3      	strhlt	r3, [r4, #12]
 800b614:	bd10      	pop	{r4, pc}

0800b616 <__swrite>:
 800b616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b61a:	461f      	mov	r7, r3
 800b61c:	898b      	ldrh	r3, [r1, #12]
 800b61e:	05db      	lsls	r3, r3, #23
 800b620:	4605      	mov	r5, r0
 800b622:	460c      	mov	r4, r1
 800b624:	4616      	mov	r6, r2
 800b626:	d505      	bpl.n	800b634 <__swrite+0x1e>
 800b628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62c:	2302      	movs	r3, #2
 800b62e:	2200      	movs	r2, #0
 800b630:	f000 f936 	bl	800b8a0 <_lseek_r>
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b63a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b63e:	81a3      	strh	r3, [r4, #12]
 800b640:	4632      	mov	r2, r6
 800b642:	463b      	mov	r3, r7
 800b644:	4628      	mov	r0, r5
 800b646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b64a:	f000 b95d 	b.w	800b908 <_write_r>

0800b64e <__sseek>:
 800b64e:	b510      	push	{r4, lr}
 800b650:	460c      	mov	r4, r1
 800b652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b656:	f000 f923 	bl	800b8a0 <_lseek_r>
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	89a3      	ldrh	r3, [r4, #12]
 800b65e:	bf15      	itete	ne
 800b660:	6560      	strne	r0, [r4, #84]	; 0x54
 800b662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b66a:	81a3      	strheq	r3, [r4, #12]
 800b66c:	bf18      	it	ne
 800b66e:	81a3      	strhne	r3, [r4, #12]
 800b670:	bd10      	pop	{r4, pc}

0800b672 <__sclose>:
 800b672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b676:	f000 b903 	b.w	800b880 <_close_r>

0800b67a <_vsniprintf_r>:
 800b67a:	b530      	push	{r4, r5, lr}
 800b67c:	4614      	mov	r4, r2
 800b67e:	2c00      	cmp	r4, #0
 800b680:	b09b      	sub	sp, #108	; 0x6c
 800b682:	4605      	mov	r5, r0
 800b684:	461a      	mov	r2, r3
 800b686:	da05      	bge.n	800b694 <_vsniprintf_r+0x1a>
 800b688:	238b      	movs	r3, #139	; 0x8b
 800b68a:	6003      	str	r3, [r0, #0]
 800b68c:	f04f 30ff 	mov.w	r0, #4294967295
 800b690:	b01b      	add	sp, #108	; 0x6c
 800b692:	bd30      	pop	{r4, r5, pc}
 800b694:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b698:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b69c:	bf14      	ite	ne
 800b69e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b6a2:	4623      	moveq	r3, r4
 800b6a4:	9302      	str	r3, [sp, #8]
 800b6a6:	9305      	str	r3, [sp, #20]
 800b6a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6ac:	9100      	str	r1, [sp, #0]
 800b6ae:	9104      	str	r1, [sp, #16]
 800b6b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b6b4:	4669      	mov	r1, sp
 800b6b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6b8:	f001 fc12 	bl	800cee0 <_svfiprintf_r>
 800b6bc:	1c43      	adds	r3, r0, #1
 800b6be:	bfbc      	itt	lt
 800b6c0:	238b      	movlt	r3, #139	; 0x8b
 800b6c2:	602b      	strlt	r3, [r5, #0]
 800b6c4:	2c00      	cmp	r4, #0
 800b6c6:	d0e3      	beq.n	800b690 <_vsniprintf_r+0x16>
 800b6c8:	9b00      	ldr	r3, [sp, #0]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	701a      	strb	r2, [r3, #0]
 800b6ce:	e7df      	b.n	800b690 <_vsniprintf_r+0x16>

0800b6d0 <vsniprintf>:
 800b6d0:	b507      	push	{r0, r1, r2, lr}
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	460a      	mov	r2, r1
 800b6d8:	4601      	mov	r1, r0
 800b6da:	4803      	ldr	r0, [pc, #12]	; (800b6e8 <vsniprintf+0x18>)
 800b6dc:	6800      	ldr	r0, [r0, #0]
 800b6de:	f7ff ffcc 	bl	800b67a <_vsniprintf_r>
 800b6e2:	b003      	add	sp, #12
 800b6e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6e8:	2000015c 	.word	0x2000015c

0800b6ec <__swbuf_r>:
 800b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ee:	460e      	mov	r6, r1
 800b6f0:	4614      	mov	r4, r2
 800b6f2:	4605      	mov	r5, r0
 800b6f4:	b118      	cbz	r0, 800b6fe <__swbuf_r+0x12>
 800b6f6:	6a03      	ldr	r3, [r0, #32]
 800b6f8:	b90b      	cbnz	r3, 800b6fe <__swbuf_r+0x12>
 800b6fa:	f7ff fe8f 	bl	800b41c <__sinit>
 800b6fe:	69a3      	ldr	r3, [r4, #24]
 800b700:	60a3      	str	r3, [r4, #8]
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	071a      	lsls	r2, r3, #28
 800b706:	d525      	bpl.n	800b754 <__swbuf_r+0x68>
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	b31b      	cbz	r3, 800b754 <__swbuf_r+0x68>
 800b70c:	6823      	ldr	r3, [r4, #0]
 800b70e:	6922      	ldr	r2, [r4, #16]
 800b710:	1a98      	subs	r0, r3, r2
 800b712:	6963      	ldr	r3, [r4, #20]
 800b714:	b2f6      	uxtb	r6, r6
 800b716:	4283      	cmp	r3, r0
 800b718:	4637      	mov	r7, r6
 800b71a:	dc04      	bgt.n	800b726 <__swbuf_r+0x3a>
 800b71c:	4621      	mov	r1, r4
 800b71e:	4628      	mov	r0, r5
 800b720:	f001 fd62 	bl	800d1e8 <_fflush_r>
 800b724:	b9e0      	cbnz	r0, 800b760 <__swbuf_r+0x74>
 800b726:	68a3      	ldr	r3, [r4, #8]
 800b728:	3b01      	subs	r3, #1
 800b72a:	60a3      	str	r3, [r4, #8]
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	1c5a      	adds	r2, r3, #1
 800b730:	6022      	str	r2, [r4, #0]
 800b732:	701e      	strb	r6, [r3, #0]
 800b734:	6962      	ldr	r2, [r4, #20]
 800b736:	1c43      	adds	r3, r0, #1
 800b738:	429a      	cmp	r2, r3
 800b73a:	d004      	beq.n	800b746 <__swbuf_r+0x5a>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	07db      	lsls	r3, r3, #31
 800b740:	d506      	bpl.n	800b750 <__swbuf_r+0x64>
 800b742:	2e0a      	cmp	r6, #10
 800b744:	d104      	bne.n	800b750 <__swbuf_r+0x64>
 800b746:	4621      	mov	r1, r4
 800b748:	4628      	mov	r0, r5
 800b74a:	f001 fd4d 	bl	800d1e8 <_fflush_r>
 800b74e:	b938      	cbnz	r0, 800b760 <__swbuf_r+0x74>
 800b750:	4638      	mov	r0, r7
 800b752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b754:	4621      	mov	r1, r4
 800b756:	4628      	mov	r0, r5
 800b758:	f000 f806 	bl	800b768 <__swsetup_r>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d0d5      	beq.n	800b70c <__swbuf_r+0x20>
 800b760:	f04f 37ff 	mov.w	r7, #4294967295
 800b764:	e7f4      	b.n	800b750 <__swbuf_r+0x64>
	...

0800b768 <__swsetup_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4b2a      	ldr	r3, [pc, #168]	; (800b814 <__swsetup_r+0xac>)
 800b76c:	4605      	mov	r5, r0
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	460c      	mov	r4, r1
 800b772:	b118      	cbz	r0, 800b77c <__swsetup_r+0x14>
 800b774:	6a03      	ldr	r3, [r0, #32]
 800b776:	b90b      	cbnz	r3, 800b77c <__swsetup_r+0x14>
 800b778:	f7ff fe50 	bl	800b41c <__sinit>
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b782:	0718      	lsls	r0, r3, #28
 800b784:	d422      	bmi.n	800b7cc <__swsetup_r+0x64>
 800b786:	06d9      	lsls	r1, r3, #27
 800b788:	d407      	bmi.n	800b79a <__swsetup_r+0x32>
 800b78a:	2309      	movs	r3, #9
 800b78c:	602b      	str	r3, [r5, #0]
 800b78e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b792:	81a3      	strh	r3, [r4, #12]
 800b794:	f04f 30ff 	mov.w	r0, #4294967295
 800b798:	e034      	b.n	800b804 <__swsetup_r+0x9c>
 800b79a:	0758      	lsls	r0, r3, #29
 800b79c:	d512      	bpl.n	800b7c4 <__swsetup_r+0x5c>
 800b79e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7a0:	b141      	cbz	r1, 800b7b4 <__swsetup_r+0x4c>
 800b7a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a6:	4299      	cmp	r1, r3
 800b7a8:	d002      	beq.n	800b7b0 <__swsetup_r+0x48>
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f000 ff76 	bl	800c69c <_free_r>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	6363      	str	r3, [r4, #52]	; 0x34
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	2300      	movs	r3, #0
 800b7be:	6063      	str	r3, [r4, #4]
 800b7c0:	6923      	ldr	r3, [r4, #16]
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	f043 0308 	orr.w	r3, r3, #8
 800b7ca:	81a3      	strh	r3, [r4, #12]
 800b7cc:	6923      	ldr	r3, [r4, #16]
 800b7ce:	b94b      	cbnz	r3, 800b7e4 <__swsetup_r+0x7c>
 800b7d0:	89a3      	ldrh	r3, [r4, #12]
 800b7d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7da:	d003      	beq.n	800b7e4 <__swsetup_r+0x7c>
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f001 fd50 	bl	800d284 <__smakebuf_r>
 800b7e4:	89a0      	ldrh	r0, [r4, #12]
 800b7e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ea:	f010 0301 	ands.w	r3, r0, #1
 800b7ee:	d00a      	beq.n	800b806 <__swsetup_r+0x9e>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	60a3      	str	r3, [r4, #8]
 800b7f4:	6963      	ldr	r3, [r4, #20]
 800b7f6:	425b      	negs	r3, r3
 800b7f8:	61a3      	str	r3, [r4, #24]
 800b7fa:	6923      	ldr	r3, [r4, #16]
 800b7fc:	b943      	cbnz	r3, 800b810 <__swsetup_r+0xa8>
 800b7fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b802:	d1c4      	bne.n	800b78e <__swsetup_r+0x26>
 800b804:	bd38      	pop	{r3, r4, r5, pc}
 800b806:	0781      	lsls	r1, r0, #30
 800b808:	bf58      	it	pl
 800b80a:	6963      	ldrpl	r3, [r4, #20]
 800b80c:	60a3      	str	r3, [r4, #8]
 800b80e:	e7f4      	b.n	800b7fa <__swsetup_r+0x92>
 800b810:	2000      	movs	r0, #0
 800b812:	e7f7      	b.n	800b804 <__swsetup_r+0x9c>
 800b814:	2000015c 	.word	0x2000015c

0800b818 <memmove>:
 800b818:	4288      	cmp	r0, r1
 800b81a:	b510      	push	{r4, lr}
 800b81c:	eb01 0402 	add.w	r4, r1, r2
 800b820:	d902      	bls.n	800b828 <memmove+0x10>
 800b822:	4284      	cmp	r4, r0
 800b824:	4623      	mov	r3, r4
 800b826:	d807      	bhi.n	800b838 <memmove+0x20>
 800b828:	1e43      	subs	r3, r0, #1
 800b82a:	42a1      	cmp	r1, r4
 800b82c:	d008      	beq.n	800b840 <memmove+0x28>
 800b82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b832:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b836:	e7f8      	b.n	800b82a <memmove+0x12>
 800b838:	4402      	add	r2, r0
 800b83a:	4601      	mov	r1, r0
 800b83c:	428a      	cmp	r2, r1
 800b83e:	d100      	bne.n	800b842 <memmove+0x2a>
 800b840:	bd10      	pop	{r4, pc}
 800b842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b84a:	e7f7      	b.n	800b83c <memmove+0x24>

0800b84c <memset>:
 800b84c:	4402      	add	r2, r0
 800b84e:	4603      	mov	r3, r0
 800b850:	4293      	cmp	r3, r2
 800b852:	d100      	bne.n	800b856 <memset+0xa>
 800b854:	4770      	bx	lr
 800b856:	f803 1b01 	strb.w	r1, [r3], #1
 800b85a:	e7f9      	b.n	800b850 <memset+0x4>

0800b85c <strchr>:
 800b85c:	b2c9      	uxtb	r1, r1
 800b85e:	4603      	mov	r3, r0
 800b860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b864:	b11a      	cbz	r2, 800b86e <strchr+0x12>
 800b866:	428a      	cmp	r2, r1
 800b868:	d1f9      	bne.n	800b85e <strchr+0x2>
 800b86a:	4618      	mov	r0, r3
 800b86c:	4770      	bx	lr
 800b86e:	2900      	cmp	r1, #0
 800b870:	bf18      	it	ne
 800b872:	2300      	movne	r3, #0
 800b874:	e7f9      	b.n	800b86a <strchr+0xe>
	...

0800b878 <_localeconv_r>:
 800b878:	4800      	ldr	r0, [pc, #0]	; (800b87c <_localeconv_r+0x4>)
 800b87a:	4770      	bx	lr
 800b87c:	20000250 	.word	0x20000250

0800b880 <_close_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d06      	ldr	r5, [pc, #24]	; (800b89c <_close_r+0x1c>)
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	602b      	str	r3, [r5, #0]
 800b88c:	f7f7 f94d 	bl	8002b2a <_close>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <_close_r+0x1a>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	b103      	cbz	r3, 800b89a <_close_r+0x1a>
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	2000681c 	.word	0x2000681c

0800b8a0 <_lseek_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4d07      	ldr	r5, [pc, #28]	; (800b8c0 <_lseek_r+0x20>)
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	4608      	mov	r0, r1
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	602a      	str	r2, [r5, #0]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	f7f7 f962 	bl	8002b78 <_lseek>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_lseek_r+0x1e>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_lseek_r+0x1e>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	2000681c 	.word	0x2000681c

0800b8c4 <_read_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d07      	ldr	r5, [pc, #28]	; (800b8e4 <_read_r+0x20>)
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	4608      	mov	r0, r1
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	602a      	str	r2, [r5, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f7f7 f8f0 	bl	8002ab8 <_read>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_read_r+0x1e>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_read_r+0x1e>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	2000681c 	.word	0x2000681c

0800b8e8 <_sbrk_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4d06      	ldr	r5, [pc, #24]	; (800b904 <_sbrk_r+0x1c>)
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	4608      	mov	r0, r1
 800b8f2:	602b      	str	r3, [r5, #0]
 800b8f4:	f7f7 f94e 	bl	8002b94 <_sbrk>
 800b8f8:	1c43      	adds	r3, r0, #1
 800b8fa:	d102      	bne.n	800b902 <_sbrk_r+0x1a>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	b103      	cbz	r3, 800b902 <_sbrk_r+0x1a>
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	bd38      	pop	{r3, r4, r5, pc}
 800b904:	2000681c 	.word	0x2000681c

0800b908 <_write_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d07      	ldr	r5, [pc, #28]	; (800b928 <_write_r+0x20>)
 800b90c:	4604      	mov	r4, r0
 800b90e:	4608      	mov	r0, r1
 800b910:	4611      	mov	r1, r2
 800b912:	2200      	movs	r2, #0
 800b914:	602a      	str	r2, [r5, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	f7f7 f8eb 	bl	8002af2 <_write>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	d102      	bne.n	800b926 <_write_r+0x1e>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	b103      	cbz	r3, 800b926 <_write_r+0x1e>
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	bd38      	pop	{r3, r4, r5, pc}
 800b928:	2000681c 	.word	0x2000681c

0800b92c <__errno>:
 800b92c:	4b01      	ldr	r3, [pc, #4]	; (800b934 <__errno+0x8>)
 800b92e:	6818      	ldr	r0, [r3, #0]
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	2000015c 	.word	0x2000015c

0800b938 <__libc_init_array>:
 800b938:	b570      	push	{r4, r5, r6, lr}
 800b93a:	4d0d      	ldr	r5, [pc, #52]	; (800b970 <__libc_init_array+0x38>)
 800b93c:	4c0d      	ldr	r4, [pc, #52]	; (800b974 <__libc_init_array+0x3c>)
 800b93e:	1b64      	subs	r4, r4, r5
 800b940:	10a4      	asrs	r4, r4, #2
 800b942:	2600      	movs	r6, #0
 800b944:	42a6      	cmp	r6, r4
 800b946:	d109      	bne.n	800b95c <__libc_init_array+0x24>
 800b948:	4d0b      	ldr	r5, [pc, #44]	; (800b978 <__libc_init_array+0x40>)
 800b94a:	4c0c      	ldr	r4, [pc, #48]	; (800b97c <__libc_init_array+0x44>)
 800b94c:	f002 ffb8 	bl	800e8c0 <_init>
 800b950:	1b64      	subs	r4, r4, r5
 800b952:	10a4      	asrs	r4, r4, #2
 800b954:	2600      	movs	r6, #0
 800b956:	42a6      	cmp	r6, r4
 800b958:	d105      	bne.n	800b966 <__libc_init_array+0x2e>
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b960:	4798      	blx	r3
 800b962:	3601      	adds	r6, #1
 800b964:	e7ee      	b.n	800b944 <__libc_init_array+0xc>
 800b966:	f855 3b04 	ldr.w	r3, [r5], #4
 800b96a:	4798      	blx	r3
 800b96c:	3601      	adds	r6, #1
 800b96e:	e7f2      	b.n	800b956 <__libc_init_array+0x1e>
 800b970:	0800f090 	.word	0x0800f090
 800b974:	0800f090 	.word	0x0800f090
 800b978:	0800f090 	.word	0x0800f090
 800b97c:	0800f094 	.word	0x0800f094

0800b980 <__retarget_lock_init_recursive>:
 800b980:	4770      	bx	lr

0800b982 <__retarget_lock_acquire_recursive>:
 800b982:	4770      	bx	lr

0800b984 <__retarget_lock_release_recursive>:
 800b984:	4770      	bx	lr

0800b986 <memcpy>:
 800b986:	440a      	add	r2, r1
 800b988:	4291      	cmp	r1, r2
 800b98a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b98e:	d100      	bne.n	800b992 <memcpy+0xc>
 800b990:	4770      	bx	lr
 800b992:	b510      	push	{r4, lr}
 800b994:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b99c:	4291      	cmp	r1, r2
 800b99e:	d1f9      	bne.n	800b994 <memcpy+0xe>
 800b9a0:	bd10      	pop	{r4, pc}

0800b9a2 <quorem>:
 800b9a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a6:	6903      	ldr	r3, [r0, #16]
 800b9a8:	690c      	ldr	r4, [r1, #16]
 800b9aa:	42a3      	cmp	r3, r4
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	db7e      	blt.n	800baae <quorem+0x10c>
 800b9b0:	3c01      	subs	r4, #1
 800b9b2:	f101 0814 	add.w	r8, r1, #20
 800b9b6:	f100 0514 	add.w	r5, r0, #20
 800b9ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b9d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9d8:	d331      	bcc.n	800ba3e <quorem+0x9c>
 800b9da:	f04f 0e00 	mov.w	lr, #0
 800b9de:	4640      	mov	r0, r8
 800b9e0:	46ac      	mov	ip, r5
 800b9e2:	46f2      	mov	sl, lr
 800b9e4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b9e8:	b293      	uxth	r3, r2
 800b9ea:	fb06 e303 	mla	r3, r6, r3, lr
 800b9ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b9f2:	0c1a      	lsrs	r2, r3, #16
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	ebaa 0303 	sub.w	r3, sl, r3
 800b9fa:	f8dc a000 	ldr.w	sl, [ip]
 800b9fe:	fa13 f38a 	uxtah	r3, r3, sl
 800ba02:	fb06 220e 	mla	r2, r6, lr, r2
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	9b00      	ldr	r3, [sp, #0]
 800ba0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba0e:	b292      	uxth	r2, r2
 800ba10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ba14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba18:	f8bd 3000 	ldrh.w	r3, [sp]
 800ba1c:	4581      	cmp	r9, r0
 800ba1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba22:	f84c 3b04 	str.w	r3, [ip], #4
 800ba26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba2a:	d2db      	bcs.n	800b9e4 <quorem+0x42>
 800ba2c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba30:	b92b      	cbnz	r3, 800ba3e <quorem+0x9c>
 800ba32:	9b01      	ldr	r3, [sp, #4]
 800ba34:	3b04      	subs	r3, #4
 800ba36:	429d      	cmp	r5, r3
 800ba38:	461a      	mov	r2, r3
 800ba3a:	d32c      	bcc.n	800ba96 <quorem+0xf4>
 800ba3c:	613c      	str	r4, [r7, #16]
 800ba3e:	4638      	mov	r0, r7
 800ba40:	f001 f8f4 	bl	800cc2c <__mcmp>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	db22      	blt.n	800ba8e <quorem+0xec>
 800ba48:	3601      	adds	r6, #1
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba52:	f8d1 c000 	ldr.w	ip, [r1]
 800ba56:	b293      	uxth	r3, r2
 800ba58:	1ac3      	subs	r3, r0, r3
 800ba5a:	0c12      	lsrs	r2, r2, #16
 800ba5c:	fa13 f38c 	uxtah	r3, r3, ip
 800ba60:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ba64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba6e:	45c1      	cmp	r9, r8
 800ba70:	f841 3b04 	str.w	r3, [r1], #4
 800ba74:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba78:	d2e9      	bcs.n	800ba4e <quorem+0xac>
 800ba7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba82:	b922      	cbnz	r2, 800ba8e <quorem+0xec>
 800ba84:	3b04      	subs	r3, #4
 800ba86:	429d      	cmp	r5, r3
 800ba88:	461a      	mov	r2, r3
 800ba8a:	d30a      	bcc.n	800baa2 <quorem+0x100>
 800ba8c:	613c      	str	r4, [r7, #16]
 800ba8e:	4630      	mov	r0, r6
 800ba90:	b003      	add	sp, #12
 800ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba96:	6812      	ldr	r2, [r2, #0]
 800ba98:	3b04      	subs	r3, #4
 800ba9a:	2a00      	cmp	r2, #0
 800ba9c:	d1ce      	bne.n	800ba3c <quorem+0x9a>
 800ba9e:	3c01      	subs	r4, #1
 800baa0:	e7c9      	b.n	800ba36 <quorem+0x94>
 800baa2:	6812      	ldr	r2, [r2, #0]
 800baa4:	3b04      	subs	r3, #4
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	d1f0      	bne.n	800ba8c <quorem+0xea>
 800baaa:	3c01      	subs	r4, #1
 800baac:	e7eb      	b.n	800ba86 <quorem+0xe4>
 800baae:	2000      	movs	r0, #0
 800bab0:	e7ee      	b.n	800ba90 <quorem+0xee>
 800bab2:	0000      	movs	r0, r0
 800bab4:	0000      	movs	r0, r0
	...

0800bab8 <_dtoa_r>:
 800bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	ed2d 8b04 	vpush	{d8-d9}
 800bac0:	69c5      	ldr	r5, [r0, #28]
 800bac2:	b093      	sub	sp, #76	; 0x4c
 800bac4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bac8:	ec57 6b10 	vmov	r6, r7, d0
 800bacc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bad0:	9107      	str	r1, [sp, #28]
 800bad2:	4604      	mov	r4, r0
 800bad4:	920a      	str	r2, [sp, #40]	; 0x28
 800bad6:	930d      	str	r3, [sp, #52]	; 0x34
 800bad8:	b975      	cbnz	r5, 800baf8 <_dtoa_r+0x40>
 800bada:	2010      	movs	r0, #16
 800badc:	f7fe fef8 	bl	800a8d0 <malloc>
 800bae0:	4602      	mov	r2, r0
 800bae2:	61e0      	str	r0, [r4, #28]
 800bae4:	b920      	cbnz	r0, 800baf0 <_dtoa_r+0x38>
 800bae6:	4bae      	ldr	r3, [pc, #696]	; (800bda0 <_dtoa_r+0x2e8>)
 800bae8:	21ef      	movs	r1, #239	; 0xef
 800baea:	48ae      	ldr	r0, [pc, #696]	; (800bda4 <_dtoa_r+0x2ec>)
 800baec:	f001 fc28 	bl	800d340 <__assert_func>
 800baf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800baf4:	6005      	str	r5, [r0, #0]
 800baf6:	60c5      	str	r5, [r0, #12]
 800baf8:	69e3      	ldr	r3, [r4, #28]
 800bafa:	6819      	ldr	r1, [r3, #0]
 800bafc:	b151      	cbz	r1, 800bb14 <_dtoa_r+0x5c>
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	604a      	str	r2, [r1, #4]
 800bb02:	2301      	movs	r3, #1
 800bb04:	4093      	lsls	r3, r2
 800bb06:	608b      	str	r3, [r1, #8]
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f000 fe53 	bl	800c7b4 <_Bfree>
 800bb0e:	69e3      	ldr	r3, [r4, #28]
 800bb10:	2200      	movs	r2, #0
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	1e3b      	subs	r3, r7, #0
 800bb16:	bfbb      	ittet	lt
 800bb18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bb1c:	9303      	strlt	r3, [sp, #12]
 800bb1e:	2300      	movge	r3, #0
 800bb20:	2201      	movlt	r2, #1
 800bb22:	bfac      	ite	ge
 800bb24:	f8c8 3000 	strge.w	r3, [r8]
 800bb28:	f8c8 2000 	strlt.w	r2, [r8]
 800bb2c:	4b9e      	ldr	r3, [pc, #632]	; (800bda8 <_dtoa_r+0x2f0>)
 800bb2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bb32:	ea33 0308 	bics.w	r3, r3, r8
 800bb36:	d11b      	bne.n	800bb70 <_dtoa_r+0xb8>
 800bb38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb3a:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb3e:	6013      	str	r3, [r2, #0]
 800bb40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bb44:	4333      	orrs	r3, r6
 800bb46:	f000 8593 	beq.w	800c670 <_dtoa_r+0xbb8>
 800bb4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb4c:	b963      	cbnz	r3, 800bb68 <_dtoa_r+0xb0>
 800bb4e:	4b97      	ldr	r3, [pc, #604]	; (800bdac <_dtoa_r+0x2f4>)
 800bb50:	e027      	b.n	800bba2 <_dtoa_r+0xea>
 800bb52:	4b97      	ldr	r3, [pc, #604]	; (800bdb0 <_dtoa_r+0x2f8>)
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	3308      	adds	r3, #8
 800bb58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb5a:	6013      	str	r3, [r2, #0]
 800bb5c:	9800      	ldr	r0, [sp, #0]
 800bb5e:	b013      	add	sp, #76	; 0x4c
 800bb60:	ecbd 8b04 	vpop	{d8-d9}
 800bb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb68:	4b90      	ldr	r3, [pc, #576]	; (800bdac <_dtoa_r+0x2f4>)
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	3303      	adds	r3, #3
 800bb6e:	e7f3      	b.n	800bb58 <_dtoa_r+0xa0>
 800bb70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb74:	2200      	movs	r2, #0
 800bb76:	ec51 0b17 	vmov	r0, r1, d7
 800bb7a:	eeb0 8a47 	vmov.f32	s16, s14
 800bb7e:	eef0 8a67 	vmov.f32	s17, s15
 800bb82:	2300      	movs	r3, #0
 800bb84:	f7f4 ffb8 	bl	8000af8 <__aeabi_dcmpeq>
 800bb88:	4681      	mov	r9, r0
 800bb8a:	b160      	cbz	r0, 800bba6 <_dtoa_r+0xee>
 800bb8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb8e:	2301      	movs	r3, #1
 800bb90:	6013      	str	r3, [r2, #0]
 800bb92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 8568 	beq.w	800c66a <_dtoa_r+0xbb2>
 800bb9a:	4b86      	ldr	r3, [pc, #536]	; (800bdb4 <_dtoa_r+0x2fc>)
 800bb9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb9e:	6013      	str	r3, [r2, #0]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	e7da      	b.n	800bb5c <_dtoa_r+0xa4>
 800bba6:	aa10      	add	r2, sp, #64	; 0x40
 800bba8:	a911      	add	r1, sp, #68	; 0x44
 800bbaa:	4620      	mov	r0, r4
 800bbac:	eeb0 0a48 	vmov.f32	s0, s16
 800bbb0:	eef0 0a68 	vmov.f32	s1, s17
 800bbb4:	f001 f8e0 	bl	800cd78 <__d2b>
 800bbb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bbbc:	4682      	mov	sl, r0
 800bbbe:	2d00      	cmp	r5, #0
 800bbc0:	d07f      	beq.n	800bcc2 <_dtoa_r+0x20a>
 800bbc2:	ee18 3a90 	vmov	r3, s17
 800bbc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bbce:	ec51 0b18 	vmov	r0, r1, d8
 800bbd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bbd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bbda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bbde:	4619      	mov	r1, r3
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	4b75      	ldr	r3, [pc, #468]	; (800bdb8 <_dtoa_r+0x300>)
 800bbe4:	f7f4 fb68 	bl	80002b8 <__aeabi_dsub>
 800bbe8:	a367      	add	r3, pc, #412	; (adr r3, 800bd88 <_dtoa_r+0x2d0>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	f7f4 fd1b 	bl	8000628 <__aeabi_dmul>
 800bbf2:	a367      	add	r3, pc, #412	; (adr r3, 800bd90 <_dtoa_r+0x2d8>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f7f4 fb60 	bl	80002bc <__adddf3>
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	4628      	mov	r0, r5
 800bc00:	460f      	mov	r7, r1
 800bc02:	f7f4 fca7 	bl	8000554 <__aeabi_i2d>
 800bc06:	a364      	add	r3, pc, #400	; (adr r3, 800bd98 <_dtoa_r+0x2e0>)
 800bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0c:	f7f4 fd0c 	bl	8000628 <__aeabi_dmul>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4630      	mov	r0, r6
 800bc16:	4639      	mov	r1, r7
 800bc18:	f7f4 fb50 	bl	80002bc <__adddf3>
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	460f      	mov	r7, r1
 800bc20:	f7f4 ffb2 	bl	8000b88 <__aeabi_d2iz>
 800bc24:	2200      	movs	r2, #0
 800bc26:	4683      	mov	fp, r0
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	4639      	mov	r1, r7
 800bc2e:	f7f4 ff6d 	bl	8000b0c <__aeabi_dcmplt>
 800bc32:	b148      	cbz	r0, 800bc48 <_dtoa_r+0x190>
 800bc34:	4658      	mov	r0, fp
 800bc36:	f7f4 fc8d 	bl	8000554 <__aeabi_i2d>
 800bc3a:	4632      	mov	r2, r6
 800bc3c:	463b      	mov	r3, r7
 800bc3e:	f7f4 ff5b 	bl	8000af8 <__aeabi_dcmpeq>
 800bc42:	b908      	cbnz	r0, 800bc48 <_dtoa_r+0x190>
 800bc44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc48:	f1bb 0f16 	cmp.w	fp, #22
 800bc4c:	d857      	bhi.n	800bcfe <_dtoa_r+0x246>
 800bc4e:	4b5b      	ldr	r3, [pc, #364]	; (800bdbc <_dtoa_r+0x304>)
 800bc50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	ec51 0b18 	vmov	r0, r1, d8
 800bc5c:	f7f4 ff56 	bl	8000b0c <__aeabi_dcmplt>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	d04e      	beq.n	800bd02 <_dtoa_r+0x24a>
 800bc64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc68:	2300      	movs	r3, #0
 800bc6a:	930c      	str	r3, [sp, #48]	; 0x30
 800bc6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc6e:	1b5b      	subs	r3, r3, r5
 800bc70:	1e5a      	subs	r2, r3, #1
 800bc72:	bf45      	ittet	mi
 800bc74:	f1c3 0301 	rsbmi	r3, r3, #1
 800bc78:	9305      	strmi	r3, [sp, #20]
 800bc7a:	2300      	movpl	r3, #0
 800bc7c:	2300      	movmi	r3, #0
 800bc7e:	9206      	str	r2, [sp, #24]
 800bc80:	bf54      	ite	pl
 800bc82:	9305      	strpl	r3, [sp, #20]
 800bc84:	9306      	strmi	r3, [sp, #24]
 800bc86:	f1bb 0f00 	cmp.w	fp, #0
 800bc8a:	db3c      	blt.n	800bd06 <_dtoa_r+0x24e>
 800bc8c:	9b06      	ldr	r3, [sp, #24]
 800bc8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bc92:	445b      	add	r3, fp
 800bc94:	9306      	str	r3, [sp, #24]
 800bc96:	2300      	movs	r3, #0
 800bc98:	9308      	str	r3, [sp, #32]
 800bc9a:	9b07      	ldr	r3, [sp, #28]
 800bc9c:	2b09      	cmp	r3, #9
 800bc9e:	d868      	bhi.n	800bd72 <_dtoa_r+0x2ba>
 800bca0:	2b05      	cmp	r3, #5
 800bca2:	bfc4      	itt	gt
 800bca4:	3b04      	subgt	r3, #4
 800bca6:	9307      	strgt	r3, [sp, #28]
 800bca8:	9b07      	ldr	r3, [sp, #28]
 800bcaa:	f1a3 0302 	sub.w	r3, r3, #2
 800bcae:	bfcc      	ite	gt
 800bcb0:	2500      	movgt	r5, #0
 800bcb2:	2501      	movle	r5, #1
 800bcb4:	2b03      	cmp	r3, #3
 800bcb6:	f200 8085 	bhi.w	800bdc4 <_dtoa_r+0x30c>
 800bcba:	e8df f003 	tbb	[pc, r3]
 800bcbe:	3b2e      	.short	0x3b2e
 800bcc0:	5839      	.short	0x5839
 800bcc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bcc6:	441d      	add	r5, r3
 800bcc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bccc:	2b20      	cmp	r3, #32
 800bcce:	bfc1      	itttt	gt
 800bcd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bcd4:	fa08 f803 	lslgt.w	r8, r8, r3
 800bcd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bcdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bce0:	bfd6      	itet	le
 800bce2:	f1c3 0320 	rsble	r3, r3, #32
 800bce6:	ea48 0003 	orrgt.w	r0, r8, r3
 800bcea:	fa06 f003 	lslle.w	r0, r6, r3
 800bcee:	f7f4 fc21 	bl	8000534 <__aeabi_ui2d>
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bcf8:	3d01      	subs	r5, #1
 800bcfa:	920e      	str	r2, [sp, #56]	; 0x38
 800bcfc:	e76f      	b.n	800bbde <_dtoa_r+0x126>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e7b3      	b.n	800bc6a <_dtoa_r+0x1b2>
 800bd02:	900c      	str	r0, [sp, #48]	; 0x30
 800bd04:	e7b2      	b.n	800bc6c <_dtoa_r+0x1b4>
 800bd06:	9b05      	ldr	r3, [sp, #20]
 800bd08:	eba3 030b 	sub.w	r3, r3, fp
 800bd0c:	9305      	str	r3, [sp, #20]
 800bd0e:	f1cb 0300 	rsb	r3, fp, #0
 800bd12:	9308      	str	r3, [sp, #32]
 800bd14:	2300      	movs	r3, #0
 800bd16:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd18:	e7bf      	b.n	800bc9a <_dtoa_r+0x1e2>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	dc52      	bgt.n	800bdca <_dtoa_r+0x312>
 800bd24:	2301      	movs	r3, #1
 800bd26:	9301      	str	r3, [sp, #4]
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	920a      	str	r2, [sp, #40]	; 0x28
 800bd2e:	e00b      	b.n	800bd48 <_dtoa_r+0x290>
 800bd30:	2301      	movs	r3, #1
 800bd32:	e7f3      	b.n	800bd1c <_dtoa_r+0x264>
 800bd34:	2300      	movs	r3, #0
 800bd36:	9309      	str	r3, [sp, #36]	; 0x24
 800bd38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd3a:	445b      	add	r3, fp
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	9304      	str	r3, [sp, #16]
 800bd44:	bfb8      	it	lt
 800bd46:	2301      	movlt	r3, #1
 800bd48:	69e0      	ldr	r0, [r4, #28]
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	2204      	movs	r2, #4
 800bd4e:	f102 0614 	add.w	r6, r2, #20
 800bd52:	429e      	cmp	r6, r3
 800bd54:	d93d      	bls.n	800bdd2 <_dtoa_r+0x31a>
 800bd56:	6041      	str	r1, [r0, #4]
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 fceb 	bl	800c734 <_Balloc>
 800bd5e:	9000      	str	r0, [sp, #0]
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d139      	bne.n	800bdd8 <_dtoa_r+0x320>
 800bd64:	4b16      	ldr	r3, [pc, #88]	; (800bdc0 <_dtoa_r+0x308>)
 800bd66:	4602      	mov	r2, r0
 800bd68:	f240 11af 	movw	r1, #431	; 0x1af
 800bd6c:	e6bd      	b.n	800baea <_dtoa_r+0x32>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e7e1      	b.n	800bd36 <_dtoa_r+0x27e>
 800bd72:	2501      	movs	r5, #1
 800bd74:	2300      	movs	r3, #0
 800bd76:	9307      	str	r3, [sp, #28]
 800bd78:	9509      	str	r5, [sp, #36]	; 0x24
 800bd7a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	9304      	str	r3, [sp, #16]
 800bd82:	2200      	movs	r2, #0
 800bd84:	2312      	movs	r3, #18
 800bd86:	e7d1      	b.n	800bd2c <_dtoa_r+0x274>
 800bd88:	636f4361 	.word	0x636f4361
 800bd8c:	3fd287a7 	.word	0x3fd287a7
 800bd90:	8b60c8b3 	.word	0x8b60c8b3
 800bd94:	3fc68a28 	.word	0x3fc68a28
 800bd98:	509f79fb 	.word	0x509f79fb
 800bd9c:	3fd34413 	.word	0x3fd34413
 800bda0:	0800eb79 	.word	0x0800eb79
 800bda4:	0800eb90 	.word	0x0800eb90
 800bda8:	7ff00000 	.word	0x7ff00000
 800bdac:	0800eb75 	.word	0x0800eb75
 800bdb0:	0800eb6c 	.word	0x0800eb6c
 800bdb4:	0800eb49 	.word	0x0800eb49
 800bdb8:	3ff80000 	.word	0x3ff80000
 800bdbc:	0800ec80 	.word	0x0800ec80
 800bdc0:	0800ebe8 	.word	0x0800ebe8
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc8:	e7d7      	b.n	800bd7a <_dtoa_r+0x2c2>
 800bdca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	9304      	str	r3, [sp, #16]
 800bdd0:	e7ba      	b.n	800bd48 <_dtoa_r+0x290>
 800bdd2:	3101      	adds	r1, #1
 800bdd4:	0052      	lsls	r2, r2, #1
 800bdd6:	e7ba      	b.n	800bd4e <_dtoa_r+0x296>
 800bdd8:	69e3      	ldr	r3, [r4, #28]
 800bdda:	9a00      	ldr	r2, [sp, #0]
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	9b04      	ldr	r3, [sp, #16]
 800bde0:	2b0e      	cmp	r3, #14
 800bde2:	f200 80a8 	bhi.w	800bf36 <_dtoa_r+0x47e>
 800bde6:	2d00      	cmp	r5, #0
 800bde8:	f000 80a5 	beq.w	800bf36 <_dtoa_r+0x47e>
 800bdec:	f1bb 0f00 	cmp.w	fp, #0
 800bdf0:	dd38      	ble.n	800be64 <_dtoa_r+0x3ac>
 800bdf2:	4bc0      	ldr	r3, [pc, #768]	; (800c0f4 <_dtoa_r+0x63c>)
 800bdf4:	f00b 020f 	and.w	r2, fp, #15
 800bdf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800be00:	e9d3 6700 	ldrd	r6, r7, [r3]
 800be04:	ea4f 182b 	mov.w	r8, fp, asr #4
 800be08:	d019      	beq.n	800be3e <_dtoa_r+0x386>
 800be0a:	4bbb      	ldr	r3, [pc, #748]	; (800c0f8 <_dtoa_r+0x640>)
 800be0c:	ec51 0b18 	vmov	r0, r1, d8
 800be10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be14:	f7f4 fd32 	bl	800087c <__aeabi_ddiv>
 800be18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be1c:	f008 080f 	and.w	r8, r8, #15
 800be20:	2503      	movs	r5, #3
 800be22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c0f8 <_dtoa_r+0x640>
 800be26:	f1b8 0f00 	cmp.w	r8, #0
 800be2a:	d10a      	bne.n	800be42 <_dtoa_r+0x38a>
 800be2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be30:	4632      	mov	r2, r6
 800be32:	463b      	mov	r3, r7
 800be34:	f7f4 fd22 	bl	800087c <__aeabi_ddiv>
 800be38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be3c:	e02b      	b.n	800be96 <_dtoa_r+0x3de>
 800be3e:	2502      	movs	r5, #2
 800be40:	e7ef      	b.n	800be22 <_dtoa_r+0x36a>
 800be42:	f018 0f01 	tst.w	r8, #1
 800be46:	d008      	beq.n	800be5a <_dtoa_r+0x3a2>
 800be48:	4630      	mov	r0, r6
 800be4a:	4639      	mov	r1, r7
 800be4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800be50:	f7f4 fbea 	bl	8000628 <__aeabi_dmul>
 800be54:	3501      	adds	r5, #1
 800be56:	4606      	mov	r6, r0
 800be58:	460f      	mov	r7, r1
 800be5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800be5e:	f109 0908 	add.w	r9, r9, #8
 800be62:	e7e0      	b.n	800be26 <_dtoa_r+0x36e>
 800be64:	f000 809f 	beq.w	800bfa6 <_dtoa_r+0x4ee>
 800be68:	f1cb 0600 	rsb	r6, fp, #0
 800be6c:	4ba1      	ldr	r3, [pc, #644]	; (800c0f4 <_dtoa_r+0x63c>)
 800be6e:	4fa2      	ldr	r7, [pc, #648]	; (800c0f8 <_dtoa_r+0x640>)
 800be70:	f006 020f 	and.w	r2, r6, #15
 800be74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	ec51 0b18 	vmov	r0, r1, d8
 800be80:	f7f4 fbd2 	bl	8000628 <__aeabi_dmul>
 800be84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be88:	1136      	asrs	r6, r6, #4
 800be8a:	2300      	movs	r3, #0
 800be8c:	2502      	movs	r5, #2
 800be8e:	2e00      	cmp	r6, #0
 800be90:	d17e      	bne.n	800bf90 <_dtoa_r+0x4d8>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1d0      	bne.n	800be38 <_dtoa_r+0x380>
 800be96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 8084 	beq.w	800bfaa <_dtoa_r+0x4f2>
 800bea2:	4b96      	ldr	r3, [pc, #600]	; (800c0fc <_dtoa_r+0x644>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	4640      	mov	r0, r8
 800bea8:	4649      	mov	r1, r9
 800beaa:	f7f4 fe2f 	bl	8000b0c <__aeabi_dcmplt>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d07b      	beq.n	800bfaa <_dtoa_r+0x4f2>
 800beb2:	9b04      	ldr	r3, [sp, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d078      	beq.n	800bfaa <_dtoa_r+0x4f2>
 800beb8:	9b01      	ldr	r3, [sp, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	dd39      	ble.n	800bf32 <_dtoa_r+0x47a>
 800bebe:	4b90      	ldr	r3, [pc, #576]	; (800c100 <_dtoa_r+0x648>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	4640      	mov	r0, r8
 800bec4:	4649      	mov	r1, r9
 800bec6:	f7f4 fbaf 	bl	8000628 <__aeabi_dmul>
 800beca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bece:	9e01      	ldr	r6, [sp, #4]
 800bed0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bed4:	3501      	adds	r5, #1
 800bed6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800beda:	4628      	mov	r0, r5
 800bedc:	f7f4 fb3a 	bl	8000554 <__aeabi_i2d>
 800bee0:	4642      	mov	r2, r8
 800bee2:	464b      	mov	r3, r9
 800bee4:	f7f4 fba0 	bl	8000628 <__aeabi_dmul>
 800bee8:	4b86      	ldr	r3, [pc, #536]	; (800c104 <_dtoa_r+0x64c>)
 800beea:	2200      	movs	r2, #0
 800beec:	f7f4 f9e6 	bl	80002bc <__adddf3>
 800bef0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bef8:	9303      	str	r3, [sp, #12]
 800befa:	2e00      	cmp	r6, #0
 800befc:	d158      	bne.n	800bfb0 <_dtoa_r+0x4f8>
 800befe:	4b82      	ldr	r3, [pc, #520]	; (800c108 <_dtoa_r+0x650>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	4640      	mov	r0, r8
 800bf04:	4649      	mov	r1, r9
 800bf06:	f7f4 f9d7 	bl	80002b8 <__aeabi_dsub>
 800bf0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf0e:	4680      	mov	r8, r0
 800bf10:	4689      	mov	r9, r1
 800bf12:	f7f4 fe19 	bl	8000b48 <__aeabi_dcmpgt>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f040 8296 	bne.w	800c448 <_dtoa_r+0x990>
 800bf1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bf20:	4640      	mov	r0, r8
 800bf22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf26:	4649      	mov	r1, r9
 800bf28:	f7f4 fdf0 	bl	8000b0c <__aeabi_dcmplt>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	f040 8289 	bne.w	800c444 <_dtoa_r+0x98c>
 800bf32:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bf36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f2c0 814e 	blt.w	800c1da <_dtoa_r+0x722>
 800bf3e:	f1bb 0f0e 	cmp.w	fp, #14
 800bf42:	f300 814a 	bgt.w	800c1da <_dtoa_r+0x722>
 800bf46:	4b6b      	ldr	r3, [pc, #428]	; (800c0f4 <_dtoa_r+0x63c>)
 800bf48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bf4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f280 80dc 	bge.w	800c110 <_dtoa_r+0x658>
 800bf58:	9b04      	ldr	r3, [sp, #16]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f300 80d8 	bgt.w	800c110 <_dtoa_r+0x658>
 800bf60:	f040 826f 	bne.w	800c442 <_dtoa_r+0x98a>
 800bf64:	4b68      	ldr	r3, [pc, #416]	; (800c108 <_dtoa_r+0x650>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	4640      	mov	r0, r8
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	f7f4 fb5c 	bl	8000628 <__aeabi_dmul>
 800bf70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf74:	f7f4 fdde 	bl	8000b34 <__aeabi_dcmpge>
 800bf78:	9e04      	ldr	r6, [sp, #16]
 800bf7a:	4637      	mov	r7, r6
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	f040 8245 	bne.w	800c40c <_dtoa_r+0x954>
 800bf82:	9d00      	ldr	r5, [sp, #0]
 800bf84:	2331      	movs	r3, #49	; 0x31
 800bf86:	f805 3b01 	strb.w	r3, [r5], #1
 800bf8a:	f10b 0b01 	add.w	fp, fp, #1
 800bf8e:	e241      	b.n	800c414 <_dtoa_r+0x95c>
 800bf90:	07f2      	lsls	r2, r6, #31
 800bf92:	d505      	bpl.n	800bfa0 <_dtoa_r+0x4e8>
 800bf94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf98:	f7f4 fb46 	bl	8000628 <__aeabi_dmul>
 800bf9c:	3501      	adds	r5, #1
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	1076      	asrs	r6, r6, #1
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	e773      	b.n	800be8e <_dtoa_r+0x3d6>
 800bfa6:	2502      	movs	r5, #2
 800bfa8:	e775      	b.n	800be96 <_dtoa_r+0x3de>
 800bfaa:	9e04      	ldr	r6, [sp, #16]
 800bfac:	465f      	mov	r7, fp
 800bfae:	e792      	b.n	800bed6 <_dtoa_r+0x41e>
 800bfb0:	9900      	ldr	r1, [sp, #0]
 800bfb2:	4b50      	ldr	r3, [pc, #320]	; (800c0f4 <_dtoa_r+0x63c>)
 800bfb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfb8:	4431      	add	r1, r6
 800bfba:	9102      	str	r1, [sp, #8]
 800bfbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfbe:	eeb0 9a47 	vmov.f32	s18, s14
 800bfc2:	eef0 9a67 	vmov.f32	s19, s15
 800bfc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bfca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfce:	2900      	cmp	r1, #0
 800bfd0:	d044      	beq.n	800c05c <_dtoa_r+0x5a4>
 800bfd2:	494e      	ldr	r1, [pc, #312]	; (800c10c <_dtoa_r+0x654>)
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	f7f4 fc51 	bl	800087c <__aeabi_ddiv>
 800bfda:	ec53 2b19 	vmov	r2, r3, d9
 800bfde:	f7f4 f96b 	bl	80002b8 <__aeabi_dsub>
 800bfe2:	9d00      	ldr	r5, [sp, #0]
 800bfe4:	ec41 0b19 	vmov	d9, r0, r1
 800bfe8:	4649      	mov	r1, r9
 800bfea:	4640      	mov	r0, r8
 800bfec:	f7f4 fdcc 	bl	8000b88 <__aeabi_d2iz>
 800bff0:	4606      	mov	r6, r0
 800bff2:	f7f4 faaf 	bl	8000554 <__aeabi_i2d>
 800bff6:	4602      	mov	r2, r0
 800bff8:	460b      	mov	r3, r1
 800bffa:	4640      	mov	r0, r8
 800bffc:	4649      	mov	r1, r9
 800bffe:	f7f4 f95b 	bl	80002b8 <__aeabi_dsub>
 800c002:	3630      	adds	r6, #48	; 0x30
 800c004:	f805 6b01 	strb.w	r6, [r5], #1
 800c008:	ec53 2b19 	vmov	r2, r3, d9
 800c00c:	4680      	mov	r8, r0
 800c00e:	4689      	mov	r9, r1
 800c010:	f7f4 fd7c 	bl	8000b0c <__aeabi_dcmplt>
 800c014:	2800      	cmp	r0, #0
 800c016:	d164      	bne.n	800c0e2 <_dtoa_r+0x62a>
 800c018:	4642      	mov	r2, r8
 800c01a:	464b      	mov	r3, r9
 800c01c:	4937      	ldr	r1, [pc, #220]	; (800c0fc <_dtoa_r+0x644>)
 800c01e:	2000      	movs	r0, #0
 800c020:	f7f4 f94a 	bl	80002b8 <__aeabi_dsub>
 800c024:	ec53 2b19 	vmov	r2, r3, d9
 800c028:	f7f4 fd70 	bl	8000b0c <__aeabi_dcmplt>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	f040 80b6 	bne.w	800c19e <_dtoa_r+0x6e6>
 800c032:	9b02      	ldr	r3, [sp, #8]
 800c034:	429d      	cmp	r5, r3
 800c036:	f43f af7c 	beq.w	800bf32 <_dtoa_r+0x47a>
 800c03a:	4b31      	ldr	r3, [pc, #196]	; (800c100 <_dtoa_r+0x648>)
 800c03c:	ec51 0b19 	vmov	r0, r1, d9
 800c040:	2200      	movs	r2, #0
 800c042:	f7f4 faf1 	bl	8000628 <__aeabi_dmul>
 800c046:	4b2e      	ldr	r3, [pc, #184]	; (800c100 <_dtoa_r+0x648>)
 800c048:	ec41 0b19 	vmov	d9, r0, r1
 800c04c:	2200      	movs	r2, #0
 800c04e:	4640      	mov	r0, r8
 800c050:	4649      	mov	r1, r9
 800c052:	f7f4 fae9 	bl	8000628 <__aeabi_dmul>
 800c056:	4680      	mov	r8, r0
 800c058:	4689      	mov	r9, r1
 800c05a:	e7c5      	b.n	800bfe8 <_dtoa_r+0x530>
 800c05c:	ec51 0b17 	vmov	r0, r1, d7
 800c060:	f7f4 fae2 	bl	8000628 <__aeabi_dmul>
 800c064:	9b02      	ldr	r3, [sp, #8]
 800c066:	9d00      	ldr	r5, [sp, #0]
 800c068:	930f      	str	r3, [sp, #60]	; 0x3c
 800c06a:	ec41 0b19 	vmov	d9, r0, r1
 800c06e:	4649      	mov	r1, r9
 800c070:	4640      	mov	r0, r8
 800c072:	f7f4 fd89 	bl	8000b88 <__aeabi_d2iz>
 800c076:	4606      	mov	r6, r0
 800c078:	f7f4 fa6c 	bl	8000554 <__aeabi_i2d>
 800c07c:	3630      	adds	r6, #48	; 0x30
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	4640      	mov	r0, r8
 800c084:	4649      	mov	r1, r9
 800c086:	f7f4 f917 	bl	80002b8 <__aeabi_dsub>
 800c08a:	f805 6b01 	strb.w	r6, [r5], #1
 800c08e:	9b02      	ldr	r3, [sp, #8]
 800c090:	429d      	cmp	r5, r3
 800c092:	4680      	mov	r8, r0
 800c094:	4689      	mov	r9, r1
 800c096:	f04f 0200 	mov.w	r2, #0
 800c09a:	d124      	bne.n	800c0e6 <_dtoa_r+0x62e>
 800c09c:	4b1b      	ldr	r3, [pc, #108]	; (800c10c <_dtoa_r+0x654>)
 800c09e:	ec51 0b19 	vmov	r0, r1, d9
 800c0a2:	f7f4 f90b 	bl	80002bc <__adddf3>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	f7f4 fd4b 	bl	8000b48 <__aeabi_dcmpgt>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d173      	bne.n	800c19e <_dtoa_r+0x6e6>
 800c0b6:	ec53 2b19 	vmov	r2, r3, d9
 800c0ba:	4914      	ldr	r1, [pc, #80]	; (800c10c <_dtoa_r+0x654>)
 800c0bc:	2000      	movs	r0, #0
 800c0be:	f7f4 f8fb 	bl	80002b8 <__aeabi_dsub>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4640      	mov	r0, r8
 800c0c8:	4649      	mov	r1, r9
 800c0ca:	f7f4 fd1f 	bl	8000b0c <__aeabi_dcmplt>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	f43f af2f 	beq.w	800bf32 <_dtoa_r+0x47a>
 800c0d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c0d6:	1e6b      	subs	r3, r5, #1
 800c0d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c0de:	2b30      	cmp	r3, #48	; 0x30
 800c0e0:	d0f8      	beq.n	800c0d4 <_dtoa_r+0x61c>
 800c0e2:	46bb      	mov	fp, r7
 800c0e4:	e04a      	b.n	800c17c <_dtoa_r+0x6c4>
 800c0e6:	4b06      	ldr	r3, [pc, #24]	; (800c100 <_dtoa_r+0x648>)
 800c0e8:	f7f4 fa9e 	bl	8000628 <__aeabi_dmul>
 800c0ec:	4680      	mov	r8, r0
 800c0ee:	4689      	mov	r9, r1
 800c0f0:	e7bd      	b.n	800c06e <_dtoa_r+0x5b6>
 800c0f2:	bf00      	nop
 800c0f4:	0800ec80 	.word	0x0800ec80
 800c0f8:	0800ec58 	.word	0x0800ec58
 800c0fc:	3ff00000 	.word	0x3ff00000
 800c100:	40240000 	.word	0x40240000
 800c104:	401c0000 	.word	0x401c0000
 800c108:	40140000 	.word	0x40140000
 800c10c:	3fe00000 	.word	0x3fe00000
 800c110:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c114:	9d00      	ldr	r5, [sp, #0]
 800c116:	4642      	mov	r2, r8
 800c118:	464b      	mov	r3, r9
 800c11a:	4630      	mov	r0, r6
 800c11c:	4639      	mov	r1, r7
 800c11e:	f7f4 fbad 	bl	800087c <__aeabi_ddiv>
 800c122:	f7f4 fd31 	bl	8000b88 <__aeabi_d2iz>
 800c126:	9001      	str	r0, [sp, #4]
 800c128:	f7f4 fa14 	bl	8000554 <__aeabi_i2d>
 800c12c:	4642      	mov	r2, r8
 800c12e:	464b      	mov	r3, r9
 800c130:	f7f4 fa7a 	bl	8000628 <__aeabi_dmul>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	4630      	mov	r0, r6
 800c13a:	4639      	mov	r1, r7
 800c13c:	f7f4 f8bc 	bl	80002b8 <__aeabi_dsub>
 800c140:	9e01      	ldr	r6, [sp, #4]
 800c142:	9f04      	ldr	r7, [sp, #16]
 800c144:	3630      	adds	r6, #48	; 0x30
 800c146:	f805 6b01 	strb.w	r6, [r5], #1
 800c14a:	9e00      	ldr	r6, [sp, #0]
 800c14c:	1bae      	subs	r6, r5, r6
 800c14e:	42b7      	cmp	r7, r6
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	d134      	bne.n	800c1c0 <_dtoa_r+0x708>
 800c156:	f7f4 f8b1 	bl	80002bc <__adddf3>
 800c15a:	4642      	mov	r2, r8
 800c15c:	464b      	mov	r3, r9
 800c15e:	4606      	mov	r6, r0
 800c160:	460f      	mov	r7, r1
 800c162:	f7f4 fcf1 	bl	8000b48 <__aeabi_dcmpgt>
 800c166:	b9c8      	cbnz	r0, 800c19c <_dtoa_r+0x6e4>
 800c168:	4642      	mov	r2, r8
 800c16a:	464b      	mov	r3, r9
 800c16c:	4630      	mov	r0, r6
 800c16e:	4639      	mov	r1, r7
 800c170:	f7f4 fcc2 	bl	8000af8 <__aeabi_dcmpeq>
 800c174:	b110      	cbz	r0, 800c17c <_dtoa_r+0x6c4>
 800c176:	9b01      	ldr	r3, [sp, #4]
 800c178:	07db      	lsls	r3, r3, #31
 800c17a:	d40f      	bmi.n	800c19c <_dtoa_r+0x6e4>
 800c17c:	4651      	mov	r1, sl
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 fb18 	bl	800c7b4 <_Bfree>
 800c184:	2300      	movs	r3, #0
 800c186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c188:	702b      	strb	r3, [r5, #0]
 800c18a:	f10b 0301 	add.w	r3, fp, #1
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c192:	2b00      	cmp	r3, #0
 800c194:	f43f ace2 	beq.w	800bb5c <_dtoa_r+0xa4>
 800c198:	601d      	str	r5, [r3, #0]
 800c19a:	e4df      	b.n	800bb5c <_dtoa_r+0xa4>
 800c19c:	465f      	mov	r7, fp
 800c19e:	462b      	mov	r3, r5
 800c1a0:	461d      	mov	r5, r3
 800c1a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1a6:	2a39      	cmp	r2, #57	; 0x39
 800c1a8:	d106      	bne.n	800c1b8 <_dtoa_r+0x700>
 800c1aa:	9a00      	ldr	r2, [sp, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d1f7      	bne.n	800c1a0 <_dtoa_r+0x6e8>
 800c1b0:	9900      	ldr	r1, [sp, #0]
 800c1b2:	2230      	movs	r2, #48	; 0x30
 800c1b4:	3701      	adds	r7, #1
 800c1b6:	700a      	strb	r2, [r1, #0]
 800c1b8:	781a      	ldrb	r2, [r3, #0]
 800c1ba:	3201      	adds	r2, #1
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	e790      	b.n	800c0e2 <_dtoa_r+0x62a>
 800c1c0:	4ba3      	ldr	r3, [pc, #652]	; (800c450 <_dtoa_r+0x998>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f7f4 fa30 	bl	8000628 <__aeabi_dmul>
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	460f      	mov	r7, r1
 800c1d0:	f7f4 fc92 	bl	8000af8 <__aeabi_dcmpeq>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d09e      	beq.n	800c116 <_dtoa_r+0x65e>
 800c1d8:	e7d0      	b.n	800c17c <_dtoa_r+0x6c4>
 800c1da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1dc:	2a00      	cmp	r2, #0
 800c1de:	f000 80ca 	beq.w	800c376 <_dtoa_r+0x8be>
 800c1e2:	9a07      	ldr	r2, [sp, #28]
 800c1e4:	2a01      	cmp	r2, #1
 800c1e6:	f300 80ad 	bgt.w	800c344 <_dtoa_r+0x88c>
 800c1ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1ec:	2a00      	cmp	r2, #0
 800c1ee:	f000 80a5 	beq.w	800c33c <_dtoa_r+0x884>
 800c1f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c1f6:	9e08      	ldr	r6, [sp, #32]
 800c1f8:	9d05      	ldr	r5, [sp, #20]
 800c1fa:	9a05      	ldr	r2, [sp, #20]
 800c1fc:	441a      	add	r2, r3
 800c1fe:	9205      	str	r2, [sp, #20]
 800c200:	9a06      	ldr	r2, [sp, #24]
 800c202:	2101      	movs	r1, #1
 800c204:	441a      	add	r2, r3
 800c206:	4620      	mov	r0, r4
 800c208:	9206      	str	r2, [sp, #24]
 800c20a:	f000 fb89 	bl	800c920 <__i2b>
 800c20e:	4607      	mov	r7, r0
 800c210:	b165      	cbz	r5, 800c22c <_dtoa_r+0x774>
 800c212:	9b06      	ldr	r3, [sp, #24]
 800c214:	2b00      	cmp	r3, #0
 800c216:	dd09      	ble.n	800c22c <_dtoa_r+0x774>
 800c218:	42ab      	cmp	r3, r5
 800c21a:	9a05      	ldr	r2, [sp, #20]
 800c21c:	bfa8      	it	ge
 800c21e:	462b      	movge	r3, r5
 800c220:	1ad2      	subs	r2, r2, r3
 800c222:	9205      	str	r2, [sp, #20]
 800c224:	9a06      	ldr	r2, [sp, #24]
 800c226:	1aed      	subs	r5, r5, r3
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	9306      	str	r3, [sp, #24]
 800c22c:	9b08      	ldr	r3, [sp, #32]
 800c22e:	b1f3      	cbz	r3, 800c26e <_dtoa_r+0x7b6>
 800c230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 80a3 	beq.w	800c37e <_dtoa_r+0x8c6>
 800c238:	2e00      	cmp	r6, #0
 800c23a:	dd10      	ble.n	800c25e <_dtoa_r+0x7a6>
 800c23c:	4639      	mov	r1, r7
 800c23e:	4632      	mov	r2, r6
 800c240:	4620      	mov	r0, r4
 800c242:	f000 fc2d 	bl	800caa0 <__pow5mult>
 800c246:	4652      	mov	r2, sl
 800c248:	4601      	mov	r1, r0
 800c24a:	4607      	mov	r7, r0
 800c24c:	4620      	mov	r0, r4
 800c24e:	f000 fb7d 	bl	800c94c <__multiply>
 800c252:	4651      	mov	r1, sl
 800c254:	4680      	mov	r8, r0
 800c256:	4620      	mov	r0, r4
 800c258:	f000 faac 	bl	800c7b4 <_Bfree>
 800c25c:	46c2      	mov	sl, r8
 800c25e:	9b08      	ldr	r3, [sp, #32]
 800c260:	1b9a      	subs	r2, r3, r6
 800c262:	d004      	beq.n	800c26e <_dtoa_r+0x7b6>
 800c264:	4651      	mov	r1, sl
 800c266:	4620      	mov	r0, r4
 800c268:	f000 fc1a 	bl	800caa0 <__pow5mult>
 800c26c:	4682      	mov	sl, r0
 800c26e:	2101      	movs	r1, #1
 800c270:	4620      	mov	r0, r4
 800c272:	f000 fb55 	bl	800c920 <__i2b>
 800c276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c278:	2b00      	cmp	r3, #0
 800c27a:	4606      	mov	r6, r0
 800c27c:	f340 8081 	ble.w	800c382 <_dtoa_r+0x8ca>
 800c280:	461a      	mov	r2, r3
 800c282:	4601      	mov	r1, r0
 800c284:	4620      	mov	r0, r4
 800c286:	f000 fc0b 	bl	800caa0 <__pow5mult>
 800c28a:	9b07      	ldr	r3, [sp, #28]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	4606      	mov	r6, r0
 800c290:	dd7a      	ble.n	800c388 <_dtoa_r+0x8d0>
 800c292:	f04f 0800 	mov.w	r8, #0
 800c296:	6933      	ldr	r3, [r6, #16]
 800c298:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c29c:	6918      	ldr	r0, [r3, #16]
 800c29e:	f000 faf1 	bl	800c884 <__hi0bits>
 800c2a2:	f1c0 0020 	rsb	r0, r0, #32
 800c2a6:	9b06      	ldr	r3, [sp, #24]
 800c2a8:	4418      	add	r0, r3
 800c2aa:	f010 001f 	ands.w	r0, r0, #31
 800c2ae:	f000 8094 	beq.w	800c3da <_dtoa_r+0x922>
 800c2b2:	f1c0 0320 	rsb	r3, r0, #32
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	f340 8085 	ble.w	800c3c6 <_dtoa_r+0x90e>
 800c2bc:	9b05      	ldr	r3, [sp, #20]
 800c2be:	f1c0 001c 	rsb	r0, r0, #28
 800c2c2:	4403      	add	r3, r0
 800c2c4:	9305      	str	r3, [sp, #20]
 800c2c6:	9b06      	ldr	r3, [sp, #24]
 800c2c8:	4403      	add	r3, r0
 800c2ca:	4405      	add	r5, r0
 800c2cc:	9306      	str	r3, [sp, #24]
 800c2ce:	9b05      	ldr	r3, [sp, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	dd05      	ble.n	800c2e0 <_dtoa_r+0x828>
 800c2d4:	4651      	mov	r1, sl
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 fc3b 	bl	800cb54 <__lshift>
 800c2de:	4682      	mov	sl, r0
 800c2e0:	9b06      	ldr	r3, [sp, #24]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	dd05      	ble.n	800c2f2 <_dtoa_r+0x83a>
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f000 fc32 	bl	800cb54 <__lshift>
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d072      	beq.n	800c3de <_dtoa_r+0x926>
 800c2f8:	4631      	mov	r1, r6
 800c2fa:	4650      	mov	r0, sl
 800c2fc:	f000 fc96 	bl	800cc2c <__mcmp>
 800c300:	2800      	cmp	r0, #0
 800c302:	da6c      	bge.n	800c3de <_dtoa_r+0x926>
 800c304:	2300      	movs	r3, #0
 800c306:	4651      	mov	r1, sl
 800c308:	220a      	movs	r2, #10
 800c30a:	4620      	mov	r0, r4
 800c30c:	f000 fa74 	bl	800c7f8 <__multadd>
 800c310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c312:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c316:	4682      	mov	sl, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 81b0 	beq.w	800c67e <_dtoa_r+0xbc6>
 800c31e:	2300      	movs	r3, #0
 800c320:	4639      	mov	r1, r7
 800c322:	220a      	movs	r2, #10
 800c324:	4620      	mov	r0, r4
 800c326:	f000 fa67 	bl	800c7f8 <__multadd>
 800c32a:	9b01      	ldr	r3, [sp, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	4607      	mov	r7, r0
 800c330:	f300 8096 	bgt.w	800c460 <_dtoa_r+0x9a8>
 800c334:	9b07      	ldr	r3, [sp, #28]
 800c336:	2b02      	cmp	r3, #2
 800c338:	dc59      	bgt.n	800c3ee <_dtoa_r+0x936>
 800c33a:	e091      	b.n	800c460 <_dtoa_r+0x9a8>
 800c33c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c33e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c342:	e758      	b.n	800c1f6 <_dtoa_r+0x73e>
 800c344:	9b04      	ldr	r3, [sp, #16]
 800c346:	1e5e      	subs	r6, r3, #1
 800c348:	9b08      	ldr	r3, [sp, #32]
 800c34a:	42b3      	cmp	r3, r6
 800c34c:	bfbf      	itttt	lt
 800c34e:	9b08      	ldrlt	r3, [sp, #32]
 800c350:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c352:	9608      	strlt	r6, [sp, #32]
 800c354:	1af3      	sublt	r3, r6, r3
 800c356:	bfb4      	ite	lt
 800c358:	18d2      	addlt	r2, r2, r3
 800c35a:	1b9e      	subge	r6, r3, r6
 800c35c:	9b04      	ldr	r3, [sp, #16]
 800c35e:	bfbc      	itt	lt
 800c360:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c362:	2600      	movlt	r6, #0
 800c364:	2b00      	cmp	r3, #0
 800c366:	bfb7      	itett	lt
 800c368:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c36c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c370:	1a9d      	sublt	r5, r3, r2
 800c372:	2300      	movlt	r3, #0
 800c374:	e741      	b.n	800c1fa <_dtoa_r+0x742>
 800c376:	9e08      	ldr	r6, [sp, #32]
 800c378:	9d05      	ldr	r5, [sp, #20]
 800c37a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c37c:	e748      	b.n	800c210 <_dtoa_r+0x758>
 800c37e:	9a08      	ldr	r2, [sp, #32]
 800c380:	e770      	b.n	800c264 <_dtoa_r+0x7ac>
 800c382:	9b07      	ldr	r3, [sp, #28]
 800c384:	2b01      	cmp	r3, #1
 800c386:	dc19      	bgt.n	800c3bc <_dtoa_r+0x904>
 800c388:	9b02      	ldr	r3, [sp, #8]
 800c38a:	b9bb      	cbnz	r3, 800c3bc <_dtoa_r+0x904>
 800c38c:	9b03      	ldr	r3, [sp, #12]
 800c38e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c392:	b99b      	cbnz	r3, 800c3bc <_dtoa_r+0x904>
 800c394:	9b03      	ldr	r3, [sp, #12]
 800c396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c39a:	0d1b      	lsrs	r3, r3, #20
 800c39c:	051b      	lsls	r3, r3, #20
 800c39e:	b183      	cbz	r3, 800c3c2 <_dtoa_r+0x90a>
 800c3a0:	9b05      	ldr	r3, [sp, #20]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	9305      	str	r3, [sp, #20]
 800c3a6:	9b06      	ldr	r3, [sp, #24]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	9306      	str	r3, [sp, #24]
 800c3ac:	f04f 0801 	mov.w	r8, #1
 800c3b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f47f af6f 	bne.w	800c296 <_dtoa_r+0x7de>
 800c3b8:	2001      	movs	r0, #1
 800c3ba:	e774      	b.n	800c2a6 <_dtoa_r+0x7ee>
 800c3bc:	f04f 0800 	mov.w	r8, #0
 800c3c0:	e7f6      	b.n	800c3b0 <_dtoa_r+0x8f8>
 800c3c2:	4698      	mov	r8, r3
 800c3c4:	e7f4      	b.n	800c3b0 <_dtoa_r+0x8f8>
 800c3c6:	d082      	beq.n	800c2ce <_dtoa_r+0x816>
 800c3c8:	9a05      	ldr	r2, [sp, #20]
 800c3ca:	331c      	adds	r3, #28
 800c3cc:	441a      	add	r2, r3
 800c3ce:	9205      	str	r2, [sp, #20]
 800c3d0:	9a06      	ldr	r2, [sp, #24]
 800c3d2:	441a      	add	r2, r3
 800c3d4:	441d      	add	r5, r3
 800c3d6:	9206      	str	r2, [sp, #24]
 800c3d8:	e779      	b.n	800c2ce <_dtoa_r+0x816>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	e7f4      	b.n	800c3c8 <_dtoa_r+0x910>
 800c3de:	9b04      	ldr	r3, [sp, #16]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	dc37      	bgt.n	800c454 <_dtoa_r+0x99c>
 800c3e4:	9b07      	ldr	r3, [sp, #28]
 800c3e6:	2b02      	cmp	r3, #2
 800c3e8:	dd34      	ble.n	800c454 <_dtoa_r+0x99c>
 800c3ea:	9b04      	ldr	r3, [sp, #16]
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	9b01      	ldr	r3, [sp, #4]
 800c3f0:	b963      	cbnz	r3, 800c40c <_dtoa_r+0x954>
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	2205      	movs	r2, #5
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 f9fe 	bl	800c7f8 <__multadd>
 800c3fc:	4601      	mov	r1, r0
 800c3fe:	4606      	mov	r6, r0
 800c400:	4650      	mov	r0, sl
 800c402:	f000 fc13 	bl	800cc2c <__mcmp>
 800c406:	2800      	cmp	r0, #0
 800c408:	f73f adbb 	bgt.w	800bf82 <_dtoa_r+0x4ca>
 800c40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c40e:	9d00      	ldr	r5, [sp, #0]
 800c410:	ea6f 0b03 	mvn.w	fp, r3
 800c414:	f04f 0800 	mov.w	r8, #0
 800c418:	4631      	mov	r1, r6
 800c41a:	4620      	mov	r0, r4
 800c41c:	f000 f9ca 	bl	800c7b4 <_Bfree>
 800c420:	2f00      	cmp	r7, #0
 800c422:	f43f aeab 	beq.w	800c17c <_dtoa_r+0x6c4>
 800c426:	f1b8 0f00 	cmp.w	r8, #0
 800c42a:	d005      	beq.n	800c438 <_dtoa_r+0x980>
 800c42c:	45b8      	cmp	r8, r7
 800c42e:	d003      	beq.n	800c438 <_dtoa_r+0x980>
 800c430:	4641      	mov	r1, r8
 800c432:	4620      	mov	r0, r4
 800c434:	f000 f9be 	bl	800c7b4 <_Bfree>
 800c438:	4639      	mov	r1, r7
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 f9ba 	bl	800c7b4 <_Bfree>
 800c440:	e69c      	b.n	800c17c <_dtoa_r+0x6c4>
 800c442:	2600      	movs	r6, #0
 800c444:	4637      	mov	r7, r6
 800c446:	e7e1      	b.n	800c40c <_dtoa_r+0x954>
 800c448:	46bb      	mov	fp, r7
 800c44a:	4637      	mov	r7, r6
 800c44c:	e599      	b.n	800bf82 <_dtoa_r+0x4ca>
 800c44e:	bf00      	nop
 800c450:	40240000 	.word	0x40240000
 800c454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c456:	2b00      	cmp	r3, #0
 800c458:	f000 80c8 	beq.w	800c5ec <_dtoa_r+0xb34>
 800c45c:	9b04      	ldr	r3, [sp, #16]
 800c45e:	9301      	str	r3, [sp, #4]
 800c460:	2d00      	cmp	r5, #0
 800c462:	dd05      	ble.n	800c470 <_dtoa_r+0x9b8>
 800c464:	4639      	mov	r1, r7
 800c466:	462a      	mov	r2, r5
 800c468:	4620      	mov	r0, r4
 800c46a:	f000 fb73 	bl	800cb54 <__lshift>
 800c46e:	4607      	mov	r7, r0
 800c470:	f1b8 0f00 	cmp.w	r8, #0
 800c474:	d05b      	beq.n	800c52e <_dtoa_r+0xa76>
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 f95b 	bl	800c734 <_Balloc>
 800c47e:	4605      	mov	r5, r0
 800c480:	b928      	cbnz	r0, 800c48e <_dtoa_r+0x9d6>
 800c482:	4b83      	ldr	r3, [pc, #524]	; (800c690 <_dtoa_r+0xbd8>)
 800c484:	4602      	mov	r2, r0
 800c486:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c48a:	f7ff bb2e 	b.w	800baea <_dtoa_r+0x32>
 800c48e:	693a      	ldr	r2, [r7, #16]
 800c490:	3202      	adds	r2, #2
 800c492:	0092      	lsls	r2, r2, #2
 800c494:	f107 010c 	add.w	r1, r7, #12
 800c498:	300c      	adds	r0, #12
 800c49a:	f7ff fa74 	bl	800b986 <memcpy>
 800c49e:	2201      	movs	r2, #1
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 fb56 	bl	800cb54 <__lshift>
 800c4a8:	9b00      	ldr	r3, [sp, #0]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	9304      	str	r3, [sp, #16]
 800c4ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	9308      	str	r3, [sp, #32]
 800c4b6:	9b02      	ldr	r3, [sp, #8]
 800c4b8:	f003 0301 	and.w	r3, r3, #1
 800c4bc:	46b8      	mov	r8, r7
 800c4be:	9306      	str	r3, [sp, #24]
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	9b04      	ldr	r3, [sp, #16]
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	4650      	mov	r0, sl
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	f7ff fa69 	bl	800b9a2 <quorem>
 800c4d0:	4641      	mov	r1, r8
 800c4d2:	9002      	str	r0, [sp, #8]
 800c4d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c4d8:	4650      	mov	r0, sl
 800c4da:	f000 fba7 	bl	800cc2c <__mcmp>
 800c4de:	463a      	mov	r2, r7
 800c4e0:	9005      	str	r0, [sp, #20]
 800c4e2:	4631      	mov	r1, r6
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f000 fbbd 	bl	800cc64 <__mdiff>
 800c4ea:	68c2      	ldr	r2, [r0, #12]
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	bb02      	cbnz	r2, 800c532 <_dtoa_r+0xa7a>
 800c4f0:	4601      	mov	r1, r0
 800c4f2:	4650      	mov	r0, sl
 800c4f4:	f000 fb9a 	bl	800cc2c <__mcmp>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	4629      	mov	r1, r5
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	9209      	str	r2, [sp, #36]	; 0x24
 800c500:	f000 f958 	bl	800c7b4 <_Bfree>
 800c504:	9b07      	ldr	r3, [sp, #28]
 800c506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c508:	9d04      	ldr	r5, [sp, #16]
 800c50a:	ea43 0102 	orr.w	r1, r3, r2
 800c50e:	9b06      	ldr	r3, [sp, #24]
 800c510:	4319      	orrs	r1, r3
 800c512:	d110      	bne.n	800c536 <_dtoa_r+0xa7e>
 800c514:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c518:	d029      	beq.n	800c56e <_dtoa_r+0xab6>
 800c51a:	9b05      	ldr	r3, [sp, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	dd02      	ble.n	800c526 <_dtoa_r+0xa6e>
 800c520:	9b02      	ldr	r3, [sp, #8]
 800c522:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c526:	9b01      	ldr	r3, [sp, #4]
 800c528:	f883 9000 	strb.w	r9, [r3]
 800c52c:	e774      	b.n	800c418 <_dtoa_r+0x960>
 800c52e:	4638      	mov	r0, r7
 800c530:	e7ba      	b.n	800c4a8 <_dtoa_r+0x9f0>
 800c532:	2201      	movs	r2, #1
 800c534:	e7e1      	b.n	800c4fa <_dtoa_r+0xa42>
 800c536:	9b05      	ldr	r3, [sp, #20]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	db04      	blt.n	800c546 <_dtoa_r+0xa8e>
 800c53c:	9907      	ldr	r1, [sp, #28]
 800c53e:	430b      	orrs	r3, r1
 800c540:	9906      	ldr	r1, [sp, #24]
 800c542:	430b      	orrs	r3, r1
 800c544:	d120      	bne.n	800c588 <_dtoa_r+0xad0>
 800c546:	2a00      	cmp	r2, #0
 800c548:	dded      	ble.n	800c526 <_dtoa_r+0xa6e>
 800c54a:	4651      	mov	r1, sl
 800c54c:	2201      	movs	r2, #1
 800c54e:	4620      	mov	r0, r4
 800c550:	f000 fb00 	bl	800cb54 <__lshift>
 800c554:	4631      	mov	r1, r6
 800c556:	4682      	mov	sl, r0
 800c558:	f000 fb68 	bl	800cc2c <__mcmp>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	dc03      	bgt.n	800c568 <_dtoa_r+0xab0>
 800c560:	d1e1      	bne.n	800c526 <_dtoa_r+0xa6e>
 800c562:	f019 0f01 	tst.w	r9, #1
 800c566:	d0de      	beq.n	800c526 <_dtoa_r+0xa6e>
 800c568:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c56c:	d1d8      	bne.n	800c520 <_dtoa_r+0xa68>
 800c56e:	9a01      	ldr	r2, [sp, #4]
 800c570:	2339      	movs	r3, #57	; 0x39
 800c572:	7013      	strb	r3, [r2, #0]
 800c574:	462b      	mov	r3, r5
 800c576:	461d      	mov	r5, r3
 800c578:	3b01      	subs	r3, #1
 800c57a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c57e:	2a39      	cmp	r2, #57	; 0x39
 800c580:	d06c      	beq.n	800c65c <_dtoa_r+0xba4>
 800c582:	3201      	adds	r2, #1
 800c584:	701a      	strb	r2, [r3, #0]
 800c586:	e747      	b.n	800c418 <_dtoa_r+0x960>
 800c588:	2a00      	cmp	r2, #0
 800c58a:	dd07      	ble.n	800c59c <_dtoa_r+0xae4>
 800c58c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c590:	d0ed      	beq.n	800c56e <_dtoa_r+0xab6>
 800c592:	9a01      	ldr	r2, [sp, #4]
 800c594:	f109 0301 	add.w	r3, r9, #1
 800c598:	7013      	strb	r3, [r2, #0]
 800c59a:	e73d      	b.n	800c418 <_dtoa_r+0x960>
 800c59c:	9b04      	ldr	r3, [sp, #16]
 800c59e:	9a08      	ldr	r2, [sp, #32]
 800c5a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d043      	beq.n	800c630 <_dtoa_r+0xb78>
 800c5a8:	4651      	mov	r1, sl
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	220a      	movs	r2, #10
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f000 f922 	bl	800c7f8 <__multadd>
 800c5b4:	45b8      	cmp	r8, r7
 800c5b6:	4682      	mov	sl, r0
 800c5b8:	f04f 0300 	mov.w	r3, #0
 800c5bc:	f04f 020a 	mov.w	r2, #10
 800c5c0:	4641      	mov	r1, r8
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	d107      	bne.n	800c5d6 <_dtoa_r+0xb1e>
 800c5c6:	f000 f917 	bl	800c7f8 <__multadd>
 800c5ca:	4680      	mov	r8, r0
 800c5cc:	4607      	mov	r7, r0
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	9304      	str	r3, [sp, #16]
 800c5d4:	e775      	b.n	800c4c2 <_dtoa_r+0xa0a>
 800c5d6:	f000 f90f 	bl	800c7f8 <__multadd>
 800c5da:	4639      	mov	r1, r7
 800c5dc:	4680      	mov	r8, r0
 800c5de:	2300      	movs	r3, #0
 800c5e0:	220a      	movs	r2, #10
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 f908 	bl	800c7f8 <__multadd>
 800c5e8:	4607      	mov	r7, r0
 800c5ea:	e7f0      	b.n	800c5ce <_dtoa_r+0xb16>
 800c5ec:	9b04      	ldr	r3, [sp, #16]
 800c5ee:	9301      	str	r3, [sp, #4]
 800c5f0:	9d00      	ldr	r5, [sp, #0]
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4650      	mov	r0, sl
 800c5f6:	f7ff f9d4 	bl	800b9a2 <quorem>
 800c5fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c5fe:	9b00      	ldr	r3, [sp, #0]
 800c600:	f805 9b01 	strb.w	r9, [r5], #1
 800c604:	1aea      	subs	r2, r5, r3
 800c606:	9b01      	ldr	r3, [sp, #4]
 800c608:	4293      	cmp	r3, r2
 800c60a:	dd07      	ble.n	800c61c <_dtoa_r+0xb64>
 800c60c:	4651      	mov	r1, sl
 800c60e:	2300      	movs	r3, #0
 800c610:	220a      	movs	r2, #10
 800c612:	4620      	mov	r0, r4
 800c614:	f000 f8f0 	bl	800c7f8 <__multadd>
 800c618:	4682      	mov	sl, r0
 800c61a:	e7ea      	b.n	800c5f2 <_dtoa_r+0xb3a>
 800c61c:	9b01      	ldr	r3, [sp, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bfc8      	it	gt
 800c622:	461d      	movgt	r5, r3
 800c624:	9b00      	ldr	r3, [sp, #0]
 800c626:	bfd8      	it	le
 800c628:	2501      	movle	r5, #1
 800c62a:	441d      	add	r5, r3
 800c62c:	f04f 0800 	mov.w	r8, #0
 800c630:	4651      	mov	r1, sl
 800c632:	2201      	movs	r2, #1
 800c634:	4620      	mov	r0, r4
 800c636:	f000 fa8d 	bl	800cb54 <__lshift>
 800c63a:	4631      	mov	r1, r6
 800c63c:	4682      	mov	sl, r0
 800c63e:	f000 faf5 	bl	800cc2c <__mcmp>
 800c642:	2800      	cmp	r0, #0
 800c644:	dc96      	bgt.n	800c574 <_dtoa_r+0xabc>
 800c646:	d102      	bne.n	800c64e <_dtoa_r+0xb96>
 800c648:	f019 0f01 	tst.w	r9, #1
 800c64c:	d192      	bne.n	800c574 <_dtoa_r+0xabc>
 800c64e:	462b      	mov	r3, r5
 800c650:	461d      	mov	r5, r3
 800c652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c656:	2a30      	cmp	r2, #48	; 0x30
 800c658:	d0fa      	beq.n	800c650 <_dtoa_r+0xb98>
 800c65a:	e6dd      	b.n	800c418 <_dtoa_r+0x960>
 800c65c:	9a00      	ldr	r2, [sp, #0]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d189      	bne.n	800c576 <_dtoa_r+0xabe>
 800c662:	f10b 0b01 	add.w	fp, fp, #1
 800c666:	2331      	movs	r3, #49	; 0x31
 800c668:	e796      	b.n	800c598 <_dtoa_r+0xae0>
 800c66a:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <_dtoa_r+0xbdc>)
 800c66c:	f7ff ba99 	b.w	800bba2 <_dtoa_r+0xea>
 800c670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c672:	2b00      	cmp	r3, #0
 800c674:	f47f aa6d 	bne.w	800bb52 <_dtoa_r+0x9a>
 800c678:	4b07      	ldr	r3, [pc, #28]	; (800c698 <_dtoa_r+0xbe0>)
 800c67a:	f7ff ba92 	b.w	800bba2 <_dtoa_r+0xea>
 800c67e:	9b01      	ldr	r3, [sp, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	dcb5      	bgt.n	800c5f0 <_dtoa_r+0xb38>
 800c684:	9b07      	ldr	r3, [sp, #28]
 800c686:	2b02      	cmp	r3, #2
 800c688:	f73f aeb1 	bgt.w	800c3ee <_dtoa_r+0x936>
 800c68c:	e7b0      	b.n	800c5f0 <_dtoa_r+0xb38>
 800c68e:	bf00      	nop
 800c690:	0800ebe8 	.word	0x0800ebe8
 800c694:	0800eb48 	.word	0x0800eb48
 800c698:	0800eb6c 	.word	0x0800eb6c

0800c69c <_free_r>:
 800c69c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c69e:	2900      	cmp	r1, #0
 800c6a0:	d044      	beq.n	800c72c <_free_r+0x90>
 800c6a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a6:	9001      	str	r0, [sp, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c6ae:	bfb8      	it	lt
 800c6b0:	18e4      	addlt	r4, r4, r3
 800c6b2:	f7fe f9b5 	bl	800aa20 <__malloc_lock>
 800c6b6:	4a1e      	ldr	r2, [pc, #120]	; (800c730 <_free_r+0x94>)
 800c6b8:	9801      	ldr	r0, [sp, #4]
 800c6ba:	6813      	ldr	r3, [r2, #0]
 800c6bc:	b933      	cbnz	r3, 800c6cc <_free_r+0x30>
 800c6be:	6063      	str	r3, [r4, #4]
 800c6c0:	6014      	str	r4, [r2, #0]
 800c6c2:	b003      	add	sp, #12
 800c6c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6c8:	f7fe b9b0 	b.w	800aa2c <__malloc_unlock>
 800c6cc:	42a3      	cmp	r3, r4
 800c6ce:	d908      	bls.n	800c6e2 <_free_r+0x46>
 800c6d0:	6825      	ldr	r5, [r4, #0]
 800c6d2:	1961      	adds	r1, r4, r5
 800c6d4:	428b      	cmp	r3, r1
 800c6d6:	bf01      	itttt	eq
 800c6d8:	6819      	ldreq	r1, [r3, #0]
 800c6da:	685b      	ldreq	r3, [r3, #4]
 800c6dc:	1949      	addeq	r1, r1, r5
 800c6de:	6021      	streq	r1, [r4, #0]
 800c6e0:	e7ed      	b.n	800c6be <_free_r+0x22>
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	b10b      	cbz	r3, 800c6ec <_free_r+0x50>
 800c6e8:	42a3      	cmp	r3, r4
 800c6ea:	d9fa      	bls.n	800c6e2 <_free_r+0x46>
 800c6ec:	6811      	ldr	r1, [r2, #0]
 800c6ee:	1855      	adds	r5, r2, r1
 800c6f0:	42a5      	cmp	r5, r4
 800c6f2:	d10b      	bne.n	800c70c <_free_r+0x70>
 800c6f4:	6824      	ldr	r4, [r4, #0]
 800c6f6:	4421      	add	r1, r4
 800c6f8:	1854      	adds	r4, r2, r1
 800c6fa:	42a3      	cmp	r3, r4
 800c6fc:	6011      	str	r1, [r2, #0]
 800c6fe:	d1e0      	bne.n	800c6c2 <_free_r+0x26>
 800c700:	681c      	ldr	r4, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	6053      	str	r3, [r2, #4]
 800c706:	440c      	add	r4, r1
 800c708:	6014      	str	r4, [r2, #0]
 800c70a:	e7da      	b.n	800c6c2 <_free_r+0x26>
 800c70c:	d902      	bls.n	800c714 <_free_r+0x78>
 800c70e:	230c      	movs	r3, #12
 800c710:	6003      	str	r3, [r0, #0]
 800c712:	e7d6      	b.n	800c6c2 <_free_r+0x26>
 800c714:	6825      	ldr	r5, [r4, #0]
 800c716:	1961      	adds	r1, r4, r5
 800c718:	428b      	cmp	r3, r1
 800c71a:	bf04      	itt	eq
 800c71c:	6819      	ldreq	r1, [r3, #0]
 800c71e:	685b      	ldreq	r3, [r3, #4]
 800c720:	6063      	str	r3, [r4, #4]
 800c722:	bf04      	itt	eq
 800c724:	1949      	addeq	r1, r1, r5
 800c726:	6021      	streq	r1, [r4, #0]
 800c728:	6054      	str	r4, [r2, #4]
 800c72a:	e7ca      	b.n	800c6c2 <_free_r+0x26>
 800c72c:	b003      	add	sp, #12
 800c72e:	bd30      	pop	{r4, r5, pc}
 800c730:	200066d8 	.word	0x200066d8

0800c734 <_Balloc>:
 800c734:	b570      	push	{r4, r5, r6, lr}
 800c736:	69c6      	ldr	r6, [r0, #28]
 800c738:	4604      	mov	r4, r0
 800c73a:	460d      	mov	r5, r1
 800c73c:	b976      	cbnz	r6, 800c75c <_Balloc+0x28>
 800c73e:	2010      	movs	r0, #16
 800c740:	f7fe f8c6 	bl	800a8d0 <malloc>
 800c744:	4602      	mov	r2, r0
 800c746:	61e0      	str	r0, [r4, #28]
 800c748:	b920      	cbnz	r0, 800c754 <_Balloc+0x20>
 800c74a:	4b18      	ldr	r3, [pc, #96]	; (800c7ac <_Balloc+0x78>)
 800c74c:	4818      	ldr	r0, [pc, #96]	; (800c7b0 <_Balloc+0x7c>)
 800c74e:	216b      	movs	r1, #107	; 0x6b
 800c750:	f000 fdf6 	bl	800d340 <__assert_func>
 800c754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c758:	6006      	str	r6, [r0, #0]
 800c75a:	60c6      	str	r6, [r0, #12]
 800c75c:	69e6      	ldr	r6, [r4, #28]
 800c75e:	68f3      	ldr	r3, [r6, #12]
 800c760:	b183      	cbz	r3, 800c784 <_Balloc+0x50>
 800c762:	69e3      	ldr	r3, [r4, #28]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c76a:	b9b8      	cbnz	r0, 800c79c <_Balloc+0x68>
 800c76c:	2101      	movs	r1, #1
 800c76e:	fa01 f605 	lsl.w	r6, r1, r5
 800c772:	1d72      	adds	r2, r6, #5
 800c774:	0092      	lsls	r2, r2, #2
 800c776:	4620      	mov	r0, r4
 800c778:	f000 fe00 	bl	800d37c <_calloc_r>
 800c77c:	b160      	cbz	r0, 800c798 <_Balloc+0x64>
 800c77e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c782:	e00e      	b.n	800c7a2 <_Balloc+0x6e>
 800c784:	2221      	movs	r2, #33	; 0x21
 800c786:	2104      	movs	r1, #4
 800c788:	4620      	mov	r0, r4
 800c78a:	f000 fdf7 	bl	800d37c <_calloc_r>
 800c78e:	69e3      	ldr	r3, [r4, #28]
 800c790:	60f0      	str	r0, [r6, #12]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1e4      	bne.n	800c762 <_Balloc+0x2e>
 800c798:	2000      	movs	r0, #0
 800c79a:	bd70      	pop	{r4, r5, r6, pc}
 800c79c:	6802      	ldr	r2, [r0, #0]
 800c79e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7a8:	e7f7      	b.n	800c79a <_Balloc+0x66>
 800c7aa:	bf00      	nop
 800c7ac:	0800eb79 	.word	0x0800eb79
 800c7b0:	0800ebf9 	.word	0x0800ebf9

0800c7b4 <_Bfree>:
 800c7b4:	b570      	push	{r4, r5, r6, lr}
 800c7b6:	69c6      	ldr	r6, [r0, #28]
 800c7b8:	4605      	mov	r5, r0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	b976      	cbnz	r6, 800c7dc <_Bfree+0x28>
 800c7be:	2010      	movs	r0, #16
 800c7c0:	f7fe f886 	bl	800a8d0 <malloc>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	61e8      	str	r0, [r5, #28]
 800c7c8:	b920      	cbnz	r0, 800c7d4 <_Bfree+0x20>
 800c7ca:	4b09      	ldr	r3, [pc, #36]	; (800c7f0 <_Bfree+0x3c>)
 800c7cc:	4809      	ldr	r0, [pc, #36]	; (800c7f4 <_Bfree+0x40>)
 800c7ce:	218f      	movs	r1, #143	; 0x8f
 800c7d0:	f000 fdb6 	bl	800d340 <__assert_func>
 800c7d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7d8:	6006      	str	r6, [r0, #0]
 800c7da:	60c6      	str	r6, [r0, #12]
 800c7dc:	b13c      	cbz	r4, 800c7ee <_Bfree+0x3a>
 800c7de:	69eb      	ldr	r3, [r5, #28]
 800c7e0:	6862      	ldr	r2, [r4, #4]
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7e8:	6021      	str	r1, [r4, #0]
 800c7ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7ee:	bd70      	pop	{r4, r5, r6, pc}
 800c7f0:	0800eb79 	.word	0x0800eb79
 800c7f4:	0800ebf9 	.word	0x0800ebf9

0800c7f8 <__multadd>:
 800c7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7fc:	690d      	ldr	r5, [r1, #16]
 800c7fe:	4607      	mov	r7, r0
 800c800:	460c      	mov	r4, r1
 800c802:	461e      	mov	r6, r3
 800c804:	f101 0c14 	add.w	ip, r1, #20
 800c808:	2000      	movs	r0, #0
 800c80a:	f8dc 3000 	ldr.w	r3, [ip]
 800c80e:	b299      	uxth	r1, r3
 800c810:	fb02 6101 	mla	r1, r2, r1, r6
 800c814:	0c1e      	lsrs	r6, r3, #16
 800c816:	0c0b      	lsrs	r3, r1, #16
 800c818:	fb02 3306 	mla	r3, r2, r6, r3
 800c81c:	b289      	uxth	r1, r1
 800c81e:	3001      	adds	r0, #1
 800c820:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c824:	4285      	cmp	r5, r0
 800c826:	f84c 1b04 	str.w	r1, [ip], #4
 800c82a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c82e:	dcec      	bgt.n	800c80a <__multadd+0x12>
 800c830:	b30e      	cbz	r6, 800c876 <__multadd+0x7e>
 800c832:	68a3      	ldr	r3, [r4, #8]
 800c834:	42ab      	cmp	r3, r5
 800c836:	dc19      	bgt.n	800c86c <__multadd+0x74>
 800c838:	6861      	ldr	r1, [r4, #4]
 800c83a:	4638      	mov	r0, r7
 800c83c:	3101      	adds	r1, #1
 800c83e:	f7ff ff79 	bl	800c734 <_Balloc>
 800c842:	4680      	mov	r8, r0
 800c844:	b928      	cbnz	r0, 800c852 <__multadd+0x5a>
 800c846:	4602      	mov	r2, r0
 800c848:	4b0c      	ldr	r3, [pc, #48]	; (800c87c <__multadd+0x84>)
 800c84a:	480d      	ldr	r0, [pc, #52]	; (800c880 <__multadd+0x88>)
 800c84c:	21ba      	movs	r1, #186	; 0xba
 800c84e:	f000 fd77 	bl	800d340 <__assert_func>
 800c852:	6922      	ldr	r2, [r4, #16]
 800c854:	3202      	adds	r2, #2
 800c856:	f104 010c 	add.w	r1, r4, #12
 800c85a:	0092      	lsls	r2, r2, #2
 800c85c:	300c      	adds	r0, #12
 800c85e:	f7ff f892 	bl	800b986 <memcpy>
 800c862:	4621      	mov	r1, r4
 800c864:	4638      	mov	r0, r7
 800c866:	f7ff ffa5 	bl	800c7b4 <_Bfree>
 800c86a:	4644      	mov	r4, r8
 800c86c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c870:	3501      	adds	r5, #1
 800c872:	615e      	str	r6, [r3, #20]
 800c874:	6125      	str	r5, [r4, #16]
 800c876:	4620      	mov	r0, r4
 800c878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87c:	0800ebe8 	.word	0x0800ebe8
 800c880:	0800ebf9 	.word	0x0800ebf9

0800c884 <__hi0bits>:
 800c884:	0c03      	lsrs	r3, r0, #16
 800c886:	041b      	lsls	r3, r3, #16
 800c888:	b9d3      	cbnz	r3, 800c8c0 <__hi0bits+0x3c>
 800c88a:	0400      	lsls	r0, r0, #16
 800c88c:	2310      	movs	r3, #16
 800c88e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c892:	bf04      	itt	eq
 800c894:	0200      	lsleq	r0, r0, #8
 800c896:	3308      	addeq	r3, #8
 800c898:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c89c:	bf04      	itt	eq
 800c89e:	0100      	lsleq	r0, r0, #4
 800c8a0:	3304      	addeq	r3, #4
 800c8a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c8a6:	bf04      	itt	eq
 800c8a8:	0080      	lsleq	r0, r0, #2
 800c8aa:	3302      	addeq	r3, #2
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	db05      	blt.n	800c8bc <__hi0bits+0x38>
 800c8b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c8b4:	f103 0301 	add.w	r3, r3, #1
 800c8b8:	bf08      	it	eq
 800c8ba:	2320      	moveq	r3, #32
 800c8bc:	4618      	mov	r0, r3
 800c8be:	4770      	bx	lr
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e7e4      	b.n	800c88e <__hi0bits+0xa>

0800c8c4 <__lo0bits>:
 800c8c4:	6803      	ldr	r3, [r0, #0]
 800c8c6:	f013 0207 	ands.w	r2, r3, #7
 800c8ca:	d00c      	beq.n	800c8e6 <__lo0bits+0x22>
 800c8cc:	07d9      	lsls	r1, r3, #31
 800c8ce:	d422      	bmi.n	800c916 <__lo0bits+0x52>
 800c8d0:	079a      	lsls	r2, r3, #30
 800c8d2:	bf49      	itett	mi
 800c8d4:	085b      	lsrmi	r3, r3, #1
 800c8d6:	089b      	lsrpl	r3, r3, #2
 800c8d8:	6003      	strmi	r3, [r0, #0]
 800c8da:	2201      	movmi	r2, #1
 800c8dc:	bf5c      	itt	pl
 800c8de:	6003      	strpl	r3, [r0, #0]
 800c8e0:	2202      	movpl	r2, #2
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	4770      	bx	lr
 800c8e6:	b299      	uxth	r1, r3
 800c8e8:	b909      	cbnz	r1, 800c8ee <__lo0bits+0x2a>
 800c8ea:	0c1b      	lsrs	r3, r3, #16
 800c8ec:	2210      	movs	r2, #16
 800c8ee:	b2d9      	uxtb	r1, r3
 800c8f0:	b909      	cbnz	r1, 800c8f6 <__lo0bits+0x32>
 800c8f2:	3208      	adds	r2, #8
 800c8f4:	0a1b      	lsrs	r3, r3, #8
 800c8f6:	0719      	lsls	r1, r3, #28
 800c8f8:	bf04      	itt	eq
 800c8fa:	091b      	lsreq	r3, r3, #4
 800c8fc:	3204      	addeq	r2, #4
 800c8fe:	0799      	lsls	r1, r3, #30
 800c900:	bf04      	itt	eq
 800c902:	089b      	lsreq	r3, r3, #2
 800c904:	3202      	addeq	r2, #2
 800c906:	07d9      	lsls	r1, r3, #31
 800c908:	d403      	bmi.n	800c912 <__lo0bits+0x4e>
 800c90a:	085b      	lsrs	r3, r3, #1
 800c90c:	f102 0201 	add.w	r2, r2, #1
 800c910:	d003      	beq.n	800c91a <__lo0bits+0x56>
 800c912:	6003      	str	r3, [r0, #0]
 800c914:	e7e5      	b.n	800c8e2 <__lo0bits+0x1e>
 800c916:	2200      	movs	r2, #0
 800c918:	e7e3      	b.n	800c8e2 <__lo0bits+0x1e>
 800c91a:	2220      	movs	r2, #32
 800c91c:	e7e1      	b.n	800c8e2 <__lo0bits+0x1e>
	...

0800c920 <__i2b>:
 800c920:	b510      	push	{r4, lr}
 800c922:	460c      	mov	r4, r1
 800c924:	2101      	movs	r1, #1
 800c926:	f7ff ff05 	bl	800c734 <_Balloc>
 800c92a:	4602      	mov	r2, r0
 800c92c:	b928      	cbnz	r0, 800c93a <__i2b+0x1a>
 800c92e:	4b05      	ldr	r3, [pc, #20]	; (800c944 <__i2b+0x24>)
 800c930:	4805      	ldr	r0, [pc, #20]	; (800c948 <__i2b+0x28>)
 800c932:	f240 1145 	movw	r1, #325	; 0x145
 800c936:	f000 fd03 	bl	800d340 <__assert_func>
 800c93a:	2301      	movs	r3, #1
 800c93c:	6144      	str	r4, [r0, #20]
 800c93e:	6103      	str	r3, [r0, #16]
 800c940:	bd10      	pop	{r4, pc}
 800c942:	bf00      	nop
 800c944:	0800ebe8 	.word	0x0800ebe8
 800c948:	0800ebf9 	.word	0x0800ebf9

0800c94c <__multiply>:
 800c94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c950:	4691      	mov	r9, r2
 800c952:	690a      	ldr	r2, [r1, #16]
 800c954:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c958:	429a      	cmp	r2, r3
 800c95a:	bfb8      	it	lt
 800c95c:	460b      	movlt	r3, r1
 800c95e:	460c      	mov	r4, r1
 800c960:	bfbc      	itt	lt
 800c962:	464c      	movlt	r4, r9
 800c964:	4699      	movlt	r9, r3
 800c966:	6927      	ldr	r7, [r4, #16]
 800c968:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c96c:	68a3      	ldr	r3, [r4, #8]
 800c96e:	6861      	ldr	r1, [r4, #4]
 800c970:	eb07 060a 	add.w	r6, r7, sl
 800c974:	42b3      	cmp	r3, r6
 800c976:	b085      	sub	sp, #20
 800c978:	bfb8      	it	lt
 800c97a:	3101      	addlt	r1, #1
 800c97c:	f7ff feda 	bl	800c734 <_Balloc>
 800c980:	b930      	cbnz	r0, 800c990 <__multiply+0x44>
 800c982:	4602      	mov	r2, r0
 800c984:	4b44      	ldr	r3, [pc, #272]	; (800ca98 <__multiply+0x14c>)
 800c986:	4845      	ldr	r0, [pc, #276]	; (800ca9c <__multiply+0x150>)
 800c988:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c98c:	f000 fcd8 	bl	800d340 <__assert_func>
 800c990:	f100 0514 	add.w	r5, r0, #20
 800c994:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c998:	462b      	mov	r3, r5
 800c99a:	2200      	movs	r2, #0
 800c99c:	4543      	cmp	r3, r8
 800c99e:	d321      	bcc.n	800c9e4 <__multiply+0x98>
 800c9a0:	f104 0314 	add.w	r3, r4, #20
 800c9a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c9a8:	f109 0314 	add.w	r3, r9, #20
 800c9ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c9b0:	9202      	str	r2, [sp, #8]
 800c9b2:	1b3a      	subs	r2, r7, r4
 800c9b4:	3a15      	subs	r2, #21
 800c9b6:	f022 0203 	bic.w	r2, r2, #3
 800c9ba:	3204      	adds	r2, #4
 800c9bc:	f104 0115 	add.w	r1, r4, #21
 800c9c0:	428f      	cmp	r7, r1
 800c9c2:	bf38      	it	cc
 800c9c4:	2204      	movcc	r2, #4
 800c9c6:	9201      	str	r2, [sp, #4]
 800c9c8:	9a02      	ldr	r2, [sp, #8]
 800c9ca:	9303      	str	r3, [sp, #12]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d80c      	bhi.n	800c9ea <__multiply+0x9e>
 800c9d0:	2e00      	cmp	r6, #0
 800c9d2:	dd03      	ble.n	800c9dc <__multiply+0x90>
 800c9d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d05b      	beq.n	800ca94 <__multiply+0x148>
 800c9dc:	6106      	str	r6, [r0, #16]
 800c9de:	b005      	add	sp, #20
 800c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e4:	f843 2b04 	str.w	r2, [r3], #4
 800c9e8:	e7d8      	b.n	800c99c <__multiply+0x50>
 800c9ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800c9ee:	f1ba 0f00 	cmp.w	sl, #0
 800c9f2:	d024      	beq.n	800ca3e <__multiply+0xf2>
 800c9f4:	f104 0e14 	add.w	lr, r4, #20
 800c9f8:	46a9      	mov	r9, r5
 800c9fa:	f04f 0c00 	mov.w	ip, #0
 800c9fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca02:	f8d9 1000 	ldr.w	r1, [r9]
 800ca06:	fa1f fb82 	uxth.w	fp, r2
 800ca0a:	b289      	uxth	r1, r1
 800ca0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ca10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ca14:	f8d9 2000 	ldr.w	r2, [r9]
 800ca18:	4461      	add	r1, ip
 800ca1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca26:	b289      	uxth	r1, r1
 800ca28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca2c:	4577      	cmp	r7, lr
 800ca2e:	f849 1b04 	str.w	r1, [r9], #4
 800ca32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca36:	d8e2      	bhi.n	800c9fe <__multiply+0xb2>
 800ca38:	9a01      	ldr	r2, [sp, #4]
 800ca3a:	f845 c002 	str.w	ip, [r5, r2]
 800ca3e:	9a03      	ldr	r2, [sp, #12]
 800ca40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca44:	3304      	adds	r3, #4
 800ca46:	f1b9 0f00 	cmp.w	r9, #0
 800ca4a:	d021      	beq.n	800ca90 <__multiply+0x144>
 800ca4c:	6829      	ldr	r1, [r5, #0]
 800ca4e:	f104 0c14 	add.w	ip, r4, #20
 800ca52:	46ae      	mov	lr, r5
 800ca54:	f04f 0a00 	mov.w	sl, #0
 800ca58:	f8bc b000 	ldrh.w	fp, [ip]
 800ca5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ca60:	fb09 220b 	mla	r2, r9, fp, r2
 800ca64:	4452      	add	r2, sl
 800ca66:	b289      	uxth	r1, r1
 800ca68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca6c:	f84e 1b04 	str.w	r1, [lr], #4
 800ca70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ca74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca78:	f8be 1000 	ldrh.w	r1, [lr]
 800ca7c:	fb09 110a 	mla	r1, r9, sl, r1
 800ca80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ca84:	4567      	cmp	r7, ip
 800ca86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca8a:	d8e5      	bhi.n	800ca58 <__multiply+0x10c>
 800ca8c:	9a01      	ldr	r2, [sp, #4]
 800ca8e:	50a9      	str	r1, [r5, r2]
 800ca90:	3504      	adds	r5, #4
 800ca92:	e799      	b.n	800c9c8 <__multiply+0x7c>
 800ca94:	3e01      	subs	r6, #1
 800ca96:	e79b      	b.n	800c9d0 <__multiply+0x84>
 800ca98:	0800ebe8 	.word	0x0800ebe8
 800ca9c:	0800ebf9 	.word	0x0800ebf9

0800caa0 <__pow5mult>:
 800caa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caa4:	4615      	mov	r5, r2
 800caa6:	f012 0203 	ands.w	r2, r2, #3
 800caaa:	4606      	mov	r6, r0
 800caac:	460f      	mov	r7, r1
 800caae:	d007      	beq.n	800cac0 <__pow5mult+0x20>
 800cab0:	4c25      	ldr	r4, [pc, #148]	; (800cb48 <__pow5mult+0xa8>)
 800cab2:	3a01      	subs	r2, #1
 800cab4:	2300      	movs	r3, #0
 800cab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800caba:	f7ff fe9d 	bl	800c7f8 <__multadd>
 800cabe:	4607      	mov	r7, r0
 800cac0:	10ad      	asrs	r5, r5, #2
 800cac2:	d03d      	beq.n	800cb40 <__pow5mult+0xa0>
 800cac4:	69f4      	ldr	r4, [r6, #28]
 800cac6:	b97c      	cbnz	r4, 800cae8 <__pow5mult+0x48>
 800cac8:	2010      	movs	r0, #16
 800caca:	f7fd ff01 	bl	800a8d0 <malloc>
 800cace:	4602      	mov	r2, r0
 800cad0:	61f0      	str	r0, [r6, #28]
 800cad2:	b928      	cbnz	r0, 800cae0 <__pow5mult+0x40>
 800cad4:	4b1d      	ldr	r3, [pc, #116]	; (800cb4c <__pow5mult+0xac>)
 800cad6:	481e      	ldr	r0, [pc, #120]	; (800cb50 <__pow5mult+0xb0>)
 800cad8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cadc:	f000 fc30 	bl	800d340 <__assert_func>
 800cae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cae4:	6004      	str	r4, [r0, #0]
 800cae6:	60c4      	str	r4, [r0, #12]
 800cae8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800caec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800caf0:	b94c      	cbnz	r4, 800cb06 <__pow5mult+0x66>
 800caf2:	f240 2171 	movw	r1, #625	; 0x271
 800caf6:	4630      	mov	r0, r6
 800caf8:	f7ff ff12 	bl	800c920 <__i2b>
 800cafc:	2300      	movs	r3, #0
 800cafe:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb02:	4604      	mov	r4, r0
 800cb04:	6003      	str	r3, [r0, #0]
 800cb06:	f04f 0900 	mov.w	r9, #0
 800cb0a:	07eb      	lsls	r3, r5, #31
 800cb0c:	d50a      	bpl.n	800cb24 <__pow5mult+0x84>
 800cb0e:	4639      	mov	r1, r7
 800cb10:	4622      	mov	r2, r4
 800cb12:	4630      	mov	r0, r6
 800cb14:	f7ff ff1a 	bl	800c94c <__multiply>
 800cb18:	4639      	mov	r1, r7
 800cb1a:	4680      	mov	r8, r0
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7ff fe49 	bl	800c7b4 <_Bfree>
 800cb22:	4647      	mov	r7, r8
 800cb24:	106d      	asrs	r5, r5, #1
 800cb26:	d00b      	beq.n	800cb40 <__pow5mult+0xa0>
 800cb28:	6820      	ldr	r0, [r4, #0]
 800cb2a:	b938      	cbnz	r0, 800cb3c <__pow5mult+0x9c>
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	4621      	mov	r1, r4
 800cb30:	4630      	mov	r0, r6
 800cb32:	f7ff ff0b 	bl	800c94c <__multiply>
 800cb36:	6020      	str	r0, [r4, #0]
 800cb38:	f8c0 9000 	str.w	r9, [r0]
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	e7e4      	b.n	800cb0a <__pow5mult+0x6a>
 800cb40:	4638      	mov	r0, r7
 800cb42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb46:	bf00      	nop
 800cb48:	0800ed48 	.word	0x0800ed48
 800cb4c:	0800eb79 	.word	0x0800eb79
 800cb50:	0800ebf9 	.word	0x0800ebf9

0800cb54 <__lshift>:
 800cb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb58:	460c      	mov	r4, r1
 800cb5a:	6849      	ldr	r1, [r1, #4]
 800cb5c:	6923      	ldr	r3, [r4, #16]
 800cb5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb62:	68a3      	ldr	r3, [r4, #8]
 800cb64:	4607      	mov	r7, r0
 800cb66:	4691      	mov	r9, r2
 800cb68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb6c:	f108 0601 	add.w	r6, r8, #1
 800cb70:	42b3      	cmp	r3, r6
 800cb72:	db0b      	blt.n	800cb8c <__lshift+0x38>
 800cb74:	4638      	mov	r0, r7
 800cb76:	f7ff fddd 	bl	800c734 <_Balloc>
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	b948      	cbnz	r0, 800cb92 <__lshift+0x3e>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	4b28      	ldr	r3, [pc, #160]	; (800cc24 <__lshift+0xd0>)
 800cb82:	4829      	ldr	r0, [pc, #164]	; (800cc28 <__lshift+0xd4>)
 800cb84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cb88:	f000 fbda 	bl	800d340 <__assert_func>
 800cb8c:	3101      	adds	r1, #1
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	e7ee      	b.n	800cb70 <__lshift+0x1c>
 800cb92:	2300      	movs	r3, #0
 800cb94:	f100 0114 	add.w	r1, r0, #20
 800cb98:	f100 0210 	add.w	r2, r0, #16
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	4553      	cmp	r3, sl
 800cba0:	db33      	blt.n	800cc0a <__lshift+0xb6>
 800cba2:	6920      	ldr	r0, [r4, #16]
 800cba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cba8:	f104 0314 	add.w	r3, r4, #20
 800cbac:	f019 091f 	ands.w	r9, r9, #31
 800cbb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbb8:	d02b      	beq.n	800cc12 <__lshift+0xbe>
 800cbba:	f1c9 0e20 	rsb	lr, r9, #32
 800cbbe:	468a      	mov	sl, r1
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	6818      	ldr	r0, [r3, #0]
 800cbc4:	fa00 f009 	lsl.w	r0, r0, r9
 800cbc8:	4310      	orrs	r0, r2
 800cbca:	f84a 0b04 	str.w	r0, [sl], #4
 800cbce:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbd2:	459c      	cmp	ip, r3
 800cbd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbd8:	d8f3      	bhi.n	800cbc2 <__lshift+0x6e>
 800cbda:	ebac 0304 	sub.w	r3, ip, r4
 800cbde:	3b15      	subs	r3, #21
 800cbe0:	f023 0303 	bic.w	r3, r3, #3
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	f104 0015 	add.w	r0, r4, #21
 800cbea:	4584      	cmp	ip, r0
 800cbec:	bf38      	it	cc
 800cbee:	2304      	movcc	r3, #4
 800cbf0:	50ca      	str	r2, [r1, r3]
 800cbf2:	b10a      	cbz	r2, 800cbf8 <__lshift+0xa4>
 800cbf4:	f108 0602 	add.w	r6, r8, #2
 800cbf8:	3e01      	subs	r6, #1
 800cbfa:	4638      	mov	r0, r7
 800cbfc:	612e      	str	r6, [r5, #16]
 800cbfe:	4621      	mov	r1, r4
 800cc00:	f7ff fdd8 	bl	800c7b4 <_Bfree>
 800cc04:	4628      	mov	r0, r5
 800cc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc0e:	3301      	adds	r3, #1
 800cc10:	e7c5      	b.n	800cb9e <__lshift+0x4a>
 800cc12:	3904      	subs	r1, #4
 800cc14:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc18:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc1c:	459c      	cmp	ip, r3
 800cc1e:	d8f9      	bhi.n	800cc14 <__lshift+0xc0>
 800cc20:	e7ea      	b.n	800cbf8 <__lshift+0xa4>
 800cc22:	bf00      	nop
 800cc24:	0800ebe8 	.word	0x0800ebe8
 800cc28:	0800ebf9 	.word	0x0800ebf9

0800cc2c <__mcmp>:
 800cc2c:	b530      	push	{r4, r5, lr}
 800cc2e:	6902      	ldr	r2, [r0, #16]
 800cc30:	690c      	ldr	r4, [r1, #16]
 800cc32:	1b12      	subs	r2, r2, r4
 800cc34:	d10e      	bne.n	800cc54 <__mcmp+0x28>
 800cc36:	f100 0314 	add.w	r3, r0, #20
 800cc3a:	3114      	adds	r1, #20
 800cc3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc4c:	42a5      	cmp	r5, r4
 800cc4e:	d003      	beq.n	800cc58 <__mcmp+0x2c>
 800cc50:	d305      	bcc.n	800cc5e <__mcmp+0x32>
 800cc52:	2201      	movs	r2, #1
 800cc54:	4610      	mov	r0, r2
 800cc56:	bd30      	pop	{r4, r5, pc}
 800cc58:	4283      	cmp	r3, r0
 800cc5a:	d3f3      	bcc.n	800cc44 <__mcmp+0x18>
 800cc5c:	e7fa      	b.n	800cc54 <__mcmp+0x28>
 800cc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc62:	e7f7      	b.n	800cc54 <__mcmp+0x28>

0800cc64 <__mdiff>:
 800cc64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc68:	460c      	mov	r4, r1
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	4620      	mov	r0, r4
 800cc70:	4690      	mov	r8, r2
 800cc72:	f7ff ffdb 	bl	800cc2c <__mcmp>
 800cc76:	1e05      	subs	r5, r0, #0
 800cc78:	d110      	bne.n	800cc9c <__mdiff+0x38>
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	f7ff fd59 	bl	800c734 <_Balloc>
 800cc82:	b930      	cbnz	r0, 800cc92 <__mdiff+0x2e>
 800cc84:	4b3a      	ldr	r3, [pc, #232]	; (800cd70 <__mdiff+0x10c>)
 800cc86:	4602      	mov	r2, r0
 800cc88:	f240 2137 	movw	r1, #567	; 0x237
 800cc8c:	4839      	ldr	r0, [pc, #228]	; (800cd74 <__mdiff+0x110>)
 800cc8e:	f000 fb57 	bl	800d340 <__assert_func>
 800cc92:	2301      	movs	r3, #1
 800cc94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9c:	bfa4      	itt	ge
 800cc9e:	4643      	movge	r3, r8
 800cca0:	46a0      	movge	r8, r4
 800cca2:	4630      	mov	r0, r6
 800cca4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cca8:	bfa6      	itte	ge
 800ccaa:	461c      	movge	r4, r3
 800ccac:	2500      	movge	r5, #0
 800ccae:	2501      	movlt	r5, #1
 800ccb0:	f7ff fd40 	bl	800c734 <_Balloc>
 800ccb4:	b920      	cbnz	r0, 800ccc0 <__mdiff+0x5c>
 800ccb6:	4b2e      	ldr	r3, [pc, #184]	; (800cd70 <__mdiff+0x10c>)
 800ccb8:	4602      	mov	r2, r0
 800ccba:	f240 2145 	movw	r1, #581	; 0x245
 800ccbe:	e7e5      	b.n	800cc8c <__mdiff+0x28>
 800ccc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ccc4:	6926      	ldr	r6, [r4, #16]
 800ccc6:	60c5      	str	r5, [r0, #12]
 800ccc8:	f104 0914 	add.w	r9, r4, #20
 800cccc:	f108 0514 	add.w	r5, r8, #20
 800ccd0:	f100 0e14 	add.w	lr, r0, #20
 800ccd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ccd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ccdc:	f108 0210 	add.w	r2, r8, #16
 800cce0:	46f2      	mov	sl, lr
 800cce2:	2100      	movs	r1, #0
 800cce4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cce8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ccec:	fa11 f88b 	uxtah	r8, r1, fp
 800ccf0:	b299      	uxth	r1, r3
 800ccf2:	0c1b      	lsrs	r3, r3, #16
 800ccf4:	eba8 0801 	sub.w	r8, r8, r1
 800ccf8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ccfc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd00:	fa1f f888 	uxth.w	r8, r8
 800cd04:	1419      	asrs	r1, r3, #16
 800cd06:	454e      	cmp	r6, r9
 800cd08:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd0c:	f84a 3b04 	str.w	r3, [sl], #4
 800cd10:	d8e8      	bhi.n	800cce4 <__mdiff+0x80>
 800cd12:	1b33      	subs	r3, r6, r4
 800cd14:	3b15      	subs	r3, #21
 800cd16:	f023 0303 	bic.w	r3, r3, #3
 800cd1a:	3304      	adds	r3, #4
 800cd1c:	3415      	adds	r4, #21
 800cd1e:	42a6      	cmp	r6, r4
 800cd20:	bf38      	it	cc
 800cd22:	2304      	movcc	r3, #4
 800cd24:	441d      	add	r5, r3
 800cd26:	4473      	add	r3, lr
 800cd28:	469e      	mov	lr, r3
 800cd2a:	462e      	mov	r6, r5
 800cd2c:	4566      	cmp	r6, ip
 800cd2e:	d30e      	bcc.n	800cd4e <__mdiff+0xea>
 800cd30:	f10c 0203 	add.w	r2, ip, #3
 800cd34:	1b52      	subs	r2, r2, r5
 800cd36:	f022 0203 	bic.w	r2, r2, #3
 800cd3a:	3d03      	subs	r5, #3
 800cd3c:	45ac      	cmp	ip, r5
 800cd3e:	bf38      	it	cc
 800cd40:	2200      	movcc	r2, #0
 800cd42:	4413      	add	r3, r2
 800cd44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd48:	b17a      	cbz	r2, 800cd6a <__mdiff+0x106>
 800cd4a:	6107      	str	r7, [r0, #16]
 800cd4c:	e7a4      	b.n	800cc98 <__mdiff+0x34>
 800cd4e:	f856 8b04 	ldr.w	r8, [r6], #4
 800cd52:	fa11 f288 	uxtah	r2, r1, r8
 800cd56:	1414      	asrs	r4, r2, #16
 800cd58:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cd5c:	b292      	uxth	r2, r2
 800cd5e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cd62:	f84e 2b04 	str.w	r2, [lr], #4
 800cd66:	1421      	asrs	r1, r4, #16
 800cd68:	e7e0      	b.n	800cd2c <__mdiff+0xc8>
 800cd6a:	3f01      	subs	r7, #1
 800cd6c:	e7ea      	b.n	800cd44 <__mdiff+0xe0>
 800cd6e:	bf00      	nop
 800cd70:	0800ebe8 	.word	0x0800ebe8
 800cd74:	0800ebf9 	.word	0x0800ebf9

0800cd78 <__d2b>:
 800cd78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	460f      	mov	r7, r1
 800cd7e:	2101      	movs	r1, #1
 800cd80:	ec59 8b10 	vmov	r8, r9, d0
 800cd84:	4616      	mov	r6, r2
 800cd86:	f7ff fcd5 	bl	800c734 <_Balloc>
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	b930      	cbnz	r0, 800cd9c <__d2b+0x24>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	4b24      	ldr	r3, [pc, #144]	; (800ce24 <__d2b+0xac>)
 800cd92:	4825      	ldr	r0, [pc, #148]	; (800ce28 <__d2b+0xb0>)
 800cd94:	f240 310f 	movw	r1, #783	; 0x30f
 800cd98:	f000 fad2 	bl	800d340 <__assert_func>
 800cd9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cda0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cda4:	bb2d      	cbnz	r5, 800cdf2 <__d2b+0x7a>
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	f1b8 0300 	subs.w	r3, r8, #0
 800cdac:	d026      	beq.n	800cdfc <__d2b+0x84>
 800cdae:	4668      	mov	r0, sp
 800cdb0:	9300      	str	r3, [sp, #0]
 800cdb2:	f7ff fd87 	bl	800c8c4 <__lo0bits>
 800cdb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cdba:	b1e8      	cbz	r0, 800cdf8 <__d2b+0x80>
 800cdbc:	f1c0 0320 	rsb	r3, r0, #32
 800cdc0:	fa02 f303 	lsl.w	r3, r2, r3
 800cdc4:	430b      	orrs	r3, r1
 800cdc6:	40c2      	lsrs	r2, r0
 800cdc8:	6163      	str	r3, [r4, #20]
 800cdca:	9201      	str	r2, [sp, #4]
 800cdcc:	9b01      	ldr	r3, [sp, #4]
 800cdce:	61a3      	str	r3, [r4, #24]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	bf14      	ite	ne
 800cdd4:	2202      	movne	r2, #2
 800cdd6:	2201      	moveq	r2, #1
 800cdd8:	6122      	str	r2, [r4, #16]
 800cdda:	b1bd      	cbz	r5, 800ce0c <__d2b+0x94>
 800cddc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cde0:	4405      	add	r5, r0
 800cde2:	603d      	str	r5, [r7, #0]
 800cde4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cde8:	6030      	str	r0, [r6, #0]
 800cdea:	4620      	mov	r0, r4
 800cdec:	b003      	add	sp, #12
 800cdee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdf6:	e7d6      	b.n	800cda6 <__d2b+0x2e>
 800cdf8:	6161      	str	r1, [r4, #20]
 800cdfa:	e7e7      	b.n	800cdcc <__d2b+0x54>
 800cdfc:	a801      	add	r0, sp, #4
 800cdfe:	f7ff fd61 	bl	800c8c4 <__lo0bits>
 800ce02:	9b01      	ldr	r3, [sp, #4]
 800ce04:	6163      	str	r3, [r4, #20]
 800ce06:	3020      	adds	r0, #32
 800ce08:	2201      	movs	r2, #1
 800ce0a:	e7e5      	b.n	800cdd8 <__d2b+0x60>
 800ce0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce14:	6038      	str	r0, [r7, #0]
 800ce16:	6918      	ldr	r0, [r3, #16]
 800ce18:	f7ff fd34 	bl	800c884 <__hi0bits>
 800ce1c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce20:	e7e2      	b.n	800cde8 <__d2b+0x70>
 800ce22:	bf00      	nop
 800ce24:	0800ebe8 	.word	0x0800ebe8
 800ce28:	0800ebf9 	.word	0x0800ebf9

0800ce2c <__ssputs_r>:
 800ce2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce30:	688e      	ldr	r6, [r1, #8]
 800ce32:	461f      	mov	r7, r3
 800ce34:	42be      	cmp	r6, r7
 800ce36:	680b      	ldr	r3, [r1, #0]
 800ce38:	4682      	mov	sl, r0
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	4690      	mov	r8, r2
 800ce3e:	d82c      	bhi.n	800ce9a <__ssputs_r+0x6e>
 800ce40:	898a      	ldrh	r2, [r1, #12]
 800ce42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce46:	d026      	beq.n	800ce96 <__ssputs_r+0x6a>
 800ce48:	6965      	ldr	r5, [r4, #20]
 800ce4a:	6909      	ldr	r1, [r1, #16]
 800ce4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce50:	eba3 0901 	sub.w	r9, r3, r1
 800ce54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce58:	1c7b      	adds	r3, r7, #1
 800ce5a:	444b      	add	r3, r9
 800ce5c:	106d      	asrs	r5, r5, #1
 800ce5e:	429d      	cmp	r5, r3
 800ce60:	bf38      	it	cc
 800ce62:	461d      	movcc	r5, r3
 800ce64:	0553      	lsls	r3, r2, #21
 800ce66:	d527      	bpl.n	800ceb8 <__ssputs_r+0x8c>
 800ce68:	4629      	mov	r1, r5
 800ce6a:	f7fd fd59 	bl	800a920 <_malloc_r>
 800ce6e:	4606      	mov	r6, r0
 800ce70:	b360      	cbz	r0, 800cecc <__ssputs_r+0xa0>
 800ce72:	6921      	ldr	r1, [r4, #16]
 800ce74:	464a      	mov	r2, r9
 800ce76:	f7fe fd86 	bl	800b986 <memcpy>
 800ce7a:	89a3      	ldrh	r3, [r4, #12]
 800ce7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce84:	81a3      	strh	r3, [r4, #12]
 800ce86:	6126      	str	r6, [r4, #16]
 800ce88:	6165      	str	r5, [r4, #20]
 800ce8a:	444e      	add	r6, r9
 800ce8c:	eba5 0509 	sub.w	r5, r5, r9
 800ce90:	6026      	str	r6, [r4, #0]
 800ce92:	60a5      	str	r5, [r4, #8]
 800ce94:	463e      	mov	r6, r7
 800ce96:	42be      	cmp	r6, r7
 800ce98:	d900      	bls.n	800ce9c <__ssputs_r+0x70>
 800ce9a:	463e      	mov	r6, r7
 800ce9c:	6820      	ldr	r0, [r4, #0]
 800ce9e:	4632      	mov	r2, r6
 800cea0:	4641      	mov	r1, r8
 800cea2:	f7fe fcb9 	bl	800b818 <memmove>
 800cea6:	68a3      	ldr	r3, [r4, #8]
 800cea8:	1b9b      	subs	r3, r3, r6
 800ceaa:	60a3      	str	r3, [r4, #8]
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	4433      	add	r3, r6
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb8:	462a      	mov	r2, r5
 800ceba:	f000 fa87 	bl	800d3cc <_realloc_r>
 800cebe:	4606      	mov	r6, r0
 800cec0:	2800      	cmp	r0, #0
 800cec2:	d1e0      	bne.n	800ce86 <__ssputs_r+0x5a>
 800cec4:	6921      	ldr	r1, [r4, #16]
 800cec6:	4650      	mov	r0, sl
 800cec8:	f7ff fbe8 	bl	800c69c <_free_r>
 800cecc:	230c      	movs	r3, #12
 800cece:	f8ca 3000 	str.w	r3, [sl]
 800ced2:	89a3      	ldrh	r3, [r4, #12]
 800ced4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	f04f 30ff 	mov.w	r0, #4294967295
 800cede:	e7e9      	b.n	800ceb4 <__ssputs_r+0x88>

0800cee0 <_svfiprintf_r>:
 800cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee4:	4698      	mov	r8, r3
 800cee6:	898b      	ldrh	r3, [r1, #12]
 800cee8:	061b      	lsls	r3, r3, #24
 800ceea:	b09d      	sub	sp, #116	; 0x74
 800ceec:	4607      	mov	r7, r0
 800ceee:	460d      	mov	r5, r1
 800cef0:	4614      	mov	r4, r2
 800cef2:	d50e      	bpl.n	800cf12 <_svfiprintf_r+0x32>
 800cef4:	690b      	ldr	r3, [r1, #16]
 800cef6:	b963      	cbnz	r3, 800cf12 <_svfiprintf_r+0x32>
 800cef8:	2140      	movs	r1, #64	; 0x40
 800cefa:	f7fd fd11 	bl	800a920 <_malloc_r>
 800cefe:	6028      	str	r0, [r5, #0]
 800cf00:	6128      	str	r0, [r5, #16]
 800cf02:	b920      	cbnz	r0, 800cf0e <_svfiprintf_r+0x2e>
 800cf04:	230c      	movs	r3, #12
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0c:	e0d0      	b.n	800d0b0 <_svfiprintf_r+0x1d0>
 800cf0e:	2340      	movs	r3, #64	; 0x40
 800cf10:	616b      	str	r3, [r5, #20]
 800cf12:	2300      	movs	r3, #0
 800cf14:	9309      	str	r3, [sp, #36]	; 0x24
 800cf16:	2320      	movs	r3, #32
 800cf18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf20:	2330      	movs	r3, #48	; 0x30
 800cf22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d0c8 <_svfiprintf_r+0x1e8>
 800cf26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf2a:	f04f 0901 	mov.w	r9, #1
 800cf2e:	4623      	mov	r3, r4
 800cf30:	469a      	mov	sl, r3
 800cf32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf36:	b10a      	cbz	r2, 800cf3c <_svfiprintf_r+0x5c>
 800cf38:	2a25      	cmp	r2, #37	; 0x25
 800cf3a:	d1f9      	bne.n	800cf30 <_svfiprintf_r+0x50>
 800cf3c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf40:	d00b      	beq.n	800cf5a <_svfiprintf_r+0x7a>
 800cf42:	465b      	mov	r3, fp
 800cf44:	4622      	mov	r2, r4
 800cf46:	4629      	mov	r1, r5
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f7ff ff6f 	bl	800ce2c <__ssputs_r>
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f000 80a9 	beq.w	800d0a6 <_svfiprintf_r+0x1c6>
 800cf54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf56:	445a      	add	r2, fp
 800cf58:	9209      	str	r2, [sp, #36]	; 0x24
 800cf5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 80a1 	beq.w	800d0a6 <_svfiprintf_r+0x1c6>
 800cf64:	2300      	movs	r3, #0
 800cf66:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf6e:	f10a 0a01 	add.w	sl, sl, #1
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	9307      	str	r3, [sp, #28]
 800cf76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf7a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf7c:	4654      	mov	r4, sl
 800cf7e:	2205      	movs	r2, #5
 800cf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf84:	4850      	ldr	r0, [pc, #320]	; (800d0c8 <_svfiprintf_r+0x1e8>)
 800cf86:	f7f3 f93b 	bl	8000200 <memchr>
 800cf8a:	9a04      	ldr	r2, [sp, #16]
 800cf8c:	b9d8      	cbnz	r0, 800cfc6 <_svfiprintf_r+0xe6>
 800cf8e:	06d0      	lsls	r0, r2, #27
 800cf90:	bf44      	itt	mi
 800cf92:	2320      	movmi	r3, #32
 800cf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf98:	0711      	lsls	r1, r2, #28
 800cf9a:	bf44      	itt	mi
 800cf9c:	232b      	movmi	r3, #43	; 0x2b
 800cf9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa6:	2b2a      	cmp	r3, #42	; 0x2a
 800cfa8:	d015      	beq.n	800cfd6 <_svfiprintf_r+0xf6>
 800cfaa:	9a07      	ldr	r2, [sp, #28]
 800cfac:	4654      	mov	r4, sl
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f04f 0c0a 	mov.w	ip, #10
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfba:	3b30      	subs	r3, #48	; 0x30
 800cfbc:	2b09      	cmp	r3, #9
 800cfbe:	d94d      	bls.n	800d05c <_svfiprintf_r+0x17c>
 800cfc0:	b1b0      	cbz	r0, 800cff0 <_svfiprintf_r+0x110>
 800cfc2:	9207      	str	r2, [sp, #28]
 800cfc4:	e014      	b.n	800cff0 <_svfiprintf_r+0x110>
 800cfc6:	eba0 0308 	sub.w	r3, r0, r8
 800cfca:	fa09 f303 	lsl.w	r3, r9, r3
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	9304      	str	r3, [sp, #16]
 800cfd2:	46a2      	mov	sl, r4
 800cfd4:	e7d2      	b.n	800cf7c <_svfiprintf_r+0x9c>
 800cfd6:	9b03      	ldr	r3, [sp, #12]
 800cfd8:	1d19      	adds	r1, r3, #4
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	9103      	str	r1, [sp, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfbb      	ittet	lt
 800cfe2:	425b      	neglt	r3, r3
 800cfe4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfe8:	9307      	strge	r3, [sp, #28]
 800cfea:	9307      	strlt	r3, [sp, #28]
 800cfec:	bfb8      	it	lt
 800cfee:	9204      	strlt	r2, [sp, #16]
 800cff0:	7823      	ldrb	r3, [r4, #0]
 800cff2:	2b2e      	cmp	r3, #46	; 0x2e
 800cff4:	d10c      	bne.n	800d010 <_svfiprintf_r+0x130>
 800cff6:	7863      	ldrb	r3, [r4, #1]
 800cff8:	2b2a      	cmp	r3, #42	; 0x2a
 800cffa:	d134      	bne.n	800d066 <_svfiprintf_r+0x186>
 800cffc:	9b03      	ldr	r3, [sp, #12]
 800cffe:	1d1a      	adds	r2, r3, #4
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	9203      	str	r2, [sp, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	bfb8      	it	lt
 800d008:	f04f 33ff 	movlt.w	r3, #4294967295
 800d00c:	3402      	adds	r4, #2
 800d00e:	9305      	str	r3, [sp, #20]
 800d010:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d0d8 <_svfiprintf_r+0x1f8>
 800d014:	7821      	ldrb	r1, [r4, #0]
 800d016:	2203      	movs	r2, #3
 800d018:	4650      	mov	r0, sl
 800d01a:	f7f3 f8f1 	bl	8000200 <memchr>
 800d01e:	b138      	cbz	r0, 800d030 <_svfiprintf_r+0x150>
 800d020:	9b04      	ldr	r3, [sp, #16]
 800d022:	eba0 000a 	sub.w	r0, r0, sl
 800d026:	2240      	movs	r2, #64	; 0x40
 800d028:	4082      	lsls	r2, r0
 800d02a:	4313      	orrs	r3, r2
 800d02c:	3401      	adds	r4, #1
 800d02e:	9304      	str	r3, [sp, #16]
 800d030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d034:	4825      	ldr	r0, [pc, #148]	; (800d0cc <_svfiprintf_r+0x1ec>)
 800d036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d03a:	2206      	movs	r2, #6
 800d03c:	f7f3 f8e0 	bl	8000200 <memchr>
 800d040:	2800      	cmp	r0, #0
 800d042:	d038      	beq.n	800d0b6 <_svfiprintf_r+0x1d6>
 800d044:	4b22      	ldr	r3, [pc, #136]	; (800d0d0 <_svfiprintf_r+0x1f0>)
 800d046:	bb1b      	cbnz	r3, 800d090 <_svfiprintf_r+0x1b0>
 800d048:	9b03      	ldr	r3, [sp, #12]
 800d04a:	3307      	adds	r3, #7
 800d04c:	f023 0307 	bic.w	r3, r3, #7
 800d050:	3308      	adds	r3, #8
 800d052:	9303      	str	r3, [sp, #12]
 800d054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d056:	4433      	add	r3, r6
 800d058:	9309      	str	r3, [sp, #36]	; 0x24
 800d05a:	e768      	b.n	800cf2e <_svfiprintf_r+0x4e>
 800d05c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d060:	460c      	mov	r4, r1
 800d062:	2001      	movs	r0, #1
 800d064:	e7a6      	b.n	800cfb4 <_svfiprintf_r+0xd4>
 800d066:	2300      	movs	r3, #0
 800d068:	3401      	adds	r4, #1
 800d06a:	9305      	str	r3, [sp, #20]
 800d06c:	4619      	mov	r1, r3
 800d06e:	f04f 0c0a 	mov.w	ip, #10
 800d072:	4620      	mov	r0, r4
 800d074:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d078:	3a30      	subs	r2, #48	; 0x30
 800d07a:	2a09      	cmp	r2, #9
 800d07c:	d903      	bls.n	800d086 <_svfiprintf_r+0x1a6>
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d0c6      	beq.n	800d010 <_svfiprintf_r+0x130>
 800d082:	9105      	str	r1, [sp, #20]
 800d084:	e7c4      	b.n	800d010 <_svfiprintf_r+0x130>
 800d086:	fb0c 2101 	mla	r1, ip, r1, r2
 800d08a:	4604      	mov	r4, r0
 800d08c:	2301      	movs	r3, #1
 800d08e:	e7f0      	b.n	800d072 <_svfiprintf_r+0x192>
 800d090:	ab03      	add	r3, sp, #12
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	462a      	mov	r2, r5
 800d096:	4b0f      	ldr	r3, [pc, #60]	; (800d0d4 <_svfiprintf_r+0x1f4>)
 800d098:	a904      	add	r1, sp, #16
 800d09a:	4638      	mov	r0, r7
 800d09c:	f7fd fd6c 	bl	800ab78 <_printf_float>
 800d0a0:	1c42      	adds	r2, r0, #1
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	d1d6      	bne.n	800d054 <_svfiprintf_r+0x174>
 800d0a6:	89ab      	ldrh	r3, [r5, #12]
 800d0a8:	065b      	lsls	r3, r3, #25
 800d0aa:	f53f af2d 	bmi.w	800cf08 <_svfiprintf_r+0x28>
 800d0ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0b0:	b01d      	add	sp, #116	; 0x74
 800d0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b6:	ab03      	add	r3, sp, #12
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	462a      	mov	r2, r5
 800d0bc:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <_svfiprintf_r+0x1f4>)
 800d0be:	a904      	add	r1, sp, #16
 800d0c0:	4638      	mov	r0, r7
 800d0c2:	f7fd fffd 	bl	800b0c0 <_printf_i>
 800d0c6:	e7eb      	b.n	800d0a0 <_svfiprintf_r+0x1c0>
 800d0c8:	0800ed54 	.word	0x0800ed54
 800d0cc:	0800ed5e 	.word	0x0800ed5e
 800d0d0:	0800ab79 	.word	0x0800ab79
 800d0d4:	0800ce2d 	.word	0x0800ce2d
 800d0d8:	0800ed5a 	.word	0x0800ed5a

0800d0dc <__sflush_r>:
 800d0dc:	898a      	ldrh	r2, [r1, #12]
 800d0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	0710      	lsls	r0, r2, #28
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	d458      	bmi.n	800d19c <__sflush_r+0xc0>
 800d0ea:	684b      	ldr	r3, [r1, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	dc05      	bgt.n	800d0fc <__sflush_r+0x20>
 800d0f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	dc02      	bgt.n	800d0fc <__sflush_r+0x20>
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0fe:	2e00      	cmp	r6, #0
 800d100:	d0f9      	beq.n	800d0f6 <__sflush_r+0x1a>
 800d102:	2300      	movs	r3, #0
 800d104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d108:	682f      	ldr	r7, [r5, #0]
 800d10a:	6a21      	ldr	r1, [r4, #32]
 800d10c:	602b      	str	r3, [r5, #0]
 800d10e:	d032      	beq.n	800d176 <__sflush_r+0x9a>
 800d110:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	075a      	lsls	r2, r3, #29
 800d116:	d505      	bpl.n	800d124 <__sflush_r+0x48>
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	1ac0      	subs	r0, r0, r3
 800d11c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d11e:	b10b      	cbz	r3, 800d124 <__sflush_r+0x48>
 800d120:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d122:	1ac0      	subs	r0, r0, r3
 800d124:	2300      	movs	r3, #0
 800d126:	4602      	mov	r2, r0
 800d128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d12a:	6a21      	ldr	r1, [r4, #32]
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b0      	blx	r6
 800d130:	1c43      	adds	r3, r0, #1
 800d132:	89a3      	ldrh	r3, [r4, #12]
 800d134:	d106      	bne.n	800d144 <__sflush_r+0x68>
 800d136:	6829      	ldr	r1, [r5, #0]
 800d138:	291d      	cmp	r1, #29
 800d13a:	d82b      	bhi.n	800d194 <__sflush_r+0xb8>
 800d13c:	4a29      	ldr	r2, [pc, #164]	; (800d1e4 <__sflush_r+0x108>)
 800d13e:	410a      	asrs	r2, r1
 800d140:	07d6      	lsls	r6, r2, #31
 800d142:	d427      	bmi.n	800d194 <__sflush_r+0xb8>
 800d144:	2200      	movs	r2, #0
 800d146:	6062      	str	r2, [r4, #4]
 800d148:	04d9      	lsls	r1, r3, #19
 800d14a:	6922      	ldr	r2, [r4, #16]
 800d14c:	6022      	str	r2, [r4, #0]
 800d14e:	d504      	bpl.n	800d15a <__sflush_r+0x7e>
 800d150:	1c42      	adds	r2, r0, #1
 800d152:	d101      	bne.n	800d158 <__sflush_r+0x7c>
 800d154:	682b      	ldr	r3, [r5, #0]
 800d156:	b903      	cbnz	r3, 800d15a <__sflush_r+0x7e>
 800d158:	6560      	str	r0, [r4, #84]	; 0x54
 800d15a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d15c:	602f      	str	r7, [r5, #0]
 800d15e:	2900      	cmp	r1, #0
 800d160:	d0c9      	beq.n	800d0f6 <__sflush_r+0x1a>
 800d162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d166:	4299      	cmp	r1, r3
 800d168:	d002      	beq.n	800d170 <__sflush_r+0x94>
 800d16a:	4628      	mov	r0, r5
 800d16c:	f7ff fa96 	bl	800c69c <_free_r>
 800d170:	2000      	movs	r0, #0
 800d172:	6360      	str	r0, [r4, #52]	; 0x34
 800d174:	e7c0      	b.n	800d0f8 <__sflush_r+0x1c>
 800d176:	2301      	movs	r3, #1
 800d178:	4628      	mov	r0, r5
 800d17a:	47b0      	blx	r6
 800d17c:	1c41      	adds	r1, r0, #1
 800d17e:	d1c8      	bne.n	800d112 <__sflush_r+0x36>
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d0c5      	beq.n	800d112 <__sflush_r+0x36>
 800d186:	2b1d      	cmp	r3, #29
 800d188:	d001      	beq.n	800d18e <__sflush_r+0xb2>
 800d18a:	2b16      	cmp	r3, #22
 800d18c:	d101      	bne.n	800d192 <__sflush_r+0xb6>
 800d18e:	602f      	str	r7, [r5, #0]
 800d190:	e7b1      	b.n	800d0f6 <__sflush_r+0x1a>
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d198:	81a3      	strh	r3, [r4, #12]
 800d19a:	e7ad      	b.n	800d0f8 <__sflush_r+0x1c>
 800d19c:	690f      	ldr	r7, [r1, #16]
 800d19e:	2f00      	cmp	r7, #0
 800d1a0:	d0a9      	beq.n	800d0f6 <__sflush_r+0x1a>
 800d1a2:	0793      	lsls	r3, r2, #30
 800d1a4:	680e      	ldr	r6, [r1, #0]
 800d1a6:	bf08      	it	eq
 800d1a8:	694b      	ldreq	r3, [r1, #20]
 800d1aa:	600f      	str	r7, [r1, #0]
 800d1ac:	bf18      	it	ne
 800d1ae:	2300      	movne	r3, #0
 800d1b0:	eba6 0807 	sub.w	r8, r6, r7
 800d1b4:	608b      	str	r3, [r1, #8]
 800d1b6:	f1b8 0f00 	cmp.w	r8, #0
 800d1ba:	dd9c      	ble.n	800d0f6 <__sflush_r+0x1a>
 800d1bc:	6a21      	ldr	r1, [r4, #32]
 800d1be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1c0:	4643      	mov	r3, r8
 800d1c2:	463a      	mov	r2, r7
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	47b0      	blx	r6
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	dc06      	bgt.n	800d1da <__sflush_r+0xfe>
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d2:	81a3      	strh	r3, [r4, #12]
 800d1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d8:	e78e      	b.n	800d0f8 <__sflush_r+0x1c>
 800d1da:	4407      	add	r7, r0
 800d1dc:	eba8 0800 	sub.w	r8, r8, r0
 800d1e0:	e7e9      	b.n	800d1b6 <__sflush_r+0xda>
 800d1e2:	bf00      	nop
 800d1e4:	dfbffffe 	.word	0xdfbffffe

0800d1e8 <_fflush_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	690b      	ldr	r3, [r1, #16]
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	460c      	mov	r4, r1
 800d1f0:	b913      	cbnz	r3, 800d1f8 <_fflush_r+0x10>
 800d1f2:	2500      	movs	r5, #0
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	b118      	cbz	r0, 800d202 <_fflush_r+0x1a>
 800d1fa:	6a03      	ldr	r3, [r0, #32]
 800d1fc:	b90b      	cbnz	r3, 800d202 <_fflush_r+0x1a>
 800d1fe:	f7fe f90d 	bl	800b41c <__sinit>
 800d202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d0f3      	beq.n	800d1f2 <_fflush_r+0xa>
 800d20a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d20c:	07d0      	lsls	r0, r2, #31
 800d20e:	d404      	bmi.n	800d21a <_fflush_r+0x32>
 800d210:	0599      	lsls	r1, r3, #22
 800d212:	d402      	bmi.n	800d21a <_fflush_r+0x32>
 800d214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d216:	f7fe fbb4 	bl	800b982 <__retarget_lock_acquire_recursive>
 800d21a:	4628      	mov	r0, r5
 800d21c:	4621      	mov	r1, r4
 800d21e:	f7ff ff5d 	bl	800d0dc <__sflush_r>
 800d222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d224:	07da      	lsls	r2, r3, #31
 800d226:	4605      	mov	r5, r0
 800d228:	d4e4      	bmi.n	800d1f4 <_fflush_r+0xc>
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	059b      	lsls	r3, r3, #22
 800d22e:	d4e1      	bmi.n	800d1f4 <_fflush_r+0xc>
 800d230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d232:	f7fe fba7 	bl	800b984 <__retarget_lock_release_recursive>
 800d236:	e7dd      	b.n	800d1f4 <_fflush_r+0xc>

0800d238 <__swhatbuf_r>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	460c      	mov	r4, r1
 800d23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d240:	2900      	cmp	r1, #0
 800d242:	b096      	sub	sp, #88	; 0x58
 800d244:	4615      	mov	r5, r2
 800d246:	461e      	mov	r6, r3
 800d248:	da0d      	bge.n	800d266 <__swhatbuf_r+0x2e>
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d250:	f04f 0100 	mov.w	r1, #0
 800d254:	bf0c      	ite	eq
 800d256:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d25a:	2340      	movne	r3, #64	; 0x40
 800d25c:	2000      	movs	r0, #0
 800d25e:	6031      	str	r1, [r6, #0]
 800d260:	602b      	str	r3, [r5, #0]
 800d262:	b016      	add	sp, #88	; 0x58
 800d264:	bd70      	pop	{r4, r5, r6, pc}
 800d266:	466a      	mov	r2, sp
 800d268:	f000 f848 	bl	800d2fc <_fstat_r>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	dbec      	blt.n	800d24a <__swhatbuf_r+0x12>
 800d270:	9901      	ldr	r1, [sp, #4]
 800d272:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d276:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d27a:	4259      	negs	r1, r3
 800d27c:	4159      	adcs	r1, r3
 800d27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d282:	e7eb      	b.n	800d25c <__swhatbuf_r+0x24>

0800d284 <__smakebuf_r>:
 800d284:	898b      	ldrh	r3, [r1, #12]
 800d286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d288:	079d      	lsls	r5, r3, #30
 800d28a:	4606      	mov	r6, r0
 800d28c:	460c      	mov	r4, r1
 800d28e:	d507      	bpl.n	800d2a0 <__smakebuf_r+0x1c>
 800d290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	2301      	movs	r3, #1
 800d29a:	6163      	str	r3, [r4, #20]
 800d29c:	b002      	add	sp, #8
 800d29e:	bd70      	pop	{r4, r5, r6, pc}
 800d2a0:	ab01      	add	r3, sp, #4
 800d2a2:	466a      	mov	r2, sp
 800d2a4:	f7ff ffc8 	bl	800d238 <__swhatbuf_r>
 800d2a8:	9900      	ldr	r1, [sp, #0]
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7fd fb37 	bl	800a920 <_malloc_r>
 800d2b2:	b948      	cbnz	r0, 800d2c8 <__smakebuf_r+0x44>
 800d2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b8:	059a      	lsls	r2, r3, #22
 800d2ba:	d4ef      	bmi.n	800d29c <__smakebuf_r+0x18>
 800d2bc:	f023 0303 	bic.w	r3, r3, #3
 800d2c0:	f043 0302 	orr.w	r3, r3, #2
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	e7e3      	b.n	800d290 <__smakebuf_r+0xc>
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	6020      	str	r0, [r4, #0]
 800d2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d0:	81a3      	strh	r3, [r4, #12]
 800d2d2:	9b00      	ldr	r3, [sp, #0]
 800d2d4:	6163      	str	r3, [r4, #20]
 800d2d6:	9b01      	ldr	r3, [sp, #4]
 800d2d8:	6120      	str	r0, [r4, #16]
 800d2da:	b15b      	cbz	r3, 800d2f4 <__smakebuf_r+0x70>
 800d2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	f000 f81d 	bl	800d320 <_isatty_r>
 800d2e6:	b128      	cbz	r0, 800d2f4 <__smakebuf_r+0x70>
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	f023 0303 	bic.w	r3, r3, #3
 800d2ee:	f043 0301 	orr.w	r3, r3, #1
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	431d      	orrs	r5, r3
 800d2f8:	81a5      	strh	r5, [r4, #12]
 800d2fa:	e7cf      	b.n	800d29c <__smakebuf_r+0x18>

0800d2fc <_fstat_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4d07      	ldr	r5, [pc, #28]	; (800d31c <_fstat_r+0x20>)
 800d300:	2300      	movs	r3, #0
 800d302:	4604      	mov	r4, r0
 800d304:	4608      	mov	r0, r1
 800d306:	4611      	mov	r1, r2
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f7f5 fc1a 	bl	8002b42 <_fstat>
 800d30e:	1c43      	adds	r3, r0, #1
 800d310:	d102      	bne.n	800d318 <_fstat_r+0x1c>
 800d312:	682b      	ldr	r3, [r5, #0]
 800d314:	b103      	cbz	r3, 800d318 <_fstat_r+0x1c>
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	bd38      	pop	{r3, r4, r5, pc}
 800d31a:	bf00      	nop
 800d31c:	2000681c 	.word	0x2000681c

0800d320 <_isatty_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4d06      	ldr	r5, [pc, #24]	; (800d33c <_isatty_r+0x1c>)
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	602b      	str	r3, [r5, #0]
 800d32c:	f7f5 fc19 	bl	8002b62 <_isatty>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_isatty_r+0x1a>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_isatty_r+0x1a>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	2000681c 	.word	0x2000681c

0800d340 <__assert_func>:
 800d340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d342:	4614      	mov	r4, r2
 800d344:	461a      	mov	r2, r3
 800d346:	4b09      	ldr	r3, [pc, #36]	; (800d36c <__assert_func+0x2c>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4605      	mov	r5, r0
 800d34c:	68d8      	ldr	r0, [r3, #12]
 800d34e:	b14c      	cbz	r4, 800d364 <__assert_func+0x24>
 800d350:	4b07      	ldr	r3, [pc, #28]	; (800d370 <__assert_func+0x30>)
 800d352:	9100      	str	r1, [sp, #0]
 800d354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d358:	4906      	ldr	r1, [pc, #24]	; (800d374 <__assert_func+0x34>)
 800d35a:	462b      	mov	r3, r5
 800d35c:	f000 f872 	bl	800d444 <fiprintf>
 800d360:	f000 f882 	bl	800d468 <abort>
 800d364:	4b04      	ldr	r3, [pc, #16]	; (800d378 <__assert_func+0x38>)
 800d366:	461c      	mov	r4, r3
 800d368:	e7f3      	b.n	800d352 <__assert_func+0x12>
 800d36a:	bf00      	nop
 800d36c:	2000015c 	.word	0x2000015c
 800d370:	0800ed6f 	.word	0x0800ed6f
 800d374:	0800ed7c 	.word	0x0800ed7c
 800d378:	0800edaa 	.word	0x0800edaa

0800d37c <_calloc_r>:
 800d37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d37e:	fba1 2402 	umull	r2, r4, r1, r2
 800d382:	b94c      	cbnz	r4, 800d398 <_calloc_r+0x1c>
 800d384:	4611      	mov	r1, r2
 800d386:	9201      	str	r2, [sp, #4]
 800d388:	f7fd faca 	bl	800a920 <_malloc_r>
 800d38c:	9a01      	ldr	r2, [sp, #4]
 800d38e:	4605      	mov	r5, r0
 800d390:	b930      	cbnz	r0, 800d3a0 <_calloc_r+0x24>
 800d392:	4628      	mov	r0, r5
 800d394:	b003      	add	sp, #12
 800d396:	bd30      	pop	{r4, r5, pc}
 800d398:	220c      	movs	r2, #12
 800d39a:	6002      	str	r2, [r0, #0]
 800d39c:	2500      	movs	r5, #0
 800d39e:	e7f8      	b.n	800d392 <_calloc_r+0x16>
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	f7fe fa53 	bl	800b84c <memset>
 800d3a6:	e7f4      	b.n	800d392 <_calloc_r+0x16>

0800d3a8 <__ascii_mbtowc>:
 800d3a8:	b082      	sub	sp, #8
 800d3aa:	b901      	cbnz	r1, 800d3ae <__ascii_mbtowc+0x6>
 800d3ac:	a901      	add	r1, sp, #4
 800d3ae:	b142      	cbz	r2, 800d3c2 <__ascii_mbtowc+0x1a>
 800d3b0:	b14b      	cbz	r3, 800d3c6 <__ascii_mbtowc+0x1e>
 800d3b2:	7813      	ldrb	r3, [r2, #0]
 800d3b4:	600b      	str	r3, [r1, #0]
 800d3b6:	7812      	ldrb	r2, [r2, #0]
 800d3b8:	1e10      	subs	r0, r2, #0
 800d3ba:	bf18      	it	ne
 800d3bc:	2001      	movne	r0, #1
 800d3be:	b002      	add	sp, #8
 800d3c0:	4770      	bx	lr
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	e7fb      	b.n	800d3be <__ascii_mbtowc+0x16>
 800d3c6:	f06f 0001 	mvn.w	r0, #1
 800d3ca:	e7f8      	b.n	800d3be <__ascii_mbtowc+0x16>

0800d3cc <_realloc_r>:
 800d3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d0:	4680      	mov	r8, r0
 800d3d2:	4614      	mov	r4, r2
 800d3d4:	460e      	mov	r6, r1
 800d3d6:	b921      	cbnz	r1, 800d3e2 <_realloc_r+0x16>
 800d3d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3dc:	4611      	mov	r1, r2
 800d3de:	f7fd ba9f 	b.w	800a920 <_malloc_r>
 800d3e2:	b92a      	cbnz	r2, 800d3f0 <_realloc_r+0x24>
 800d3e4:	f7ff f95a 	bl	800c69c <_free_r>
 800d3e8:	4625      	mov	r5, r4
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f0:	f000 f841 	bl	800d476 <_malloc_usable_size_r>
 800d3f4:	4284      	cmp	r4, r0
 800d3f6:	4607      	mov	r7, r0
 800d3f8:	d802      	bhi.n	800d400 <_realloc_r+0x34>
 800d3fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3fe:	d812      	bhi.n	800d426 <_realloc_r+0x5a>
 800d400:	4621      	mov	r1, r4
 800d402:	4640      	mov	r0, r8
 800d404:	f7fd fa8c 	bl	800a920 <_malloc_r>
 800d408:	4605      	mov	r5, r0
 800d40a:	2800      	cmp	r0, #0
 800d40c:	d0ed      	beq.n	800d3ea <_realloc_r+0x1e>
 800d40e:	42bc      	cmp	r4, r7
 800d410:	4622      	mov	r2, r4
 800d412:	4631      	mov	r1, r6
 800d414:	bf28      	it	cs
 800d416:	463a      	movcs	r2, r7
 800d418:	f7fe fab5 	bl	800b986 <memcpy>
 800d41c:	4631      	mov	r1, r6
 800d41e:	4640      	mov	r0, r8
 800d420:	f7ff f93c 	bl	800c69c <_free_r>
 800d424:	e7e1      	b.n	800d3ea <_realloc_r+0x1e>
 800d426:	4635      	mov	r5, r6
 800d428:	e7df      	b.n	800d3ea <_realloc_r+0x1e>

0800d42a <__ascii_wctomb>:
 800d42a:	b149      	cbz	r1, 800d440 <__ascii_wctomb+0x16>
 800d42c:	2aff      	cmp	r2, #255	; 0xff
 800d42e:	bf85      	ittet	hi
 800d430:	238a      	movhi	r3, #138	; 0x8a
 800d432:	6003      	strhi	r3, [r0, #0]
 800d434:	700a      	strbls	r2, [r1, #0]
 800d436:	f04f 30ff 	movhi.w	r0, #4294967295
 800d43a:	bf98      	it	ls
 800d43c:	2001      	movls	r0, #1
 800d43e:	4770      	bx	lr
 800d440:	4608      	mov	r0, r1
 800d442:	4770      	bx	lr

0800d444 <fiprintf>:
 800d444:	b40e      	push	{r1, r2, r3}
 800d446:	b503      	push	{r0, r1, lr}
 800d448:	4601      	mov	r1, r0
 800d44a:	ab03      	add	r3, sp, #12
 800d44c:	4805      	ldr	r0, [pc, #20]	; (800d464 <fiprintf+0x20>)
 800d44e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d452:	6800      	ldr	r0, [r0, #0]
 800d454:	9301      	str	r3, [sp, #4]
 800d456:	f000 f83f 	bl	800d4d8 <_vfiprintf_r>
 800d45a:	b002      	add	sp, #8
 800d45c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d460:	b003      	add	sp, #12
 800d462:	4770      	bx	lr
 800d464:	2000015c 	.word	0x2000015c

0800d468 <abort>:
 800d468:	b508      	push	{r3, lr}
 800d46a:	2006      	movs	r0, #6
 800d46c:	f000 f976 	bl	800d75c <raise>
 800d470:	2001      	movs	r0, #1
 800d472:	f7f5 fb17 	bl	8002aa4 <_exit>

0800d476 <_malloc_usable_size_r>:
 800d476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d47a:	1f18      	subs	r0, r3, #4
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	bfbc      	itt	lt
 800d480:	580b      	ldrlt	r3, [r1, r0]
 800d482:	18c0      	addlt	r0, r0, r3
 800d484:	4770      	bx	lr

0800d486 <__sfputc_r>:
 800d486:	6893      	ldr	r3, [r2, #8]
 800d488:	3b01      	subs	r3, #1
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	b410      	push	{r4}
 800d48e:	6093      	str	r3, [r2, #8]
 800d490:	da08      	bge.n	800d4a4 <__sfputc_r+0x1e>
 800d492:	6994      	ldr	r4, [r2, #24]
 800d494:	42a3      	cmp	r3, r4
 800d496:	db01      	blt.n	800d49c <__sfputc_r+0x16>
 800d498:	290a      	cmp	r1, #10
 800d49a:	d103      	bne.n	800d4a4 <__sfputc_r+0x1e>
 800d49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4a0:	f7fe b924 	b.w	800b6ec <__swbuf_r>
 800d4a4:	6813      	ldr	r3, [r2, #0]
 800d4a6:	1c58      	adds	r0, r3, #1
 800d4a8:	6010      	str	r0, [r2, #0]
 800d4aa:	7019      	strb	r1, [r3, #0]
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <__sfputs_r>:
 800d4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	460f      	mov	r7, r1
 800d4ba:	4614      	mov	r4, r2
 800d4bc:	18d5      	adds	r5, r2, r3
 800d4be:	42ac      	cmp	r4, r5
 800d4c0:	d101      	bne.n	800d4c6 <__sfputs_r+0x12>
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	e007      	b.n	800d4d6 <__sfputs_r+0x22>
 800d4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ca:	463a      	mov	r2, r7
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f7ff ffda 	bl	800d486 <__sfputc_r>
 800d4d2:	1c43      	adds	r3, r0, #1
 800d4d4:	d1f3      	bne.n	800d4be <__sfputs_r+0xa>
 800d4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4d8 <_vfiprintf_r>:
 800d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	460d      	mov	r5, r1
 800d4de:	b09d      	sub	sp, #116	; 0x74
 800d4e0:	4614      	mov	r4, r2
 800d4e2:	4698      	mov	r8, r3
 800d4e4:	4606      	mov	r6, r0
 800d4e6:	b118      	cbz	r0, 800d4f0 <_vfiprintf_r+0x18>
 800d4e8:	6a03      	ldr	r3, [r0, #32]
 800d4ea:	b90b      	cbnz	r3, 800d4f0 <_vfiprintf_r+0x18>
 800d4ec:	f7fd ff96 	bl	800b41c <__sinit>
 800d4f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4f2:	07d9      	lsls	r1, r3, #31
 800d4f4:	d405      	bmi.n	800d502 <_vfiprintf_r+0x2a>
 800d4f6:	89ab      	ldrh	r3, [r5, #12]
 800d4f8:	059a      	lsls	r2, r3, #22
 800d4fa:	d402      	bmi.n	800d502 <_vfiprintf_r+0x2a>
 800d4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4fe:	f7fe fa40 	bl	800b982 <__retarget_lock_acquire_recursive>
 800d502:	89ab      	ldrh	r3, [r5, #12]
 800d504:	071b      	lsls	r3, r3, #28
 800d506:	d501      	bpl.n	800d50c <_vfiprintf_r+0x34>
 800d508:	692b      	ldr	r3, [r5, #16]
 800d50a:	b99b      	cbnz	r3, 800d534 <_vfiprintf_r+0x5c>
 800d50c:	4629      	mov	r1, r5
 800d50e:	4630      	mov	r0, r6
 800d510:	f7fe f92a 	bl	800b768 <__swsetup_r>
 800d514:	b170      	cbz	r0, 800d534 <_vfiprintf_r+0x5c>
 800d516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d518:	07dc      	lsls	r4, r3, #31
 800d51a:	d504      	bpl.n	800d526 <_vfiprintf_r+0x4e>
 800d51c:	f04f 30ff 	mov.w	r0, #4294967295
 800d520:	b01d      	add	sp, #116	; 0x74
 800d522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d526:	89ab      	ldrh	r3, [r5, #12]
 800d528:	0598      	lsls	r0, r3, #22
 800d52a:	d4f7      	bmi.n	800d51c <_vfiprintf_r+0x44>
 800d52c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d52e:	f7fe fa29 	bl	800b984 <__retarget_lock_release_recursive>
 800d532:	e7f3      	b.n	800d51c <_vfiprintf_r+0x44>
 800d534:	2300      	movs	r3, #0
 800d536:	9309      	str	r3, [sp, #36]	; 0x24
 800d538:	2320      	movs	r3, #32
 800d53a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d53e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d542:	2330      	movs	r3, #48	; 0x30
 800d544:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d6f8 <_vfiprintf_r+0x220>
 800d548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d54c:	f04f 0901 	mov.w	r9, #1
 800d550:	4623      	mov	r3, r4
 800d552:	469a      	mov	sl, r3
 800d554:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d558:	b10a      	cbz	r2, 800d55e <_vfiprintf_r+0x86>
 800d55a:	2a25      	cmp	r2, #37	; 0x25
 800d55c:	d1f9      	bne.n	800d552 <_vfiprintf_r+0x7a>
 800d55e:	ebba 0b04 	subs.w	fp, sl, r4
 800d562:	d00b      	beq.n	800d57c <_vfiprintf_r+0xa4>
 800d564:	465b      	mov	r3, fp
 800d566:	4622      	mov	r2, r4
 800d568:	4629      	mov	r1, r5
 800d56a:	4630      	mov	r0, r6
 800d56c:	f7ff ffa2 	bl	800d4b4 <__sfputs_r>
 800d570:	3001      	adds	r0, #1
 800d572:	f000 80a9 	beq.w	800d6c8 <_vfiprintf_r+0x1f0>
 800d576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d578:	445a      	add	r2, fp
 800d57a:	9209      	str	r2, [sp, #36]	; 0x24
 800d57c:	f89a 3000 	ldrb.w	r3, [sl]
 800d580:	2b00      	cmp	r3, #0
 800d582:	f000 80a1 	beq.w	800d6c8 <_vfiprintf_r+0x1f0>
 800d586:	2300      	movs	r3, #0
 800d588:	f04f 32ff 	mov.w	r2, #4294967295
 800d58c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d590:	f10a 0a01 	add.w	sl, sl, #1
 800d594:	9304      	str	r3, [sp, #16]
 800d596:	9307      	str	r3, [sp, #28]
 800d598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d59c:	931a      	str	r3, [sp, #104]	; 0x68
 800d59e:	4654      	mov	r4, sl
 800d5a0:	2205      	movs	r2, #5
 800d5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a6:	4854      	ldr	r0, [pc, #336]	; (800d6f8 <_vfiprintf_r+0x220>)
 800d5a8:	f7f2 fe2a 	bl	8000200 <memchr>
 800d5ac:	9a04      	ldr	r2, [sp, #16]
 800d5ae:	b9d8      	cbnz	r0, 800d5e8 <_vfiprintf_r+0x110>
 800d5b0:	06d1      	lsls	r1, r2, #27
 800d5b2:	bf44      	itt	mi
 800d5b4:	2320      	movmi	r3, #32
 800d5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5ba:	0713      	lsls	r3, r2, #28
 800d5bc:	bf44      	itt	mi
 800d5be:	232b      	movmi	r3, #43	; 0x2b
 800d5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ca:	d015      	beq.n	800d5f8 <_vfiprintf_r+0x120>
 800d5cc:	9a07      	ldr	r2, [sp, #28]
 800d5ce:	4654      	mov	r4, sl
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	f04f 0c0a 	mov.w	ip, #10
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5dc:	3b30      	subs	r3, #48	; 0x30
 800d5de:	2b09      	cmp	r3, #9
 800d5e0:	d94d      	bls.n	800d67e <_vfiprintf_r+0x1a6>
 800d5e2:	b1b0      	cbz	r0, 800d612 <_vfiprintf_r+0x13a>
 800d5e4:	9207      	str	r2, [sp, #28]
 800d5e6:	e014      	b.n	800d612 <_vfiprintf_r+0x13a>
 800d5e8:	eba0 0308 	sub.w	r3, r0, r8
 800d5ec:	fa09 f303 	lsl.w	r3, r9, r3
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	9304      	str	r3, [sp, #16]
 800d5f4:	46a2      	mov	sl, r4
 800d5f6:	e7d2      	b.n	800d59e <_vfiprintf_r+0xc6>
 800d5f8:	9b03      	ldr	r3, [sp, #12]
 800d5fa:	1d19      	adds	r1, r3, #4
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	9103      	str	r1, [sp, #12]
 800d600:	2b00      	cmp	r3, #0
 800d602:	bfbb      	ittet	lt
 800d604:	425b      	neglt	r3, r3
 800d606:	f042 0202 	orrlt.w	r2, r2, #2
 800d60a:	9307      	strge	r3, [sp, #28]
 800d60c:	9307      	strlt	r3, [sp, #28]
 800d60e:	bfb8      	it	lt
 800d610:	9204      	strlt	r2, [sp, #16]
 800d612:	7823      	ldrb	r3, [r4, #0]
 800d614:	2b2e      	cmp	r3, #46	; 0x2e
 800d616:	d10c      	bne.n	800d632 <_vfiprintf_r+0x15a>
 800d618:	7863      	ldrb	r3, [r4, #1]
 800d61a:	2b2a      	cmp	r3, #42	; 0x2a
 800d61c:	d134      	bne.n	800d688 <_vfiprintf_r+0x1b0>
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	1d1a      	adds	r2, r3, #4
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	9203      	str	r2, [sp, #12]
 800d626:	2b00      	cmp	r3, #0
 800d628:	bfb8      	it	lt
 800d62a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d62e:	3402      	adds	r4, #2
 800d630:	9305      	str	r3, [sp, #20]
 800d632:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d708 <_vfiprintf_r+0x230>
 800d636:	7821      	ldrb	r1, [r4, #0]
 800d638:	2203      	movs	r2, #3
 800d63a:	4650      	mov	r0, sl
 800d63c:	f7f2 fde0 	bl	8000200 <memchr>
 800d640:	b138      	cbz	r0, 800d652 <_vfiprintf_r+0x17a>
 800d642:	9b04      	ldr	r3, [sp, #16]
 800d644:	eba0 000a 	sub.w	r0, r0, sl
 800d648:	2240      	movs	r2, #64	; 0x40
 800d64a:	4082      	lsls	r2, r0
 800d64c:	4313      	orrs	r3, r2
 800d64e:	3401      	adds	r4, #1
 800d650:	9304      	str	r3, [sp, #16]
 800d652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d656:	4829      	ldr	r0, [pc, #164]	; (800d6fc <_vfiprintf_r+0x224>)
 800d658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d65c:	2206      	movs	r2, #6
 800d65e:	f7f2 fdcf 	bl	8000200 <memchr>
 800d662:	2800      	cmp	r0, #0
 800d664:	d03f      	beq.n	800d6e6 <_vfiprintf_r+0x20e>
 800d666:	4b26      	ldr	r3, [pc, #152]	; (800d700 <_vfiprintf_r+0x228>)
 800d668:	bb1b      	cbnz	r3, 800d6b2 <_vfiprintf_r+0x1da>
 800d66a:	9b03      	ldr	r3, [sp, #12]
 800d66c:	3307      	adds	r3, #7
 800d66e:	f023 0307 	bic.w	r3, r3, #7
 800d672:	3308      	adds	r3, #8
 800d674:	9303      	str	r3, [sp, #12]
 800d676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d678:	443b      	add	r3, r7
 800d67a:	9309      	str	r3, [sp, #36]	; 0x24
 800d67c:	e768      	b.n	800d550 <_vfiprintf_r+0x78>
 800d67e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d682:	460c      	mov	r4, r1
 800d684:	2001      	movs	r0, #1
 800d686:	e7a6      	b.n	800d5d6 <_vfiprintf_r+0xfe>
 800d688:	2300      	movs	r3, #0
 800d68a:	3401      	adds	r4, #1
 800d68c:	9305      	str	r3, [sp, #20]
 800d68e:	4619      	mov	r1, r3
 800d690:	f04f 0c0a 	mov.w	ip, #10
 800d694:	4620      	mov	r0, r4
 800d696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d69a:	3a30      	subs	r2, #48	; 0x30
 800d69c:	2a09      	cmp	r2, #9
 800d69e:	d903      	bls.n	800d6a8 <_vfiprintf_r+0x1d0>
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d0c6      	beq.n	800d632 <_vfiprintf_r+0x15a>
 800d6a4:	9105      	str	r1, [sp, #20]
 800d6a6:	e7c4      	b.n	800d632 <_vfiprintf_r+0x15a>
 800d6a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6ac:	4604      	mov	r4, r0
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e7f0      	b.n	800d694 <_vfiprintf_r+0x1bc>
 800d6b2:	ab03      	add	r3, sp, #12
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	462a      	mov	r2, r5
 800d6b8:	4b12      	ldr	r3, [pc, #72]	; (800d704 <_vfiprintf_r+0x22c>)
 800d6ba:	a904      	add	r1, sp, #16
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f7fd fa5b 	bl	800ab78 <_printf_float>
 800d6c2:	4607      	mov	r7, r0
 800d6c4:	1c78      	adds	r0, r7, #1
 800d6c6:	d1d6      	bne.n	800d676 <_vfiprintf_r+0x19e>
 800d6c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6ca:	07d9      	lsls	r1, r3, #31
 800d6cc:	d405      	bmi.n	800d6da <_vfiprintf_r+0x202>
 800d6ce:	89ab      	ldrh	r3, [r5, #12]
 800d6d0:	059a      	lsls	r2, r3, #22
 800d6d2:	d402      	bmi.n	800d6da <_vfiprintf_r+0x202>
 800d6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6d6:	f7fe f955 	bl	800b984 <__retarget_lock_release_recursive>
 800d6da:	89ab      	ldrh	r3, [r5, #12]
 800d6dc:	065b      	lsls	r3, r3, #25
 800d6de:	f53f af1d 	bmi.w	800d51c <_vfiprintf_r+0x44>
 800d6e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6e4:	e71c      	b.n	800d520 <_vfiprintf_r+0x48>
 800d6e6:	ab03      	add	r3, sp, #12
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	462a      	mov	r2, r5
 800d6ec:	4b05      	ldr	r3, [pc, #20]	; (800d704 <_vfiprintf_r+0x22c>)
 800d6ee:	a904      	add	r1, sp, #16
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	f7fd fce5 	bl	800b0c0 <_printf_i>
 800d6f6:	e7e4      	b.n	800d6c2 <_vfiprintf_r+0x1ea>
 800d6f8:	0800ed54 	.word	0x0800ed54
 800d6fc:	0800ed5e 	.word	0x0800ed5e
 800d700:	0800ab79 	.word	0x0800ab79
 800d704:	0800d4b5 	.word	0x0800d4b5
 800d708:	0800ed5a 	.word	0x0800ed5a

0800d70c <_raise_r>:
 800d70c:	291f      	cmp	r1, #31
 800d70e:	b538      	push	{r3, r4, r5, lr}
 800d710:	4604      	mov	r4, r0
 800d712:	460d      	mov	r5, r1
 800d714:	d904      	bls.n	800d720 <_raise_r+0x14>
 800d716:	2316      	movs	r3, #22
 800d718:	6003      	str	r3, [r0, #0]
 800d71a:	f04f 30ff 	mov.w	r0, #4294967295
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d722:	b112      	cbz	r2, 800d72a <_raise_r+0x1e>
 800d724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d728:	b94b      	cbnz	r3, 800d73e <_raise_r+0x32>
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 f830 	bl	800d790 <_getpid_r>
 800d730:	462a      	mov	r2, r5
 800d732:	4601      	mov	r1, r0
 800d734:	4620      	mov	r0, r4
 800d736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d73a:	f000 b817 	b.w	800d76c <_kill_r>
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d00a      	beq.n	800d758 <_raise_r+0x4c>
 800d742:	1c59      	adds	r1, r3, #1
 800d744:	d103      	bne.n	800d74e <_raise_r+0x42>
 800d746:	2316      	movs	r3, #22
 800d748:	6003      	str	r3, [r0, #0]
 800d74a:	2001      	movs	r0, #1
 800d74c:	e7e7      	b.n	800d71e <_raise_r+0x12>
 800d74e:	2400      	movs	r4, #0
 800d750:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d754:	4628      	mov	r0, r5
 800d756:	4798      	blx	r3
 800d758:	2000      	movs	r0, #0
 800d75a:	e7e0      	b.n	800d71e <_raise_r+0x12>

0800d75c <raise>:
 800d75c:	4b02      	ldr	r3, [pc, #8]	; (800d768 <raise+0xc>)
 800d75e:	4601      	mov	r1, r0
 800d760:	6818      	ldr	r0, [r3, #0]
 800d762:	f7ff bfd3 	b.w	800d70c <_raise_r>
 800d766:	bf00      	nop
 800d768:	2000015c 	.word	0x2000015c

0800d76c <_kill_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4d07      	ldr	r5, [pc, #28]	; (800d78c <_kill_r+0x20>)
 800d770:	2300      	movs	r3, #0
 800d772:	4604      	mov	r4, r0
 800d774:	4608      	mov	r0, r1
 800d776:	4611      	mov	r1, r2
 800d778:	602b      	str	r3, [r5, #0]
 800d77a:	f7f5 f983 	bl	8002a84 <_kill>
 800d77e:	1c43      	adds	r3, r0, #1
 800d780:	d102      	bne.n	800d788 <_kill_r+0x1c>
 800d782:	682b      	ldr	r3, [r5, #0]
 800d784:	b103      	cbz	r3, 800d788 <_kill_r+0x1c>
 800d786:	6023      	str	r3, [r4, #0]
 800d788:	bd38      	pop	{r3, r4, r5, pc}
 800d78a:	bf00      	nop
 800d78c:	2000681c 	.word	0x2000681c

0800d790 <_getpid_r>:
 800d790:	f7f5 b970 	b.w	8002a74 <_getpid>
 800d794:	0000      	movs	r0, r0
	...

0800d798 <cos>:
 800d798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d79a:	ec53 2b10 	vmov	r2, r3, d0
 800d79e:	4826      	ldr	r0, [pc, #152]	; (800d838 <cos+0xa0>)
 800d7a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d7a4:	4281      	cmp	r1, r0
 800d7a6:	dc06      	bgt.n	800d7b6 <cos+0x1e>
 800d7a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d830 <cos+0x98>
 800d7ac:	b005      	add	sp, #20
 800d7ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7b2:	f000 b89d 	b.w	800d8f0 <__kernel_cos>
 800d7b6:	4821      	ldr	r0, [pc, #132]	; (800d83c <cos+0xa4>)
 800d7b8:	4281      	cmp	r1, r0
 800d7ba:	dd09      	ble.n	800d7d0 <cos+0x38>
 800d7bc:	ee10 0a10 	vmov	r0, s0
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	f7f2 fd79 	bl	80002b8 <__aeabi_dsub>
 800d7c6:	ec41 0b10 	vmov	d0, r0, r1
 800d7ca:	b005      	add	sp, #20
 800d7cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7d0:	4668      	mov	r0, sp
 800d7d2:	f000 fa15 	bl	800dc00 <__ieee754_rem_pio2>
 800d7d6:	f000 0003 	and.w	r0, r0, #3
 800d7da:	2801      	cmp	r0, #1
 800d7dc:	d00b      	beq.n	800d7f6 <cos+0x5e>
 800d7de:	2802      	cmp	r0, #2
 800d7e0:	d016      	beq.n	800d810 <cos+0x78>
 800d7e2:	b9e0      	cbnz	r0, 800d81e <cos+0x86>
 800d7e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7e8:	ed9d 0b00 	vldr	d0, [sp]
 800d7ec:	f000 f880 	bl	800d8f0 <__kernel_cos>
 800d7f0:	ec51 0b10 	vmov	r0, r1, d0
 800d7f4:	e7e7      	b.n	800d7c6 <cos+0x2e>
 800d7f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7fa:	ed9d 0b00 	vldr	d0, [sp]
 800d7fe:	f000 f93f 	bl	800da80 <__kernel_sin>
 800d802:	ec53 2b10 	vmov	r2, r3, d0
 800d806:	ee10 0a10 	vmov	r0, s0
 800d80a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d80e:	e7da      	b.n	800d7c6 <cos+0x2e>
 800d810:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d814:	ed9d 0b00 	vldr	d0, [sp]
 800d818:	f000 f86a 	bl	800d8f0 <__kernel_cos>
 800d81c:	e7f1      	b.n	800d802 <cos+0x6a>
 800d81e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d822:	ed9d 0b00 	vldr	d0, [sp]
 800d826:	2001      	movs	r0, #1
 800d828:	f000 f92a 	bl	800da80 <__kernel_sin>
 800d82c:	e7e0      	b.n	800d7f0 <cos+0x58>
 800d82e:	bf00      	nop
	...
 800d838:	3fe921fb 	.word	0x3fe921fb
 800d83c:	7fefffff 	.word	0x7fefffff

0800d840 <sin>:
 800d840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d842:	ec53 2b10 	vmov	r2, r3, d0
 800d846:	4828      	ldr	r0, [pc, #160]	; (800d8e8 <sin+0xa8>)
 800d848:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d84c:	4281      	cmp	r1, r0
 800d84e:	dc07      	bgt.n	800d860 <sin+0x20>
 800d850:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d8e0 <sin+0xa0>
 800d854:	2000      	movs	r0, #0
 800d856:	b005      	add	sp, #20
 800d858:	f85d eb04 	ldr.w	lr, [sp], #4
 800d85c:	f000 b910 	b.w	800da80 <__kernel_sin>
 800d860:	4822      	ldr	r0, [pc, #136]	; (800d8ec <sin+0xac>)
 800d862:	4281      	cmp	r1, r0
 800d864:	dd09      	ble.n	800d87a <sin+0x3a>
 800d866:	ee10 0a10 	vmov	r0, s0
 800d86a:	4619      	mov	r1, r3
 800d86c:	f7f2 fd24 	bl	80002b8 <__aeabi_dsub>
 800d870:	ec41 0b10 	vmov	d0, r0, r1
 800d874:	b005      	add	sp, #20
 800d876:	f85d fb04 	ldr.w	pc, [sp], #4
 800d87a:	4668      	mov	r0, sp
 800d87c:	f000 f9c0 	bl	800dc00 <__ieee754_rem_pio2>
 800d880:	f000 0003 	and.w	r0, r0, #3
 800d884:	2801      	cmp	r0, #1
 800d886:	d00c      	beq.n	800d8a2 <sin+0x62>
 800d888:	2802      	cmp	r0, #2
 800d88a:	d011      	beq.n	800d8b0 <sin+0x70>
 800d88c:	b9f0      	cbnz	r0, 800d8cc <sin+0x8c>
 800d88e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d892:	ed9d 0b00 	vldr	d0, [sp]
 800d896:	2001      	movs	r0, #1
 800d898:	f000 f8f2 	bl	800da80 <__kernel_sin>
 800d89c:	ec51 0b10 	vmov	r0, r1, d0
 800d8a0:	e7e6      	b.n	800d870 <sin+0x30>
 800d8a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8a6:	ed9d 0b00 	vldr	d0, [sp]
 800d8aa:	f000 f821 	bl	800d8f0 <__kernel_cos>
 800d8ae:	e7f5      	b.n	800d89c <sin+0x5c>
 800d8b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8b4:	ed9d 0b00 	vldr	d0, [sp]
 800d8b8:	2001      	movs	r0, #1
 800d8ba:	f000 f8e1 	bl	800da80 <__kernel_sin>
 800d8be:	ec53 2b10 	vmov	r2, r3, d0
 800d8c2:	ee10 0a10 	vmov	r0, s0
 800d8c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d8ca:	e7d1      	b.n	800d870 <sin+0x30>
 800d8cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8d0:	ed9d 0b00 	vldr	d0, [sp]
 800d8d4:	f000 f80c 	bl	800d8f0 <__kernel_cos>
 800d8d8:	e7f1      	b.n	800d8be <sin+0x7e>
 800d8da:	bf00      	nop
 800d8dc:	f3af 8000 	nop.w
	...
 800d8e8:	3fe921fb 	.word	0x3fe921fb
 800d8ec:	7fefffff 	.word	0x7fefffff

0800d8f0 <__kernel_cos>:
 800d8f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f4:	ec57 6b10 	vmov	r6, r7, d0
 800d8f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d8fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d900:	ed8d 1b00 	vstr	d1, [sp]
 800d904:	da07      	bge.n	800d916 <__kernel_cos+0x26>
 800d906:	ee10 0a10 	vmov	r0, s0
 800d90a:	4639      	mov	r1, r7
 800d90c:	f7f3 f93c 	bl	8000b88 <__aeabi_d2iz>
 800d910:	2800      	cmp	r0, #0
 800d912:	f000 8088 	beq.w	800da26 <__kernel_cos+0x136>
 800d916:	4632      	mov	r2, r6
 800d918:	463b      	mov	r3, r7
 800d91a:	4630      	mov	r0, r6
 800d91c:	4639      	mov	r1, r7
 800d91e:	f7f2 fe83 	bl	8000628 <__aeabi_dmul>
 800d922:	4b51      	ldr	r3, [pc, #324]	; (800da68 <__kernel_cos+0x178>)
 800d924:	2200      	movs	r2, #0
 800d926:	4604      	mov	r4, r0
 800d928:	460d      	mov	r5, r1
 800d92a:	f7f2 fe7d 	bl	8000628 <__aeabi_dmul>
 800d92e:	a340      	add	r3, pc, #256	; (adr r3, 800da30 <__kernel_cos+0x140>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	4682      	mov	sl, r0
 800d936:	468b      	mov	fp, r1
 800d938:	4620      	mov	r0, r4
 800d93a:	4629      	mov	r1, r5
 800d93c:	f7f2 fe74 	bl	8000628 <__aeabi_dmul>
 800d940:	a33d      	add	r3, pc, #244	; (adr r3, 800da38 <__kernel_cos+0x148>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	f7f2 fcb9 	bl	80002bc <__adddf3>
 800d94a:	4622      	mov	r2, r4
 800d94c:	462b      	mov	r3, r5
 800d94e:	f7f2 fe6b 	bl	8000628 <__aeabi_dmul>
 800d952:	a33b      	add	r3, pc, #236	; (adr r3, 800da40 <__kernel_cos+0x150>)
 800d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d958:	f7f2 fcae 	bl	80002b8 <__aeabi_dsub>
 800d95c:	4622      	mov	r2, r4
 800d95e:	462b      	mov	r3, r5
 800d960:	f7f2 fe62 	bl	8000628 <__aeabi_dmul>
 800d964:	a338      	add	r3, pc, #224	; (adr r3, 800da48 <__kernel_cos+0x158>)
 800d966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96a:	f7f2 fca7 	bl	80002bc <__adddf3>
 800d96e:	4622      	mov	r2, r4
 800d970:	462b      	mov	r3, r5
 800d972:	f7f2 fe59 	bl	8000628 <__aeabi_dmul>
 800d976:	a336      	add	r3, pc, #216	; (adr r3, 800da50 <__kernel_cos+0x160>)
 800d978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97c:	f7f2 fc9c 	bl	80002b8 <__aeabi_dsub>
 800d980:	4622      	mov	r2, r4
 800d982:	462b      	mov	r3, r5
 800d984:	f7f2 fe50 	bl	8000628 <__aeabi_dmul>
 800d988:	a333      	add	r3, pc, #204	; (adr r3, 800da58 <__kernel_cos+0x168>)
 800d98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98e:	f7f2 fc95 	bl	80002bc <__adddf3>
 800d992:	4622      	mov	r2, r4
 800d994:	462b      	mov	r3, r5
 800d996:	f7f2 fe47 	bl	8000628 <__aeabi_dmul>
 800d99a:	4622      	mov	r2, r4
 800d99c:	462b      	mov	r3, r5
 800d99e:	f7f2 fe43 	bl	8000628 <__aeabi_dmul>
 800d9a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	460d      	mov	r5, r1
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	4639      	mov	r1, r7
 800d9ae:	f7f2 fe3b 	bl	8000628 <__aeabi_dmul>
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	4629      	mov	r1, r5
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f7f2 fc7d 	bl	80002b8 <__aeabi_dsub>
 800d9be:	4b2b      	ldr	r3, [pc, #172]	; (800da6c <__kernel_cos+0x17c>)
 800d9c0:	4598      	cmp	r8, r3
 800d9c2:	4606      	mov	r6, r0
 800d9c4:	460f      	mov	r7, r1
 800d9c6:	dc10      	bgt.n	800d9ea <__kernel_cos+0xfa>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	4650      	mov	r0, sl
 800d9ce:	4659      	mov	r1, fp
 800d9d0:	f7f2 fc72 	bl	80002b8 <__aeabi_dsub>
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4926      	ldr	r1, [pc, #152]	; (800da70 <__kernel_cos+0x180>)
 800d9d8:	4602      	mov	r2, r0
 800d9da:	2000      	movs	r0, #0
 800d9dc:	f7f2 fc6c 	bl	80002b8 <__aeabi_dsub>
 800d9e0:	ec41 0b10 	vmov	d0, r0, r1
 800d9e4:	b003      	add	sp, #12
 800d9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ea:	4b22      	ldr	r3, [pc, #136]	; (800da74 <__kernel_cos+0x184>)
 800d9ec:	4920      	ldr	r1, [pc, #128]	; (800da70 <__kernel_cos+0x180>)
 800d9ee:	4598      	cmp	r8, r3
 800d9f0:	bfcc      	ite	gt
 800d9f2:	4d21      	ldrgt	r5, [pc, #132]	; (800da78 <__kernel_cos+0x188>)
 800d9f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d9f8:	2400      	movs	r4, #0
 800d9fa:	4622      	mov	r2, r4
 800d9fc:	462b      	mov	r3, r5
 800d9fe:	2000      	movs	r0, #0
 800da00:	f7f2 fc5a 	bl	80002b8 <__aeabi_dsub>
 800da04:	4622      	mov	r2, r4
 800da06:	4680      	mov	r8, r0
 800da08:	4689      	mov	r9, r1
 800da0a:	462b      	mov	r3, r5
 800da0c:	4650      	mov	r0, sl
 800da0e:	4659      	mov	r1, fp
 800da10:	f7f2 fc52 	bl	80002b8 <__aeabi_dsub>
 800da14:	4632      	mov	r2, r6
 800da16:	463b      	mov	r3, r7
 800da18:	f7f2 fc4e 	bl	80002b8 <__aeabi_dsub>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	4640      	mov	r0, r8
 800da22:	4649      	mov	r1, r9
 800da24:	e7da      	b.n	800d9dc <__kernel_cos+0xec>
 800da26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800da60 <__kernel_cos+0x170>
 800da2a:	e7db      	b.n	800d9e4 <__kernel_cos+0xf4>
 800da2c:	f3af 8000 	nop.w
 800da30:	be8838d4 	.word	0xbe8838d4
 800da34:	bda8fae9 	.word	0xbda8fae9
 800da38:	bdb4b1c4 	.word	0xbdb4b1c4
 800da3c:	3e21ee9e 	.word	0x3e21ee9e
 800da40:	809c52ad 	.word	0x809c52ad
 800da44:	3e927e4f 	.word	0x3e927e4f
 800da48:	19cb1590 	.word	0x19cb1590
 800da4c:	3efa01a0 	.word	0x3efa01a0
 800da50:	16c15177 	.word	0x16c15177
 800da54:	3f56c16c 	.word	0x3f56c16c
 800da58:	5555554c 	.word	0x5555554c
 800da5c:	3fa55555 	.word	0x3fa55555
 800da60:	00000000 	.word	0x00000000
 800da64:	3ff00000 	.word	0x3ff00000
 800da68:	3fe00000 	.word	0x3fe00000
 800da6c:	3fd33332 	.word	0x3fd33332
 800da70:	3ff00000 	.word	0x3ff00000
 800da74:	3fe90000 	.word	0x3fe90000
 800da78:	3fd20000 	.word	0x3fd20000
 800da7c:	00000000 	.word	0x00000000

0800da80 <__kernel_sin>:
 800da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da84:	ed2d 8b04 	vpush	{d8-d9}
 800da88:	eeb0 8a41 	vmov.f32	s16, s2
 800da8c:	eef0 8a61 	vmov.f32	s17, s3
 800da90:	ec55 4b10 	vmov	r4, r5, d0
 800da94:	b083      	sub	sp, #12
 800da96:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800da9a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800da9e:	9001      	str	r0, [sp, #4]
 800daa0:	da06      	bge.n	800dab0 <__kernel_sin+0x30>
 800daa2:	ee10 0a10 	vmov	r0, s0
 800daa6:	4629      	mov	r1, r5
 800daa8:	f7f3 f86e 	bl	8000b88 <__aeabi_d2iz>
 800daac:	2800      	cmp	r0, #0
 800daae:	d051      	beq.n	800db54 <__kernel_sin+0xd4>
 800dab0:	4622      	mov	r2, r4
 800dab2:	462b      	mov	r3, r5
 800dab4:	4620      	mov	r0, r4
 800dab6:	4629      	mov	r1, r5
 800dab8:	f7f2 fdb6 	bl	8000628 <__aeabi_dmul>
 800dabc:	4682      	mov	sl, r0
 800dabe:	468b      	mov	fp, r1
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	4620      	mov	r0, r4
 800dac6:	4629      	mov	r1, r5
 800dac8:	f7f2 fdae 	bl	8000628 <__aeabi_dmul>
 800dacc:	a341      	add	r3, pc, #260	; (adr r3, 800dbd4 <__kernel_sin+0x154>)
 800dace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad2:	4680      	mov	r8, r0
 800dad4:	4689      	mov	r9, r1
 800dad6:	4650      	mov	r0, sl
 800dad8:	4659      	mov	r1, fp
 800dada:	f7f2 fda5 	bl	8000628 <__aeabi_dmul>
 800dade:	a33f      	add	r3, pc, #252	; (adr r3, 800dbdc <__kernel_sin+0x15c>)
 800dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae4:	f7f2 fbe8 	bl	80002b8 <__aeabi_dsub>
 800dae8:	4652      	mov	r2, sl
 800daea:	465b      	mov	r3, fp
 800daec:	f7f2 fd9c 	bl	8000628 <__aeabi_dmul>
 800daf0:	a33c      	add	r3, pc, #240	; (adr r3, 800dbe4 <__kernel_sin+0x164>)
 800daf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf6:	f7f2 fbe1 	bl	80002bc <__adddf3>
 800dafa:	4652      	mov	r2, sl
 800dafc:	465b      	mov	r3, fp
 800dafe:	f7f2 fd93 	bl	8000628 <__aeabi_dmul>
 800db02:	a33a      	add	r3, pc, #232	; (adr r3, 800dbec <__kernel_sin+0x16c>)
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	f7f2 fbd6 	bl	80002b8 <__aeabi_dsub>
 800db0c:	4652      	mov	r2, sl
 800db0e:	465b      	mov	r3, fp
 800db10:	f7f2 fd8a 	bl	8000628 <__aeabi_dmul>
 800db14:	a337      	add	r3, pc, #220	; (adr r3, 800dbf4 <__kernel_sin+0x174>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fbcf 	bl	80002bc <__adddf3>
 800db1e:	9b01      	ldr	r3, [sp, #4]
 800db20:	4606      	mov	r6, r0
 800db22:	460f      	mov	r7, r1
 800db24:	b9eb      	cbnz	r3, 800db62 <__kernel_sin+0xe2>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	4650      	mov	r0, sl
 800db2c:	4659      	mov	r1, fp
 800db2e:	f7f2 fd7b 	bl	8000628 <__aeabi_dmul>
 800db32:	a325      	add	r3, pc, #148	; (adr r3, 800dbc8 <__kernel_sin+0x148>)
 800db34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db38:	f7f2 fbbe 	bl	80002b8 <__aeabi_dsub>
 800db3c:	4642      	mov	r2, r8
 800db3e:	464b      	mov	r3, r9
 800db40:	f7f2 fd72 	bl	8000628 <__aeabi_dmul>
 800db44:	4602      	mov	r2, r0
 800db46:	460b      	mov	r3, r1
 800db48:	4620      	mov	r0, r4
 800db4a:	4629      	mov	r1, r5
 800db4c:	f7f2 fbb6 	bl	80002bc <__adddf3>
 800db50:	4604      	mov	r4, r0
 800db52:	460d      	mov	r5, r1
 800db54:	ec45 4b10 	vmov	d0, r4, r5
 800db58:	b003      	add	sp, #12
 800db5a:	ecbd 8b04 	vpop	{d8-d9}
 800db5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db62:	4b1b      	ldr	r3, [pc, #108]	; (800dbd0 <__kernel_sin+0x150>)
 800db64:	ec51 0b18 	vmov	r0, r1, d8
 800db68:	2200      	movs	r2, #0
 800db6a:	f7f2 fd5d 	bl	8000628 <__aeabi_dmul>
 800db6e:	4632      	mov	r2, r6
 800db70:	ec41 0b19 	vmov	d9, r0, r1
 800db74:	463b      	mov	r3, r7
 800db76:	4640      	mov	r0, r8
 800db78:	4649      	mov	r1, r9
 800db7a:	f7f2 fd55 	bl	8000628 <__aeabi_dmul>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	ec51 0b19 	vmov	r0, r1, d9
 800db86:	f7f2 fb97 	bl	80002b8 <__aeabi_dsub>
 800db8a:	4652      	mov	r2, sl
 800db8c:	465b      	mov	r3, fp
 800db8e:	f7f2 fd4b 	bl	8000628 <__aeabi_dmul>
 800db92:	ec53 2b18 	vmov	r2, r3, d8
 800db96:	f7f2 fb8f 	bl	80002b8 <__aeabi_dsub>
 800db9a:	a30b      	add	r3, pc, #44	; (adr r3, 800dbc8 <__kernel_sin+0x148>)
 800db9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba0:	4606      	mov	r6, r0
 800dba2:	460f      	mov	r7, r1
 800dba4:	4640      	mov	r0, r8
 800dba6:	4649      	mov	r1, r9
 800dba8:	f7f2 fd3e 	bl	8000628 <__aeabi_dmul>
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	4639      	mov	r1, r7
 800dbb4:	f7f2 fb82 	bl	80002bc <__adddf3>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	4629      	mov	r1, r5
 800dbc0:	f7f2 fb7a 	bl	80002b8 <__aeabi_dsub>
 800dbc4:	e7c4      	b.n	800db50 <__kernel_sin+0xd0>
 800dbc6:	bf00      	nop
 800dbc8:	55555549 	.word	0x55555549
 800dbcc:	3fc55555 	.word	0x3fc55555
 800dbd0:	3fe00000 	.word	0x3fe00000
 800dbd4:	5acfd57c 	.word	0x5acfd57c
 800dbd8:	3de5d93a 	.word	0x3de5d93a
 800dbdc:	8a2b9ceb 	.word	0x8a2b9ceb
 800dbe0:	3e5ae5e6 	.word	0x3e5ae5e6
 800dbe4:	57b1fe7d 	.word	0x57b1fe7d
 800dbe8:	3ec71de3 	.word	0x3ec71de3
 800dbec:	19c161d5 	.word	0x19c161d5
 800dbf0:	3f2a01a0 	.word	0x3f2a01a0
 800dbf4:	1110f8a6 	.word	0x1110f8a6
 800dbf8:	3f811111 	.word	0x3f811111
 800dbfc:	00000000 	.word	0x00000000

0800dc00 <__ieee754_rem_pio2>:
 800dc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	ed2d 8b02 	vpush	{d8}
 800dc08:	ec55 4b10 	vmov	r4, r5, d0
 800dc0c:	4bca      	ldr	r3, [pc, #808]	; (800df38 <__ieee754_rem_pio2+0x338>)
 800dc0e:	b08b      	sub	sp, #44	; 0x2c
 800dc10:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800dc14:	4598      	cmp	r8, r3
 800dc16:	4682      	mov	sl, r0
 800dc18:	9502      	str	r5, [sp, #8]
 800dc1a:	dc08      	bgt.n	800dc2e <__ieee754_rem_pio2+0x2e>
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	2300      	movs	r3, #0
 800dc20:	ed80 0b00 	vstr	d0, [r0]
 800dc24:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dc28:	f04f 0b00 	mov.w	fp, #0
 800dc2c:	e028      	b.n	800dc80 <__ieee754_rem_pio2+0x80>
 800dc2e:	4bc3      	ldr	r3, [pc, #780]	; (800df3c <__ieee754_rem_pio2+0x33c>)
 800dc30:	4598      	cmp	r8, r3
 800dc32:	dc78      	bgt.n	800dd26 <__ieee754_rem_pio2+0x126>
 800dc34:	9b02      	ldr	r3, [sp, #8]
 800dc36:	4ec2      	ldr	r6, [pc, #776]	; (800df40 <__ieee754_rem_pio2+0x340>)
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	ee10 0a10 	vmov	r0, s0
 800dc3e:	a3b0      	add	r3, pc, #704	; (adr r3, 800df00 <__ieee754_rem_pio2+0x300>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	4629      	mov	r1, r5
 800dc46:	dd39      	ble.n	800dcbc <__ieee754_rem_pio2+0xbc>
 800dc48:	f7f2 fb36 	bl	80002b8 <__aeabi_dsub>
 800dc4c:	45b0      	cmp	r8, r6
 800dc4e:	4604      	mov	r4, r0
 800dc50:	460d      	mov	r5, r1
 800dc52:	d01b      	beq.n	800dc8c <__ieee754_rem_pio2+0x8c>
 800dc54:	a3ac      	add	r3, pc, #688	; (adr r3, 800df08 <__ieee754_rem_pio2+0x308>)
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	f7f2 fb2d 	bl	80002b8 <__aeabi_dsub>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	460b      	mov	r3, r1
 800dc62:	e9ca 2300 	strd	r2, r3, [sl]
 800dc66:	4620      	mov	r0, r4
 800dc68:	4629      	mov	r1, r5
 800dc6a:	f7f2 fb25 	bl	80002b8 <__aeabi_dsub>
 800dc6e:	a3a6      	add	r3, pc, #664	; (adr r3, 800df08 <__ieee754_rem_pio2+0x308>)
 800dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc74:	f7f2 fb20 	bl	80002b8 <__aeabi_dsub>
 800dc78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc7c:	f04f 0b01 	mov.w	fp, #1
 800dc80:	4658      	mov	r0, fp
 800dc82:	b00b      	add	sp, #44	; 0x2c
 800dc84:	ecbd 8b02 	vpop	{d8}
 800dc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc8c:	a3a0      	add	r3, pc, #640	; (adr r3, 800df10 <__ieee754_rem_pio2+0x310>)
 800dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc92:	f7f2 fb11 	bl	80002b8 <__aeabi_dsub>
 800dc96:	a3a0      	add	r3, pc, #640	; (adr r3, 800df18 <__ieee754_rem_pio2+0x318>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	4604      	mov	r4, r0
 800dc9e:	460d      	mov	r5, r1
 800dca0:	f7f2 fb0a 	bl	80002b8 <__aeabi_dsub>
 800dca4:	4602      	mov	r2, r0
 800dca6:	460b      	mov	r3, r1
 800dca8:	e9ca 2300 	strd	r2, r3, [sl]
 800dcac:	4620      	mov	r0, r4
 800dcae:	4629      	mov	r1, r5
 800dcb0:	f7f2 fb02 	bl	80002b8 <__aeabi_dsub>
 800dcb4:	a398      	add	r3, pc, #608	; (adr r3, 800df18 <__ieee754_rem_pio2+0x318>)
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	e7db      	b.n	800dc74 <__ieee754_rem_pio2+0x74>
 800dcbc:	f7f2 fafe 	bl	80002bc <__adddf3>
 800dcc0:	45b0      	cmp	r8, r6
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	460d      	mov	r5, r1
 800dcc6:	d016      	beq.n	800dcf6 <__ieee754_rem_pio2+0xf6>
 800dcc8:	a38f      	add	r3, pc, #572	; (adr r3, 800df08 <__ieee754_rem_pio2+0x308>)
 800dcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcce:	f7f2 faf5 	bl	80002bc <__adddf3>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	e9ca 2300 	strd	r2, r3, [sl]
 800dcda:	4620      	mov	r0, r4
 800dcdc:	4629      	mov	r1, r5
 800dcde:	f7f2 faeb 	bl	80002b8 <__aeabi_dsub>
 800dce2:	a389      	add	r3, pc, #548	; (adr r3, 800df08 <__ieee754_rem_pio2+0x308>)
 800dce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce8:	f7f2 fae8 	bl	80002bc <__adddf3>
 800dcec:	f04f 3bff 	mov.w	fp, #4294967295
 800dcf0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dcf4:	e7c4      	b.n	800dc80 <__ieee754_rem_pio2+0x80>
 800dcf6:	a386      	add	r3, pc, #536	; (adr r3, 800df10 <__ieee754_rem_pio2+0x310>)
 800dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfc:	f7f2 fade 	bl	80002bc <__adddf3>
 800dd00:	a385      	add	r3, pc, #532	; (adr r3, 800df18 <__ieee754_rem_pio2+0x318>)
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	4604      	mov	r4, r0
 800dd08:	460d      	mov	r5, r1
 800dd0a:	f7f2 fad7 	bl	80002bc <__adddf3>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	460b      	mov	r3, r1
 800dd12:	e9ca 2300 	strd	r2, r3, [sl]
 800dd16:	4620      	mov	r0, r4
 800dd18:	4629      	mov	r1, r5
 800dd1a:	f7f2 facd 	bl	80002b8 <__aeabi_dsub>
 800dd1e:	a37e      	add	r3, pc, #504	; (adr r3, 800df18 <__ieee754_rem_pio2+0x318>)
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	e7e0      	b.n	800dce8 <__ieee754_rem_pio2+0xe8>
 800dd26:	4b87      	ldr	r3, [pc, #540]	; (800df44 <__ieee754_rem_pio2+0x344>)
 800dd28:	4598      	cmp	r8, r3
 800dd2a:	f300 80d8 	bgt.w	800dede <__ieee754_rem_pio2+0x2de>
 800dd2e:	f000 f96d 	bl	800e00c <fabs>
 800dd32:	ec55 4b10 	vmov	r4, r5, d0
 800dd36:	ee10 0a10 	vmov	r0, s0
 800dd3a:	a379      	add	r3, pc, #484	; (adr r3, 800df20 <__ieee754_rem_pio2+0x320>)
 800dd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd40:	4629      	mov	r1, r5
 800dd42:	f7f2 fc71 	bl	8000628 <__aeabi_dmul>
 800dd46:	4b80      	ldr	r3, [pc, #512]	; (800df48 <__ieee754_rem_pio2+0x348>)
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f7f2 fab7 	bl	80002bc <__adddf3>
 800dd4e:	f7f2 ff1b 	bl	8000b88 <__aeabi_d2iz>
 800dd52:	4683      	mov	fp, r0
 800dd54:	f7f2 fbfe 	bl	8000554 <__aeabi_i2d>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	ec43 2b18 	vmov	d8, r2, r3
 800dd60:	a367      	add	r3, pc, #412	; (adr r3, 800df00 <__ieee754_rem_pio2+0x300>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f7f2 fc5f 	bl	8000628 <__aeabi_dmul>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4620      	mov	r0, r4
 800dd70:	4629      	mov	r1, r5
 800dd72:	f7f2 faa1 	bl	80002b8 <__aeabi_dsub>
 800dd76:	a364      	add	r3, pc, #400	; (adr r3, 800df08 <__ieee754_rem_pio2+0x308>)
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	4606      	mov	r6, r0
 800dd7e:	460f      	mov	r7, r1
 800dd80:	ec51 0b18 	vmov	r0, r1, d8
 800dd84:	f7f2 fc50 	bl	8000628 <__aeabi_dmul>
 800dd88:	f1bb 0f1f 	cmp.w	fp, #31
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	460d      	mov	r5, r1
 800dd90:	dc0d      	bgt.n	800ddae <__ieee754_rem_pio2+0x1ae>
 800dd92:	4b6e      	ldr	r3, [pc, #440]	; (800df4c <__ieee754_rem_pio2+0x34c>)
 800dd94:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dd98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd9c:	4543      	cmp	r3, r8
 800dd9e:	d006      	beq.n	800ddae <__ieee754_rem_pio2+0x1ae>
 800dda0:	4622      	mov	r2, r4
 800dda2:	462b      	mov	r3, r5
 800dda4:	4630      	mov	r0, r6
 800dda6:	4639      	mov	r1, r7
 800dda8:	f7f2 fa86 	bl	80002b8 <__aeabi_dsub>
 800ddac:	e00e      	b.n	800ddcc <__ieee754_rem_pio2+0x1cc>
 800ddae:	462b      	mov	r3, r5
 800ddb0:	4622      	mov	r2, r4
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	f7f2 fa7f 	bl	80002b8 <__aeabi_dsub>
 800ddba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ddbe:	9303      	str	r3, [sp, #12]
 800ddc0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ddc4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ddc8:	2b10      	cmp	r3, #16
 800ddca:	dc02      	bgt.n	800ddd2 <__ieee754_rem_pio2+0x1d2>
 800ddcc:	e9ca 0100 	strd	r0, r1, [sl]
 800ddd0:	e039      	b.n	800de46 <__ieee754_rem_pio2+0x246>
 800ddd2:	a34f      	add	r3, pc, #316	; (adr r3, 800df10 <__ieee754_rem_pio2+0x310>)
 800ddd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd8:	ec51 0b18 	vmov	r0, r1, d8
 800dddc:	f7f2 fc24 	bl	8000628 <__aeabi_dmul>
 800dde0:	4604      	mov	r4, r0
 800dde2:	460d      	mov	r5, r1
 800dde4:	4602      	mov	r2, r0
 800dde6:	460b      	mov	r3, r1
 800dde8:	4630      	mov	r0, r6
 800ddea:	4639      	mov	r1, r7
 800ddec:	f7f2 fa64 	bl	80002b8 <__aeabi_dsub>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	4689      	mov	r9, r1
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	4639      	mov	r1, r7
 800ddfc:	f7f2 fa5c 	bl	80002b8 <__aeabi_dsub>
 800de00:	4622      	mov	r2, r4
 800de02:	462b      	mov	r3, r5
 800de04:	f7f2 fa58 	bl	80002b8 <__aeabi_dsub>
 800de08:	a343      	add	r3, pc, #268	; (adr r3, 800df18 <__ieee754_rem_pio2+0x318>)
 800de0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0e:	4604      	mov	r4, r0
 800de10:	460d      	mov	r5, r1
 800de12:	ec51 0b18 	vmov	r0, r1, d8
 800de16:	f7f2 fc07 	bl	8000628 <__aeabi_dmul>
 800de1a:	4622      	mov	r2, r4
 800de1c:	462b      	mov	r3, r5
 800de1e:	f7f2 fa4b 	bl	80002b8 <__aeabi_dsub>
 800de22:	4602      	mov	r2, r0
 800de24:	460b      	mov	r3, r1
 800de26:	4604      	mov	r4, r0
 800de28:	460d      	mov	r5, r1
 800de2a:	4640      	mov	r0, r8
 800de2c:	4649      	mov	r1, r9
 800de2e:	f7f2 fa43 	bl	80002b8 <__aeabi_dsub>
 800de32:	9a03      	ldr	r2, [sp, #12]
 800de34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de38:	1ad3      	subs	r3, r2, r3
 800de3a:	2b31      	cmp	r3, #49	; 0x31
 800de3c:	dc24      	bgt.n	800de88 <__ieee754_rem_pio2+0x288>
 800de3e:	e9ca 0100 	strd	r0, r1, [sl]
 800de42:	4646      	mov	r6, r8
 800de44:	464f      	mov	r7, r9
 800de46:	e9da 8900 	ldrd	r8, r9, [sl]
 800de4a:	4630      	mov	r0, r6
 800de4c:	4642      	mov	r2, r8
 800de4e:	464b      	mov	r3, r9
 800de50:	4639      	mov	r1, r7
 800de52:	f7f2 fa31 	bl	80002b8 <__aeabi_dsub>
 800de56:	462b      	mov	r3, r5
 800de58:	4622      	mov	r2, r4
 800de5a:	f7f2 fa2d 	bl	80002b8 <__aeabi_dsub>
 800de5e:	9b02      	ldr	r3, [sp, #8]
 800de60:	2b00      	cmp	r3, #0
 800de62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800de66:	f6bf af0b 	bge.w	800dc80 <__ieee754_rem_pio2+0x80>
 800de6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800de6e:	f8ca 3004 	str.w	r3, [sl, #4]
 800de72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de76:	f8ca 8000 	str.w	r8, [sl]
 800de7a:	f8ca 0008 	str.w	r0, [sl, #8]
 800de7e:	f8ca 300c 	str.w	r3, [sl, #12]
 800de82:	f1cb 0b00 	rsb	fp, fp, #0
 800de86:	e6fb      	b.n	800dc80 <__ieee754_rem_pio2+0x80>
 800de88:	a327      	add	r3, pc, #156	; (adr r3, 800df28 <__ieee754_rem_pio2+0x328>)
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	ec51 0b18 	vmov	r0, r1, d8
 800de92:	f7f2 fbc9 	bl	8000628 <__aeabi_dmul>
 800de96:	4604      	mov	r4, r0
 800de98:	460d      	mov	r5, r1
 800de9a:	4602      	mov	r2, r0
 800de9c:	460b      	mov	r3, r1
 800de9e:	4640      	mov	r0, r8
 800dea0:	4649      	mov	r1, r9
 800dea2:	f7f2 fa09 	bl	80002b8 <__aeabi_dsub>
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	4606      	mov	r6, r0
 800deac:	460f      	mov	r7, r1
 800deae:	4640      	mov	r0, r8
 800deb0:	4649      	mov	r1, r9
 800deb2:	f7f2 fa01 	bl	80002b8 <__aeabi_dsub>
 800deb6:	4622      	mov	r2, r4
 800deb8:	462b      	mov	r3, r5
 800deba:	f7f2 f9fd 	bl	80002b8 <__aeabi_dsub>
 800debe:	a31c      	add	r3, pc, #112	; (adr r3, 800df30 <__ieee754_rem_pio2+0x330>)
 800dec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec4:	4604      	mov	r4, r0
 800dec6:	460d      	mov	r5, r1
 800dec8:	ec51 0b18 	vmov	r0, r1, d8
 800decc:	f7f2 fbac 	bl	8000628 <__aeabi_dmul>
 800ded0:	4622      	mov	r2, r4
 800ded2:	462b      	mov	r3, r5
 800ded4:	f7f2 f9f0 	bl	80002b8 <__aeabi_dsub>
 800ded8:	4604      	mov	r4, r0
 800deda:	460d      	mov	r5, r1
 800dedc:	e760      	b.n	800dda0 <__ieee754_rem_pio2+0x1a0>
 800dede:	4b1c      	ldr	r3, [pc, #112]	; (800df50 <__ieee754_rem_pio2+0x350>)
 800dee0:	4598      	cmp	r8, r3
 800dee2:	dd37      	ble.n	800df54 <__ieee754_rem_pio2+0x354>
 800dee4:	ee10 2a10 	vmov	r2, s0
 800dee8:	462b      	mov	r3, r5
 800deea:	4620      	mov	r0, r4
 800deec:	4629      	mov	r1, r5
 800deee:	f7f2 f9e3 	bl	80002b8 <__aeabi_dsub>
 800def2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800def6:	e9ca 0100 	strd	r0, r1, [sl]
 800defa:	e695      	b.n	800dc28 <__ieee754_rem_pio2+0x28>
 800defc:	f3af 8000 	nop.w
 800df00:	54400000 	.word	0x54400000
 800df04:	3ff921fb 	.word	0x3ff921fb
 800df08:	1a626331 	.word	0x1a626331
 800df0c:	3dd0b461 	.word	0x3dd0b461
 800df10:	1a600000 	.word	0x1a600000
 800df14:	3dd0b461 	.word	0x3dd0b461
 800df18:	2e037073 	.word	0x2e037073
 800df1c:	3ba3198a 	.word	0x3ba3198a
 800df20:	6dc9c883 	.word	0x6dc9c883
 800df24:	3fe45f30 	.word	0x3fe45f30
 800df28:	2e000000 	.word	0x2e000000
 800df2c:	3ba3198a 	.word	0x3ba3198a
 800df30:	252049c1 	.word	0x252049c1
 800df34:	397b839a 	.word	0x397b839a
 800df38:	3fe921fb 	.word	0x3fe921fb
 800df3c:	4002d97b 	.word	0x4002d97b
 800df40:	3ff921fb 	.word	0x3ff921fb
 800df44:	413921fb 	.word	0x413921fb
 800df48:	3fe00000 	.word	0x3fe00000
 800df4c:	0800eeac 	.word	0x0800eeac
 800df50:	7fefffff 	.word	0x7fefffff
 800df54:	ea4f 5628 	mov.w	r6, r8, asr #20
 800df58:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800df5c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800df60:	4620      	mov	r0, r4
 800df62:	460d      	mov	r5, r1
 800df64:	f7f2 fe10 	bl	8000b88 <__aeabi_d2iz>
 800df68:	f7f2 faf4 	bl	8000554 <__aeabi_i2d>
 800df6c:	4602      	mov	r2, r0
 800df6e:	460b      	mov	r3, r1
 800df70:	4620      	mov	r0, r4
 800df72:	4629      	mov	r1, r5
 800df74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800df78:	f7f2 f99e 	bl	80002b8 <__aeabi_dsub>
 800df7c:	4b21      	ldr	r3, [pc, #132]	; (800e004 <__ieee754_rem_pio2+0x404>)
 800df7e:	2200      	movs	r2, #0
 800df80:	f7f2 fb52 	bl	8000628 <__aeabi_dmul>
 800df84:	460d      	mov	r5, r1
 800df86:	4604      	mov	r4, r0
 800df88:	f7f2 fdfe 	bl	8000b88 <__aeabi_d2iz>
 800df8c:	f7f2 fae2 	bl	8000554 <__aeabi_i2d>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4620      	mov	r0, r4
 800df96:	4629      	mov	r1, r5
 800df98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800df9c:	f7f2 f98c 	bl	80002b8 <__aeabi_dsub>
 800dfa0:	4b18      	ldr	r3, [pc, #96]	; (800e004 <__ieee754_rem_pio2+0x404>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f7f2 fb40 	bl	8000628 <__aeabi_dmul>
 800dfa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dfac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800dfb0:	2703      	movs	r7, #3
 800dfb2:	2400      	movs	r4, #0
 800dfb4:	2500      	movs	r5, #0
 800dfb6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800dfba:	4622      	mov	r2, r4
 800dfbc:	462b      	mov	r3, r5
 800dfbe:	46b9      	mov	r9, r7
 800dfc0:	3f01      	subs	r7, #1
 800dfc2:	f7f2 fd99 	bl	8000af8 <__aeabi_dcmpeq>
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d1f5      	bne.n	800dfb6 <__ieee754_rem_pio2+0x3b6>
 800dfca:	4b0f      	ldr	r3, [pc, #60]	; (800e008 <__ieee754_rem_pio2+0x408>)
 800dfcc:	9301      	str	r3, [sp, #4]
 800dfce:	2302      	movs	r3, #2
 800dfd0:	9300      	str	r3, [sp, #0]
 800dfd2:	4632      	mov	r2, r6
 800dfd4:	464b      	mov	r3, r9
 800dfd6:	4651      	mov	r1, sl
 800dfd8:	a804      	add	r0, sp, #16
 800dfda:	f000 f821 	bl	800e020 <__kernel_rem_pio2>
 800dfde:	9b02      	ldr	r3, [sp, #8]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	4683      	mov	fp, r0
 800dfe4:	f6bf ae4c 	bge.w	800dc80 <__ieee754_rem_pio2+0x80>
 800dfe8:	e9da 2100 	ldrd	r2, r1, [sl]
 800dfec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dff0:	e9ca 2300 	strd	r2, r3, [sl]
 800dff4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800dff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dffc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e000:	e73f      	b.n	800de82 <__ieee754_rem_pio2+0x282>
 800e002:	bf00      	nop
 800e004:	41700000 	.word	0x41700000
 800e008:	0800ef2c 	.word	0x0800ef2c

0800e00c <fabs>:
 800e00c:	ec51 0b10 	vmov	r0, r1, d0
 800e010:	ee10 2a10 	vmov	r2, s0
 800e014:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e018:	ec43 2b10 	vmov	d0, r2, r3
 800e01c:	4770      	bx	lr
	...

0800e020 <__kernel_rem_pio2>:
 800e020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e024:	ed2d 8b02 	vpush	{d8}
 800e028:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e02c:	f112 0f14 	cmn.w	r2, #20
 800e030:	9306      	str	r3, [sp, #24]
 800e032:	9104      	str	r1, [sp, #16]
 800e034:	4bc2      	ldr	r3, [pc, #776]	; (800e340 <__kernel_rem_pio2+0x320>)
 800e036:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e038:	9009      	str	r0, [sp, #36]	; 0x24
 800e03a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e03e:	9300      	str	r3, [sp, #0]
 800e040:	9b06      	ldr	r3, [sp, #24]
 800e042:	f103 33ff 	add.w	r3, r3, #4294967295
 800e046:	bfa8      	it	ge
 800e048:	1ed4      	subge	r4, r2, #3
 800e04a:	9305      	str	r3, [sp, #20]
 800e04c:	bfb2      	itee	lt
 800e04e:	2400      	movlt	r4, #0
 800e050:	2318      	movge	r3, #24
 800e052:	fb94 f4f3 	sdivge	r4, r4, r3
 800e056:	f06f 0317 	mvn.w	r3, #23
 800e05a:	fb04 3303 	mla	r3, r4, r3, r3
 800e05e:	eb03 0a02 	add.w	sl, r3, r2
 800e062:	9b00      	ldr	r3, [sp, #0]
 800e064:	9a05      	ldr	r2, [sp, #20]
 800e066:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e330 <__kernel_rem_pio2+0x310>
 800e06a:	eb03 0802 	add.w	r8, r3, r2
 800e06e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e070:	1aa7      	subs	r7, r4, r2
 800e072:	ae20      	add	r6, sp, #128	; 0x80
 800e074:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e078:	2500      	movs	r5, #0
 800e07a:	4545      	cmp	r5, r8
 800e07c:	dd13      	ble.n	800e0a6 <__kernel_rem_pio2+0x86>
 800e07e:	9b06      	ldr	r3, [sp, #24]
 800e080:	aa20      	add	r2, sp, #128	; 0x80
 800e082:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e086:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e08a:	f04f 0800 	mov.w	r8, #0
 800e08e:	9b00      	ldr	r3, [sp, #0]
 800e090:	4598      	cmp	r8, r3
 800e092:	dc31      	bgt.n	800e0f8 <__kernel_rem_pio2+0xd8>
 800e094:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e330 <__kernel_rem_pio2+0x310>
 800e098:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e09c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e0a0:	462f      	mov	r7, r5
 800e0a2:	2600      	movs	r6, #0
 800e0a4:	e01b      	b.n	800e0de <__kernel_rem_pio2+0xbe>
 800e0a6:	42ef      	cmn	r7, r5
 800e0a8:	d407      	bmi.n	800e0ba <__kernel_rem_pio2+0x9a>
 800e0aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e0ae:	f7f2 fa51 	bl	8000554 <__aeabi_i2d>
 800e0b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e0b6:	3501      	adds	r5, #1
 800e0b8:	e7df      	b.n	800e07a <__kernel_rem_pio2+0x5a>
 800e0ba:	ec51 0b18 	vmov	r0, r1, d8
 800e0be:	e7f8      	b.n	800e0b2 <__kernel_rem_pio2+0x92>
 800e0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e0c8:	f7f2 faae 	bl	8000628 <__aeabi_dmul>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0d4:	f7f2 f8f2 	bl	80002bc <__adddf3>
 800e0d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0dc:	3601      	adds	r6, #1
 800e0de:	9b05      	ldr	r3, [sp, #20]
 800e0e0:	429e      	cmp	r6, r3
 800e0e2:	f1a7 0708 	sub.w	r7, r7, #8
 800e0e6:	ddeb      	ble.n	800e0c0 <__kernel_rem_pio2+0xa0>
 800e0e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0ec:	f108 0801 	add.w	r8, r8, #1
 800e0f0:	ecab 7b02 	vstmia	fp!, {d7}
 800e0f4:	3508      	adds	r5, #8
 800e0f6:	e7ca      	b.n	800e08e <__kernel_rem_pio2+0x6e>
 800e0f8:	9b00      	ldr	r3, [sp, #0]
 800e0fa:	aa0c      	add	r2, sp, #48	; 0x30
 800e0fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e100:	930b      	str	r3, [sp, #44]	; 0x2c
 800e102:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e104:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e108:	9c00      	ldr	r4, [sp, #0]
 800e10a:	930a      	str	r3, [sp, #40]	; 0x28
 800e10c:	00e3      	lsls	r3, r4, #3
 800e10e:	9308      	str	r3, [sp, #32]
 800e110:	ab98      	add	r3, sp, #608	; 0x260
 800e112:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e116:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e11a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e11e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e120:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e124:	46c3      	mov	fp, r8
 800e126:	46a1      	mov	r9, r4
 800e128:	f1b9 0f00 	cmp.w	r9, #0
 800e12c:	f1a5 0508 	sub.w	r5, r5, #8
 800e130:	dc77      	bgt.n	800e222 <__kernel_rem_pio2+0x202>
 800e132:	ec47 6b10 	vmov	d0, r6, r7
 800e136:	4650      	mov	r0, sl
 800e138:	f000 fac2 	bl	800e6c0 <scalbn>
 800e13c:	ec57 6b10 	vmov	r6, r7, d0
 800e140:	2200      	movs	r2, #0
 800e142:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e146:	ee10 0a10 	vmov	r0, s0
 800e14a:	4639      	mov	r1, r7
 800e14c:	f7f2 fa6c 	bl	8000628 <__aeabi_dmul>
 800e150:	ec41 0b10 	vmov	d0, r0, r1
 800e154:	f000 fb34 	bl	800e7c0 <floor>
 800e158:	4b7a      	ldr	r3, [pc, #488]	; (800e344 <__kernel_rem_pio2+0x324>)
 800e15a:	ec51 0b10 	vmov	r0, r1, d0
 800e15e:	2200      	movs	r2, #0
 800e160:	f7f2 fa62 	bl	8000628 <__aeabi_dmul>
 800e164:	4602      	mov	r2, r0
 800e166:	460b      	mov	r3, r1
 800e168:	4630      	mov	r0, r6
 800e16a:	4639      	mov	r1, r7
 800e16c:	f7f2 f8a4 	bl	80002b8 <__aeabi_dsub>
 800e170:	460f      	mov	r7, r1
 800e172:	4606      	mov	r6, r0
 800e174:	f7f2 fd08 	bl	8000b88 <__aeabi_d2iz>
 800e178:	9002      	str	r0, [sp, #8]
 800e17a:	f7f2 f9eb 	bl	8000554 <__aeabi_i2d>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	4630      	mov	r0, r6
 800e184:	4639      	mov	r1, r7
 800e186:	f7f2 f897 	bl	80002b8 <__aeabi_dsub>
 800e18a:	f1ba 0f00 	cmp.w	sl, #0
 800e18e:	4606      	mov	r6, r0
 800e190:	460f      	mov	r7, r1
 800e192:	dd6d      	ble.n	800e270 <__kernel_rem_pio2+0x250>
 800e194:	1e61      	subs	r1, r4, #1
 800e196:	ab0c      	add	r3, sp, #48	; 0x30
 800e198:	9d02      	ldr	r5, [sp, #8]
 800e19a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e19e:	f1ca 0018 	rsb	r0, sl, #24
 800e1a2:	fa43 f200 	asr.w	r2, r3, r0
 800e1a6:	4415      	add	r5, r2
 800e1a8:	4082      	lsls	r2, r0
 800e1aa:	1a9b      	subs	r3, r3, r2
 800e1ac:	aa0c      	add	r2, sp, #48	; 0x30
 800e1ae:	9502      	str	r5, [sp, #8]
 800e1b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e1b4:	f1ca 0217 	rsb	r2, sl, #23
 800e1b8:	fa43 fb02 	asr.w	fp, r3, r2
 800e1bc:	f1bb 0f00 	cmp.w	fp, #0
 800e1c0:	dd65      	ble.n	800e28e <__kernel_rem_pio2+0x26e>
 800e1c2:	9b02      	ldr	r3, [sp, #8]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	9302      	str	r3, [sp, #8]
 800e1ca:	4615      	mov	r5, r2
 800e1cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e1d0:	4294      	cmp	r4, r2
 800e1d2:	f300 809f 	bgt.w	800e314 <__kernel_rem_pio2+0x2f4>
 800e1d6:	f1ba 0f00 	cmp.w	sl, #0
 800e1da:	dd07      	ble.n	800e1ec <__kernel_rem_pio2+0x1cc>
 800e1dc:	f1ba 0f01 	cmp.w	sl, #1
 800e1e0:	f000 80c1 	beq.w	800e366 <__kernel_rem_pio2+0x346>
 800e1e4:	f1ba 0f02 	cmp.w	sl, #2
 800e1e8:	f000 80c7 	beq.w	800e37a <__kernel_rem_pio2+0x35a>
 800e1ec:	f1bb 0f02 	cmp.w	fp, #2
 800e1f0:	d14d      	bne.n	800e28e <__kernel_rem_pio2+0x26e>
 800e1f2:	4632      	mov	r2, r6
 800e1f4:	463b      	mov	r3, r7
 800e1f6:	4954      	ldr	r1, [pc, #336]	; (800e348 <__kernel_rem_pio2+0x328>)
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	f7f2 f85d 	bl	80002b8 <__aeabi_dsub>
 800e1fe:	4606      	mov	r6, r0
 800e200:	460f      	mov	r7, r1
 800e202:	2d00      	cmp	r5, #0
 800e204:	d043      	beq.n	800e28e <__kernel_rem_pio2+0x26e>
 800e206:	4650      	mov	r0, sl
 800e208:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e338 <__kernel_rem_pio2+0x318>
 800e20c:	f000 fa58 	bl	800e6c0 <scalbn>
 800e210:	4630      	mov	r0, r6
 800e212:	4639      	mov	r1, r7
 800e214:	ec53 2b10 	vmov	r2, r3, d0
 800e218:	f7f2 f84e 	bl	80002b8 <__aeabi_dsub>
 800e21c:	4606      	mov	r6, r0
 800e21e:	460f      	mov	r7, r1
 800e220:	e035      	b.n	800e28e <__kernel_rem_pio2+0x26e>
 800e222:	4b4a      	ldr	r3, [pc, #296]	; (800e34c <__kernel_rem_pio2+0x32c>)
 800e224:	2200      	movs	r2, #0
 800e226:	4630      	mov	r0, r6
 800e228:	4639      	mov	r1, r7
 800e22a:	f7f2 f9fd 	bl	8000628 <__aeabi_dmul>
 800e22e:	f7f2 fcab 	bl	8000b88 <__aeabi_d2iz>
 800e232:	f7f2 f98f 	bl	8000554 <__aeabi_i2d>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	ec43 2b18 	vmov	d8, r2, r3
 800e23e:	4b44      	ldr	r3, [pc, #272]	; (800e350 <__kernel_rem_pio2+0x330>)
 800e240:	2200      	movs	r2, #0
 800e242:	f7f2 f9f1 	bl	8000628 <__aeabi_dmul>
 800e246:	4602      	mov	r2, r0
 800e248:	460b      	mov	r3, r1
 800e24a:	4630      	mov	r0, r6
 800e24c:	4639      	mov	r1, r7
 800e24e:	f7f2 f833 	bl	80002b8 <__aeabi_dsub>
 800e252:	f7f2 fc99 	bl	8000b88 <__aeabi_d2iz>
 800e256:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e25a:	f84b 0b04 	str.w	r0, [fp], #4
 800e25e:	ec51 0b18 	vmov	r0, r1, d8
 800e262:	f7f2 f82b 	bl	80002bc <__adddf3>
 800e266:	f109 39ff 	add.w	r9, r9, #4294967295
 800e26a:	4606      	mov	r6, r0
 800e26c:	460f      	mov	r7, r1
 800e26e:	e75b      	b.n	800e128 <__kernel_rem_pio2+0x108>
 800e270:	d106      	bne.n	800e280 <__kernel_rem_pio2+0x260>
 800e272:	1e63      	subs	r3, r4, #1
 800e274:	aa0c      	add	r2, sp, #48	; 0x30
 800e276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e27a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e27e:	e79d      	b.n	800e1bc <__kernel_rem_pio2+0x19c>
 800e280:	4b34      	ldr	r3, [pc, #208]	; (800e354 <__kernel_rem_pio2+0x334>)
 800e282:	2200      	movs	r2, #0
 800e284:	f7f2 fc56 	bl	8000b34 <__aeabi_dcmpge>
 800e288:	2800      	cmp	r0, #0
 800e28a:	d140      	bne.n	800e30e <__kernel_rem_pio2+0x2ee>
 800e28c:	4683      	mov	fp, r0
 800e28e:	2200      	movs	r2, #0
 800e290:	2300      	movs	r3, #0
 800e292:	4630      	mov	r0, r6
 800e294:	4639      	mov	r1, r7
 800e296:	f7f2 fc2f 	bl	8000af8 <__aeabi_dcmpeq>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	f000 80c1 	beq.w	800e422 <__kernel_rem_pio2+0x402>
 800e2a0:	1e65      	subs	r5, r4, #1
 800e2a2:	462b      	mov	r3, r5
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	9900      	ldr	r1, [sp, #0]
 800e2a8:	428b      	cmp	r3, r1
 800e2aa:	da6d      	bge.n	800e388 <__kernel_rem_pio2+0x368>
 800e2ac:	2a00      	cmp	r2, #0
 800e2ae:	f000 808a 	beq.w	800e3c6 <__kernel_rem_pio2+0x3a6>
 800e2b2:	ab0c      	add	r3, sp, #48	; 0x30
 800e2b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e2b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f000 80ae 	beq.w	800e41e <__kernel_rem_pio2+0x3fe>
 800e2c2:	4650      	mov	r0, sl
 800e2c4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e338 <__kernel_rem_pio2+0x318>
 800e2c8:	f000 f9fa 	bl	800e6c0 <scalbn>
 800e2cc:	1c6b      	adds	r3, r5, #1
 800e2ce:	00da      	lsls	r2, r3, #3
 800e2d0:	9205      	str	r2, [sp, #20]
 800e2d2:	ec57 6b10 	vmov	r6, r7, d0
 800e2d6:	aa70      	add	r2, sp, #448	; 0x1c0
 800e2d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e34c <__kernel_rem_pio2+0x32c>
 800e2dc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e2e0:	462c      	mov	r4, r5
 800e2e2:	f04f 0800 	mov.w	r8, #0
 800e2e6:	2c00      	cmp	r4, #0
 800e2e8:	f280 80d4 	bge.w	800e494 <__kernel_rem_pio2+0x474>
 800e2ec:	462c      	mov	r4, r5
 800e2ee:	2c00      	cmp	r4, #0
 800e2f0:	f2c0 8102 	blt.w	800e4f8 <__kernel_rem_pio2+0x4d8>
 800e2f4:	4b18      	ldr	r3, [pc, #96]	; (800e358 <__kernel_rem_pio2+0x338>)
 800e2f6:	461e      	mov	r6, r3
 800e2f8:	ab70      	add	r3, sp, #448	; 0x1c0
 800e2fa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e2fe:	1b2b      	subs	r3, r5, r4
 800e300:	f04f 0900 	mov.w	r9, #0
 800e304:	f04f 0a00 	mov.w	sl, #0
 800e308:	2700      	movs	r7, #0
 800e30a:	9306      	str	r3, [sp, #24]
 800e30c:	e0e6      	b.n	800e4dc <__kernel_rem_pio2+0x4bc>
 800e30e:	f04f 0b02 	mov.w	fp, #2
 800e312:	e756      	b.n	800e1c2 <__kernel_rem_pio2+0x1a2>
 800e314:	f8d8 3000 	ldr.w	r3, [r8]
 800e318:	bb05      	cbnz	r5, 800e35c <__kernel_rem_pio2+0x33c>
 800e31a:	b123      	cbz	r3, 800e326 <__kernel_rem_pio2+0x306>
 800e31c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e320:	f8c8 3000 	str.w	r3, [r8]
 800e324:	2301      	movs	r3, #1
 800e326:	3201      	adds	r2, #1
 800e328:	f108 0804 	add.w	r8, r8, #4
 800e32c:	461d      	mov	r5, r3
 800e32e:	e74f      	b.n	800e1d0 <__kernel_rem_pio2+0x1b0>
	...
 800e33c:	3ff00000 	.word	0x3ff00000
 800e340:	0800f078 	.word	0x0800f078
 800e344:	40200000 	.word	0x40200000
 800e348:	3ff00000 	.word	0x3ff00000
 800e34c:	3e700000 	.word	0x3e700000
 800e350:	41700000 	.word	0x41700000
 800e354:	3fe00000 	.word	0x3fe00000
 800e358:	0800f038 	.word	0x0800f038
 800e35c:	1acb      	subs	r3, r1, r3
 800e35e:	f8c8 3000 	str.w	r3, [r8]
 800e362:	462b      	mov	r3, r5
 800e364:	e7df      	b.n	800e326 <__kernel_rem_pio2+0x306>
 800e366:	1e62      	subs	r2, r4, #1
 800e368:	ab0c      	add	r3, sp, #48	; 0x30
 800e36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e36e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e372:	a90c      	add	r1, sp, #48	; 0x30
 800e374:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e378:	e738      	b.n	800e1ec <__kernel_rem_pio2+0x1cc>
 800e37a:	1e62      	subs	r2, r4, #1
 800e37c:	ab0c      	add	r3, sp, #48	; 0x30
 800e37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e382:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e386:	e7f4      	b.n	800e372 <__kernel_rem_pio2+0x352>
 800e388:	a90c      	add	r1, sp, #48	; 0x30
 800e38a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e38e:	3b01      	subs	r3, #1
 800e390:	430a      	orrs	r2, r1
 800e392:	e788      	b.n	800e2a6 <__kernel_rem_pio2+0x286>
 800e394:	3301      	adds	r3, #1
 800e396:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e39a:	2900      	cmp	r1, #0
 800e39c:	d0fa      	beq.n	800e394 <__kernel_rem_pio2+0x374>
 800e39e:	9a08      	ldr	r2, [sp, #32]
 800e3a0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e3a4:	446a      	add	r2, sp
 800e3a6:	3a98      	subs	r2, #152	; 0x98
 800e3a8:	9208      	str	r2, [sp, #32]
 800e3aa:	9a06      	ldr	r2, [sp, #24]
 800e3ac:	a920      	add	r1, sp, #128	; 0x80
 800e3ae:	18a2      	adds	r2, r4, r2
 800e3b0:	18e3      	adds	r3, r4, r3
 800e3b2:	f104 0801 	add.w	r8, r4, #1
 800e3b6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e3ba:	9302      	str	r3, [sp, #8]
 800e3bc:	9b02      	ldr	r3, [sp, #8]
 800e3be:	4543      	cmp	r3, r8
 800e3c0:	da04      	bge.n	800e3cc <__kernel_rem_pio2+0x3ac>
 800e3c2:	461c      	mov	r4, r3
 800e3c4:	e6a2      	b.n	800e10c <__kernel_rem_pio2+0xec>
 800e3c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	e7e4      	b.n	800e396 <__kernel_rem_pio2+0x376>
 800e3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e3d2:	f7f2 f8bf 	bl	8000554 <__aeabi_i2d>
 800e3d6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3dc:	46ab      	mov	fp, r5
 800e3de:	461c      	mov	r4, r3
 800e3e0:	f04f 0900 	mov.w	r9, #0
 800e3e4:	2600      	movs	r6, #0
 800e3e6:	2700      	movs	r7, #0
 800e3e8:	9b05      	ldr	r3, [sp, #20]
 800e3ea:	4599      	cmp	r9, r3
 800e3ec:	dd06      	ble.n	800e3fc <__kernel_rem_pio2+0x3dc>
 800e3ee:	9b08      	ldr	r3, [sp, #32]
 800e3f0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e3f4:	f108 0801 	add.w	r8, r8, #1
 800e3f8:	9308      	str	r3, [sp, #32]
 800e3fa:	e7df      	b.n	800e3bc <__kernel_rem_pio2+0x39c>
 800e3fc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e400:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e404:	f7f2 f910 	bl	8000628 <__aeabi_dmul>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	4630      	mov	r0, r6
 800e40e:	4639      	mov	r1, r7
 800e410:	f7f1 ff54 	bl	80002bc <__adddf3>
 800e414:	f109 0901 	add.w	r9, r9, #1
 800e418:	4606      	mov	r6, r0
 800e41a:	460f      	mov	r7, r1
 800e41c:	e7e4      	b.n	800e3e8 <__kernel_rem_pio2+0x3c8>
 800e41e:	3d01      	subs	r5, #1
 800e420:	e747      	b.n	800e2b2 <__kernel_rem_pio2+0x292>
 800e422:	ec47 6b10 	vmov	d0, r6, r7
 800e426:	f1ca 0000 	rsb	r0, sl, #0
 800e42a:	f000 f949 	bl	800e6c0 <scalbn>
 800e42e:	ec57 6b10 	vmov	r6, r7, d0
 800e432:	4ba0      	ldr	r3, [pc, #640]	; (800e6b4 <__kernel_rem_pio2+0x694>)
 800e434:	ee10 0a10 	vmov	r0, s0
 800e438:	2200      	movs	r2, #0
 800e43a:	4639      	mov	r1, r7
 800e43c:	f7f2 fb7a 	bl	8000b34 <__aeabi_dcmpge>
 800e440:	b1f8      	cbz	r0, 800e482 <__kernel_rem_pio2+0x462>
 800e442:	4b9d      	ldr	r3, [pc, #628]	; (800e6b8 <__kernel_rem_pio2+0x698>)
 800e444:	2200      	movs	r2, #0
 800e446:	4630      	mov	r0, r6
 800e448:	4639      	mov	r1, r7
 800e44a:	f7f2 f8ed 	bl	8000628 <__aeabi_dmul>
 800e44e:	f7f2 fb9b 	bl	8000b88 <__aeabi_d2iz>
 800e452:	4680      	mov	r8, r0
 800e454:	f7f2 f87e 	bl	8000554 <__aeabi_i2d>
 800e458:	4b96      	ldr	r3, [pc, #600]	; (800e6b4 <__kernel_rem_pio2+0x694>)
 800e45a:	2200      	movs	r2, #0
 800e45c:	f7f2 f8e4 	bl	8000628 <__aeabi_dmul>
 800e460:	460b      	mov	r3, r1
 800e462:	4602      	mov	r2, r0
 800e464:	4639      	mov	r1, r7
 800e466:	4630      	mov	r0, r6
 800e468:	f7f1 ff26 	bl	80002b8 <__aeabi_dsub>
 800e46c:	f7f2 fb8c 	bl	8000b88 <__aeabi_d2iz>
 800e470:	1c65      	adds	r5, r4, #1
 800e472:	ab0c      	add	r3, sp, #48	; 0x30
 800e474:	f10a 0a18 	add.w	sl, sl, #24
 800e478:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e47c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e480:	e71f      	b.n	800e2c2 <__kernel_rem_pio2+0x2a2>
 800e482:	4630      	mov	r0, r6
 800e484:	4639      	mov	r1, r7
 800e486:	f7f2 fb7f 	bl	8000b88 <__aeabi_d2iz>
 800e48a:	ab0c      	add	r3, sp, #48	; 0x30
 800e48c:	4625      	mov	r5, r4
 800e48e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e492:	e716      	b.n	800e2c2 <__kernel_rem_pio2+0x2a2>
 800e494:	ab0c      	add	r3, sp, #48	; 0x30
 800e496:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e49a:	f7f2 f85b 	bl	8000554 <__aeabi_i2d>
 800e49e:	4632      	mov	r2, r6
 800e4a0:	463b      	mov	r3, r7
 800e4a2:	f7f2 f8c1 	bl	8000628 <__aeabi_dmul>
 800e4a6:	4642      	mov	r2, r8
 800e4a8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e4ac:	464b      	mov	r3, r9
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	4639      	mov	r1, r7
 800e4b2:	f7f2 f8b9 	bl	8000628 <__aeabi_dmul>
 800e4b6:	3c01      	subs	r4, #1
 800e4b8:	4606      	mov	r6, r0
 800e4ba:	460f      	mov	r7, r1
 800e4bc:	e713      	b.n	800e2e6 <__kernel_rem_pio2+0x2c6>
 800e4be:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e4c2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e4c6:	f7f2 f8af 	bl	8000628 <__aeabi_dmul>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	4648      	mov	r0, r9
 800e4d0:	4651      	mov	r1, sl
 800e4d2:	f7f1 fef3 	bl	80002bc <__adddf3>
 800e4d6:	3701      	adds	r7, #1
 800e4d8:	4681      	mov	r9, r0
 800e4da:	468a      	mov	sl, r1
 800e4dc:	9b00      	ldr	r3, [sp, #0]
 800e4de:	429f      	cmp	r7, r3
 800e4e0:	dc02      	bgt.n	800e4e8 <__kernel_rem_pio2+0x4c8>
 800e4e2:	9b06      	ldr	r3, [sp, #24]
 800e4e4:	429f      	cmp	r7, r3
 800e4e6:	ddea      	ble.n	800e4be <__kernel_rem_pio2+0x49e>
 800e4e8:	9a06      	ldr	r2, [sp, #24]
 800e4ea:	ab48      	add	r3, sp, #288	; 0x120
 800e4ec:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e4f0:	e9c6 9a00 	strd	r9, sl, [r6]
 800e4f4:	3c01      	subs	r4, #1
 800e4f6:	e6fa      	b.n	800e2ee <__kernel_rem_pio2+0x2ce>
 800e4f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e4fa:	2b02      	cmp	r3, #2
 800e4fc:	dc0b      	bgt.n	800e516 <__kernel_rem_pio2+0x4f6>
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	dc39      	bgt.n	800e576 <__kernel_rem_pio2+0x556>
 800e502:	d05d      	beq.n	800e5c0 <__kernel_rem_pio2+0x5a0>
 800e504:	9b02      	ldr	r3, [sp, #8]
 800e506:	f003 0007 	and.w	r0, r3, #7
 800e50a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e50e:	ecbd 8b02 	vpop	{d8}
 800e512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e516:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e518:	2b03      	cmp	r3, #3
 800e51a:	d1f3      	bne.n	800e504 <__kernel_rem_pio2+0x4e4>
 800e51c:	9b05      	ldr	r3, [sp, #20]
 800e51e:	9500      	str	r5, [sp, #0]
 800e520:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e524:	eb0d 0403 	add.w	r4, sp, r3
 800e528:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e52c:	46a2      	mov	sl, r4
 800e52e:	9b00      	ldr	r3, [sp, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	f1aa 0a08 	sub.w	sl, sl, #8
 800e536:	dc69      	bgt.n	800e60c <__kernel_rem_pio2+0x5ec>
 800e538:	46aa      	mov	sl, r5
 800e53a:	f1ba 0f01 	cmp.w	sl, #1
 800e53e:	f1a4 0408 	sub.w	r4, r4, #8
 800e542:	f300 8083 	bgt.w	800e64c <__kernel_rem_pio2+0x62c>
 800e546:	9c05      	ldr	r4, [sp, #20]
 800e548:	ab48      	add	r3, sp, #288	; 0x120
 800e54a:	441c      	add	r4, r3
 800e54c:	2000      	movs	r0, #0
 800e54e:	2100      	movs	r1, #0
 800e550:	2d01      	cmp	r5, #1
 800e552:	f300 809a 	bgt.w	800e68a <__kernel_rem_pio2+0x66a>
 800e556:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e55a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e55e:	f1bb 0f00 	cmp.w	fp, #0
 800e562:	f040 8098 	bne.w	800e696 <__kernel_rem_pio2+0x676>
 800e566:	9b04      	ldr	r3, [sp, #16]
 800e568:	e9c3 7800 	strd	r7, r8, [r3]
 800e56c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e570:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e574:	e7c6      	b.n	800e504 <__kernel_rem_pio2+0x4e4>
 800e576:	9e05      	ldr	r6, [sp, #20]
 800e578:	ab48      	add	r3, sp, #288	; 0x120
 800e57a:	441e      	add	r6, r3
 800e57c:	462c      	mov	r4, r5
 800e57e:	2000      	movs	r0, #0
 800e580:	2100      	movs	r1, #0
 800e582:	2c00      	cmp	r4, #0
 800e584:	da33      	bge.n	800e5ee <__kernel_rem_pio2+0x5ce>
 800e586:	f1bb 0f00 	cmp.w	fp, #0
 800e58a:	d036      	beq.n	800e5fa <__kernel_rem_pio2+0x5da>
 800e58c:	4602      	mov	r2, r0
 800e58e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e592:	9c04      	ldr	r4, [sp, #16]
 800e594:	e9c4 2300 	strd	r2, r3, [r4]
 800e598:	4602      	mov	r2, r0
 800e59a:	460b      	mov	r3, r1
 800e59c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e5a0:	f7f1 fe8a 	bl	80002b8 <__aeabi_dsub>
 800e5a4:	ae4a      	add	r6, sp, #296	; 0x128
 800e5a6:	2401      	movs	r4, #1
 800e5a8:	42a5      	cmp	r5, r4
 800e5aa:	da29      	bge.n	800e600 <__kernel_rem_pio2+0x5e0>
 800e5ac:	f1bb 0f00 	cmp.w	fp, #0
 800e5b0:	d002      	beq.n	800e5b8 <__kernel_rem_pio2+0x598>
 800e5b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	9b04      	ldr	r3, [sp, #16]
 800e5ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e5be:	e7a1      	b.n	800e504 <__kernel_rem_pio2+0x4e4>
 800e5c0:	9c05      	ldr	r4, [sp, #20]
 800e5c2:	ab48      	add	r3, sp, #288	; 0x120
 800e5c4:	441c      	add	r4, r3
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	2d00      	cmp	r5, #0
 800e5cc:	da09      	bge.n	800e5e2 <__kernel_rem_pio2+0x5c2>
 800e5ce:	f1bb 0f00 	cmp.w	fp, #0
 800e5d2:	d002      	beq.n	800e5da <__kernel_rem_pio2+0x5ba>
 800e5d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5d8:	4619      	mov	r1, r3
 800e5da:	9b04      	ldr	r3, [sp, #16]
 800e5dc:	e9c3 0100 	strd	r0, r1, [r3]
 800e5e0:	e790      	b.n	800e504 <__kernel_rem_pio2+0x4e4>
 800e5e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e5e6:	f7f1 fe69 	bl	80002bc <__adddf3>
 800e5ea:	3d01      	subs	r5, #1
 800e5ec:	e7ed      	b.n	800e5ca <__kernel_rem_pio2+0x5aa>
 800e5ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e5f2:	f7f1 fe63 	bl	80002bc <__adddf3>
 800e5f6:	3c01      	subs	r4, #1
 800e5f8:	e7c3      	b.n	800e582 <__kernel_rem_pio2+0x562>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	e7c8      	b.n	800e592 <__kernel_rem_pio2+0x572>
 800e600:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e604:	f7f1 fe5a 	bl	80002bc <__adddf3>
 800e608:	3401      	adds	r4, #1
 800e60a:	e7cd      	b.n	800e5a8 <__kernel_rem_pio2+0x588>
 800e60c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e610:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e614:	9b00      	ldr	r3, [sp, #0]
 800e616:	3b01      	subs	r3, #1
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	4632      	mov	r2, r6
 800e61c:	463b      	mov	r3, r7
 800e61e:	4640      	mov	r0, r8
 800e620:	4649      	mov	r1, r9
 800e622:	f7f1 fe4b 	bl	80002bc <__adddf3>
 800e626:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e62a:	4602      	mov	r2, r0
 800e62c:	460b      	mov	r3, r1
 800e62e:	4640      	mov	r0, r8
 800e630:	4649      	mov	r1, r9
 800e632:	f7f1 fe41 	bl	80002b8 <__aeabi_dsub>
 800e636:	4632      	mov	r2, r6
 800e638:	463b      	mov	r3, r7
 800e63a:	f7f1 fe3f 	bl	80002bc <__adddf3>
 800e63e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e642:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e646:	ed8a 7b00 	vstr	d7, [sl]
 800e64a:	e770      	b.n	800e52e <__kernel_rem_pio2+0x50e>
 800e64c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e650:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e654:	4640      	mov	r0, r8
 800e656:	4632      	mov	r2, r6
 800e658:	463b      	mov	r3, r7
 800e65a:	4649      	mov	r1, r9
 800e65c:	f7f1 fe2e 	bl	80002bc <__adddf3>
 800e660:	e9cd 0100 	strd	r0, r1, [sp]
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	4640      	mov	r0, r8
 800e66a:	4649      	mov	r1, r9
 800e66c:	f7f1 fe24 	bl	80002b8 <__aeabi_dsub>
 800e670:	4632      	mov	r2, r6
 800e672:	463b      	mov	r3, r7
 800e674:	f7f1 fe22 	bl	80002bc <__adddf3>
 800e678:	ed9d 7b00 	vldr	d7, [sp]
 800e67c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e680:	ed84 7b00 	vstr	d7, [r4]
 800e684:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e688:	e757      	b.n	800e53a <__kernel_rem_pio2+0x51a>
 800e68a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e68e:	f7f1 fe15 	bl	80002bc <__adddf3>
 800e692:	3d01      	subs	r5, #1
 800e694:	e75c      	b.n	800e550 <__kernel_rem_pio2+0x530>
 800e696:	9b04      	ldr	r3, [sp, #16]
 800e698:	9a04      	ldr	r2, [sp, #16]
 800e69a:	601f      	str	r7, [r3, #0]
 800e69c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e6a0:	605c      	str	r4, [r3, #4]
 800e6a2:	609d      	str	r5, [r3, #8]
 800e6a4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e6a8:	60d3      	str	r3, [r2, #12]
 800e6aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6ae:	6110      	str	r0, [r2, #16]
 800e6b0:	6153      	str	r3, [r2, #20]
 800e6b2:	e727      	b.n	800e504 <__kernel_rem_pio2+0x4e4>
 800e6b4:	41700000 	.word	0x41700000
 800e6b8:	3e700000 	.word	0x3e700000
 800e6bc:	00000000 	.word	0x00000000

0800e6c0 <scalbn>:
 800e6c0:	b570      	push	{r4, r5, r6, lr}
 800e6c2:	ec55 4b10 	vmov	r4, r5, d0
 800e6c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e6ca:	4606      	mov	r6, r0
 800e6cc:	462b      	mov	r3, r5
 800e6ce:	b999      	cbnz	r1, 800e6f8 <scalbn+0x38>
 800e6d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e6d4:	4323      	orrs	r3, r4
 800e6d6:	d03f      	beq.n	800e758 <scalbn+0x98>
 800e6d8:	4b35      	ldr	r3, [pc, #212]	; (800e7b0 <scalbn+0xf0>)
 800e6da:	4629      	mov	r1, r5
 800e6dc:	ee10 0a10 	vmov	r0, s0
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f7f1 ffa1 	bl	8000628 <__aeabi_dmul>
 800e6e6:	4b33      	ldr	r3, [pc, #204]	; (800e7b4 <scalbn+0xf4>)
 800e6e8:	429e      	cmp	r6, r3
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	460d      	mov	r5, r1
 800e6ee:	da10      	bge.n	800e712 <scalbn+0x52>
 800e6f0:	a327      	add	r3, pc, #156	; (adr r3, 800e790 <scalbn+0xd0>)
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	e01f      	b.n	800e738 <scalbn+0x78>
 800e6f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e6fc:	4291      	cmp	r1, r2
 800e6fe:	d10c      	bne.n	800e71a <scalbn+0x5a>
 800e700:	ee10 2a10 	vmov	r2, s0
 800e704:	4620      	mov	r0, r4
 800e706:	4629      	mov	r1, r5
 800e708:	f7f1 fdd8 	bl	80002bc <__adddf3>
 800e70c:	4604      	mov	r4, r0
 800e70e:	460d      	mov	r5, r1
 800e710:	e022      	b.n	800e758 <scalbn+0x98>
 800e712:	460b      	mov	r3, r1
 800e714:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e718:	3936      	subs	r1, #54	; 0x36
 800e71a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e71e:	4296      	cmp	r6, r2
 800e720:	dd0d      	ble.n	800e73e <scalbn+0x7e>
 800e722:	2d00      	cmp	r5, #0
 800e724:	a11c      	add	r1, pc, #112	; (adr r1, 800e798 <scalbn+0xd8>)
 800e726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e72a:	da02      	bge.n	800e732 <scalbn+0x72>
 800e72c:	a11c      	add	r1, pc, #112	; (adr r1, 800e7a0 <scalbn+0xe0>)
 800e72e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e732:	a319      	add	r3, pc, #100	; (adr r3, 800e798 <scalbn+0xd8>)
 800e734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e738:	f7f1 ff76 	bl	8000628 <__aeabi_dmul>
 800e73c:	e7e6      	b.n	800e70c <scalbn+0x4c>
 800e73e:	1872      	adds	r2, r6, r1
 800e740:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e744:	428a      	cmp	r2, r1
 800e746:	dcec      	bgt.n	800e722 <scalbn+0x62>
 800e748:	2a00      	cmp	r2, #0
 800e74a:	dd08      	ble.n	800e75e <scalbn+0x9e>
 800e74c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e750:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e754:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e758:	ec45 4b10 	vmov	d0, r4, r5
 800e75c:	bd70      	pop	{r4, r5, r6, pc}
 800e75e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e762:	da08      	bge.n	800e776 <scalbn+0xb6>
 800e764:	2d00      	cmp	r5, #0
 800e766:	a10a      	add	r1, pc, #40	; (adr r1, 800e790 <scalbn+0xd0>)
 800e768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e76c:	dac0      	bge.n	800e6f0 <scalbn+0x30>
 800e76e:	a10e      	add	r1, pc, #56	; (adr r1, 800e7a8 <scalbn+0xe8>)
 800e770:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e774:	e7bc      	b.n	800e6f0 <scalbn+0x30>
 800e776:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e77a:	3236      	adds	r2, #54	; 0x36
 800e77c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e780:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e784:	4620      	mov	r0, r4
 800e786:	4b0c      	ldr	r3, [pc, #48]	; (800e7b8 <scalbn+0xf8>)
 800e788:	2200      	movs	r2, #0
 800e78a:	e7d5      	b.n	800e738 <scalbn+0x78>
 800e78c:	f3af 8000 	nop.w
 800e790:	c2f8f359 	.word	0xc2f8f359
 800e794:	01a56e1f 	.word	0x01a56e1f
 800e798:	8800759c 	.word	0x8800759c
 800e79c:	7e37e43c 	.word	0x7e37e43c
 800e7a0:	8800759c 	.word	0x8800759c
 800e7a4:	fe37e43c 	.word	0xfe37e43c
 800e7a8:	c2f8f359 	.word	0xc2f8f359
 800e7ac:	81a56e1f 	.word	0x81a56e1f
 800e7b0:	43500000 	.word	0x43500000
 800e7b4:	ffff3cb0 	.word	0xffff3cb0
 800e7b8:	3c900000 	.word	0x3c900000
 800e7bc:	00000000 	.word	0x00000000

0800e7c0 <floor>:
 800e7c0:	ec51 0b10 	vmov	r0, r1, d0
 800e7c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7cc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e7d0:	2e13      	cmp	r6, #19
 800e7d2:	ee10 5a10 	vmov	r5, s0
 800e7d6:	ee10 8a10 	vmov	r8, s0
 800e7da:	460c      	mov	r4, r1
 800e7dc:	dc31      	bgt.n	800e842 <floor+0x82>
 800e7de:	2e00      	cmp	r6, #0
 800e7e0:	da14      	bge.n	800e80c <floor+0x4c>
 800e7e2:	a333      	add	r3, pc, #204	; (adr r3, 800e8b0 <floor+0xf0>)
 800e7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e8:	f7f1 fd68 	bl	80002bc <__adddf3>
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f7f2 f9aa 	bl	8000b48 <__aeabi_dcmpgt>
 800e7f4:	b138      	cbz	r0, 800e806 <floor+0x46>
 800e7f6:	2c00      	cmp	r4, #0
 800e7f8:	da53      	bge.n	800e8a2 <floor+0xe2>
 800e7fa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e7fe:	4325      	orrs	r5, r4
 800e800:	d052      	beq.n	800e8a8 <floor+0xe8>
 800e802:	4c2d      	ldr	r4, [pc, #180]	; (800e8b8 <floor+0xf8>)
 800e804:	2500      	movs	r5, #0
 800e806:	4621      	mov	r1, r4
 800e808:	4628      	mov	r0, r5
 800e80a:	e024      	b.n	800e856 <floor+0x96>
 800e80c:	4f2b      	ldr	r7, [pc, #172]	; (800e8bc <floor+0xfc>)
 800e80e:	4137      	asrs	r7, r6
 800e810:	ea01 0307 	and.w	r3, r1, r7
 800e814:	4303      	orrs	r3, r0
 800e816:	d01e      	beq.n	800e856 <floor+0x96>
 800e818:	a325      	add	r3, pc, #148	; (adr r3, 800e8b0 <floor+0xf0>)
 800e81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81e:	f7f1 fd4d 	bl	80002bc <__adddf3>
 800e822:	2200      	movs	r2, #0
 800e824:	2300      	movs	r3, #0
 800e826:	f7f2 f98f 	bl	8000b48 <__aeabi_dcmpgt>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d0eb      	beq.n	800e806 <floor+0x46>
 800e82e:	2c00      	cmp	r4, #0
 800e830:	bfbe      	ittt	lt
 800e832:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e836:	4133      	asrlt	r3, r6
 800e838:	18e4      	addlt	r4, r4, r3
 800e83a:	ea24 0407 	bic.w	r4, r4, r7
 800e83e:	2500      	movs	r5, #0
 800e840:	e7e1      	b.n	800e806 <floor+0x46>
 800e842:	2e33      	cmp	r6, #51	; 0x33
 800e844:	dd0b      	ble.n	800e85e <floor+0x9e>
 800e846:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e84a:	d104      	bne.n	800e856 <floor+0x96>
 800e84c:	ee10 2a10 	vmov	r2, s0
 800e850:	460b      	mov	r3, r1
 800e852:	f7f1 fd33 	bl	80002bc <__adddf3>
 800e856:	ec41 0b10 	vmov	d0, r0, r1
 800e85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e85e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e862:	f04f 37ff 	mov.w	r7, #4294967295
 800e866:	40df      	lsrs	r7, r3
 800e868:	4238      	tst	r0, r7
 800e86a:	d0f4      	beq.n	800e856 <floor+0x96>
 800e86c:	a310      	add	r3, pc, #64	; (adr r3, 800e8b0 <floor+0xf0>)
 800e86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e872:	f7f1 fd23 	bl	80002bc <__adddf3>
 800e876:	2200      	movs	r2, #0
 800e878:	2300      	movs	r3, #0
 800e87a:	f7f2 f965 	bl	8000b48 <__aeabi_dcmpgt>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d0c1      	beq.n	800e806 <floor+0x46>
 800e882:	2c00      	cmp	r4, #0
 800e884:	da0a      	bge.n	800e89c <floor+0xdc>
 800e886:	2e14      	cmp	r6, #20
 800e888:	d101      	bne.n	800e88e <floor+0xce>
 800e88a:	3401      	adds	r4, #1
 800e88c:	e006      	b.n	800e89c <floor+0xdc>
 800e88e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e892:	2301      	movs	r3, #1
 800e894:	40b3      	lsls	r3, r6
 800e896:	441d      	add	r5, r3
 800e898:	45a8      	cmp	r8, r5
 800e89a:	d8f6      	bhi.n	800e88a <floor+0xca>
 800e89c:	ea25 0507 	bic.w	r5, r5, r7
 800e8a0:	e7b1      	b.n	800e806 <floor+0x46>
 800e8a2:	2500      	movs	r5, #0
 800e8a4:	462c      	mov	r4, r5
 800e8a6:	e7ae      	b.n	800e806 <floor+0x46>
 800e8a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e8ac:	e7ab      	b.n	800e806 <floor+0x46>
 800e8ae:	bf00      	nop
 800e8b0:	8800759c 	.word	0x8800759c
 800e8b4:	7e37e43c 	.word	0x7e37e43c
 800e8b8:	bff00000 	.word	0xbff00000
 800e8bc:	000fffff 	.word	0x000fffff

0800e8c0 <_init>:
 800e8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c2:	bf00      	nop
 800e8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8c6:	bc08      	pop	{r3}
 800e8c8:	469e      	mov	lr, r3
 800e8ca:	4770      	bx	lr

0800e8cc <_fini>:
 800e8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ce:	bf00      	nop
 800e8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8d2:	bc08      	pop	{r3}
 800e8d4:	469e      	mov	lr, r3
 800e8d6:	4770      	bx	lr
