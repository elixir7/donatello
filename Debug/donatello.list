
donatello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800cce8  0800cce8  0001cce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d308  0800d308  000202c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d308  0800d308  0001d308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d310  0800d310  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d310  0800d310  0001d310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d314  0800d314  0001d314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800d318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d3c  200002c8  0800d5e0  000202c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20006004  0800d5e0  00026004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001281e  00000000  00000000  0002033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ae7  00000000  00000000  00032b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00036640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7e  00000000  00000000  00037710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7dc  00000000  00000000  0003838e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001501b  00000000  00000000  00052b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091b1f  00000000  00000000  00067b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055dc  00000000  00000000  000f96a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000fec80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ccd0 	.word	0x0800ccd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800ccd0 	.word	0x0800ccd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <vApplicationGetIdleTaskMemory+0x30>)
 8000f6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200002e4 	.word	0x200002e4
 8000f84:	20000338 	.word	0x20000338

08000f88 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b08e      	sub	sp, #56	; 0x38
 8000f8c:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000f8e:	f000 fad9 	bl	8001544 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000f92:	f000 f831 	bl	8000ff8 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000f96:	f000 f899 	bl	80010cc <MX_GPIO_Init>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 128);
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <main+0x60>)
 8000f9c:	f107 041c 	add.w	r4, r7, #28
 8000fa0:	461d      	mov	r5, r3
 8000fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 f96a 	bl	800728e <osThreadCreate>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <main+0x64>)
 8000fbe:	6013      	str	r3, [r2, #0]

    /* definition and creation of loggingTask */
    osThreadDef(loggingTask, loggingStartTask, osPriorityLow, 0, 2056);
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <main+0x68>)
 8000fc2:	463c      	mov	r4, r7
 8000fc4:	461d      	mov	r5, r3
 8000fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    loggingTaskHandle = osThreadCreate(osThread(loggingTask), NULL);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f006 f959 	bl	800728e <osThreadCreate>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <main+0x6c>)
 8000fe0:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8000fe2:	f006 f94d 	bl	8007280 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1){
 8000fe6:	e7fe      	b.n	8000fe6 <main+0x5e>
 8000fe8:	0800ccf4 	.word	0x0800ccf4
 8000fec:	20000538 	.word	0x20000538
 8000ff0:	0800cd1c 	.word	0x0800cd1c
 8000ff4:	2000053c 	.word	0x2000053c

08000ff8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f008 ff0e 	bl	8009e28 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <SystemClock_Config+0xcc>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <SystemClock_Config+0xcc>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <SystemClock_Config+0xd0>)
 8001042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <SystemClock_Config+0xd0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001068:	2308      	movs	r3, #8
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 800106c:	2360      	movs	r3, #96	; 0x60
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4618      	mov	r0, r3
 800107e:	f002 f83d 	bl	80030fc <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x94>
    {
        Error_Handler();
 8001088:	f000 f910 	bl	80012ac <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	60fb      	str	r3, [r7, #12]
            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001090:	2302      	movs	r3, #2
 8001092:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2103      	movs	r1, #3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fa9f 	bl	80035ec <HAL_RCC_ClockConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0xc0>
    {
        Error_Handler();
 80010b4:	f000 f8fa 	bl	80012ac <Error_Handler>
    }

    /** Enables the Clock Security System
     */
    HAL_RCC_EnableCSS();
 80010b8:	f002 fb7e 	bl	80037b8 <HAL_RCC_EnableCSS>
}
 80010bc:	bf00      	nop
 80010be:	3750      	adds	r7, #80	; 0x50
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_GPIO_Init+0x7c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a17      	ldr	r2, [pc, #92]	; (8001148 <MX_GPIO_Init+0x7c>)
 80010ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_GPIO_Init+0x7c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_GPIO_Init+0x7c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <MX_GPIO_Init+0x7c>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_GPIO_Init+0x7c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2101      	movs	r1, #1
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <MX_GPIO_Init+0x80>)
 8001120:	f000 fd3c 	bl	8001b9c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8001124:	2301      	movs	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_GPIO_Init+0x80>)
 800113c:	f000 fbaa 	bl	8001894 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000

08001150 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, uint8_t *ptr, int len) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS(ptr, len);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4619      	mov	r1, r3
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	f007 fba0 	bl	80088a8 <CDC_Transmit_FS>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_write+0x40>)
 800116e:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_write+0x40>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d0f1      	beq.n	800115c <_write+0xc>

    if (USBD_FAIL == rc) {
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <_write+0x40>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d101      	bne.n	8001184 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8001180:	2300      	movs	r3, #0
 8001182:	e000      	b.n	8001186 <_write+0x36>
    }
    return len;
 8001184:	687b      	ldr	r3, [r7, #4]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000054c 	.word	0x2000054c
 8001194:	00000000 	.word	0x00000000

08001198 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 80011a0:	f007 fac4 	bl	800872c <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for(;;)
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011a4:	2101      	movs	r1, #1
 80011a6:	482a      	ldr	r0, [pc, #168]	; (8001250 <StartDefaultTask+0xb8>)
 80011a8:	f000 fd11 	bl	8001bce <HAL_GPIO_TogglePin>
        k += 0.1;
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <StartDefaultTask+0xbc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9d1 	bl	8000558 <__aeabi_f2d>
 80011b6:	a324      	add	r3, pc, #144	; (adr r3, 8001248 <StartDefaultTask+0xb0>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff f86e 	bl	800029c <__adddf3>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fcf6 	bl	8000bb8 <__aeabi_d2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a21      	ldr	r2, [pc, #132]	; (8001254 <StartDefaultTask+0xbc>)
 80011d0:	6013      	str	r3, [r2, #0]
        x = 10*cos(k);
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <StartDefaultTask+0xbc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9be 	bl	8000558 <__aeabi_f2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	ec43 2b10 	vmov	d0, r2, r3
 80011e4:	f00a fce0 	bl	800bba8 <cos>
 80011e8:	ec51 0b10 	vmov	r0, r1, d0
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <StartDefaultTask+0xc0>)
 80011f2:	f7ff fa09 	bl	8000608 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fcdb 	bl	8000bb8 <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	4a15      	ldr	r2, [pc, #84]	; (800125c <StartDefaultTask+0xc4>)
 8001206:	6013      	str	r3, [r2, #0]
        y = 10*sin(k);
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <StartDefaultTask+0xbc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f9a3 	bl	8000558 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	ec43 2b10 	vmov	d0, r2, r3
 800121a:	f00a fd19 	bl	800bc50 <sin>
 800121e:	ec51 0b10 	vmov	r0, r1, d0
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <StartDefaultTask+0xc0>)
 8001228:	f7ff f9ee 	bl	8000608 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fcc0 	bl	8000bb8 <__aeabi_d2f>
 8001238:	4603      	mov	r3, r0
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <StartDefaultTask+0xc8>)
 800123c:	6013      	str	r3, [r2, #0]
        osDelay(50);
 800123e:	2032      	movs	r0, #50	; 0x32
 8001240:	f006 f871 	bl	8007326 <osDelay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001244:	e7ae      	b.n	80011a4 <StartDefaultTask+0xc>
 8001246:	bf00      	nop
 8001248:	9999999a 	.word	0x9999999a
 800124c:	3fb99999 	.word	0x3fb99999
 8001250:	40020000 	.word	0x40020000
 8001254:	20000540 	.word	0x20000540
 8001258:	40240000 	.word	0x40240000
 800125c:	20000544 	.word	0x20000544
 8001260:	20000548 	.word	0x20000548

08001264 <loggingStartTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_loggingStartTask */
void loggingStartTask(void const * argument)
{
 8001264:	b5b0      	push	{r4, r5, r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af02      	add	r7, sp, #8
 800126a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN loggingStartTask */
    /* Infinite loop */
    for(;;)
    {
        printf("/*%.3f,%.3f*/\r\n", x, y);
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <loggingStartTask+0x3c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f971 	bl	8000558 <__aeabi_f2d>
 8001276:	4604      	mov	r4, r0
 8001278:	460d      	mov	r5, r1
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <loggingStartTask+0x40>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f96a 	bl	8000558 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9cd 2300 	strd	r2, r3, [sp]
 800128c:	4622      	mov	r2, r4
 800128e:	462b      	mov	r3, r5
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <loggingStartTask+0x44>)
 8001292:	f008 fc83 	bl	8009b9c <iprintf>
        osDelay(100);
 8001296:	2064      	movs	r0, #100	; 0x64
 8001298:	f006 f845 	bl	8007326 <osDelay>
        printf("/*%.3f,%.3f*/\r\n", x, y);
 800129c:	e7e6      	b.n	800126c <loggingStartTask+0x8>
 800129e:	bf00      	nop
 80012a0:	20000544 	.word	0x20000544
 80012a4:	20000548 	.word	0x20000548
 80012a8:	0800cd38 	.word	0x0800cd38

080012ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    printf("[ERROR] Hard error\r\n");
 80012b4:	4801      	ldr	r0, [pc, #4]	; (80012bc <Error_Handler+0x10>)
 80012b6:	f008 fcd7 	bl	8009c68 <puts>
    while (1)
 80012ba:	e7fe      	b.n	80012ba <Error_Handler+0xe>
 80012bc:	0800cd48 	.word	0x0800cd48

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_MspInit+0x54>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_MspInit+0x54>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_MspInit+0x54>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_MspInit+0x54>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_MspInit+0x54>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_MspInit+0x54>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	210f      	movs	r1, #15
 8001302:	f06f 0001 	mvn.w	r0, #1
 8001306:	f000 fa8e 	bl	8001826 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800131c:	f002 fb68 	bl	80039f0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x8>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f000 f94c 	bl	80015e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001350:	f006 fd6c 	bl	8007e2c <xTaskGetSchedulerState>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d001      	beq.n	800135e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800135a:	f006 ffad 	bl	80082b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <OTG_FS_IRQHandler+0x10>)
 800136a:	f000 fd9a 	bl	8001ea2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000578c 	.word	0x2000578c

08001378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return 1;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_kill>:

int _kill(int pid, int sig)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001392:	f008 fd9b 	bl	8009ecc <__errno>
 8001396:	4603      	mov	r3, r0
 8001398:	2216      	movs	r2, #22
 800139a:	601a      	str	r2, [r3, #0]
  return -1;
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_exit>:

void _exit (int status)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ffe7 	bl	8001388 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ba:	e7fe      	b.n	80013ba <_exit+0x12>

080013bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e00a      	b.n	80013e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ce:	f3af 8000 	nop.w
 80013d2:	4601      	mov	r1, r0
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	60ba      	str	r2, [r7, #8]
 80013da:	b2ca      	uxtb	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dbf0      	blt.n	80013ce <_read+0x12>
  }

  return len;
 80013ec:	687b      	ldr	r3, [r7, #4]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800141e:	605a      	str	r2, [r3, #4]
  return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_isatty>:

int _isatty(int file)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <_sbrk+0x5c>)
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <_sbrk+0x60>)
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x64>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <_sbrk+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	d207      	bcs.n	80014a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001490:	f008 fd1c 	bl	8009ecc <__errno>
 8001494:	4603      	mov	r3, r0
 8001496:	220c      	movs	r2, #12
 8001498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e009      	b.n	80014b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <_sbrk+0x64>)
 80014b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20020000 	.word	0x20020000
 80014c0:	00000800 	.word	0x00000800
 80014c4:	20000550 	.word	0x20000550
 80014c8:	20006008 	.word	0x20006008

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <SystemInit+0x20>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <SystemInit+0x20>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800150c:	4c0b      	ldr	r4, [pc, #44]	; (800153c <LoopFillZerobss+0x26>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151a:	f7ff ffd7 	bl	80014cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f008 fcdb 	bl	8009ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff fd31 	bl	8000f88 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8001534:	0800d318 	.word	0x0800d318
  ldr r2, =_sbss
 8001538:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 800153c:	20006004 	.word	0x20006004

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_Init+0x40>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_Init+0x40>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x40>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f94f 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	200f      	movs	r0, #15
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fea2 	bl	80012c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f967 	bl	800187a <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f92f 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008
 800160c:	20000554 	.word	0x20000554

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000554 	.word	0x20000554

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_Delay+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4907      	ldr	r1, [pc, #28]	; (800170c <__NVIC_EnableIRQ+0x38>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f7ff ff8e 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff29 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff3e 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff8e 	bl	8001764 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5d 	bl	8001710 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff31 	bl	80016d4 <__NVIC_EnableIRQ>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <SysTick_Config>
 8001888:	4603      	mov	r3, r0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e159      	b.n	8001b64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8148 	bne.w	8001b5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80a2 	beq.w	8001b5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a56      	ldr	r2, [pc, #344]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a36:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d019      	beq.n	8001a96 <HAL_GPIO_Init+0x202>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <HAL_GPIO_Init+0x2f4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x1fe>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a47      	ldr	r2, [pc, #284]	; (8001b8c <HAL_GPIO_Init+0x2f8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a46      	ldr	r2, [pc, #280]	; (8001b90 <HAL_GPIO_Init+0x2fc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x1f6>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <HAL_GPIO_Init+0x300>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_GPIO_Init+0x1f2>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a86:	2307      	movs	r3, #7
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a96:	2300      	movs	r3, #0
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa8:	4935      	ldr	r1, [pc, #212]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ada:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b04:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f aea2 	bls.w	80018b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	041a      	lsls	r2, r3, #16
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	400b      	ands	r3, r1
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c04:	b08f      	sub	sp, #60	; 0x3c
 8001c06:	af0a      	add	r7, sp, #40	; 0x28
 8001c08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e10f      	b.n	8001e34 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f006 ff82 	bl	8008b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2203      	movs	r2, #3
 8001c38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fffb 	bl	8003c4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	687e      	ldr	r6, [r7, #4]
 8001c60:	466d      	mov	r5, sp
 8001c62:	f106 0410 	add.w	r4, r6, #16
 8001c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c72:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c76:	1d33      	adds	r3, r6, #4
 8001c78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f001 fed3 	bl	8003a26 <USB_CoreInit>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0d0      	b.n	8001e34 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 ffe9 	bl	8003c70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	e04a      	b.n	8001d3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	333d      	adds	r3, #61	; 0x3d
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	333c      	adds	r3, #60	; 0x3c
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	b298      	uxth	r0, r3
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3344      	adds	r3, #68	; 0x44
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3340      	adds	r3, #64	; 0x40
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	3348      	adds	r3, #72	; 0x48
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	334c      	adds	r3, #76	; 0x4c
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3354      	adds	r3, #84	; 0x54
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	3301      	adds	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d3af      	bcc.n	8001ca4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e044      	b.n	8001dd4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d3b5      	bcc.n	8001d4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	687e      	ldr	r6, [r7, #4]
 8001de6:	466d      	mov	r5, sp
 8001de8:	f106 0410 	add.w	r4, r6, #16
 8001dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001df8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dfc:	1d33      	adds	r3, r6, #4
 8001dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e00:	6838      	ldr	r0, [r7, #0]
 8001e02:	f001 ff81 	bl	8003d08 <USB_DevInit>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e00d      	b.n	8001e34 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 f8d0 	bl	8004fd2 <USB_DevDisconnect>

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_PCD_Start+0x1c>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e020      	b.n	8001e9a <HAL_PCD_Start+0x5e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d109      	bne.n	8001e7c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d005      	beq.n	8001e7c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 fed3 	bl	8003c2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 f880 	bl	8004f90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ea2:	b590      	push	{r4, r7, lr}
 8001ea4:	b08d      	sub	sp, #52	; 0x34
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f93e 	bl	800513a <USB_GetMode>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f040 848a 	bne.w	80027da <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 f8a2 	bl	8005014 <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8480 	beq.w	80027d8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 f88f 	bl	8005014 <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d107      	bne.n	8001f10 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f002 0202 	and.w	r2, r2, #2
 8001f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 f87d 	bl	8005014 <USB_ReadInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d161      	bne.n	8001fe8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0210 	bic.w	r2, r2, #16
 8001f32:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f003 020f 	and.w	r2, r3, #15
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	3304      	adds	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	0c5b      	lsrs	r3, r3, #17
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d124      	bne.n	8001faa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d035      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	6a38      	ldr	r0, [r7, #32]
 8001f80:	f002 feb4 	bl	8004cec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f90:	441a      	add	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fa2:	441a      	add	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	621a      	str	r2, [r3, #32]
 8001fa8:	e016      	b.n	8001fd8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	0c5b      	lsrs	r3, r3, #17
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d110      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6a38      	ldr	r0, [r7, #32]
 8001fc2:	f002 fe93 	bl	8004cec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fd2:	441a      	add	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0210 	orr.w	r2, r2, #16
 8001fe6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 f811 	bl	8005014 <USB_ReadInterrupts>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ffc:	f040 80a7 	bne.w	800214e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f003 f816 	bl	800503a <USB_ReadDevAllOutEpInterrupt>
 800200e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002010:	e099      	b.n	8002146 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 808e 	beq.w	800213a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f003 f83a 	bl	80050a2 <USB_ReadDevOutEPInterrupt>
 800202e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00c      	beq.n	8002054 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002046:	461a      	mov	r2, r3
 8002048:	2301      	movs	r3, #1
 800204a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800204c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fec2 	bl	8002dd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00c      	beq.n	8002078 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206a:	461a      	mov	r2, r3
 800206c:	2308      	movs	r3, #8
 800206e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 ff98 	bl	8002fa8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208e:	461a      	mov	r2, r3
 8002090:	2310      	movs	r3, #16
 8002092:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d030      	beq.n	8002100 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a6:	2b80      	cmp	r3, #128	; 0x80
 80020a8:	d109      	bne.n	80020be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	3304      	adds	r3, #4
 80020d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	78db      	ldrb	r3, [r3, #3]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d108      	bne.n	80020ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2200      	movs	r2, #0
 80020e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	4619      	mov	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f006 fe21 	bl	8008d30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	461a      	mov	r2, r3
 80020fc:	2302      	movs	r3, #2
 80020fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002116:	461a      	mov	r2, r3
 8002118:	2320      	movs	r3, #32
 800211a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002132:	461a      	mov	r2, r3
 8002134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002138:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	3301      	adds	r3, #1
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002142:	085b      	lsrs	r3, r3, #1
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f af62 	bne.w	8002012 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f002 ff5e 	bl	8005014 <USB_ReadInterrupts>
 8002158:	4603      	mov	r3, r0
 800215a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002162:	f040 80db 	bne.w	800231c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f002 ff7f 	bl	800506e <USB_ReadDevAllInEpInterrupt>
 8002170:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002176:	e0cd      	b.n	8002314 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80c2 	beq.w	8002308 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f002 ffa5 	bl	80050de <USB_ReadDevInEPInterrupt>
 8002194:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d057      	beq.n	8002250 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	2201      	movs	r2, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69f9      	ldr	r1, [r7, #28]
 80021bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021c0:	4013      	ands	r3, r2
 80021c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d0:	461a      	mov	r2, r3
 80021d2:	2301      	movs	r3, #1
 80021d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d132      	bne.n	8002244 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	334c      	adds	r3, #76	; 0x4c
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4403      	add	r3, r0
 80021fe:	3348      	adds	r3, #72	; 0x48
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4419      	add	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4403      	add	r3, r0
 8002212:	334c      	adds	r3, #76	; 0x4c
 8002214:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	d113      	bne.n	8002244 <HAL_PCD_IRQHandler+0x3a2>
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	3354      	adds	r3, #84	; 0x54
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800223c:	461a      	mov	r2, r3
 800223e:	2101      	movs	r1, #1
 8002240:	f002 ffac 	bl	800519c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f006 fcf5 	bl	8008c3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002266:	461a      	mov	r2, r3
 8002268:	2308      	movs	r3, #8
 800226a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002282:	461a      	mov	r2, r3
 8002284:	2310      	movs	r3, #16
 8002286:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229e:	461a      	mov	r2, r3
 80022a0:	2340      	movs	r3, #64	; 0x40
 80022a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d023      	beq.n	80022f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b0:	6a38      	ldr	r0, [r7, #32]
 80022b2:	f001 fe8d 	bl	8003fd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	3338      	adds	r3, #56	; 0x38
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	3304      	adds	r3, #4
 80022c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	78db      	ldrb	r3, [r3, #3]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2200      	movs	r2, #0
 80022d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4619      	mov	r1, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f006 fd38 	bl	8008d54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f0:	461a      	mov	r2, r3
 80022f2:	2302      	movs	r3, #2
 80022f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fcdb 	bl	8002cbe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	3301      	adds	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	f47f af2e 	bne.w	8002178 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f002 fe77 	bl	8005014 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800232c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002330:	d122      	bne.n	8002378 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002358:	2100      	movs	r1, #0
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fec2 	bl	80030e4 <HAL_PCDEx_LPM_Callback>
 8002360:	e002      	b.n	8002368 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f006 fcd6 	bl	8008d14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002376:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fe49 	bl	8005014 <USB_ReadInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800238c:	d112      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f006 fc92 	bl	8008cc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023b2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fe2b 	bl	8005014 <USB_ReadInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	f040 80b7 	bne.w	800253a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2110      	movs	r1, #16
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 fdf2 	bl	8003fd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f0:	e046      	b.n	8002480 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023fe:	461a      	mov	r2, r3
 8002400:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002404:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002416:	0151      	lsls	r1, r2, #5
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	440a      	add	r2, r1
 800241c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002420:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002424:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4413      	add	r3, r2
 800242e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002432:	461a      	mov	r2, r3
 8002434:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002438:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244a:	0151      	lsls	r1, r2, #5
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	440a      	add	r2, r1
 8002450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002454:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002458:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246a:	0151      	lsls	r1, r2, #5
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	440a      	add	r2, r1
 8002470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002474:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002478:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	3301      	adds	r3, #1
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002486:	429a      	cmp	r2, r3
 8002488:	d3b3      	bcc.n	80023f2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002498:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800249c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d016      	beq.n	80024d4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b6:	f043 030b 	orr.w	r3, r3, #11
 80024ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024cc:	f043 030b 	orr.w	r3, r3, #11
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	e015      	b.n	8002500 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024fa:	f043 030b 	orr.w	r3, r3, #11
 80024fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800250e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002512:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002524:	461a      	mov	r2, r3
 8002526:	f002 fe39 	bl	800519c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f002 fd68 	bl	8005014 <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254e:	d124      	bne.n	800259a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fdfe 	bl	8005156 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fdb3 	bl	80040ca <USB_GetDevSpeed>
 8002564:	4603      	mov	r3, r0
 8002566:	461a      	mov	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681c      	ldr	r4, [r3, #0]
 8002570:	f001 fa32 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 8002574:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4620      	mov	r0, r4
 8002580:	f001 fab2 	bl	8003ae8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f006 fb80 	bl	8008c8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002598:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 fd38 	bl	8005014 <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d10a      	bne.n	80025c4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f006 fb5d 	bl	8008c6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f002 0208 	and.w	r2, r2, #8
 80025c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 fd23 	bl	8005014 <USB_ReadInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d122      	bne.n	800261e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025e4:	2301      	movs	r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	e014      	b.n	8002614 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d105      	bne.n	800260e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4619      	mov	r1, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fb27 	bl	8002c5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	429a      	cmp	r2, r3
 800261c:	d3e5      	bcc.n	80025ea <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 fcf6 	bl	8005014 <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002632:	d13b      	bne.n	80026ac <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002634:	2301      	movs	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
 8002638:	e02b      	b.n	8002692 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	3340      	adds	r3, #64	; 0x40
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d115      	bne.n	800268c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002660:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002662:	2b00      	cmp	r3, #0
 8002664:	da12      	bge.n	800268c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	333f      	adds	r3, #63	; 0x3f
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fae8 	bl	8002c5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3301      	adds	r3, #1
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002698:	429a      	cmp	r2, r3
 800269a:	d3ce      	bcc.n	800263a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 fcaf 	bl	8005014 <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026c0:	d155      	bne.n	800276e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c2:	2301      	movs	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	e045      	b.n	8002754 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d12e      	bne.n	800274e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	da2b      	bge.n	800274e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002702:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002706:	429a      	cmp	r2, r3
 8002708:	d121      	bne.n	800274e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800274a:	6053      	str	r3, [r2, #4]
            break;
 800274c:	e007      	b.n	800275e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	3301      	adds	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275a:	429a      	cmp	r2, r3
 800275c:	d3b4      	bcc.n	80026c8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800276c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fc4e 	bl	8005014 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002782:	d10a      	bne.n	800279a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f006 faf7 	bl	8008d78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fc38 	bl	8005014 <USB_ReadInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d115      	bne.n	80027da <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f006 fae7 	bl	8008d94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	e000      	b.n	80027da <HAL_PCD_IRQHandler+0x938>
      return;
 80027d8:	bf00      	nop
    }
  }
}
 80027da:	3734      	adds	r7, #52	; 0x34
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}

080027e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_PCD_SetAddress+0x1a>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e013      	b.n	8002822 <HAL_PCD_SetAddress+0x42>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f002 fb96 	bl	8004f44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	4608      	mov	r0, r1
 8002834:	4611      	mov	r1, r2
 8002836:	461a      	mov	r2, r3
 8002838:	4603      	mov	r3, r0
 800283a:	70fb      	strb	r3, [r7, #3]
 800283c:	460b      	mov	r3, r1
 800283e:	803b      	strh	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800284c:	2b00      	cmp	r3, #0
 800284e:	da0f      	bge.n	8002870 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	f003 020f 	and.w	r2, r3, #15
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	3338      	adds	r3, #56	; 0x38
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	3304      	adds	r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	705a      	strb	r2, [r3, #1]
 800286e:	e00f      	b.n	8002890 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 020f 	and.w	r2, r3, #15
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	3304      	adds	r3, #4
 8002888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	b2da      	uxtb	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800289c:	883a      	ldrh	r2, [r7, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	78ba      	ldrb	r2, [r7, #2]
 80028a6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028ba:	78bb      	ldrb	r3, [r7, #2]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d102      	bne.n	80028c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_PCD_EP_Open+0xaa>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e00e      	b.n	80028f2 <HAL_PCD_EP_Open+0xc8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68f9      	ldr	r1, [r7, #12]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 fc16 	bl	8004114 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80028f0:	7afb      	ldrb	r3, [r7, #11]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	da0f      	bge.n	800292e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 020f 	and.w	r2, r3, #15
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	3338      	adds	r3, #56	; 0x38
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	3304      	adds	r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	705a      	strb	r2, [r3, #1]
 800292c:	e00f      	b.n	800294e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	f003 020f 	and.w	r2, r3, #15
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_PCD_EP_Close+0x6e>
 8002964:	2302      	movs	r3, #2
 8002966:	e00e      	b.n	8002986 <HAL_PCD_EP_Close+0x8c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	4618      	mov	r0, r3
 8002978:	f001 fc54 	bl	8004224 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	460b      	mov	r3, r1
 800299c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	f003 020f 	and.w	r2, r3, #15
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	3304      	adds	r3, #4
 80029b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d0:	7afb      	ldrb	r3, [r7, #11]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d102      	bne.n	80029ea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ea:	7afb      	ldrb	r3, [r7, #11]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	f001 ff33 	bl	800486c <USB_EP0StartXfer>
 8002a06:	e008      	b.n	8002a1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	6979      	ldr	r1, [r7, #20]
 8002a16:	f001 fce1 	bl	80043dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	460b      	mov	r3, r1
 8002a62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	7afb      	ldrb	r3, [r7, #11]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3338      	adds	r3, #56	; 0x38
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	3304      	adds	r3, #4
 8002a7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2201      	movs	r2, #1
 8002a92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a94:	7afb      	ldrb	r3, [r7, #11]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6979      	ldr	r1, [r7, #20]
 8002ac6:	f001 fed1 	bl	800486c <USB_EP0StartXfer>
 8002aca:	e008      	b.n	8002ade <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6979      	ldr	r1, [r7, #20]
 8002ada:	f001 fc7f 	bl	80043dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f003 020f 	and.w	r2, r3, #15
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d901      	bls.n	8002b06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e050      	b.n	8002ba8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	da0f      	bge.n	8002b2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	f003 020f 	and.w	r2, r3, #15
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	3338      	adds	r3, #56	; 0x38
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	3304      	adds	r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	705a      	strb	r2, [r3, #1]
 8002b2c:	e00d      	b.n	8002b4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	3304      	adds	r3, #4
 8002b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_PCD_EP_SetStall+0x82>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e01e      	b.n	8002ba8 <HAL_PCD_EP_SetStall+0xc0>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 f90f 	bl	8004d9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	b2d9      	uxtb	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f002 faff 	bl	800519c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 020f 	and.w	r2, r3, #15
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d901      	bls.n	8002bce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e042      	b.n	8002c54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da0f      	bge.n	8002bf6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 020f 	and.w	r2, r3, #15
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	3338      	adds	r3, #56	; 0x38
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	3304      	adds	r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	705a      	strb	r2, [r3, #1]
 8002bf4:	e00f      	b.n	8002c16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_PCD_EP_ClrStall+0x86>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e00e      	b.n	8002c54 <HAL_PCD_EP_ClrStall+0xa4>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68f9      	ldr	r1, [r7, #12]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f002 f917 	bl	8004e78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	da0c      	bge.n	8002c8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	f003 020f 	and.w	r2, r3, #15
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	3338      	adds	r3, #56	; 0x38
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	3304      	adds	r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e00c      	b.n	8002ca4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 ff36 	bl	8004b1c <USB_EPStopXfer>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cb4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b08a      	sub	sp, #40	; 0x28
 8002cc2:	af02      	add	r7, sp, #8
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	3338      	adds	r3, #56	; 0x38
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d901      	bls.n	8002cf6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06c      	b.n	8002dd0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d902      	bls.n	8002d12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3303      	adds	r3, #3
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d1a:	e02b      	b.n	8002d74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d902      	bls.n	8002d38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	3303      	adds	r3, #3
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6919      	ldr	r1, [r3, #16]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4603      	mov	r3, r0
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f001 ff8a 	bl	8004c70 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	441a      	add	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	441a      	add	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d809      	bhi.n	8002d9e <PCD_WriteEmptyTxFifo+0xe0>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1a      	ldr	r2, [r3, #32]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d203      	bcs.n	8002d9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1be      	bne.n	8002d1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d811      	bhi.n	8002dce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	2201      	movs	r2, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	6939      	ldr	r1, [r7, #16]
 8002dc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dca:	4013      	ands	r3, r2
 8002dcc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	333c      	adds	r3, #60	; 0x3c
 8002df0:	3304      	adds	r3, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d17b      	bne.n	8002f06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4a61      	ldr	r2, [pc, #388]	; (8002fa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	f240 80b9 	bls.w	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80b3 	beq.w	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e40:	6093      	str	r3, [r2, #8]
 8002e42:	e0a7      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	6093      	str	r3, [r2, #8]
 8002e60:	e098      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 8093 	bne.w	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	4a4b      	ldr	r2, [pc, #300]	; (8002fa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d90f      	bls.n	8002e96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e92:	6093      	str	r3, [r2, #8]
 8002e94:	e07e      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	0159      	lsls	r1, r3, #5
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d114      	bne.n	8002ef8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	f002 f95a 	bl	800519c <USB_EP0_OutStart>
 8002ee8:	e006      	b.n	8002ef8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	441a      	add	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f005 fe80 	bl	8008c04 <HAL_PCD_DataOutStageCallback>
 8002f04:	e046      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d124      	bne.n	8002f58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2a:	6093      	str	r3, [r2, #8]
 8002f2c:	e032      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f44:	461a      	mov	r2, r3
 8002f46:	2320      	movs	r3, #32
 8002f48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f005 fe57 	bl	8008c04 <HAL_PCD_DataOutStageCallback>
 8002f56:	e01d      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d114      	bne.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f80:	461a      	mov	r2, r3
 8002f82:	2100      	movs	r1, #0
 8002f84:	f002 f90a 	bl	800519c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f005 fe38 	bl	8008c04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	4f54300a 	.word	0x4f54300a
 8002fa4:	4f54310a 	.word	0x4f54310a

08002fa8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	333c      	adds	r3, #60	; 0x3c
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a15      	ldr	r2, [pc, #84]	; (8003030 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d90e      	bls.n	8002ffc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f005 fdef 	bl	8008be0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <PCD_EP_OutSetupPacket_int+0x88>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d90c      	bls.n	8003024 <PCD_EP_OutSetupPacket_int+0x7c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800301c:	461a      	mov	r2, r3
 800301e:	2101      	movs	r1, #1
 8003020:	f002 f8bc 	bl	800519c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	4f54300a 	.word	0x4f54300a

08003034 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
 8003040:	4613      	mov	r3, r2
 8003042:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003052:	883b      	ldrh	r3, [r7, #0]
 8003054:	0419      	lsls	r1, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	430a      	orrs	r2, r1
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
 8003060:	e028      	b.n	80030b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	4413      	add	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	e00d      	b.n	8003092 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	3340      	adds	r3, #64	; 0x40
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	4413      	add	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	3301      	adds	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	3b01      	subs	r3, #1
 8003098:	429a      	cmp	r2, r3
 800309a:	d3ec      	bcc.n	8003076 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800309c:	883b      	ldrh	r3, [r7, #0]
 800309e:	0418      	lsls	r0, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4302      	orrs	r2, r0
 80030ac:	3340      	adds	r3, #64	; 0x40
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e267      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d075      	beq.n	8003206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800311a:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d00c      	beq.n	8003140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003126:	4b85      	ldr	r3, [pc, #532]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800312e:	2b08      	cmp	r3, #8
 8003130:	d112      	bne.n	8003158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003132:	4b82      	ldr	r3, [pc, #520]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313e:	d10b      	bne.n	8003158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	4b7e      	ldr	r3, [pc, #504]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d05b      	beq.n	8003204 <HAL_RCC_OscConfig+0x108>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d157      	bne.n	8003204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e242      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003160:	d106      	bne.n	8003170 <HAL_RCC_OscConfig+0x74>
 8003162:	4b76      	ldr	r3, [pc, #472]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a75      	ldr	r2, [pc, #468]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xb0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x98>
 800317a:	4b70      	ldr	r3, [pc, #448]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6f      	ldr	r2, [pc, #444]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b6d      	ldr	r3, [pc, #436]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6c      	ldr	r2, [pc, #432]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xb0>
 8003194:	4b69      	ldr	r3, [pc, #420]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a68      	ldr	r2, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b66      	ldr	r3, [pc, #408]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a65      	ldr	r2, [pc, #404]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fa2c 	bl	8001610 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fe fa28 	bl	8001610 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e207      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b5b      	ldr	r3, [pc, #364]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xc0>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fa18 	bl	8001610 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fa14 	bl	8001610 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1f3      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b51      	ldr	r3, [pc, #324]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0xe8>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d063      	beq.n	80032da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003212:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321e:	4b47      	ldr	r3, [pc, #284]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11c      	bne.n	8003264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322a:	4b44      	ldr	r3, [pc, #272]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x152>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1c7      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b3b      	ldr	r3, [pc, #236]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4937      	ldr	r1, [pc, #220]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	e03a      	b.n	80032da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_RCC_OscConfig+0x244>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe f9cd 	bl	8001610 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe f9c9 	bl	8001610 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1a8      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4925      	ldr	r1, [pc, #148]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_RCC_OscConfig+0x244>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe f9ac 	bl	8001610 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fe f9a8 	bl	8001610 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e187      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d036      	beq.n	8003354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_RCC_OscConfig+0x248>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fe f98c 	bl	8001610 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032fc:	f7fe f988 	bl	8001610 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e167      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x200>
 800331a:	e01b      	b.n	8003354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_OscConfig+0x248>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7fe f975 	bl	8001610 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	e00e      	b.n	8003348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332a:	f7fe f971 	bl	8001610 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d907      	bls.n	8003348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e150      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
 800333c:	40023800 	.word	0x40023800
 8003340:	42470000 	.word	0x42470000
 8003344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800334a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1ea      	bne.n	800332a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8097 	beq.w	8003490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003366:	4b81      	ldr	r3, [pc, #516]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	4b7d      	ldr	r3, [pc, #500]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a7c      	ldr	r2, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
 8003382:	4b7a      	ldr	r3, [pc, #488]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003392:	4b77      	ldr	r3, [pc, #476]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d118      	bne.n	80033d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339e:	4b74      	ldr	r3, [pc, #464]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a73      	ldr	r2, [pc, #460]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033aa:	f7fe f931 	bl	8001610 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b2:	f7fe f92d 	bl	8001610 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e10c      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x2ea>
 80033d8:	4b64      	ldr	r3, [pc, #400]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4a63      	ldr	r2, [pc, #396]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	e01c      	b.n	8003420 <HAL_RCC_OscConfig+0x324>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x30c>
 80033ee:	4b5f      	ldr	r3, [pc, #380]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a5e      	ldr	r2, [pc, #376]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	4b5c      	ldr	r3, [pc, #368]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a5b      	ldr	r2, [pc, #364]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0x324>
 8003408:	4b58      	ldr	r3, [pc, #352]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a57      	ldr	r2, [pc, #348]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
 8003414:	4b55      	ldr	r3, [pc, #340]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a54      	ldr	r2, [pc, #336]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800341a:	f023 0304 	bic.w	r3, r3, #4
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d015      	beq.n	8003454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fe f8f2 	bl	8001610 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342e:	e00a      	b.n	8003446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003430:	f7fe f8ee 	bl	8001610 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e0cb      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	4b49      	ldr	r3, [pc, #292]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0ee      	beq.n	8003430 <HAL_RCC_OscConfig+0x334>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003454:	f7fe f8dc 	bl	8001610 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345a:	e00a      	b.n	8003472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7fe f8d8 	bl	8001610 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e0b5      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1ee      	bne.n	800345c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	4a38      	ldr	r2, [pc, #224]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800348a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a1 	beq.w	80035dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d05c      	beq.n	8003560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d141      	bne.n	8003532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ae:	4b31      	ldr	r3, [pc, #196]	; (8003574 <HAL_RCC_OscConfig+0x478>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe f8ac 	bl	8001610 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fe f8a8 	bl	8001610 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e087      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	019b      	lsls	r3, r3, #6
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	3b01      	subs	r3, #1
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	061b      	lsls	r3, r3, #24
 80034fe:	491b      	ldr	r1, [pc, #108]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003504:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_RCC_OscConfig+0x478>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fe f881 	bl	8001610 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003512:	f7fe f87d 	bl	8001610 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e05c      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x416>
 8003530:	e054      	b.n	80035dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <HAL_RCC_OscConfig+0x478>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fe f86a 	bl	8001610 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe f866 	bl	8001610 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e045      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x444>
 800355e:	e03d      	b.n	80035dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e038      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
 800356c:	40023800 	.word	0x40023800
 8003570:	40007000 	.word	0x40007000
 8003574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x4ec>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d028      	beq.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d121      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d11a      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035a8:	4013      	ands	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d111      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	3b01      	subs	r3, #1
 80035c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800

080035ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0cc      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d90c      	bls.n	8003628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0b8      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800364a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a52      	ldr	r2, [pc, #328]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	494d      	ldr	r1, [pc, #308]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d044      	beq.n	800370c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d119      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e067      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f023 0203 	bic.w	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4934      	ldr	r1, [pc, #208]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036dc:	f7fd ff98 	bl	8001610 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e4:	f7fd ff94 	bl	8001610 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e04f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 020c 	and.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	429a      	cmp	r2, r3
 800370a:	d1eb      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d20c      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e032      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4916      	ldr	r1, [pc, #88]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	490e      	ldr	r1, [pc, #56]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003772:	f000 f82d 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 8003776:	4602      	mov	r2, r0
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	490a      	ldr	r1, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	5ccb      	ldrb	r3, [r1, r3]
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd fef8 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023c00 	.word	0x40023c00
 80037a8:	40023800 	.word	0x40023800
 80037ac:	0800cdac 	.word	0x0800cdac
 80037b0:	20000000 	.word	0x20000000
 80037b4:	20000004 	.word	0x20000004

080037b8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCC_EnableCSS+0x14>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	4247004c 	.word	0x4247004c

080037d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d4:	b094      	sub	sp, #80	; 0x50
 80037d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	647b      	str	r3, [r7, #68]	; 0x44
 80037dc:	2300      	movs	r3, #0
 80037de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e0:	2300      	movs	r3, #0
 80037e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e8:	4b79      	ldr	r3, [pc, #484]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d00d      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x40>
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	f200 80e1 	bhi.w	80039bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x34>
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d003      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x3a>
 8003802:	e0db      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b73      	ldr	r3, [pc, #460]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003806:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003808:	e0db      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800380a:	4b72      	ldr	r3, [pc, #456]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x204>)
 800380c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800380e:	e0d8      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003810:	4b6f      	ldr	r3, [pc, #444]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003818:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800381a:	4b6d      	ldr	r3, [pc, #436]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d063      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003826:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	2200      	movs	r2, #0
 800382e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003830:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
 800383a:	2300      	movs	r3, #0
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
 800383e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003842:	4622      	mov	r2, r4
 8003844:	462b      	mov	r3, r5
 8003846:	f04f 0000 	mov.w	r0, #0
 800384a:	f04f 0100 	mov.w	r1, #0
 800384e:	0159      	lsls	r1, r3, #5
 8003850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003854:	0150      	lsls	r0, r2, #5
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4621      	mov	r1, r4
 800385c:	1a51      	subs	r1, r2, r1
 800385e:	6139      	str	r1, [r7, #16]
 8003860:	4629      	mov	r1, r5
 8003862:	eb63 0301 	sbc.w	r3, r3, r1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003874:	4659      	mov	r1, fp
 8003876:	018b      	lsls	r3, r1, #6
 8003878:	4651      	mov	r1, sl
 800387a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800387e:	4651      	mov	r1, sl
 8003880:	018a      	lsls	r2, r1, #6
 8003882:	4651      	mov	r1, sl
 8003884:	ebb2 0801 	subs.w	r8, r2, r1
 8003888:	4659      	mov	r1, fp
 800388a:	eb63 0901 	sbc.w	r9, r3, r1
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800389a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800389e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038a2:	4690      	mov	r8, r2
 80038a4:	4699      	mov	r9, r3
 80038a6:	4623      	mov	r3, r4
 80038a8:	eb18 0303 	adds.w	r3, r8, r3
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	462b      	mov	r3, r5
 80038b0:	eb49 0303 	adc.w	r3, r9, r3
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038e0:	f7fd f9ba 	bl	8000c58 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ec:	e058      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ee:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	099b      	lsrs	r3, r3, #6
 80038f4:	2200      	movs	r2, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	4611      	mov	r1, r2
 80038fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
 8003904:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003908:	4642      	mov	r2, r8
 800390a:	464b      	mov	r3, r9
 800390c:	f04f 0000 	mov.w	r0, #0
 8003910:	f04f 0100 	mov.w	r1, #0
 8003914:	0159      	lsls	r1, r3, #5
 8003916:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800391a:	0150      	lsls	r0, r2, #5
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4641      	mov	r1, r8
 8003922:	ebb2 0a01 	subs.w	sl, r2, r1
 8003926:	4649      	mov	r1, r9
 8003928:	eb63 0b01 	sbc.w	fp, r3, r1
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003938:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800393c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003940:	ebb2 040a 	subs.w	r4, r2, sl
 8003944:	eb63 050b 	sbc.w	r5, r3, fp
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	00eb      	lsls	r3, r5, #3
 8003952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003956:	00e2      	lsls	r2, r4, #3
 8003958:	4614      	mov	r4, r2
 800395a:	461d      	mov	r5, r3
 800395c:	4643      	mov	r3, r8
 800395e:	18e3      	adds	r3, r4, r3
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	464b      	mov	r3, r9
 8003964:	eb45 0303 	adc.w	r3, r5, r3
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003976:	4629      	mov	r1, r5
 8003978:	028b      	lsls	r3, r1, #10
 800397a:	4621      	mov	r1, r4
 800397c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003980:	4621      	mov	r1, r4
 8003982:	028a      	lsls	r2, r1, #10
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398a:	2200      	movs	r2, #0
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	61fa      	str	r2, [r7, #28]
 8003990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003994:	f7fd f960 	bl	8000c58 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4613      	mov	r3, r2
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	3301      	adds	r3, #1
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ba:	e002      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3750      	adds	r7, #80	; 0x50
 80039c8:	46bd      	mov	sp, r7
 80039ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800
 80039d4:	00f42400 	.word	0x00f42400

080039d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <HAL_RCC_GetHCLKFreq+0x14>)
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000000 	.word	0x20000000

080039f0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_NMI_IRQHandler+0x20>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d104      	bne.n	8003a0a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003a00:	f000 f80a 	bl	8003a18 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	701a      	strb	r2, [r3, #0]
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	4002380e 	.word	0x4002380e

08003a18 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a26:	b084      	sub	sp, #16
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	f107 001c 	add.w	r0, r7, #28
 8003a34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d122      	bne.n	8003a84 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f001 fbed 	bl	8005258 <USB_CoreReset>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	73fb      	strb	r3, [r7, #15]
 8003a82:	e01a      	b.n	8003aba <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f001 fbe1 	bl	8005258 <USB_CoreReset>
 8003a96:	4603      	mov	r3, r0
 8003a98:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8003aac:	e005      	b.n	8003aba <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10b      	bne.n	8003ad8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f043 0206 	orr.w	r2, r3, #6
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f043 0220 	orr.w	r2, r3, #32
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ae4:	b004      	add	sp, #16
 8003ae6:	4770      	bx	lr

08003ae8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d165      	bne.n	8003bc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4a41      	ldr	r2, [pc, #260]	; (8003c04 <USB_SetTurnaroundTime+0x11c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d906      	bls.n	8003b12 <USB_SetTurnaroundTime+0x2a>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4a40      	ldr	r2, [pc, #256]	; (8003c08 <USB_SetTurnaroundTime+0x120>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d202      	bcs.n	8003b12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b0c:	230f      	movs	r3, #15
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e062      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4a3c      	ldr	r2, [pc, #240]	; (8003c08 <USB_SetTurnaroundTime+0x120>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d306      	bcc.n	8003b28 <USB_SetTurnaroundTime+0x40>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4a3b      	ldr	r2, [pc, #236]	; (8003c0c <USB_SetTurnaroundTime+0x124>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d202      	bcs.n	8003b28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b22:	230e      	movs	r3, #14
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e057      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4a38      	ldr	r2, [pc, #224]	; (8003c0c <USB_SetTurnaroundTime+0x124>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d306      	bcc.n	8003b3e <USB_SetTurnaroundTime+0x56>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4a37      	ldr	r2, [pc, #220]	; (8003c10 <USB_SetTurnaroundTime+0x128>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d202      	bcs.n	8003b3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b38:	230d      	movs	r3, #13
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	e04c      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4a33      	ldr	r2, [pc, #204]	; (8003c10 <USB_SetTurnaroundTime+0x128>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d306      	bcc.n	8003b54 <USB_SetTurnaroundTime+0x6c>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4a32      	ldr	r2, [pc, #200]	; (8003c14 <USB_SetTurnaroundTime+0x12c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d802      	bhi.n	8003b54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b4e:	230c      	movs	r3, #12
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e041      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4a2f      	ldr	r2, [pc, #188]	; (8003c14 <USB_SetTurnaroundTime+0x12c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d906      	bls.n	8003b6a <USB_SetTurnaroundTime+0x82>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4a2e      	ldr	r2, [pc, #184]	; (8003c18 <USB_SetTurnaroundTime+0x130>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d802      	bhi.n	8003b6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b64:	230b      	movs	r3, #11
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	e036      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <USB_SetTurnaroundTime+0x130>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d906      	bls.n	8003b80 <USB_SetTurnaroundTime+0x98>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4a29      	ldr	r2, [pc, #164]	; (8003c1c <USB_SetTurnaroundTime+0x134>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d802      	bhi.n	8003b80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b7a:	230a      	movs	r3, #10
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	e02b      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <USB_SetTurnaroundTime+0x134>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d906      	bls.n	8003b96 <USB_SetTurnaroundTime+0xae>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4a25      	ldr	r2, [pc, #148]	; (8003c20 <USB_SetTurnaroundTime+0x138>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d202      	bcs.n	8003b96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b90:	2309      	movs	r3, #9
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e020      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <USB_SetTurnaroundTime+0x138>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d306      	bcc.n	8003bac <USB_SetTurnaroundTime+0xc4>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <USB_SetTurnaroundTime+0x13c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d802      	bhi.n	8003bac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	e015      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <USB_SetTurnaroundTime+0x13c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d906      	bls.n	8003bc2 <USB_SetTurnaroundTime+0xda>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <USB_SetTurnaroundTime+0x140>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d202      	bcs.n	8003bc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003bbc:	2307      	movs	r3, #7
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	e00a      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003bc2:	2306      	movs	r3, #6
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e007      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003bce:	2309      	movs	r3, #9
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e001      	b.n	8003bd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003bd4:	2309      	movs	r3, #9
 8003bd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	029b      	lsls	r3, r3, #10
 8003bec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	00d8acbf 	.word	0x00d8acbf
 8003c08:	00e4e1c0 	.word	0x00e4e1c0
 8003c0c:	00f42400 	.word	0x00f42400
 8003c10:	01067380 	.word	0x01067380
 8003c14:	011a499f 	.word	0x011a499f
 8003c18:	01312cff 	.word	0x01312cff
 8003c1c:	014ca43f 	.word	0x014ca43f
 8003c20:	016e3600 	.word	0x016e3600
 8003c24:	01a6ab1f 	.word	0x01a6ab1f
 8003c28:	01e84800 	.word	0x01e84800

08003c2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f043 0201 	orr.w	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f023 0201 	bic.w	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d115      	bne.n	8003cbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f7fd fcc2 	bl	8001628 <HAL_Delay>
      ms++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f001 fa45 	bl	800513a <USB_GetMode>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d01e      	beq.n	8003cf4 <USB_SetCurrentMode+0x84>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b31      	cmp	r3, #49	; 0x31
 8003cba:	d9f0      	bls.n	8003c9e <USB_SetCurrentMode+0x2e>
 8003cbc:	e01a      	b.n	8003cf4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d115      	bne.n	8003cf0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	f7fd fca9 	bl	8001628 <HAL_Delay>
      ms++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f001 fa2c 	bl	800513a <USB_GetMode>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <USB_SetCurrentMode+0x84>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b31      	cmp	r3, #49	; 0x31
 8003cec:	d9f0      	bls.n	8003cd0 <USB_SetCurrentMode+0x60>
 8003cee:	e001      	b.n	8003cf4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e005      	b.n	8003d00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b32      	cmp	r3, #50	; 0x32
 8003cf8:	d101      	bne.n	8003cfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d08:	b084      	sub	sp, #16
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d22:	2300      	movs	r3, #0
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	e009      	b.n	8003d3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3340      	adds	r3, #64	; 0x40
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	2200      	movs	r2, #0
 8003d34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b0e      	cmp	r3, #14
 8003d40:	d9f2      	bls.n	8003d28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d11c      	bne.n	8003d82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d56:	f043 0302 	orr.w	r3, r3, #2
 8003d5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d80:	e00b      	b.n	8003d9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003da0:	461a      	mov	r2, r3
 8003da2:	2300      	movs	r3, #0
 8003da4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dac:	4619      	mov	r1, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	461a      	mov	r2, r3
 8003db6:	680b      	ldr	r3, [r1, #0]
 8003db8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d10c      	bne.n	8003dda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d104      	bne.n	8003dd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f965 	bl	8004098 <USB_SetDevSpeed>
 8003dce:	e008      	b.n	8003de2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f960 	bl	8004098 <USB_SetDevSpeed>
 8003dd8:	e003      	b.n	8003de2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003dda:	2103      	movs	r1, #3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f95b 	bl	8004098 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003de2:	2110      	movs	r1, #16
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f8f3 	bl	8003fd0 <USB_FlushTxFifo>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f91f 	bl	8004038 <USB_FlushRxFifo>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	461a      	mov	r2, r3
 8003e18:	2300      	movs	r3, #0
 8003e1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	461a      	mov	r2, r3
 8003e24:	2300      	movs	r3, #0
 8003e26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	e043      	b.n	8003eb6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e44:	d118      	bne.n	8003e78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	e013      	b.n	8003e8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e008      	b.n	8003e8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e84:	461a      	mov	r2, r3
 8003e86:	2300      	movs	r3, #0
 8003e88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	461a      	mov	r2, r3
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d3b7      	bcc.n	8003e2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e043      	b.n	8003f4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eda:	d118      	bne.n	8003f0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e013      	b.n	8003f20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f04:	461a      	mov	r2, r3
 8003f06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	e008      	b.n	8003f20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d3b7      	bcc.n	8003ec4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f043 0210 	orr.w	r2, r3, #16
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699a      	ldr	r2, [r3, #24]
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <USB_DevInit+0x2c4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f043 0208 	orr.w	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d107      	bne.n	8003fbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fb4:	f043 0304 	orr.w	r3, r3, #4
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fc8:	b004      	add	sp, #16
 8003fca:	4770      	bx	lr
 8003fcc:	803c3800 	.word	0x803c3800

08003fd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a13      	ldr	r2, [pc, #76]	; (8004034 <USB_FlushTxFifo+0x64>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e01b      	b.n	8004028 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	daf2      	bge.n	8003fde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	019b      	lsls	r3, r3, #6
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3301      	adds	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a08      	ldr	r2, [pc, #32]	; (8004034 <USB_FlushTxFifo+0x64>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e006      	b.n	8004028 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b20      	cmp	r3, #32
 8004024:	d0f0      	beq.n	8004008 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	00030d40 	.word	0x00030d40

08004038 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3301      	adds	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a11      	ldr	r2, [pc, #68]	; (8004094 <USB_FlushRxFifo+0x5c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e018      	b.n	8004088 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	daf2      	bge.n	8004044 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2210      	movs	r2, #16
 8004066:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3301      	adds	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a08      	ldr	r2, [pc, #32]	; (8004094 <USB_FlushRxFifo+0x5c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e006      	b.n	8004088 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b10      	cmp	r3, #16
 8004084:	d0f0      	beq.n	8004068 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	00030d40 	.word	0x00030d40

08004098 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 0306 	and.w	r3, r3, #6
 80040e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]
 80040ee:	e00a      	b.n	8004106 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d002      	beq.n	80040fc <USB_GetDevSpeed+0x32>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b06      	cmp	r3, #6
 80040fa:	d102      	bne.n	8004102 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80040fc:	2302      	movs	r3, #2
 80040fe:	75fb      	strb	r3, [r7, #23]
 8004100:	e001      	b.n	8004106 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004102:	230f      	movs	r3, #15
 8004104:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
}
 8004108:	4618      	mov	r0, r3
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d13a      	bne.n	80041a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	69da      	ldr	r2, [r3, #28]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	b29b      	uxth	r3, r3
 8004148:	68f9      	ldr	r1, [r7, #12]
 800414a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800414e:	4313      	orrs	r3, r2
 8004150:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d155      	bne.n	8004214 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	791b      	ldrb	r3, [r3, #4]
 8004182:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004184:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	059b      	lsls	r3, r3, #22
 800418a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800418c:	4313      	orrs	r3, r2
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	0151      	lsls	r1, r2, #5
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	440a      	add	r2, r1
 8004196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800419a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	e036      	b.n	8004214 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	2101      	movs	r1, #1
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11a      	bne.n	8004214 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	791b      	ldrb	r3, [r3, #4]
 80041f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041fa:	430b      	orrs	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	440a      	add	r2, r1
 8004206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004212:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	785b      	ldrb	r3, [r3, #1]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d161      	bne.n	8004304 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004256:	d11f      	bne.n	8004298 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	0151      	lsls	r1, r2, #5
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	440a      	add	r2, r1
 800426e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004272:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004276:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004292:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004296:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	2101      	movs	r1, #1
 80042aa:	fa01 f303 	lsl.w	r3, r1, r3
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	68f9      	ldr	r1, [r7, #12]
 80042b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042b8:	4013      	ands	r3, r2
 80042ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	2101      	movs	r1, #1
 80042ce:	fa01 f303 	lsl.w	r3, r1, r3
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042dc:	4013      	ands	r3, r2
 80042de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	0159      	lsls	r1, r3, #5
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	440b      	add	r3, r1
 80042f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fa:	4619      	mov	r1, r3
 80042fc:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <USB_DeactivateEndpoint+0x1b0>)
 80042fe:	4013      	ands	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
 8004302:	e060      	b.n	80043c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800431a:	d11f      	bne.n	800435c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	440a      	add	r2, r1
 8004332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004336:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800433a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	0151      	lsls	r1, r2, #5
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	440a      	add	r2, r1
 8004352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800435a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	43db      	mvns	r3, r3
 8004376:	68f9      	ldr	r1, [r7, #12]
 8004378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800437c:	4013      	ands	r3, r2
 800437e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	2101      	movs	r1, #1
 8004392:	fa01 f303 	lsl.w	r3, r1, r3
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	43db      	mvns	r3, r3
 800439a:	68f9      	ldr	r1, [r7, #12]
 800439c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a0:	4013      	ands	r3, r2
 80043a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	0159      	lsls	r1, r3, #5
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	440b      	add	r3, r1
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	4619      	mov	r1, r3
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <USB_DeactivateEndpoint+0x1b4>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	ec337800 	.word	0xec337800
 80043d8:	eff37800 	.word	0xeff37800

080043dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	f040 815c 	bne.w	80046b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d132      	bne.n	800446c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	440a      	add	r2, r1
 800441c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004464:	0cdb      	lsrs	r3, r3, #19
 8004466:	04db      	lsls	r3, r3, #19
 8004468:	6113      	str	r3, [r2, #16]
 800446a:	e074      	b.n	8004556 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	440a      	add	r2, r1
 8004482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004486:	0cdb      	lsrs	r3, r3, #19
 8004488:	04db      	lsls	r3, r3, #19
 800448a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6999      	ldr	r1, [r3, #24]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	440b      	add	r3, r1
 80044c8:	1e59      	subs	r1, r3, #1
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80044d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80044d4:	4b9d      	ldr	r3, [pc, #628]	; (800474c <USB_EPStartXfer+0x370>)
 80044d6:	400b      	ands	r3, r1
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	0148      	lsls	r0, r1, #5
 80044dc:	69f9      	ldr	r1, [r7, #28]
 80044de:	4401      	add	r1, r0
 80044e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044e4:	4313      	orrs	r3, r2
 80044e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fe:	69b9      	ldr	r1, [r7, #24]
 8004500:	0148      	lsls	r0, r1, #5
 8004502:	69f9      	ldr	r1, [r7, #28]
 8004504:	4401      	add	r1, r0
 8004506:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800450a:	4313      	orrs	r3, r2
 800450c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	791b      	ldrb	r3, [r3, #4]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d11f      	bne.n	8004556 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004530:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004534:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004554:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d14b      	bne.n	80045f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004570:	461a      	mov	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	791b      	ldrb	r3, [r3, #4]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d128      	bne.n	80045d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d110      	bne.n	80045b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e00f      	b.n	80045d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	0151      	lsls	r1, r2, #5
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	440a      	add	r2, r1
 80045e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e133      	b.n	800485c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	0151      	lsls	r1, r2, #5
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	440a      	add	r2, r1
 800460a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004612:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	791b      	ldrb	r3, [r3, #4]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d015      	beq.n	8004648 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 811b 	beq.w	800485c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	2101      	movs	r1, #1
 8004638:	fa01 f303 	lsl.w	r3, r1, r3
 800463c:	69f9      	ldr	r1, [r7, #28]
 800463e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004642:	4313      	orrs	r3, r2
 8004644:	634b      	str	r3, [r1, #52]	; 0x34
 8004646:	e109      	b.n	800485c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d110      	bne.n	800467a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	440a      	add	r2, r1
 800466e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004672:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e00f      	b.n	800469a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	440a      	add	r2, r1
 8004690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004698:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6919      	ldr	r1, [r3, #16]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	b298      	uxth	r0, r3
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	4603      	mov	r3, r0
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fade 	bl	8004c70 <USB_WritePacket>
 80046b4:	e0d2      	b.n	800485c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	0151      	lsls	r1, r2, #5
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	440a      	add	r2, r1
 80046cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d0:	0cdb      	lsrs	r3, r3, #19
 80046d2:	04db      	lsls	r3, r3, #19
 80046d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d126      	bne.n	8004750 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004718:	69b9      	ldr	r1, [r7, #24]
 800471a:	0148      	lsls	r0, r1, #5
 800471c:	69f9      	ldr	r1, [r7, #28]
 800471e:	4401      	add	r1, r0
 8004720:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004724:	4313      	orrs	r3, r2
 8004726:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	0151      	lsls	r1, r2, #5
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	440a      	add	r2, r1
 800473e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004746:	6113      	str	r3, [r2, #16]
 8004748:	e03a      	b.n	80047c0 <USB_EPStartXfer+0x3e4>
 800474a:	bf00      	nop
 800474c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4413      	add	r3, r2
 800475a:	1e5a      	subs	r2, r3, #1
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	8afa      	ldrh	r2, [r7, #22]
 800476c:	fb03 f202 	mul.w	r2, r3, r2
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	8afb      	ldrh	r3, [r7, #22]
 8004784:	04d9      	lsls	r1, r3, #19
 8004786:	4b38      	ldr	r3, [pc, #224]	; (8004868 <USB_EPStartXfer+0x48c>)
 8004788:	400b      	ands	r3, r1
 800478a:	69b9      	ldr	r1, [r7, #24]
 800478c:	0148      	lsls	r0, r1, #5
 800478e:	69f9      	ldr	r1, [r7, #28]
 8004790:	4401      	add	r1, r0
 8004792:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004796:	4313      	orrs	r3, r2
 8004798:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b0:	69b9      	ldr	r1, [r7, #24]
 80047b2:	0148      	lsls	r0, r1, #5
 80047b4:	69f9      	ldr	r1, [r7, #28]
 80047b6:	4401      	add	r1, r0
 80047b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047bc:	4313      	orrs	r3, r2
 80047be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d10d      	bne.n	80047e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6919      	ldr	r1, [r3, #16]
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047de:	460a      	mov	r2, r1
 80047e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d128      	bne.n	800483c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d110      	bne.n	800481c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	0151      	lsls	r1, r2, #5
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	440a      	add	r2, r1
 8004810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e00f      	b.n	800483c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004856:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800485a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	1ff80000 	.word	0x1ff80000

0800486c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	4613      	mov	r3, r2
 8004878:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	2b01      	cmp	r3, #1
 800488a:	f040 80ce 	bne.w	8004a2a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d132      	bne.n	80048fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f4:	0cdb      	lsrs	r3, r3, #19
 80048f6:	04db      	lsls	r3, r3, #19
 80048f8:	6113      	str	r3, [r2, #16]
 80048fa:	e04e      	b.n	800499a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004916:	0cdb      	lsrs	r3, r3, #19
 8004918:	04db      	lsls	r3, r3, #19
 800491a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004936:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800493a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800493e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	429a      	cmp	r2, r3
 800494a:	d903      	bls.n	8004954 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498a:	6939      	ldr	r1, [r7, #16]
 800498c:	0148      	lsls	r0, r1, #5
 800498e:	6979      	ldr	r1, [r7, #20]
 8004990:	4401      	add	r1, r0
 8004992:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d11e      	bne.n	80049de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b4:	461a      	mov	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e097      	b.n	8004b0e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8083 	beq.w	8004b0e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	2101      	movs	r1, #1
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	6979      	ldr	r1, [r7, #20]
 8004a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a24:	4313      	orrs	r3, r2
 8004a26:	634b      	str	r3, [r1, #52]	; 0x34
 8004a28:	e071      	b.n	8004b0e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a44:	0cdb      	lsrs	r3, r3, #19
 8004a46:	04db      	lsls	r3, r3, #19
 8004a48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a6c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	0151      	lsls	r1, r2, #5
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	440a      	add	r2, r1
 8004a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aa4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004abc:	6939      	ldr	r1, [r7, #16]
 8004abe:	0148      	lsls	r0, r1, #5
 8004ac0:	6979      	ldr	r1, [r7, #20]
 8004ac2:	4401      	add	r1, r0
 8004ac4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d10d      	bne.n	8004aee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6919      	ldr	r1, [r3, #16]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	460a      	mov	r2, r1
 8004aec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d14a      	bne.n	8004bd0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b52:	f040 8086 	bne.w	8004c62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	7812      	ldrb	r2, [r2, #0]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	0151      	lsls	r1, r2, #5
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	440a      	add	r2, r1
 8004b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d902      	bls.n	8004bb4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
          break;
 8004bb2:	e056      	b.n	8004c62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bcc:	d0e7      	beq.n	8004b9e <USB_EPStopXfer+0x82>
 8004bce:	e048      	b.n	8004c62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be8:	d13b      	bne.n	8004c62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	7812      	ldrb	r2, [r2, #0]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3301      	adds	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d902      	bls.n	8004c48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	75fb      	strb	r3, [r7, #23]
          break;
 8004c46:	e00c      	b.n	8004c62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c60:	d0e7      	beq.n	8004c32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b089      	sub	sp, #36	; 0x24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	460b      	mov	r3, r1
 8004c80:	71fb      	strb	r3, [r7, #7]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d123      	bne.n	8004cde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c96:	88bb      	ldrh	r3, [r7, #4]
 8004c98:	3303      	adds	r3, #3
 8004c9a:	089b      	lsrs	r3, r3, #2
 8004c9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e018      	b.n	8004cd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	031a      	lsls	r2, r3, #12
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d3e2      	bcc.n	8004ca4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3724      	adds	r7, #36	; 0x24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b08b      	sub	sp, #44	; 0x2c
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	089b      	lsrs	r3, r3, #2
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d12:	2300      	movs	r3, #0
 8004d14:	623b      	str	r3, [r7, #32]
 8004d16:	e014      	b.n	8004d42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	3301      	adds	r3, #1
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	3301      	adds	r3, #1
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	3301      	adds	r3, #1
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	6a3a      	ldr	r2, [r7, #32]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d3e6      	bcc.n	8004d18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d4a:	8bfb      	ldrh	r3, [r7, #30]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01e      	beq.n	8004d8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f107 0310 	add.w	r3, r7, #16
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	701a      	strb	r2, [r3, #0]
      i++;
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	3301      	adds	r3, #1
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d82:	8bfb      	ldrh	r3, [r7, #30]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d88:	8bfb      	ldrh	r3, [r7, #30]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1ea      	bne.n	8004d64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	372c      	adds	r7, #44	; 0x2c
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d12c      	bne.n	8004e12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	db12      	blt.n	8004df0 <USB_EPSetStall+0x54>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00f      	beq.n	8004df0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e02b      	b.n	8004e6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	db12      	blt.n	8004e4a <USB_EPSetStall+0xae>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00f      	beq.n	8004e4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d128      	bne.n	8004ee6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	791b      	ldrb	r3, [r3, #4]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d003      	beq.n	8004ec4 <USB_EPClearStall+0x4c>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	791b      	ldrb	r3, [r3, #4]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d138      	bne.n	8004f36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	e027      	b.n	8004f36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	791b      	ldrb	r3, [r3, #4]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d003      	beq.n	8004f16 <USB_EPClearStall+0x9e>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	791b      	ldrb	r3, [r3, #4]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d10f      	bne.n	8004f36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004f78:	68f9      	ldr	r1, [r7, #12]
 8004f7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fbe:	f023 0302 	bic.w	r3, r3, #2
 8004fc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004fec:	f023 0303 	bic.w	r3, r3, #3
 8004ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4013      	ands	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800502c:	68fb      	ldr	r3, [r7, #12]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	0c1b      	lsrs	r3, r3, #16
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	4013      	ands	r3, r2
 8005090:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	b29b      	uxth	r3, r3
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	460b      	mov	r3, r1
 80050ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	4013      	ands	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050d0:	68bb      	ldr	r3, [r7, #8]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005100:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	fa22 f303 	lsr.w	r3, r2, r3
 800510e:	01db      	lsls	r3, r3, #7
 8005110:	b2db      	uxtb	r3, r3
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4013      	ands	r3, r2
 800512a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800512c:	68bb      	ldr	r3, [r7, #8]
}
 800512e:	4618      	mov	r0, r3
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f003 0301 	and.w	r3, r3, #1
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005170:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005174:	f023 0307 	bic.w	r3, r3, #7
 8005178:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800518c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	460b      	mov	r3, r1
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	333c      	adds	r3, #60	; 0x3c
 80051b2:	3304      	adds	r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4a26      	ldr	r2, [pc, #152]	; (8005254 <USB_EP0_OutStart+0xb8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d90a      	bls.n	80051d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d0:	d101      	bne.n	80051d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e037      	b.n	8005246 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	461a      	mov	r2, r3
 80051de:	2300      	movs	r3, #0
 80051e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005204:	f043 0318 	orr.w	r3, r3, #24
 8005208:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005218:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800521c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800521e:	7afb      	ldrb	r3, [r7, #11]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d10f      	bne.n	8005244 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	461a      	mov	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800523e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005242:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	4f54300a 	.word	0x4f54300a

08005258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4a13      	ldr	r2, [pc, #76]	; (80052bc <USB_CoreReset+0x64>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e01b      	b.n	80052ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	daf2      	bge.n	8005264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f043 0201 	orr.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3301      	adds	r3, #1
 8005292:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <USB_CoreReset+0x64>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d901      	bls.n	80052a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e006      	b.n	80052ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d0f0      	beq.n	800528e <USB_CoreReset+0x36>

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	00030d40 	.word	0x00030d40

080052c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80052d0:	f003 fef8 	bl	80090c4 <USBD_static_malloc>
 80052d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	32b0      	adds	r2, #176	; 0xb0
 80052e6:	2100      	movs	r1, #0
 80052e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80052ec:	2302      	movs	r3, #2
 80052ee:	e0d4      	b.n	800549a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80052f0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80052f4:	2100      	movs	r1, #0
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f004 fd96 	bl	8009e28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	32b0      	adds	r2, #176	; 0xb0
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	32b0      	adds	r2, #176	; 0xb0
 8005316:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	7c1b      	ldrb	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d138      	bne.n	800539a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005328:	4b5e      	ldr	r3, [pc, #376]	; (80054a4 <USBD_CDC_Init+0x1e4>)
 800532a:	7819      	ldrb	r1, [r3, #0]
 800532c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005330:	2202      	movs	r2, #2
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f003 fda3 	bl	8008e7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005338:	4b5a      	ldr	r3, [pc, #360]	; (80054a4 <USBD_CDC_Init+0x1e4>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f003 020f 	and.w	r2, r3, #15
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	3324      	adds	r3, #36	; 0x24
 800534e:	2201      	movs	r2, #1
 8005350:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005352:	4b55      	ldr	r3, [pc, #340]	; (80054a8 <USBD_CDC_Init+0x1e8>)
 8005354:	7819      	ldrb	r1, [r3, #0]
 8005356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800535a:	2202      	movs	r2, #2
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f003 fd8e 	bl	8008e7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005362:	4b51      	ldr	r3, [pc, #324]	; (80054a8 <USBD_CDC_Init+0x1e8>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	f003 020f 	and.w	r2, r3, #15
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800537a:	2201      	movs	r2, #1
 800537c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800537e:	4b4b      	ldr	r3, [pc, #300]	; (80054ac <USBD_CDC_Init+0x1ec>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	f003 020f 	and.w	r2, r3, #15
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	3326      	adds	r3, #38	; 0x26
 8005394:	2210      	movs	r2, #16
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	e035      	b.n	8005406 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800539a:	4b42      	ldr	r3, [pc, #264]	; (80054a4 <USBD_CDC_Init+0x1e4>)
 800539c:	7819      	ldrb	r1, [r3, #0]
 800539e:	2340      	movs	r3, #64	; 0x40
 80053a0:	2202      	movs	r2, #2
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f003 fd6b 	bl	8008e7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053a8:	4b3e      	ldr	r3, [pc, #248]	; (80054a4 <USBD_CDC_Init+0x1e4>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	3324      	adds	r3, #36	; 0x24
 80053be:	2201      	movs	r2, #1
 80053c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80053c2:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <USBD_CDC_Init+0x1e8>)
 80053c4:	7819      	ldrb	r1, [r3, #0]
 80053c6:	2340      	movs	r3, #64	; 0x40
 80053c8:	2202      	movs	r2, #2
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f003 fd57 	bl	8008e7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80053d0:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <USBD_CDC_Init+0x1e8>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	f003 020f 	and.w	r2, r3, #15
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	440b      	add	r3, r1
 80053e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80053e8:	2201      	movs	r2, #1
 80053ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80053ec:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <USBD_CDC_Init+0x1ec>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	3326      	adds	r3, #38	; 0x26
 8005402:	2210      	movs	r2, #16
 8005404:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005406:	4b29      	ldr	r3, [pc, #164]	; (80054ac <USBD_CDC_Init+0x1ec>)
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	2308      	movs	r3, #8
 800540c:	2203      	movs	r2, #3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f003 fd35 	bl	8008e7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005414:	4b25      	ldr	r3, [pc, #148]	; (80054ac <USBD_CDC_Init+0x1ec>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f003 020f 	and.w	r2, r3, #15
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	440b      	add	r3, r1
 8005428:	3324      	adds	r3, #36	; 0x24
 800542a:	2201      	movs	r2, #1
 800542c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	33b0      	adds	r3, #176	; 0xb0
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005464:	2302      	movs	r3, #2
 8005466:	e018      	b.n	800549a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7c1b      	ldrb	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005470:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <USBD_CDC_Init+0x1e8>)
 8005472:	7819      	ldrb	r1, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800547a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f003 fdec 	bl	800905c <USBD_LL_PrepareReceive>
 8005484:	e008      	b.n	8005498 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <USBD_CDC_Init+0x1e8>)
 8005488:	7819      	ldrb	r1, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005490:	2340      	movs	r3, #64	; 0x40
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f003 fde2 	bl	800905c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000093 	.word	0x20000093
 80054a8:	20000094 	.word	0x20000094
 80054ac:	20000095 	.word	0x20000095

080054b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80054bc:	4b3a      	ldr	r3, [pc, #232]	; (80055a8 <USBD_CDC_DeInit+0xf8>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f003 fd01 	bl	8008eca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80054c8:	4b37      	ldr	r3, [pc, #220]	; (80055a8 <USBD_CDC_DeInit+0xf8>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 020f 	and.w	r2, r3, #15
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	2200      	movs	r2, #0
 80054e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80054e2:	4b32      	ldr	r3, [pc, #200]	; (80055ac <USBD_CDC_DeInit+0xfc>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f003 fcee 	bl	8008eca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80054ee:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <USBD_CDC_DeInit+0xfc>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 020f 	and.w	r2, r3, #15
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005506:	2200      	movs	r2, #0
 8005508:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800550a:	4b29      	ldr	r3, [pc, #164]	; (80055b0 <USBD_CDC_DeInit+0x100>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f003 fcda 	bl	8008eca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005516:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <USBD_CDC_DeInit+0x100>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	f003 020f 	and.w	r2, r3, #15
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	3324      	adds	r3, #36	; 0x24
 800552c:	2200      	movs	r2, #0
 800552e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005530:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <USBD_CDC_DeInit+0x100>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	f003 020f 	and.w	r2, r3, #15
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	3326      	adds	r3, #38	; 0x26
 8005546:	2200      	movs	r2, #0
 8005548:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	32b0      	adds	r2, #176	; 0xb0
 8005554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01f      	beq.n	800559c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	33b0      	adds	r3, #176	; 0xb0
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	32b0      	adds	r2, #176	; 0xb0
 800557a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557e:	4618      	mov	r0, r3
 8005580:	f003 fdae 	bl	80090e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	32b0      	adds	r2, #176	; 0xb0
 800558e:	2100      	movs	r1, #0
 8005590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000093 	.word	0x20000093
 80055ac:	20000094 	.word	0x20000094
 80055b0:	20000095 	.word	0x20000095

080055b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	32b0      	adds	r2, #176	; 0xb0
 80055c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e0bf      	b.n	8005764 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d050      	beq.n	8005692 <USBD_CDC_Setup+0xde>
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	f040 80af 	bne.w	8005754 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	88db      	ldrh	r3, [r3, #6]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d03a      	beq.n	8005674 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	b25b      	sxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	da1b      	bge.n	8005640 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	33b0      	adds	r3, #176	; 0xb0
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800561e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	88d2      	ldrh	r2, [r2, #6]
 8005624:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	88db      	ldrh	r3, [r3, #6]
 800562a:	2b07      	cmp	r3, #7
 800562c:	bf28      	it	cs
 800562e:	2307      	movcs	r3, #7
 8005630:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	89fa      	ldrh	r2, [r7, #14]
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 fd89 	bl	8007150 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800563e:	e090      	b.n	8005762 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	785a      	ldrb	r2, [r3, #1]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	88db      	ldrh	r3, [r3, #6]
 800564e:	2b3f      	cmp	r3, #63	; 0x3f
 8005650:	d803      	bhi.n	800565a <USBD_CDC_Setup+0xa6>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	88db      	ldrh	r3, [r3, #6]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	e000      	b.n	800565c <USBD_CDC_Setup+0xa8>
 800565a:	2240      	movs	r2, #64	; 0x40
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005662:	6939      	ldr	r1, [r7, #16]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800566a:	461a      	mov	r2, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 fd9b 	bl	80071a8 <USBD_CtlPrepareRx>
      break;
 8005672:	e076      	b.n	8005762 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	33b0      	adds	r3, #176	; 0xb0
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	7850      	ldrb	r0, [r2, #1]
 800568a:	2200      	movs	r2, #0
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	4798      	blx	r3
      break;
 8005690:	e067      	b.n	8005762 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b0b      	cmp	r3, #11
 8005698:	d851      	bhi.n	800573e <USBD_CDC_Setup+0x18a>
 800569a:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <USBD_CDC_Setup+0xec>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	080056d1 	.word	0x080056d1
 80056a4:	0800574d 	.word	0x0800574d
 80056a8:	0800573f 	.word	0x0800573f
 80056ac:	0800573f 	.word	0x0800573f
 80056b0:	0800573f 	.word	0x0800573f
 80056b4:	0800573f 	.word	0x0800573f
 80056b8:	0800573f 	.word	0x0800573f
 80056bc:	0800573f 	.word	0x0800573f
 80056c0:	0800573f 	.word	0x0800573f
 80056c4:	0800573f 	.word	0x0800573f
 80056c8:	080056fb 	.word	0x080056fb
 80056cc:	08005725 	.word	0x08005725
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d107      	bne.n	80056ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056dc:	f107 030a 	add.w	r3, r7, #10
 80056e0:	2202      	movs	r2, #2
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 fd33 	bl	8007150 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056ea:	e032      	b.n	8005752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fcbd 	bl	800706e <USBD_CtlError>
            ret = USBD_FAIL;
 80056f4:	2303      	movs	r3, #3
 80056f6:	75fb      	strb	r3, [r7, #23]
          break;
 80056f8:	e02b      	b.n	8005752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b03      	cmp	r3, #3
 8005704:	d107      	bne.n	8005716 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005706:	f107 030d 	add.w	r3, r7, #13
 800570a:	2201      	movs	r2, #1
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fd1e 	bl	8007150 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005714:	e01d      	b.n	8005752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 fca8 	bl	800706e <USBD_CtlError>
            ret = USBD_FAIL;
 800571e:	2303      	movs	r3, #3
 8005720:	75fb      	strb	r3, [r7, #23]
          break;
 8005722:	e016      	b.n	8005752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b03      	cmp	r3, #3
 800572e:	d00f      	beq.n	8005750 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 fc9b 	bl	800706e <USBD_CtlError>
            ret = USBD_FAIL;
 8005738:	2303      	movs	r3, #3
 800573a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800573c:	e008      	b.n	8005750 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800573e:	6839      	ldr	r1, [r7, #0]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fc94 	bl	800706e <USBD_CtlError>
          ret = USBD_FAIL;
 8005746:	2303      	movs	r3, #3
 8005748:	75fb      	strb	r3, [r7, #23]
          break;
 800574a:	e002      	b.n	8005752 <USBD_CDC_Setup+0x19e>
          break;
 800574c:	bf00      	nop
 800574e:	e008      	b.n	8005762 <USBD_CDC_Setup+0x1ae>
          break;
 8005750:	bf00      	nop
      }
      break;
 8005752:	e006      	b.n	8005762 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 fc89 	bl	800706e <USBD_CtlError>
      ret = USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	75fb      	strb	r3, [r7, #23]
      break;
 8005760:	bf00      	nop
  }

  return (uint8_t)ret;
 8005762:	7dfb      	ldrb	r3, [r7, #23]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800577e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	32b0      	adds	r2, #176	; 0xb0
 800578a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005792:	2303      	movs	r3, #3
 8005794:	e065      	b.n	8005862 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32b0      	adds	r2, #176	; 0xb0
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	f003 020f 	and.w	r2, r3, #15
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	3318      	adds	r3, #24
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02f      	beq.n	8005820 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	f003 020f 	and.w	r2, r3, #15
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	3318      	adds	r3, #24
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	f003 010f 	and.w	r1, r3, #15
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	460b      	mov	r3, r1
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	440b      	add	r3, r1
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4403      	add	r3, r0
 80057e8:	3348      	adds	r3, #72	; 0x48
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d112      	bne.n	8005820 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	f003 020f 	and.w	r2, r3, #15
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3318      	adds	r3, #24
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005812:	78f9      	ldrb	r1, [r7, #3]
 8005814:	2300      	movs	r3, #0
 8005816:	2200      	movs	r2, #0
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f003 fbfe 	bl	800901a <USBD_LL_Transmit>
 800581e:	e01f      	b.n	8005860 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	33b0      	adds	r3, #176	; 0xb0
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	33b0      	adds	r3, #176	; 0xb0
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	460b      	mov	r3, r1
 8005874:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	32b0      	adds	r2, #176	; 0xb0
 8005880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005884:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	32b0      	adds	r2, #176	; 0xb0
 8005890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005898:	2303      	movs	r3, #3
 800589a:	e01a      	b.n	80058d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f003 fbfc 	bl	800909e <USBD_LL_GetRxDataSize>
 80058a6:	4602      	mov	r2, r0
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	33b0      	adds	r3, #176	; 0xb0
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058cc:	4611      	mov	r1, r2
 80058ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	32b0      	adds	r2, #176	; 0xb0
 80058ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e025      	b.n	8005948 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	33b0      	adds	r3, #176	; 0xb0
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01a      	beq.n	8005946 <USBD_CDC_EP0_RxReady+0x6c>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005916:	2bff      	cmp	r3, #255	; 0xff
 8005918:	d015      	beq.n	8005946 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	33b0      	adds	r3, #176	; 0xb0
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005932:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800593a:	b292      	uxth	r2, r2
 800593c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	22ff      	movs	r2, #255	; 0xff
 8005942:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005958:	2182      	movs	r1, #130	; 0x82
 800595a:	4818      	ldr	r0, [pc, #96]	; (80059bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800595c:	f000 fd4f 	bl	80063fe <USBD_GetEpDesc>
 8005960:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005962:	2101      	movs	r1, #1
 8005964:	4815      	ldr	r0, [pc, #84]	; (80059bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005966:	f000 fd4a 	bl	80063fe <USBD_GetEpDesc>
 800596a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800596c:	2181      	movs	r1, #129	; 0x81
 800596e:	4813      	ldr	r0, [pc, #76]	; (80059bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005970:	f000 fd45 	bl	80063fe <USBD_GetEpDesc>
 8005974:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2210      	movs	r2, #16
 8005980:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d006      	beq.n	8005996 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2200      	movs	r2, #0
 800598c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005990:	711a      	strb	r2, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a4:	711a      	strb	r2, [r3, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2243      	movs	r2, #67	; 0x43
 80059ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059b0:	4b02      	ldr	r3, [pc, #8]	; (80059bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000050 	.word	0x20000050

080059c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059c8:	2182      	movs	r1, #130	; 0x82
 80059ca:	4818      	ldr	r0, [pc, #96]	; (8005a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059cc:	f000 fd17 	bl	80063fe <USBD_GetEpDesc>
 80059d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059d2:	2101      	movs	r1, #1
 80059d4:	4815      	ldr	r0, [pc, #84]	; (8005a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059d6:	f000 fd12 	bl	80063fe <USBD_GetEpDesc>
 80059da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059dc:	2181      	movs	r1, #129	; 0x81
 80059de:	4813      	ldr	r0, [pc, #76]	; (8005a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059e0:	f000 fd0d 	bl	80063fe <USBD_GetEpDesc>
 80059e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2210      	movs	r2, #16
 80059f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d006      	beq.n	8005a06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2200      	movs	r2, #0
 80059fc:	711a      	strb	r2, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f042 0202 	orr.w	r2, r2, #2
 8005a04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d006      	beq.n	8005a1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	711a      	strb	r2, [r3, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f042 0202 	orr.w	r2, r2, #2
 8005a18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2243      	movs	r2, #67	; 0x43
 8005a1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a20:	4b02      	ldr	r3, [pc, #8]	; (8005a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000050 	.word	0x20000050

08005a30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a38:	2182      	movs	r1, #130	; 0x82
 8005a3a:	4818      	ldr	r0, [pc, #96]	; (8005a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a3c:	f000 fcdf 	bl	80063fe <USBD_GetEpDesc>
 8005a40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a42:	2101      	movs	r1, #1
 8005a44:	4815      	ldr	r0, [pc, #84]	; (8005a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a46:	f000 fcda 	bl	80063fe <USBD_GetEpDesc>
 8005a4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a4c:	2181      	movs	r1, #129	; 0x81
 8005a4e:	4813      	ldr	r0, [pc, #76]	; (8005a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a50:	f000 fcd5 	bl	80063fe <USBD_GetEpDesc>
 8005a54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2210      	movs	r2, #16
 8005a60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d006      	beq.n	8005a76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a70:	711a      	strb	r2, [r3, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d006      	beq.n	8005a8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a84:	711a      	strb	r2, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2243      	movs	r2, #67	; 0x43
 8005a8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a90:	4b02      	ldr	r3, [pc, #8]	; (8005a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000050 	.word	0x20000050

08005aa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	220a      	movs	r2, #10
 8005aac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005aae:	4b03      	ldr	r3, [pc, #12]	; (8005abc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	2000000c 	.word	0x2000000c

08005ac0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e009      	b.n	8005ae8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	33b0      	adds	r3, #176	; 0xb0
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	32b0      	adds	r2, #176	; 0xb0
 8005b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e008      	b.n	8005b2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	32b0      	adds	r2, #176	; 0xb0
 8005b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e004      	b.n	8005b66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	32b0      	adds	r2, #176	; 0xb0
 8005b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	32b0      	adds	r2, #176	; 0xb0
 8005b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e025      	b.n	8005bf2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d11f      	bne.n	8005bf0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005bb8:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <USBD_CDC_TransmitPacket+0x88>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f003 020f 	and.w	r2, r3, #15
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4403      	add	r3, r0
 8005bd2:	3318      	adds	r3, #24
 8005bd4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005bd6:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <USBD_CDC_TransmitPacket+0x88>)
 8005bd8:	7819      	ldrb	r1, [r3, #0]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f003 fa17 	bl	800901a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000093 	.word	0x20000093

08005c00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	32b0      	adds	r2, #176	; 0xb0
 8005c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	32b0      	adds	r2, #176	; 0xb0
 8005c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e018      	b.n	8005c60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	7c1b      	ldrb	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10a      	bne.n	8005c4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c36:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <USBD_CDC_ReceivePacket+0x68>)
 8005c38:	7819      	ldrb	r1, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f003 fa09 	bl	800905c <USBD_LL_PrepareReceive>
 8005c4a:	e008      	b.n	8005c5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005c4c:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <USBD_CDC_ReceivePacket+0x68>)
 8005c4e:	7819      	ldrb	r1, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c56:	2340      	movs	r3, #64	; 0x40
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f003 f9ff 	bl	800905c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20000094 	.word	0x20000094

08005c6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e01f      	b.n	8005cc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	79fa      	ldrb	r2, [r7, #7]
 8005cb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f003 f879 	bl	8008db0 <USBD_LL_Init>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e025      	b.n	8005d30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	32ae      	adds	r2, #174	; 0xae
 8005cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00f      	beq.n	8005d20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	32ae      	adds	r2, #174	; 0xae
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	f107 020e 	add.w	r2, r7, #14
 8005d14:	4610      	mov	r0, r2
 8005d16:	4798      	blx	r3
 8005d18:	4602      	mov	r2, r0
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f003 f881 	bl	8008e48 <USBD_LL_Start>
 8005d46:	4603      	mov	r3, r0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d009      	beq.n	8005d94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	78fa      	ldrb	r2, [r7, #3]
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	460b      	mov	r3, r1
 8005da8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	4611      	mov	r1, r2
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 f908 	bl	8006ffa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d01a      	beq.n	8005e44 <USBD_LL_SetupStage+0x72>
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d822      	bhi.n	8005e58 <USBD_LL_SetupStage+0x86>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <USBD_LL_SetupStage+0x4a>
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d00a      	beq.n	8005e30 <USBD_LL_SetupStage+0x5e>
 8005e1a:	e01d      	b.n	8005e58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fb5f 	bl	80064e8 <USBD_StdDevReq>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2e:	e020      	b.n	8005e72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fbc7 	bl	80065cc <USBD_StdItfReq>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	73fb      	strb	r3, [r7, #15]
      break;
 8005e42:	e016      	b.n	8005e72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fc29 	bl	80066a4 <USBD_StdEPReq>
 8005e52:	4603      	mov	r3, r0
 8005e54:	73fb      	strb	r3, [r7, #15]
      break;
 8005e56:	e00c      	b.n	8005e72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f003 f84e 	bl	8008f08 <USBD_LL_StallEP>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e70:	bf00      	nop
  }

  return ret;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	460b      	mov	r3, r1
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e8e:	7afb      	ldrb	r3, [r7, #11]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d16e      	bne.n	8005f72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	f040 8098 	bne.w	8005fd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d913      	bls.n	8005edc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	1ad2      	subs	r2, r2, r3
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	bf28      	it	cs
 8005ece:	4613      	movcs	r3, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6879      	ldr	r1, [r7, #4]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f001 f984 	bl	80071e2 <USBD_CtlContinueRx>
 8005eda:	e07d      	b.n	8005fd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d014      	beq.n	8005f14 <USBD_LL_DataOutStage+0x98>
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d81d      	bhi.n	8005f2a <USBD_LL_DataOutStage+0xae>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <USBD_LL_DataOutStage+0x7c>
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d003      	beq.n	8005efe <USBD_LL_DataOutStage+0x82>
 8005ef6:	e018      	b.n	8005f2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	75bb      	strb	r3, [r7, #22]
            break;
 8005efc:	e018      	b.n	8005f30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	4619      	mov	r1, r3
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fa5e 	bl	80063ca <USBD_CoreFindIF>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	75bb      	strb	r3, [r7, #22]
            break;
 8005f12:	e00d      	b.n	8005f30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fa60 	bl	80063e4 <USBD_CoreFindEP>
 8005f24:	4603      	mov	r3, r0
 8005f26:	75bb      	strb	r3, [r7, #22]
            break;
 8005f28:	e002      	b.n	8005f30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	75bb      	strb	r3, [r7, #22]
            break;
 8005f2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005f30:	7dbb      	ldrb	r3, [r7, #22]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d119      	bne.n	8005f6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d113      	bne.n	8005f6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005f42:	7dba      	ldrb	r2, [r7, #22]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	32ae      	adds	r2, #174	; 0xae
 8005f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005f52:	7dba      	ldrb	r2, [r7, #22]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005f5a:	7dba      	ldrb	r2, [r7, #22]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	32ae      	adds	r2, #174	; 0xae
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f001 f94a 	bl	8007204 <USBD_CtlSendStatus>
 8005f70:	e032      	b.n	8005fd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005f72:	7afb      	ldrb	r3, [r7, #11]
 8005f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 fa31 	bl	80063e4 <USBD_CoreFindEP>
 8005f82:	4603      	mov	r3, r0
 8005f84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f86:	7dbb      	ldrb	r3, [r7, #22]
 8005f88:	2bff      	cmp	r3, #255	; 0xff
 8005f8a:	d025      	beq.n	8005fd8 <USBD_LL_DataOutStage+0x15c>
 8005f8c:	7dbb      	ldrb	r3, [r7, #22]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d122      	bne.n	8005fd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d117      	bne.n	8005fce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f9e:	7dba      	ldrb	r2, [r7, #22]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	32ae      	adds	r2, #174	; 0xae
 8005fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00f      	beq.n	8005fce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005fae:	7dba      	ldrb	r2, [r7, #22]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005fb6:	7dba      	ldrb	r2, [r7, #22]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	32ae      	adds	r2, #174	; 0xae
 8005fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	7afa      	ldrb	r2, [r7, #11]
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	4798      	blx	r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	e000      	b.n	8005fda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b086      	sub	sp, #24
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	460b      	mov	r3, r1
 8005fec:	607a      	str	r2, [r7, #4]
 8005fee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005ff0:	7afb      	ldrb	r3, [r7, #11]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d16f      	bne.n	80060d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006002:	2b02      	cmp	r3, #2
 8006004:	d15a      	bne.n	80060bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	429a      	cmp	r2, r3
 8006010:	d914      	bls.n	800603c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	1ad2      	subs	r2, r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	461a      	mov	r2, r3
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f001 f8ac 	bl	8007186 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800602e:	2300      	movs	r3, #0
 8006030:	2200      	movs	r2, #0
 8006032:	2100      	movs	r1, #0
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f003 f811 	bl	800905c <USBD_LL_PrepareReceive>
 800603a:	e03f      	b.n	80060bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	d11c      	bne.n	8006082 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006050:	429a      	cmp	r2, r3
 8006052:	d316      	bcc.n	8006082 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800605e:	429a      	cmp	r2, r3
 8006060:	d20f      	bcs.n	8006082 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006062:	2200      	movs	r2, #0
 8006064:	2100      	movs	r1, #0
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f001 f88d 	bl	8007186 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006074:	2300      	movs	r3, #0
 8006076:	2200      	movs	r2, #0
 8006078:	2100      	movs	r1, #0
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f002 ffee 	bl	800905c <USBD_LL_PrepareReceive>
 8006080:	e01c      	b.n	80060bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b03      	cmp	r3, #3
 800608c:	d10f      	bne.n	80060ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f002 ff29 	bl	8008f08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f001 f8b7 	bl	800722a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d03a      	beq.n	800613c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7ff fe42 	bl	8005d50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060d4:	e032      	b.n	800613c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80060d6:	7afb      	ldrb	r3, [r7, #11]
 80060d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	4619      	mov	r1, r3
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f97f 	bl	80063e4 <USBD_CoreFindEP>
 80060e6:	4603      	mov	r3, r0
 80060e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
 80060ec:	2bff      	cmp	r3, #255	; 0xff
 80060ee:	d025      	beq.n	800613c <USBD_LL_DataInStage+0x15a>
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d122      	bne.n	800613c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d11c      	bne.n	800613c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006102:	7dfa      	ldrb	r2, [r7, #23]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	32ae      	adds	r2, #174	; 0xae
 8006108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d014      	beq.n	800613c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006112:	7dfa      	ldrb	r2, [r7, #23]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800611a:	7dfa      	ldrb	r2, [r7, #23]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	32ae      	adds	r2, #174	; 0xae
 8006120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	7afa      	ldrb	r2, [r7, #11]
 8006128:	4611      	mov	r1, r2
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	4798      	blx	r3
 800612e:	4603      	mov	r3, r0
 8006130:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006132:	7dbb      	ldrb	r3, [r7, #22]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006138:	7dbb      	ldrb	r3, [r7, #22]
 800613a:	e000      	b.n	800613e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d014      	beq.n	80061ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00e      	beq.n	80061ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6852      	ldr	r2, [r2, #4]
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	4611      	mov	r1, r2
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061ac:	2340      	movs	r3, #64	; 0x40
 80061ae:	2200      	movs	r2, #0
 80061b0:	2100      	movs	r1, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f002 fe63 	bl	8008e7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2240      	movs	r2, #64	; 0x40
 80061c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061c8:	2340      	movs	r3, #64	; 0x40
 80061ca:	2200      	movs	r2, #0
 80061cc:	2180      	movs	r1, #128	; 0x80
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f002 fe55 	bl	8008e7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2240      	movs	r2, #64	; 0x40
 80061de:	621a      	str	r2, [r3, #32]

  return ret;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	460b      	mov	r3, r1
 80061f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	78fa      	ldrb	r2, [r7, #3]
 80061fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006218:	b2da      	uxtb	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2204      	movs	r2, #4
 8006224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b04      	cmp	r3, #4
 8006248:	d106      	bne.n	8006258 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006250:	b2da      	uxtb	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b03      	cmp	r3, #3
 8006278:	d110      	bne.n	800629c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	460b      	mov	r3, r1
 80062b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	32ae      	adds	r2, #174	; 0xae
 80062bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e01c      	b.n	8006302 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d115      	bne.n	8006300 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	32ae      	adds	r2, #174	; 0xae
 80062de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	32ae      	adds	r2, #174	; 0xae
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	78fa      	ldrb	r2, [r7, #3]
 80062fa:	4611      	mov	r1, r2
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	32ae      	adds	r2, #174	; 0xae
 8006320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006328:	2303      	movs	r3, #3
 800632a:	e01c      	b.n	8006366 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b03      	cmp	r3, #3
 8006336:	d115      	bne.n	8006364 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	32ae      	adds	r2, #174	; 0xae
 8006342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	32ae      	adds	r2, #174	; 0xae
 8006356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	78fa      	ldrb	r2, [r7, #3]
 800635e:	4611      	mov	r1, r2
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00e      	beq.n	80063c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6852      	ldr	r2, [r2, #4]
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	4611      	mov	r1, r2
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80063bc:	2303      	movs	r3, #3
 80063be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	885b      	ldrh	r3, [r3, #2]
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	429a      	cmp	r2, r3
 8006424:	d920      	bls.n	8006468 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800642e:	e013      	b.n	8006458 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006430:	f107 030a 	add.w	r3, r7, #10
 8006434:	4619      	mov	r1, r3
 8006436:	6978      	ldr	r0, [r7, #20]
 8006438:	f000 f81b 	bl	8006472 <USBD_GetNextDesc>
 800643c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	2b05      	cmp	r3, #5
 8006444:	d108      	bne.n	8006458 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	789b      	ldrb	r3, [r3, #2]
 800644e:	78fa      	ldrb	r2, [r7, #3]
 8006450:	429a      	cmp	r2, r3
 8006452:	d008      	beq.n	8006466 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	885b      	ldrh	r3, [r3, #2]
 800645c:	b29a      	uxth	r2, r3
 800645e:	897b      	ldrh	r3, [r7, #10]
 8006460:	429a      	cmp	r2, r3
 8006462:	d8e5      	bhi.n	8006430 <USBD_GetEpDesc+0x32>
 8006464:	e000      	b.n	8006468 <USBD_GetEpDesc+0x6a>
          break;
 8006466:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006468:	693b      	ldr	r3, [r7, #16]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006472:	b480      	push	{r7}
 8006474:	b085      	sub	sp, #20
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	4413      	add	r3, r2
 800648c:	b29a      	uxth	r2, r3
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4413      	add	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800649e:	68fb      	ldr	r3, [r7, #12]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	3301      	adds	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80064ca:	8a3b      	ldrh	r3, [r7, #16]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	b21a      	sxth	r2, r3
 80064d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	b21b      	sxth	r3, r3
 80064d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80064da:	89fb      	ldrh	r3, [r7, #14]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d005      	beq.n	800650e <USBD_StdDevReq+0x26>
 8006502:	2b40      	cmp	r3, #64	; 0x40
 8006504:	d857      	bhi.n	80065b6 <USBD_StdDevReq+0xce>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00f      	beq.n	800652a <USBD_StdDevReq+0x42>
 800650a:	2b20      	cmp	r3, #32
 800650c:	d153      	bne.n	80065b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	32ae      	adds	r2, #174	; 0xae
 8006518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]
      break;
 8006528:	e04a      	b.n	80065c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	785b      	ldrb	r3, [r3, #1]
 800652e:	2b09      	cmp	r3, #9
 8006530:	d83b      	bhi.n	80065aa <USBD_StdDevReq+0xc2>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <USBD_StdDevReq+0x50>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	0800658d 	.word	0x0800658d
 800653c:	080065a1 	.word	0x080065a1
 8006540:	080065ab 	.word	0x080065ab
 8006544:	08006597 	.word	0x08006597
 8006548:	080065ab 	.word	0x080065ab
 800654c:	0800656b 	.word	0x0800656b
 8006550:	08006561 	.word	0x08006561
 8006554:	080065ab 	.word	0x080065ab
 8006558:	08006583 	.word	0x08006583
 800655c:	08006575 	.word	0x08006575
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa3c 	bl	80069e0 <USBD_GetDescriptor>
          break;
 8006568:	e024      	b.n	80065b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800656a:	6839      	ldr	r1, [r7, #0]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fba1 	bl	8006cb4 <USBD_SetAddress>
          break;
 8006572:	e01f      	b.n	80065b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fbe0 	bl	8006d3c <USBD_SetConfig>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]
          break;
 8006580:	e018      	b.n	80065b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fc83 	bl	8006e90 <USBD_GetConfig>
          break;
 800658a:	e013      	b.n	80065b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fcb4 	bl	8006efc <USBD_GetStatus>
          break;
 8006594:	e00e      	b.n	80065b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fce3 	bl	8006f64 <USBD_SetFeature>
          break;
 800659e:	e009      	b.n	80065b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fd07 	bl	8006fb6 <USBD_ClrFeature>
          break;
 80065a8:	e004      	b.n	80065b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fd5e 	bl	800706e <USBD_CtlError>
          break;
 80065b2:	bf00      	nop
      }
      break;
 80065b4:	e004      	b.n	80065c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fd58 	bl	800706e <USBD_CtlError>
      break;
 80065be:	bf00      	nop
  }

  return ret;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop

080065cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065e2:	2b40      	cmp	r3, #64	; 0x40
 80065e4:	d005      	beq.n	80065f2 <USBD_StdItfReq+0x26>
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	d852      	bhi.n	8006690 <USBD_StdItfReq+0xc4>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <USBD_StdItfReq+0x26>
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d14e      	bne.n	8006690 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d840      	bhi.n	8006682 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	889b      	ldrh	r3, [r3, #4]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b01      	cmp	r3, #1
 8006608:	d836      	bhi.n	8006678 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	889b      	ldrh	r3, [r3, #4]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fed9 	bl	80063ca <USBD_CoreFindIF>
 8006618:	4603      	mov	r3, r0
 800661a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	2bff      	cmp	r3, #255	; 0xff
 8006620:	d01d      	beq.n	800665e <USBD_StdItfReq+0x92>
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d11a      	bne.n	800665e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006628:	7bba      	ldrb	r2, [r7, #14]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	32ae      	adds	r2, #174	; 0xae
 800662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00f      	beq.n	8006658 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006638:	7bba      	ldrb	r2, [r7, #14]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006640:	7bba      	ldrb	r2, [r7, #14]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	32ae      	adds	r2, #174	; 0xae
 8006646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
 8006652:	4603      	mov	r3, r0
 8006654:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006656:	e004      	b.n	8006662 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006658:	2303      	movs	r3, #3
 800665a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800665c:	e001      	b.n	8006662 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800665e:	2303      	movs	r3, #3
 8006660:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	88db      	ldrh	r3, [r3, #6]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d110      	bne.n	800668c <USBD_StdItfReq+0xc0>
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10d      	bne.n	800668c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fdc7 	bl	8007204 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006676:	e009      	b.n	800668c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fcf7 	bl	800706e <USBD_CtlError>
          break;
 8006680:	e004      	b.n	800668c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fcf2 	bl	800706e <USBD_CtlError>
          break;
 800668a:	e000      	b.n	800668e <USBD_StdItfReq+0xc2>
          break;
 800668c:	bf00      	nop
      }
      break;
 800668e:	e004      	b.n	800669a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fceb 	bl	800706e <USBD_CtlError>
      break;
 8006698:	bf00      	nop
  }

  return ret;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	889b      	ldrh	r3, [r3, #4]
 80066b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066c0:	2b40      	cmp	r3, #64	; 0x40
 80066c2:	d007      	beq.n	80066d4 <USBD_StdEPReq+0x30>
 80066c4:	2b40      	cmp	r3, #64	; 0x40
 80066c6:	f200 817f 	bhi.w	80069c8 <USBD_StdEPReq+0x324>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d02a      	beq.n	8006724 <USBD_StdEPReq+0x80>
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	f040 817a 	bne.w	80069c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff fe83 	bl	80063e4 <USBD_CoreFindEP>
 80066de:	4603      	mov	r3, r0
 80066e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066e2:	7b7b      	ldrb	r3, [r7, #13]
 80066e4:	2bff      	cmp	r3, #255	; 0xff
 80066e6:	f000 8174 	beq.w	80069d2 <USBD_StdEPReq+0x32e>
 80066ea:	7b7b      	ldrb	r3, [r7, #13]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 8170 	bne.w	80069d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80066f2:	7b7a      	ldrb	r2, [r7, #13]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80066fa:	7b7a      	ldrb	r2, [r7, #13]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	32ae      	adds	r2, #174	; 0xae
 8006700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8163 	beq.w	80069d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800670c:	7b7a      	ldrb	r2, [r7, #13]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32ae      	adds	r2, #174	; 0xae
 8006712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
 800671e:	4603      	mov	r3, r0
 8006720:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006722:	e156      	b.n	80069d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	2b03      	cmp	r3, #3
 800672a:	d008      	beq.n	800673e <USBD_StdEPReq+0x9a>
 800672c:	2b03      	cmp	r3, #3
 800672e:	f300 8145 	bgt.w	80069bc <USBD_StdEPReq+0x318>
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 809b 	beq.w	800686e <USBD_StdEPReq+0x1ca>
 8006738:	2b01      	cmp	r3, #1
 800673a:	d03c      	beq.n	80067b6 <USBD_StdEPReq+0x112>
 800673c:	e13e      	b.n	80069bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d002      	beq.n	8006750 <USBD_StdEPReq+0xac>
 800674a:	2b03      	cmp	r3, #3
 800674c:	d016      	beq.n	800677c <USBD_StdEPReq+0xd8>
 800674e:	e02c      	b.n	80067aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00d      	beq.n	8006772 <USBD_StdEPReq+0xce>
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	2b80      	cmp	r3, #128	; 0x80
 800675a:	d00a      	beq.n	8006772 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800675c:	7bbb      	ldrb	r3, [r7, #14]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f002 fbd1 	bl	8008f08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006766:	2180      	movs	r1, #128	; 0x80
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 fbcd 	bl	8008f08 <USBD_LL_StallEP>
 800676e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006770:	e020      	b.n	80067b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fc7a 	bl	800706e <USBD_CtlError>
              break;
 800677a:	e01b      	b.n	80067b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	885b      	ldrh	r3, [r3, #2]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10e      	bne.n	80067a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <USBD_StdEPReq+0xfe>
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	2b80      	cmp	r3, #128	; 0x80
 800678e:	d008      	beq.n	80067a2 <USBD_StdEPReq+0xfe>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	88db      	ldrh	r3, [r3, #6]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f002 fbb3 	bl	8008f08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fd2e 	bl	8007204 <USBD_CtlSendStatus>

              break;
 80067a8:	e004      	b.n	80067b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fc5e 	bl	800706e <USBD_CtlError>
              break;
 80067b2:	bf00      	nop
          }
          break;
 80067b4:	e107      	b.n	80069c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d002      	beq.n	80067c8 <USBD_StdEPReq+0x124>
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d016      	beq.n	80067f4 <USBD_StdEPReq+0x150>
 80067c6:	e04b      	b.n	8006860 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00d      	beq.n	80067ea <USBD_StdEPReq+0x146>
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	2b80      	cmp	r3, #128	; 0x80
 80067d2:	d00a      	beq.n	80067ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f002 fb95 	bl	8008f08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067de:	2180      	movs	r1, #128	; 0x80
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f002 fb91 	bl	8008f08 <USBD_LL_StallEP>
 80067e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067e8:	e040      	b.n	800686c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fc3e 	bl	800706e <USBD_CtlError>
              break;
 80067f2:	e03b      	b.n	800686c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	885b      	ldrh	r3, [r3, #2]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d136      	bne.n	800686a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f002 fb9b 	bl	8008f46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fcf7 	bl	8007204 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fde2 	bl	80063e4 <USBD_CoreFindEP>
 8006820:	4603      	mov	r3, r0
 8006822:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006824:	7b7b      	ldrb	r3, [r7, #13]
 8006826:	2bff      	cmp	r3, #255	; 0xff
 8006828:	d01f      	beq.n	800686a <USBD_StdEPReq+0x1c6>
 800682a:	7b7b      	ldrb	r3, [r7, #13]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11c      	bne.n	800686a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006830:	7b7a      	ldrb	r2, [r7, #13]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006838:	7b7a      	ldrb	r2, [r7, #13]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	32ae      	adds	r2, #174	; 0xae
 800683e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d010      	beq.n	800686a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006848:	7b7a      	ldrb	r2, [r7, #13]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	32ae      	adds	r2, #174	; 0xae
 800684e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	4798      	blx	r3
 800685a:	4603      	mov	r3, r0
 800685c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800685e:	e004      	b.n	800686a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fc03 	bl	800706e <USBD_CtlError>
              break;
 8006868:	e000      	b.n	800686c <USBD_StdEPReq+0x1c8>
              break;
 800686a:	bf00      	nop
          }
          break;
 800686c:	e0ab      	b.n	80069c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d002      	beq.n	8006880 <USBD_StdEPReq+0x1dc>
 800687a:	2b03      	cmp	r3, #3
 800687c:	d032      	beq.n	80068e4 <USBD_StdEPReq+0x240>
 800687e:	e097      	b.n	80069b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006880:	7bbb      	ldrb	r3, [r7, #14]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <USBD_StdEPReq+0x1f2>
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	2b80      	cmp	r3, #128	; 0x80
 800688a:	d004      	beq.n	8006896 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fbed 	bl	800706e <USBD_CtlError>
                break;
 8006894:	e091      	b.n	80069ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006896:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800689a:	2b00      	cmp	r3, #0
 800689c:	da0b      	bge.n	80068b6 <USBD_StdEPReq+0x212>
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	3310      	adds	r3, #16
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	4413      	add	r3, r2
 80068b2:	3304      	adds	r3, #4
 80068b4:	e00b      	b.n	80068ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	4413      	add	r3, r2
 80068cc:	3304      	adds	r3, #4
 80068ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2202      	movs	r2, #2
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc37 	bl	8007150 <USBD_CtlSendData>
              break;
 80068e2:	e06a      	b.n	80069ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	da11      	bge.n	8006910 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	f003 020f 	and.w	r2, r3, #15
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	440b      	add	r3, r1
 80068fe:	3324      	adds	r3, #36	; 0x24
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d117      	bne.n	8006936 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fbb0 	bl	800706e <USBD_CtlError>
                  break;
 800690e:	e054      	b.n	80069ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	f003 020f 	and.w	r2, r3, #15
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fb9d 	bl	800706e <USBD_CtlError>
                  break;
 8006934:	e041      	b.n	80069ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800693a:	2b00      	cmp	r3, #0
 800693c:	da0b      	bge.n	8006956 <USBD_StdEPReq+0x2b2>
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	3310      	adds	r3, #16
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	4413      	add	r3, r2
 8006952:	3304      	adds	r3, #4
 8006954:	e00b      	b.n	800696e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006956:	7bbb      	ldrb	r3, [r7, #14]
 8006958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	4413      	add	r3, r2
 800696c:	3304      	adds	r3, #4
 800696e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <USBD_StdEPReq+0x2d8>
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	2b80      	cmp	r3, #128	; 0x80
 800697a:	d103      	bne.n	8006984 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e00e      	b.n	80069a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f002 fafb 	bl	8008f84 <USBD_LL_IsStallEP>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2201      	movs	r2, #1
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	e002      	b.n	80069a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2202      	movs	r2, #2
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fbd1 	bl	8007150 <USBD_CtlSendData>
              break;
 80069ae:	e004      	b.n	80069ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fb5b 	bl	800706e <USBD_CtlError>
              break;
 80069b8:	bf00      	nop
          }
          break;
 80069ba:	e004      	b.n	80069c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fb55 	bl	800706e <USBD_CtlError>
          break;
 80069c4:	bf00      	nop
      }
      break;
 80069c6:	e005      	b.n	80069d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fb4f 	bl	800706e <USBD_CtlError>
      break;
 80069d0:	e000      	b.n	80069d4 <USBD_StdEPReq+0x330>
      break;
 80069d2:	bf00      	nop
  }

  return ret;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	885b      	ldrh	r3, [r3, #2]
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	2b06      	cmp	r3, #6
 8006a02:	f200 8128 	bhi.w	8006c56 <USBD_GetDescriptor+0x276>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <USBD_GetDescriptor+0x2c>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	08006a41 	.word	0x08006a41
 8006a14:	08006a81 	.word	0x08006a81
 8006a18:	08006c57 	.word	0x08006c57
 8006a1c:	08006c57 	.word	0x08006c57
 8006a20:	08006bf7 	.word	0x08006bf7
 8006a24:	08006c23 	.word	0x08006c23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	7c12      	ldrb	r2, [r2, #16]
 8006a34:	f107 0108 	add.w	r1, r7, #8
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	60f8      	str	r0, [r7, #12]
      break;
 8006a3e:	e112      	b.n	8006c66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	7c1b      	ldrb	r3, [r3, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10d      	bne.n	8006a64 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	f107 0208 	add.w	r2, r7, #8
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
 8006a58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	2202      	movs	r2, #2
 8006a60:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a62:	e100      	b.n	8006c66 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	f107 0208 	add.w	r2, r7, #8
 8006a70:	4610      	mov	r0, r2
 8006a72:	4798      	blx	r3
 8006a74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	701a      	strb	r2, [r3, #0]
      break;
 8006a7e:	e0f2      	b.n	8006c66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	885b      	ldrh	r3, [r3, #2]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	f200 80ac 	bhi.w	8006be4 <USBD_GetDescriptor+0x204>
 8006a8c:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <USBD_GetDescriptor+0xb4>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006aad 	.word	0x08006aad
 8006a98:	08006ae1 	.word	0x08006ae1
 8006a9c:	08006b15 	.word	0x08006b15
 8006aa0:	08006b49 	.word	0x08006b49
 8006aa4:	08006b7d 	.word	0x08006b7d
 8006aa8:	08006bb1 	.word	0x08006bb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	7c12      	ldrb	r2, [r2, #16]
 8006ac4:	f107 0108 	add.w	r1, r7, #8
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4798      	blx	r3
 8006acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ace:	e091      	b.n	8006bf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 facb 	bl	800706e <USBD_CtlError>
            err++;
 8006ad8:	7afb      	ldrb	r3, [r7, #11]
 8006ada:	3301      	adds	r3, #1
 8006adc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ade:	e089      	b.n	8006bf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00b      	beq.n	8006b04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	7c12      	ldrb	r2, [r2, #16]
 8006af8:	f107 0108 	add.w	r1, r7, #8
 8006afc:	4610      	mov	r0, r2
 8006afe:	4798      	blx	r3
 8006b00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b02:	e077      	b.n	8006bf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fab1 	bl	800706e <USBD_CtlError>
            err++;
 8006b0c:	7afb      	ldrb	r3, [r7, #11]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	72fb      	strb	r3, [r7, #11]
          break;
 8006b12:	e06f      	b.n	8006bf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	7c12      	ldrb	r2, [r2, #16]
 8006b2c:	f107 0108 	add.w	r1, r7, #8
 8006b30:	4610      	mov	r0, r2
 8006b32:	4798      	blx	r3
 8006b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b36:	e05d      	b.n	8006bf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa97 	bl	800706e <USBD_CtlError>
            err++;
 8006b40:	7afb      	ldrb	r3, [r7, #11]
 8006b42:	3301      	adds	r3, #1
 8006b44:	72fb      	strb	r3, [r7, #11]
          break;
 8006b46:	e055      	b.n	8006bf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	7c12      	ldrb	r2, [r2, #16]
 8006b60:	f107 0108 	add.w	r1, r7, #8
 8006b64:	4610      	mov	r0, r2
 8006b66:	4798      	blx	r3
 8006b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b6a:	e043      	b.n	8006bf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa7d 	bl	800706e <USBD_CtlError>
            err++;
 8006b74:	7afb      	ldrb	r3, [r7, #11]
 8006b76:	3301      	adds	r3, #1
 8006b78:	72fb      	strb	r3, [r7, #11]
          break;
 8006b7a:	e03b      	b.n	8006bf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00b      	beq.n	8006ba0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	7c12      	ldrb	r2, [r2, #16]
 8006b94:	f107 0108 	add.w	r1, r7, #8
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4798      	blx	r3
 8006b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b9e:	e029      	b.n	8006bf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa63 	bl	800706e <USBD_CtlError>
            err++;
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	3301      	adds	r3, #1
 8006bac:	72fb      	strb	r3, [r7, #11]
          break;
 8006bae:	e021      	b.n	8006bf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	7c12      	ldrb	r2, [r2, #16]
 8006bc8:	f107 0108 	add.w	r1, r7, #8
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4798      	blx	r3
 8006bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bd2:	e00f      	b.n	8006bf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa49 	bl	800706e <USBD_CtlError>
            err++;
 8006bdc:	7afb      	ldrb	r3, [r7, #11]
 8006bde:	3301      	adds	r3, #1
 8006be0:	72fb      	strb	r3, [r7, #11]
          break;
 8006be2:	e007      	b.n	8006bf4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fa41 	bl	800706e <USBD_CtlError>
          err++;
 8006bec:	7afb      	ldrb	r3, [r7, #11]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006bf2:	bf00      	nop
      }
      break;
 8006bf4:	e037      	b.n	8006c66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7c1b      	ldrb	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c06:	f107 0208 	add.w	r2, r7, #8
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	4798      	blx	r3
 8006c0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c10:	e029      	b.n	8006c66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fa2a 	bl	800706e <USBD_CtlError>
        err++;
 8006c1a:	7afb      	ldrb	r3, [r7, #11]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c20:	e021      	b.n	8006c66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	7c1b      	ldrb	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10d      	bne.n	8006c46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	f107 0208 	add.w	r2, r7, #8
 8006c36:	4610      	mov	r0, r2
 8006c38:	4798      	blx	r3
 8006c3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	2207      	movs	r2, #7
 8006c42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c44:	e00f      	b.n	8006c66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fa10 	bl	800706e <USBD_CtlError>
        err++;
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	3301      	adds	r3, #1
 8006c52:	72fb      	strb	r3, [r7, #11]
      break;
 8006c54:	e007      	b.n	8006c66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa08 	bl	800706e <USBD_CtlError>
      err++;
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	3301      	adds	r3, #1
 8006c62:	72fb      	strb	r3, [r7, #11]
      break;
 8006c64:	bf00      	nop
  }

  if (err != 0U)
 8006c66:	7afb      	ldrb	r3, [r7, #11]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d11e      	bne.n	8006caa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	88db      	ldrh	r3, [r3, #6]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d016      	beq.n	8006ca2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c74:	893b      	ldrh	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	88da      	ldrh	r2, [r3, #6]
 8006c7e:	893b      	ldrh	r3, [r7, #8]
 8006c80:	4293      	cmp	r3, r2
 8006c82:	bf28      	it	cs
 8006c84:	4613      	movcs	r3, r2
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c8a:	893b      	ldrh	r3, [r7, #8]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68f9      	ldr	r1, [r7, #12]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fa5d 	bl	8007150 <USBD_CtlSendData>
 8006c96:	e009      	b.n	8006cac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f9e7 	bl	800706e <USBD_CtlError>
 8006ca0:	e004      	b.n	8006cac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 faae 	bl	8007204 <USBD_CtlSendStatus>
 8006ca8:	e000      	b.n	8006cac <USBD_GetDescriptor+0x2cc>
    return;
 8006caa:	bf00      	nop
  }
}
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop

08006cb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	889b      	ldrh	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d131      	bne.n	8006d2a <USBD_SetAddress+0x76>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	88db      	ldrh	r3, [r3, #6]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d12d      	bne.n	8006d2a <USBD_SetAddress+0x76>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	885b      	ldrh	r3, [r3, #2]
 8006cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd4:	d829      	bhi.n	8006d2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	885b      	ldrh	r3, [r3, #2]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d104      	bne.n	8006cf8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f9bc 	bl	800706e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf6:	e01d      	b.n	8006d34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7bfa      	ldrb	r2, [r7, #15]
 8006cfc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f002 f969 	bl	8008fdc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fa7a 	bl	8007204 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1e:	e009      	b.n	8006d34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d28:	e004      	b.n	8006d34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f99e 	bl	800706e <USBD_CtlError>
  }
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	885b      	ldrh	r3, [r3, #2]
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	4b4e      	ldr	r3, [pc, #312]	; (8006e8c <USBD_SetConfig+0x150>)
 8006d52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d54:	4b4d      	ldr	r3, [pc, #308]	; (8006e8c <USBD_SetConfig+0x150>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d905      	bls.n	8006d68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f985 	bl	800706e <USBD_CtlError>
    return USBD_FAIL;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e08c      	b.n	8006e82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d002      	beq.n	8006d7a <USBD_SetConfig+0x3e>
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d029      	beq.n	8006dcc <USBD_SetConfig+0x90>
 8006d78:	e075      	b.n	8006e66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d7a:	4b44      	ldr	r3, [pc, #272]	; (8006e8c <USBD_SetConfig+0x150>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d020      	beq.n	8006dc4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d82:	4b42      	ldr	r3, [pc, #264]	; (8006e8c <USBD_SetConfig+0x150>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d8c:	4b3f      	ldr	r3, [pc, #252]	; (8006e8c <USBD_SetConfig+0x150>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fe ffe7 	bl	8005d66 <USBD_SetClassConfig>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d008      	beq.n	8006db4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f962 	bl	800706e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2202      	movs	r2, #2
 8006dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006db2:	e065      	b.n	8006e80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fa25 	bl	8007204 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2203      	movs	r2, #3
 8006dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006dc2:	e05d      	b.n	8006e80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fa1d 	bl	8007204 <USBD_CtlSendStatus>
      break;
 8006dca:	e059      	b.n	8006e80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006dcc:	4b2f      	ldr	r3, [pc, #188]	; (8006e8c <USBD_SetConfig+0x150>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d112      	bne.n	8006dfa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ddc:	4b2b      	ldr	r3, [pc, #172]	; (8006e8c <USBD_SetConfig+0x150>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006de6:	4b29      	ldr	r3, [pc, #164]	; (8006e8c <USBD_SetConfig+0x150>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7fe ffd6 	bl	8005d9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa06 	bl	8007204 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006df8:	e042      	b.n	8006e80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006dfa:	4b24      	ldr	r3, [pc, #144]	; (8006e8c <USBD_SetConfig+0x150>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d02a      	beq.n	8006e5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7fe ffc4 	bl	8005d9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e16:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <USBD_SetConfig+0x150>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e20:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <USBD_SetConfig+0x150>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fe ff9d 	bl	8005d66 <USBD_SetClassConfig>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00f      	beq.n	8006e56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f918 	bl	800706e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fe ffa9 	bl	8005d9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e54:	e014      	b.n	8006e80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f9d4 	bl	8007204 <USBD_CtlSendStatus>
      break;
 8006e5c:	e010      	b.n	8006e80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f9d0 	bl	8007204 <USBD_CtlSendStatus>
      break;
 8006e64:	e00c      	b.n	8006e80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f900 	bl	800706e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e6e:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <USBD_SetConfig+0x150>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7fe ff92 	bl	8005d9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7e:	bf00      	nop
  }

  return ret;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000558 	.word	0x20000558

08006e90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	88db      	ldrh	r3, [r3, #6]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d004      	beq.n	8006eac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f8e2 	bl	800706e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006eaa:	e023      	b.n	8006ef4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	dc02      	bgt.n	8006ebe <USBD_GetConfig+0x2e>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	dc03      	bgt.n	8006ec4 <USBD_GetConfig+0x34>
 8006ebc:	e015      	b.n	8006eea <USBD_GetConfig+0x5a>
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d00b      	beq.n	8006eda <USBD_GetConfig+0x4a>
 8006ec2:	e012      	b.n	8006eea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3308      	adds	r3, #8
 8006ece:	2201      	movs	r2, #1
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f93c 	bl	8007150 <USBD_CtlSendData>
        break;
 8006ed8:	e00c      	b.n	8006ef4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3304      	adds	r3, #4
 8006ede:	2201      	movs	r2, #1
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f934 	bl	8007150 <USBD_CtlSendData>
        break;
 8006ee8:	e004      	b.n	8006ef4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f8be 	bl	800706e <USBD_CtlError>
        break;
 8006ef2:	bf00      	nop
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d81e      	bhi.n	8006f52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	88db      	ldrh	r3, [r3, #6]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d004      	beq.n	8006f26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f8a5 	bl	800706e <USBD_CtlError>
        break;
 8006f24:	e01a      	b.n	8006f5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f043 0202 	orr.w	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	330c      	adds	r3, #12
 8006f46:	2202      	movs	r2, #2
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f900 	bl	8007150 <USBD_CtlSendData>
      break;
 8006f50:	e004      	b.n	8006f5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f88a 	bl	800706e <USBD_CtlError>
      break;
 8006f5a:	bf00      	nop
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	885b      	ldrh	r3, [r3, #2]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d107      	bne.n	8006f86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f940 	bl	8007204 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f84:	e013      	b.n	8006fae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	885b      	ldrh	r3, [r3, #2]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d10b      	bne.n	8006fa6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	889b      	ldrh	r3, [r3, #4]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f930 	bl	8007204 <USBD_CtlSendStatus>
}
 8006fa4:	e003      	b.n	8006fae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f860 	bl	800706e <USBD_CtlError>
}
 8006fae:	bf00      	nop
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d80b      	bhi.n	8006fe6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	885b      	ldrh	r3, [r3, #2]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d10c      	bne.n	8006ff0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f910 	bl	8007204 <USBD_CtlSendStatus>
      }
      break;
 8006fe4:	e004      	b.n	8006ff0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f840 	bl	800706e <USBD_CtlError>
      break;
 8006fee:	e000      	b.n	8006ff2 <USBD_ClrFeature+0x3c>
      break;
 8006ff0:	bf00      	nop
  }
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	781a      	ldrb	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fa41 	bl	80064ac <SWAPBYTE>
 800702a:	4603      	mov	r3, r0
 800702c:	461a      	mov	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f7ff fa34 	bl	80064ac <SWAPBYTE>
 8007044:	4603      	mov	r3, r0
 8007046:	461a      	mov	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3301      	adds	r3, #1
 8007056:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f7ff fa27 	bl	80064ac <SWAPBYTE>
 800705e:	4603      	mov	r3, r0
 8007060:	461a      	mov	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	80da      	strh	r2, [r3, #6]
}
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007078:	2180      	movs	r1, #128	; 0x80
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 ff44 	bl	8008f08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007080:	2100      	movs	r1, #0
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 ff40 	bl	8008f08 <USBD_LL_StallEP>
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d036      	beq.n	8007114 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80070aa:	6938      	ldr	r0, [r7, #16]
 80070ac:	f000 f836 	bl	800711c <USBD_GetLen>
 80070b0:	4603      	mov	r3, r0
 80070b2:	3301      	adds	r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	4413      	add	r3, r2
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	7812      	ldrb	r2, [r2, #0]
 80070c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	3301      	adds	r3, #1
 80070ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	4413      	add	r3, r2
 80070d6:	2203      	movs	r2, #3
 80070d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
 80070dc:	3301      	adds	r3, #1
 80070de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070e0:	e013      	b.n	800710a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	4413      	add	r3, r2
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	3301      	adds	r3, #1
 80070f2:	613b      	str	r3, [r7, #16]
    idx++;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
 80070f6:	3301      	adds	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	4413      	add	r3, r2
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]
    idx++;
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	3301      	adds	r3, #1
 8007108:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e7      	bne.n	80070e2 <USBD_GetString+0x52>
 8007112:	e000      	b.n	8007116 <USBD_GetString+0x86>
    return;
 8007114:	bf00      	nop
  }
}
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800712c:	e005      	b.n	800713a <USBD_GetLen+0x1e>
  {
    len++;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	3301      	adds	r3, #1
 8007132:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	3301      	adds	r3, #1
 8007138:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f5      	bne.n	800712e <USBD_GetLen+0x12>
  }

  return len;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2202      	movs	r2, #2
 8007160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	2100      	movs	r1, #0
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f001 ff4f 	bl	800901a <USBD_LL_Transmit>

  return USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	2100      	movs	r1, #0
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f001 ff3e 	bl	800901a <USBD_LL_Transmit>

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2203      	movs	r2, #3
 80071b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	2100      	movs	r1, #0
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f001 ff42 	bl	800905c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	2100      	movs	r1, #0
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 ff31 	bl	800905c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2204      	movs	r2, #4
 8007210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007214:	2300      	movs	r3, #0
 8007216:	2200      	movs	r2, #0
 8007218:	2100      	movs	r1, #0
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fefd 	bl	800901a <USBD_LL_Transmit>

  return USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2205      	movs	r2, #5
 8007236:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800723a:	2300      	movs	r3, #0
 800723c:	2200      	movs	r2, #0
 800723e:	2100      	movs	r1, #0
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 ff0b 	bl	800905c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800725e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007262:	2b84      	cmp	r3, #132	; 0x84
 8007264:	d005      	beq.n	8007272 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007266:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	3303      	adds	r3, #3
 8007270:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007272:	68fb      	ldr	r3, [r7, #12]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007284:	f000 fade 	bl	8007844 <vTaskStartScheduler>
  
  return osOK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	bd80      	pop	{r7, pc}

0800728e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800728e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007290:	b089      	sub	sp, #36	; 0x24
 8007292:	af04      	add	r7, sp, #16
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d020      	beq.n	80072e2 <osThreadCreate+0x54>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01c      	beq.n	80072e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685c      	ldr	r4, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691e      	ldr	r6, [r3, #16]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff ffc8 	bl	8007250 <makeFreeRtosPriority>
 80072c0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072ca:	9202      	str	r2, [sp, #8]
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	9100      	str	r1, [sp, #0]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	4632      	mov	r2, r6
 80072d4:	4629      	mov	r1, r5
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 f8ed 	bl	80074b6 <xTaskCreateStatic>
 80072dc:	4603      	mov	r3, r0
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e01c      	b.n	800731c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685c      	ldr	r4, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072ee:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff ffaa 	bl	8007250 <makeFreeRtosPriority>
 80072fc:	4602      	mov	r2, r0
 80072fe:	f107 030c 	add.w	r3, r7, #12
 8007302:	9301      	str	r3, [sp, #4]
 8007304:	9200      	str	r2, [sp, #0]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	4632      	mov	r2, r6
 800730a:	4629      	mov	r1, r5
 800730c:	4620      	mov	r0, r4
 800730e:	f000 f92f 	bl	8007570 <xTaskCreate>
 8007312:	4603      	mov	r3, r0
 8007314:	2b01      	cmp	r3, #1
 8007316:	d001      	beq.n	800731c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007318:	2300      	movs	r3, #0
 800731a:	e000      	b.n	800731e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800731c:	68fb      	ldr	r3, [r7, #12]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007326 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <osDelay+0x16>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	e000      	b.n	800733e <osDelay+0x18>
 800733c:	2301      	movs	r3, #1
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fa4c 	bl	80077dc <vTaskDelay>
  
  return osOK;
 8007344:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f103 0208 	add.w	r2, r3, #8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f04f 32ff 	mov.w	r2, #4294967295
 8007366:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f103 0208 	add.w	r2, r3, #8
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f103 0208 	add.w	r2, r3, #8
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
}
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d103      	bne.n	8007410 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	e00c      	b.n	800742a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3308      	adds	r3, #8
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	e002      	b.n	800741e <vListInsert+0x2e>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	429a      	cmp	r2, r3
 8007428:	d2f6      	bcs.n	8007418 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	601a      	str	r2, [r3, #0]
}
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007462:	b480      	push	{r7}
 8007464:	b085      	sub	sp, #20
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6892      	ldr	r2, [r2, #8]
 8007478:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6852      	ldr	r2, [r2, #4]
 8007482:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	429a      	cmp	r2, r3
 800748c:	d103      	bne.n	8007496 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	1e5a      	subs	r2, r3, #1
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b08e      	sub	sp, #56	; 0x38
 80074ba:	af04      	add	r7, sp, #16
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <xTaskCreateStatic+0x46>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	61fb      	str	r3, [r7, #28]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074fc:	2354      	movs	r3, #84	; 0x54
 80074fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b54      	cmp	r3, #84	; 0x54
 8007504:	d00a      	beq.n	800751c <xTaskCreateStatic+0x66>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	61bb      	str	r3, [r7, #24]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800751c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01e      	beq.n	8007562 <xTaskCreateStatic+0xac>
 8007524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01b      	beq.n	8007562 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007532:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800753c:	2300      	movs	r3, #0
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	f107 0314 	add.w	r3, r7, #20
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 f850 	bl	80075fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800755a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800755c:	f000 f8d4 	bl	8007708 <prvAddNewTaskToReadyList>
 8007560:	e001      	b.n	8007566 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007566:	697b      	ldr	r3, [r7, #20]
	}
 8007568:	4618      	mov	r0, r3
 800756a:	3728      	adds	r7, #40	; 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08c      	sub	sp, #48	; 0x30
 8007574:	af04      	add	r7, sp, #16
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	4613      	mov	r3, r2
 800757e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007580:	88fb      	ldrh	r3, [r7, #6]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fee7 	bl	8008358 <pvPortMalloc>
 800758a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00e      	beq.n	80075b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007592:	2054      	movs	r0, #84	; 0x54
 8007594:	f000 fee0 	bl	8008358 <pvPortMalloc>
 8007598:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	631a      	str	r2, [r3, #48]	; 0x30
 80075a6:	e005      	b.n	80075b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075a8:	6978      	ldr	r0, [r7, #20]
 80075aa:	f000 ffa1 	bl	80084f0 <vPortFree>
 80075ae:	e001      	b.n	80075b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d017      	beq.n	80075ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075c2:	88fa      	ldrh	r2, [r7, #6]
 80075c4:	2300      	movs	r3, #0
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	9302      	str	r3, [sp, #8]
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f80e 	bl	80075fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075de:	69f8      	ldr	r0, [r7, #28]
 80075e0:	f000 f892 	bl	8007708 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075e4:	2301      	movs	r3, #1
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	e002      	b.n	80075f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295
 80075ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075f0:	69bb      	ldr	r3, [r7, #24]
	}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3720      	adds	r7, #32
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b088      	sub	sp, #32
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007612:	3b01      	subs	r3, #1
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	f023 0307 	bic.w	r3, r3, #7
 8007620:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <prvInitialiseNewTask+0x48>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	617b      	str	r3, [r7, #20]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01f      	beq.n	8007688 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007648:	2300      	movs	r3, #0
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	e012      	b.n	8007674 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	4413      	add	r3, r2
 8007654:	7819      	ldrb	r1, [r3, #0]
 8007656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4413      	add	r3, r2
 800765c:	3334      	adds	r3, #52	; 0x34
 800765e:	460a      	mov	r2, r1
 8007660:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	4413      	add	r3, r2
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d006      	beq.n	800767c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	3301      	adds	r3, #1
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	2b0f      	cmp	r3, #15
 8007678:	d9e9      	bls.n	800764e <prvInitialiseNewTask+0x54>
 800767a:	e000      	b.n	800767e <prvInitialiseNewTask+0x84>
			{
				break;
 800767c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007686:	e003      	b.n	8007690 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007692:	2b06      	cmp	r3, #6
 8007694:	d901      	bls.n	800769a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007696:	2306      	movs	r3, #6
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	2200      	movs	r2, #0
 80076aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	3304      	adds	r3, #4
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff fe6c 	bl	800738e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	3318      	adds	r3, #24
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fe67 	bl	800738e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c8:	f1c3 0207 	rsb	r2, r3, #7
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	2200      	movs	r2, #0
 80076da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	68f9      	ldr	r1, [r7, #12]
 80076e8:	69b8      	ldr	r0, [r7, #24]
 80076ea:	f000 fc23 	bl	8007f34 <pxPortInitialiseStack>
 80076ee:	4602      	mov	r2, r0
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007700:	bf00      	nop
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007710:	f000 fd40 	bl	8008194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007714:	4b2a      	ldr	r3, [pc, #168]	; (80077c0 <prvAddNewTaskToReadyList+0xb8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	4a29      	ldr	r2, [pc, #164]	; (80077c0 <prvAddNewTaskToReadyList+0xb8>)
 800771c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800771e:	4b29      	ldr	r3, [pc, #164]	; (80077c4 <prvAddNewTaskToReadyList+0xbc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d109      	bne.n	800773a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007726:	4a27      	ldr	r2, [pc, #156]	; (80077c4 <prvAddNewTaskToReadyList+0xbc>)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800772c:	4b24      	ldr	r3, [pc, #144]	; (80077c0 <prvAddNewTaskToReadyList+0xb8>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d110      	bne.n	8007756 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007734:	f000 fabc 	bl	8007cb0 <prvInitialiseTaskLists>
 8007738:	e00d      	b.n	8007756 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800773a:	4b23      	ldr	r3, [pc, #140]	; (80077c8 <prvAddNewTaskToReadyList+0xc0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d109      	bne.n	8007756 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007742:	4b20      	ldr	r3, [pc, #128]	; (80077c4 <prvAddNewTaskToReadyList+0xbc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	429a      	cmp	r2, r3
 800774e:	d802      	bhi.n	8007756 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007750:	4a1c      	ldr	r2, [pc, #112]	; (80077c4 <prvAddNewTaskToReadyList+0xbc>)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007756:	4b1d      	ldr	r3, [pc, #116]	; (80077cc <prvAddNewTaskToReadyList+0xc4>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3301      	adds	r3, #1
 800775c:	4a1b      	ldr	r2, [pc, #108]	; (80077cc <prvAddNewTaskToReadyList+0xc4>)
 800775e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	2201      	movs	r2, #1
 8007766:	409a      	lsls	r2, r3
 8007768:	4b19      	ldr	r3, [pc, #100]	; (80077d0 <prvAddNewTaskToReadyList+0xc8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4313      	orrs	r3, r2
 800776e:	4a18      	ldr	r2, [pc, #96]	; (80077d0 <prvAddNewTaskToReadyList+0xc8>)
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4a15      	ldr	r2, [pc, #84]	; (80077d4 <prvAddNewTaskToReadyList+0xcc>)
 8007780:	441a      	add	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3304      	adds	r3, #4
 8007786:	4619      	mov	r1, r3
 8007788:	4610      	mov	r0, r2
 800778a:	f7ff fe0d 	bl	80073a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800778e:	f000 fd31 	bl	80081f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007792:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <prvAddNewTaskToReadyList+0xc0>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00e      	beq.n	80077b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800779a:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <prvAddNewTaskToReadyList+0xbc>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d207      	bcs.n	80077b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077a8:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <prvAddNewTaskToReadyList+0xd0>)
 80077aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	2000065c 	.word	0x2000065c
 80077c4:	2000055c 	.word	0x2000055c
 80077c8:	20000668 	.word	0x20000668
 80077cc:	20000678 	.word	0x20000678
 80077d0:	20000664 	.word	0x20000664
 80077d4:	20000560 	.word	0x20000560
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d017      	beq.n	800781e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077ee:	4b13      	ldr	r3, [pc, #76]	; (800783c <vTaskDelay+0x60>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <vTaskDelay+0x30>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	60bb      	str	r3, [r7, #8]
}
 8007808:	bf00      	nop
 800780a:	e7fe      	b.n	800780a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800780c:	f000 f87a 	bl	8007904 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007810:	2100      	movs	r1, #0
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fb28 	bl	8007e68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007818:	f000 f882 	bl	8007920 <xTaskResumeAll>
 800781c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d107      	bne.n	8007834 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007824:	4b06      	ldr	r3, [pc, #24]	; (8007840 <vTaskDelay+0x64>)
 8007826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20000684 	.word	0x20000684
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b08a      	sub	sp, #40	; 0x28
 8007848:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800784e:	2300      	movs	r3, #0
 8007850:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007852:	463a      	mov	r2, r7
 8007854:	1d39      	adds	r1, r7, #4
 8007856:	f107 0308 	add.w	r3, r7, #8
 800785a:	4618      	mov	r0, r3
 800785c:	f7f9 fb7a 	bl	8000f54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	9202      	str	r2, [sp, #8]
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	2300      	movs	r3, #0
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	2300      	movs	r3, #0
 8007870:	460a      	mov	r2, r1
 8007872:	491e      	ldr	r1, [pc, #120]	; (80078ec <vTaskStartScheduler+0xa8>)
 8007874:	481e      	ldr	r0, [pc, #120]	; (80078f0 <vTaskStartScheduler+0xac>)
 8007876:	f7ff fe1e 	bl	80074b6 <xTaskCreateStatic>
 800787a:	4603      	mov	r3, r0
 800787c:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <vTaskStartScheduler+0xb0>)
 800787e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007880:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <vTaskStartScheduler+0xb0>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007888:	2301      	movs	r3, #1
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	e001      	b.n	8007892 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800788e:	2300      	movs	r3, #0
 8007890:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d116      	bne.n	80078c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	613b      	str	r3, [r7, #16]
}
 80078aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078ac:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <vTaskStartScheduler+0xb4>)
 80078ae:	f04f 32ff 	mov.w	r2, #4294967295
 80078b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078b4:	4b11      	ldr	r3, [pc, #68]	; (80078fc <vTaskStartScheduler+0xb8>)
 80078b6:	2201      	movs	r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078ba:	4b11      	ldr	r3, [pc, #68]	; (8007900 <vTaskStartScheduler+0xbc>)
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078c0:	f000 fbc6 	bl	8008050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078c4:	e00e      	b.n	80078e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078cc:	d10a      	bne.n	80078e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	60fb      	str	r3, [r7, #12]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <vTaskStartScheduler+0x9e>
}
 80078e4:	bf00      	nop
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	0800cd5c 	.word	0x0800cd5c
 80078f0:	08007c81 	.word	0x08007c81
 80078f4:	20000680 	.word	0x20000680
 80078f8:	2000067c 	.word	0x2000067c
 80078fc:	20000668 	.word	0x20000668
 8007900:	20000660 	.word	0x20000660

08007904 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <vTaskSuspendAll+0x18>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3301      	adds	r3, #1
 800790e:	4a03      	ldr	r2, [pc, #12]	; (800791c <vTaskSuspendAll+0x18>)
 8007910:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007912:	bf00      	nop
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	20000684 	.word	0x20000684

08007920 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800792a:	2300      	movs	r3, #0
 800792c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800792e:	4b41      	ldr	r3, [pc, #260]	; (8007a34 <xTaskResumeAll+0x114>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10a      	bne.n	800794c <xTaskResumeAll+0x2c>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	603b      	str	r3, [r7, #0]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800794c:	f000 fc22 	bl	8008194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007950:	4b38      	ldr	r3, [pc, #224]	; (8007a34 <xTaskResumeAll+0x114>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3b01      	subs	r3, #1
 8007956:	4a37      	ldr	r2, [pc, #220]	; (8007a34 <xTaskResumeAll+0x114>)
 8007958:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800795a:	4b36      	ldr	r3, [pc, #216]	; (8007a34 <xTaskResumeAll+0x114>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d161      	bne.n	8007a26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007962:	4b35      	ldr	r3, [pc, #212]	; (8007a38 <xTaskResumeAll+0x118>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d05d      	beq.n	8007a26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800796a:	e02e      	b.n	80079ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800796c:	4b33      	ldr	r3, [pc, #204]	; (8007a3c <xTaskResumeAll+0x11c>)
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3318      	adds	r3, #24
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fd72 	bl	8007462 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3304      	adds	r3, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fd6d 	bl	8007462 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	2201      	movs	r2, #1
 800798e:	409a      	lsls	r2, r3
 8007990:	4b2b      	ldr	r3, [pc, #172]	; (8007a40 <xTaskResumeAll+0x120>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4313      	orrs	r3, r2
 8007996:	4a2a      	ldr	r2, [pc, #168]	; (8007a40 <xTaskResumeAll+0x120>)
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4a27      	ldr	r2, [pc, #156]	; (8007a44 <xTaskResumeAll+0x124>)
 80079a8:	441a      	add	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7ff fcf9 	bl	80073a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ba:	4b23      	ldr	r3, [pc, #140]	; (8007a48 <xTaskResumeAll+0x128>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d302      	bcc.n	80079ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80079c4:	4b21      	ldr	r3, [pc, #132]	; (8007a4c <xTaskResumeAll+0x12c>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079ca:	4b1c      	ldr	r3, [pc, #112]	; (8007a3c <xTaskResumeAll+0x11c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1cc      	bne.n	800796c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079d8:	f000 fa08 	bl	8007dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079dc:	4b1c      	ldr	r3, [pc, #112]	; (8007a50 <xTaskResumeAll+0x130>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d010      	beq.n	8007a0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079e8:	f000 f836 	bl	8007a58 <xTaskIncrementTick>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80079f2:	4b16      	ldr	r3, [pc, #88]	; (8007a4c <xTaskResumeAll+0x12c>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3b01      	subs	r3, #1
 80079fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1f1      	bne.n	80079e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007a04:	4b12      	ldr	r3, [pc, #72]	; (8007a50 <xTaskResumeAll+0x130>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a0a:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <xTaskResumeAll+0x12c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a12:	2301      	movs	r3, #1
 8007a14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <xTaskResumeAll+0x134>)
 8007a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a26:	f000 fbe5 	bl	80081f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000684 	.word	0x20000684
 8007a38:	2000065c 	.word	0x2000065c
 8007a3c:	2000061c 	.word	0x2000061c
 8007a40:	20000664 	.word	0x20000664
 8007a44:	20000560 	.word	0x20000560
 8007a48:	2000055c 	.word	0x2000055c
 8007a4c:	20000670 	.word	0x20000670
 8007a50:	2000066c 	.word	0x2000066c
 8007a54:	e000ed04 	.word	0xe000ed04

08007a58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a62:	4b4e      	ldr	r3, [pc, #312]	; (8007b9c <xTaskIncrementTick+0x144>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f040 808e 	bne.w	8007b88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a6c:	4b4c      	ldr	r3, [pc, #304]	; (8007ba0 <xTaskIncrementTick+0x148>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a74:	4a4a      	ldr	r2, [pc, #296]	; (8007ba0 <xTaskIncrementTick+0x148>)
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d120      	bne.n	8007ac2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a80:	4b48      	ldr	r3, [pc, #288]	; (8007ba4 <xTaskIncrementTick+0x14c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	603b      	str	r3, [r7, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <xTaskIncrementTick+0x46>
 8007aa0:	4b40      	ldr	r3, [pc, #256]	; (8007ba4 <xTaskIncrementTick+0x14c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	4b40      	ldr	r3, [pc, #256]	; (8007ba8 <xTaskIncrementTick+0x150>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a3e      	ldr	r2, [pc, #248]	; (8007ba4 <xTaskIncrementTick+0x14c>)
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	4a3e      	ldr	r2, [pc, #248]	; (8007ba8 <xTaskIncrementTick+0x150>)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	4b3d      	ldr	r3, [pc, #244]	; (8007bac <xTaskIncrementTick+0x154>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	4a3c      	ldr	r2, [pc, #240]	; (8007bac <xTaskIncrementTick+0x154>)
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	f000 f995 	bl	8007dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ac2:	4b3b      	ldr	r3, [pc, #236]	; (8007bb0 <xTaskIncrementTick+0x158>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d348      	bcc.n	8007b5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007acc:	4b35      	ldr	r3, [pc, #212]	; (8007ba4 <xTaskIncrementTick+0x14c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d104      	bne.n	8007ae0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad6:	4b36      	ldr	r3, [pc, #216]	; (8007bb0 <xTaskIncrementTick+0x158>)
 8007ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8007adc:	601a      	str	r2, [r3, #0]
					break;
 8007ade:	e03e      	b.n	8007b5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae0:	4b30      	ldr	r3, [pc, #192]	; (8007ba4 <xTaskIncrementTick+0x14c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d203      	bcs.n	8007b00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007af8:	4a2d      	ldr	r2, [pc, #180]	; (8007bb0 <xTaskIncrementTick+0x158>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007afe:	e02e      	b.n	8007b5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff fcac 	bl	8007462 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d004      	beq.n	8007b1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	3318      	adds	r3, #24
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fca3 	bl	8007462 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	2201      	movs	r2, #1
 8007b22:	409a      	lsls	r2, r3
 8007b24:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <xTaskIncrementTick+0x15c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	4a22      	ldr	r2, [pc, #136]	; (8007bb4 <xTaskIncrementTick+0x15c>)
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4a1f      	ldr	r2, [pc, #124]	; (8007bb8 <xTaskIncrementTick+0x160>)
 8007b3c:	441a      	add	r2, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4610      	mov	r0, r2
 8007b46:	f7ff fc2f 	bl	80073a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4e:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <xTaskIncrementTick+0x164>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d3b9      	bcc.n	8007acc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b5c:	e7b6      	b.n	8007acc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b5e:	4b17      	ldr	r3, [pc, #92]	; (8007bbc <xTaskIncrementTick+0x164>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b64:	4914      	ldr	r1, [pc, #80]	; (8007bb8 <xTaskIncrementTick+0x160>)
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	440b      	add	r3, r1
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d901      	bls.n	8007b7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007b76:	2301      	movs	r3, #1
 8007b78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b7a:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <xTaskIncrementTick+0x168>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b82:	2301      	movs	r3, #1
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	e004      	b.n	8007b92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b88:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <xTaskIncrementTick+0x16c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	4a0d      	ldr	r2, [pc, #52]	; (8007bc4 <xTaskIncrementTick+0x16c>)
 8007b90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b92:	697b      	ldr	r3, [r7, #20]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20000684 	.word	0x20000684
 8007ba0:	20000660 	.word	0x20000660
 8007ba4:	20000614 	.word	0x20000614
 8007ba8:	20000618 	.word	0x20000618
 8007bac:	20000674 	.word	0x20000674
 8007bb0:	2000067c 	.word	0x2000067c
 8007bb4:	20000664 	.word	0x20000664
 8007bb8:	20000560 	.word	0x20000560
 8007bbc:	2000055c 	.word	0x2000055c
 8007bc0:	20000670 	.word	0x20000670
 8007bc4:	2000066c 	.word	0x2000066c

08007bc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bce:	4b27      	ldr	r3, [pc, #156]	; (8007c6c <vTaskSwitchContext+0xa4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bd6:	4b26      	ldr	r3, [pc, #152]	; (8007c70 <vTaskSwitchContext+0xa8>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bdc:	e03f      	b.n	8007c5e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007bde:	4b24      	ldr	r3, [pc, #144]	; (8007c70 <vTaskSwitchContext+0xa8>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007be4:	4b23      	ldr	r3, [pc, #140]	; (8007c74 <vTaskSwitchContext+0xac>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	fab3 f383 	clz	r3, r3
 8007bf0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007bf2:	7afb      	ldrb	r3, [r7, #11]
 8007bf4:	f1c3 031f 	rsb	r3, r3, #31
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	491f      	ldr	r1, [pc, #124]	; (8007c78 <vTaskSwitchContext+0xb0>)
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	440b      	add	r3, r1
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <vTaskSwitchContext+0x5a>
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4a12      	ldr	r2, [pc, #72]	; (8007c78 <vTaskSwitchContext+0xb0>)
 8007c30:	4413      	add	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	605a      	str	r2, [r3, #4]
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	3308      	adds	r3, #8
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d104      	bne.n	8007c54 <vTaskSwitchContext+0x8c>
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	605a      	str	r2, [r3, #4]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	4a08      	ldr	r2, [pc, #32]	; (8007c7c <vTaskSwitchContext+0xb4>)
 8007c5c:	6013      	str	r3, [r2, #0]
}
 8007c5e:	bf00      	nop
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	20000684 	.word	0x20000684
 8007c70:	20000670 	.word	0x20000670
 8007c74:	20000664 	.word	0x20000664
 8007c78:	20000560 	.word	0x20000560
 8007c7c:	2000055c 	.word	0x2000055c

08007c80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c88:	f000 f852 	bl	8007d30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c8c:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <prvIdleTask+0x28>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d9f9      	bls.n	8007c88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <prvIdleTask+0x2c>)
 8007c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ca4:	e7f0      	b.n	8007c88 <prvIdleTask+0x8>
 8007ca6:	bf00      	nop
 8007ca8:	20000560 	.word	0x20000560
 8007cac:	e000ed04 	.word	0xe000ed04

08007cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	607b      	str	r3, [r7, #4]
 8007cba:	e00c      	b.n	8007cd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4a12      	ldr	r2, [pc, #72]	; (8007d10 <prvInitialiseTaskLists+0x60>)
 8007cc8:	4413      	add	r3, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff fb3f 	bl	800734e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	607b      	str	r3, [r7, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b06      	cmp	r3, #6
 8007cda:	d9ef      	bls.n	8007cbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cdc:	480d      	ldr	r0, [pc, #52]	; (8007d14 <prvInitialiseTaskLists+0x64>)
 8007cde:	f7ff fb36 	bl	800734e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ce2:	480d      	ldr	r0, [pc, #52]	; (8007d18 <prvInitialiseTaskLists+0x68>)
 8007ce4:	f7ff fb33 	bl	800734e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ce8:	480c      	ldr	r0, [pc, #48]	; (8007d1c <prvInitialiseTaskLists+0x6c>)
 8007cea:	f7ff fb30 	bl	800734e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cee:	480c      	ldr	r0, [pc, #48]	; (8007d20 <prvInitialiseTaskLists+0x70>)
 8007cf0:	f7ff fb2d 	bl	800734e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cf4:	480b      	ldr	r0, [pc, #44]	; (8007d24 <prvInitialiseTaskLists+0x74>)
 8007cf6:	f7ff fb2a 	bl	800734e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cfa:	4b0b      	ldr	r3, [pc, #44]	; (8007d28 <prvInitialiseTaskLists+0x78>)
 8007cfc:	4a05      	ldr	r2, [pc, #20]	; (8007d14 <prvInitialiseTaskLists+0x64>)
 8007cfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <prvInitialiseTaskLists+0x7c>)
 8007d02:	4a05      	ldr	r2, [pc, #20]	; (8007d18 <prvInitialiseTaskLists+0x68>)
 8007d04:	601a      	str	r2, [r3, #0]
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000560 	.word	0x20000560
 8007d14:	200005ec 	.word	0x200005ec
 8007d18:	20000600 	.word	0x20000600
 8007d1c:	2000061c 	.word	0x2000061c
 8007d20:	20000630 	.word	0x20000630
 8007d24:	20000648 	.word	0x20000648
 8007d28:	20000614 	.word	0x20000614
 8007d2c:	20000618 	.word	0x20000618

08007d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d36:	e019      	b.n	8007d6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d38:	f000 fa2c 	bl	8008194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3c:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <prvCheckTasksWaitingTermination+0x50>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fb8a 	bl	8007462 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <prvCheckTasksWaitingTermination+0x54>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	4a0b      	ldr	r2, [pc, #44]	; (8007d84 <prvCheckTasksWaitingTermination+0x54>)
 8007d56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d58:	4b0b      	ldr	r3, [pc, #44]	; (8007d88 <prvCheckTasksWaitingTermination+0x58>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	4a0a      	ldr	r2, [pc, #40]	; (8007d88 <prvCheckTasksWaitingTermination+0x58>)
 8007d60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d62:	f000 fa47 	bl	80081f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f810 	bl	8007d8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <prvCheckTasksWaitingTermination+0x58>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e1      	bne.n	8007d38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000630 	.word	0x20000630
 8007d84:	2000065c 	.word	0x2000065c
 8007d88:	20000644 	.word	0x20000644

08007d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d108      	bne.n	8007db0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fba4 	bl	80084f0 <vPortFree>
				vPortFree( pxTCB );
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fba1 	bl	80084f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007dae:	e018      	b.n	8007de2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d103      	bne.n	8007dc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fb98 	bl	80084f0 <vPortFree>
	}
 8007dc0:	e00f      	b.n	8007de2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d00a      	beq.n	8007de2 <prvDeleteTCB+0x56>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	60fb      	str	r3, [r7, #12]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <prvDeleteTCB+0x54>
	}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007df2:	4b0c      	ldr	r3, [pc, #48]	; (8007e24 <prvResetNextTaskUnblockTime+0x38>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <prvResetNextTaskUnblockTime+0x3c>)
 8007dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e04:	e008      	b.n	8007e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e06:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <prvResetNextTaskUnblockTime+0x38>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	4a04      	ldr	r2, [pc, #16]	; (8007e28 <prvResetNextTaskUnblockTime+0x3c>)
 8007e16:	6013      	str	r3, [r2, #0]
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20000614 	.word	0x20000614
 8007e28:	2000067c 	.word	0x2000067c

08007e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e32:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <xTaskGetSchedulerState+0x34>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	e008      	b.n	8007e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e40:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <xTaskGetSchedulerState+0x38>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d102      	bne.n	8007e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	e001      	b.n	8007e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e52:	687b      	ldr	r3, [r7, #4]
	}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	20000668 	.word	0x20000668
 8007e64:	20000684 	.word	0x20000684

08007e68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e72:	4b29      	ldr	r3, [pc, #164]	; (8007f18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e78:	4b28      	ldr	r3, [pc, #160]	; (8007f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff faef 	bl	8007462 <uxListRemove>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10b      	bne.n	8007ea2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e8a:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	2201      	movs	r2, #1
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	43da      	mvns	r2, r3
 8007e98:	4b21      	ldr	r3, [pc, #132]	; (8007f20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	4a20      	ldr	r2, [pc, #128]	; (8007f20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ea0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d10a      	bne.n	8007ec0 <prvAddCurrentTaskToDelayedList+0x58>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eb0:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	481a      	ldr	r0, [pc, #104]	; (8007f24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007eba:	f7ff fa75 	bl	80073a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ebe:	e026      	b.n	8007f0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ec8:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d209      	bcs.n	8007eec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ed8:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	f7ff fa83 	bl	80073f0 <vListInsert>
}
 8007eea:	e010      	b.n	8007f0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eec:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4610      	mov	r0, r2
 8007efa:	f7ff fa79 	bl	80073f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007efe:	4b0c      	ldr	r3, [pc, #48]	; (8007f30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d202      	bcs.n	8007f0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007f08:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6013      	str	r3, [r2, #0]
}
 8007f0e:	bf00      	nop
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20000660 	.word	0x20000660
 8007f1c:	2000055c 	.word	0x2000055c
 8007f20:	20000664 	.word	0x20000664
 8007f24:	20000648 	.word	0x20000648
 8007f28:	20000618 	.word	0x20000618
 8007f2c:	20000614 	.word	0x20000614
 8007f30:	2000067c 	.word	0x2000067c

08007f34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3b04      	subs	r3, #4
 8007f44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3b04      	subs	r3, #4
 8007f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 0201 	bic.w	r2, r3, #1
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3b04      	subs	r3, #4
 8007f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f64:	4a0c      	ldr	r2, [pc, #48]	; (8007f98 <pxPortInitialiseStack+0x64>)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3b14      	subs	r3, #20
 8007f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3b04      	subs	r3, #4
 8007f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f06f 0202 	mvn.w	r2, #2
 8007f82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3b20      	subs	r3, #32
 8007f88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	08007f9d 	.word	0x08007f9d

08007f9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fa6:	4b12      	ldr	r3, [pc, #72]	; (8007ff0 <prvTaskExitError+0x54>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fae:	d00a      	beq.n	8007fc6 <prvTaskExitError+0x2a>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	60fb      	str	r3, [r7, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <prvTaskExitError+0x28>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	60bb      	str	r3, [r7, #8]
}
 8007fd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fda:	bf00      	nop
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0fc      	beq.n	8007fdc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	20000098 	.word	0x20000098
	...

08008000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <pxCurrentTCBConst2>)
 8008002:	6819      	ldr	r1, [r3, #0]
 8008004:	6808      	ldr	r0, [r1, #0]
 8008006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800a:	f380 8809 	msr	PSP, r0
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f380 8811 	msr	BASEPRI, r0
 800801a:	4770      	bx	lr
 800801c:	f3af 8000 	nop.w

08008020 <pxCurrentTCBConst2>:
 8008020:	2000055c 	.word	0x2000055c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop

08008028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008028:	4808      	ldr	r0, [pc, #32]	; (800804c <prvPortStartFirstTask+0x24>)
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	6800      	ldr	r0, [r0, #0]
 800802e:	f380 8808 	msr	MSP, r0
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f380 8814 	msr	CONTROL, r0
 800803a:	b662      	cpsie	i
 800803c:	b661      	cpsie	f
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	df00      	svc	0
 8008048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800804a:	bf00      	nop
 800804c:	e000ed08 	.word	0xe000ed08

08008050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008056:	4b46      	ldr	r3, [pc, #280]	; (8008170 <xPortStartScheduler+0x120>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a46      	ldr	r2, [pc, #280]	; (8008174 <xPortStartScheduler+0x124>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d10a      	bne.n	8008076 <xPortStartScheduler+0x26>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	613b      	str	r3, [r7, #16]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008076:	4b3e      	ldr	r3, [pc, #248]	; (8008170 <xPortStartScheduler+0x120>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a3f      	ldr	r2, [pc, #252]	; (8008178 <xPortStartScheduler+0x128>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d10a      	bne.n	8008096 <xPortStartScheduler+0x46>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	60fb      	str	r3, [r7, #12]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008096:	4b39      	ldr	r3, [pc, #228]	; (800817c <xPortStartScheduler+0x12c>)
 8008098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	22ff      	movs	r2, #255	; 0xff
 80080a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	4b31      	ldr	r3, [pc, #196]	; (8008180 <xPortStartScheduler+0x130>)
 80080bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080be:	4b31      	ldr	r3, [pc, #196]	; (8008184 <xPortStartScheduler+0x134>)
 80080c0:	2207      	movs	r2, #7
 80080c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080c4:	e009      	b.n	80080da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80080c6:	4b2f      	ldr	r3, [pc, #188]	; (8008184 <xPortStartScheduler+0x134>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	4a2d      	ldr	r2, [pc, #180]	; (8008184 <xPortStartScheduler+0x134>)
 80080ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e2:	2b80      	cmp	r3, #128	; 0x80
 80080e4:	d0ef      	beq.n	80080c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080e6:	4b27      	ldr	r3, [pc, #156]	; (8008184 <xPortStartScheduler+0x134>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f1c3 0307 	rsb	r3, r3, #7
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d00a      	beq.n	8008108 <xPortStartScheduler+0xb8>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	60bb      	str	r3, [r7, #8]
}
 8008104:	bf00      	nop
 8008106:	e7fe      	b.n	8008106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008108:	4b1e      	ldr	r3, [pc, #120]	; (8008184 <xPortStartScheduler+0x134>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	4a1d      	ldr	r2, [pc, #116]	; (8008184 <xPortStartScheduler+0x134>)
 8008110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008112:	4b1c      	ldr	r3, [pc, #112]	; (8008184 <xPortStartScheduler+0x134>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800811a:	4a1a      	ldr	r2, [pc, #104]	; (8008184 <xPortStartScheduler+0x134>)
 800811c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008126:	4b18      	ldr	r3, [pc, #96]	; (8008188 <xPortStartScheduler+0x138>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a17      	ldr	r2, [pc, #92]	; (8008188 <xPortStartScheduler+0x138>)
 800812c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008132:	4b15      	ldr	r3, [pc, #84]	; (8008188 <xPortStartScheduler+0x138>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a14      	ldr	r2, [pc, #80]	; (8008188 <xPortStartScheduler+0x138>)
 8008138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800813c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800813e:	f000 f8dd 	bl	80082fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008142:	4b12      	ldr	r3, [pc, #72]	; (800818c <xPortStartScheduler+0x13c>)
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008148:	f000 f8fc 	bl	8008344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800814c:	4b10      	ldr	r3, [pc, #64]	; (8008190 <xPortStartScheduler+0x140>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a0f      	ldr	r2, [pc, #60]	; (8008190 <xPortStartScheduler+0x140>)
 8008152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008158:	f7ff ff66 	bl	8008028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800815c:	f7ff fd34 	bl	8007bc8 <vTaskSwitchContext>
	prvTaskExitError();
 8008160:	f7ff ff1c 	bl	8007f9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	e000ed00 	.word	0xe000ed00
 8008174:	410fc271 	.word	0x410fc271
 8008178:	410fc270 	.word	0x410fc270
 800817c:	e000e400 	.word	0xe000e400
 8008180:	20000688 	.word	0x20000688
 8008184:	2000068c 	.word	0x2000068c
 8008188:	e000ed20 	.word	0xe000ed20
 800818c:	20000098 	.word	0x20000098
 8008190:	e000ef34 	.word	0xe000ef34

08008194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	607b      	str	r3, [r7, #4]
}
 80081ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <vPortEnterCritical+0x58>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	4a0d      	ldr	r2, [pc, #52]	; (80081ec <vPortEnterCritical+0x58>)
 80081b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <vPortEnterCritical+0x58>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d10f      	bne.n	80081e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081c0:	4b0b      	ldr	r3, [pc, #44]	; (80081f0 <vPortEnterCritical+0x5c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	603b      	str	r3, [r7, #0]
}
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <vPortEnterCritical+0x4a>
	}
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	20000098 	.word	0x20000098
 80081f0:	e000ed04 	.word	0xe000ed04

080081f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081fa:	4b12      	ldr	r3, [pc, #72]	; (8008244 <vPortExitCritical+0x50>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <vPortExitCritical+0x24>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	607b      	str	r3, [r7, #4]
}
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008218:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <vPortExitCritical+0x50>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3b01      	subs	r3, #1
 800821e:	4a09      	ldr	r2, [pc, #36]	; (8008244 <vPortExitCritical+0x50>)
 8008220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <vPortExitCritical+0x50>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d105      	bne.n	8008236 <vPortExitCritical+0x42>
 800822a:	2300      	movs	r3, #0
 800822c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20000098 	.word	0x20000098
	...

08008250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008250:	f3ef 8009 	mrs	r0, PSP
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	4b15      	ldr	r3, [pc, #84]	; (80082b0 <pxCurrentTCBConst>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	f01e 0f10 	tst.w	lr, #16
 8008260:	bf08      	it	eq
 8008262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826a:	6010      	str	r0, [r2, #0]
 800826c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008274:	f380 8811 	msr	BASEPRI, r0
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f7ff fca2 	bl	8007bc8 <vTaskSwitchContext>
 8008284:	f04f 0000 	mov.w	r0, #0
 8008288:	f380 8811 	msr	BASEPRI, r0
 800828c:	bc09      	pop	{r0, r3}
 800828e:	6819      	ldr	r1, [r3, #0]
 8008290:	6808      	ldr	r0, [r1, #0]
 8008292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008296:	f01e 0f10 	tst.w	lr, #16
 800829a:	bf08      	it	eq
 800829c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082a0:	f380 8809 	msr	PSP, r0
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	f3af 8000 	nop.w

080082b0 <pxCurrentTCBConst>:
 80082b0:	2000055c 	.word	0x2000055c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop

080082b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	607b      	str	r3, [r7, #4]
}
 80082d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082d2:	f7ff fbc1 	bl	8007a58 <xTaskIncrementTick>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082dc:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <xPortSysTickHandler+0x40>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	2300      	movs	r3, #0
 80082e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f383 8811 	msr	BASEPRI, r3
}
 80082ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <vPortSetupTimerInterrupt+0x34>)
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008306:	4b0b      	ldr	r3, [pc, #44]	; (8008334 <vPortSetupTimerInterrupt+0x38>)
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <vPortSetupTimerInterrupt+0x3c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a0a      	ldr	r2, [pc, #40]	; (800833c <vPortSetupTimerInterrupt+0x40>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	099b      	lsrs	r3, r3, #6
 8008318:	4a09      	ldr	r2, [pc, #36]	; (8008340 <vPortSetupTimerInterrupt+0x44>)
 800831a:	3b01      	subs	r3, #1
 800831c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800831e:	4b04      	ldr	r3, [pc, #16]	; (8008330 <vPortSetupTimerInterrupt+0x34>)
 8008320:	2207      	movs	r2, #7
 8008322:	601a      	str	r2, [r3, #0]
}
 8008324:	bf00      	nop
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	e000e010 	.word	0xe000e010
 8008334:	e000e018 	.word	0xe000e018
 8008338:	20000000 	.word	0x20000000
 800833c:	10624dd3 	.word	0x10624dd3
 8008340:	e000e014 	.word	0xe000e014

08008344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008354 <vPortEnableVFP+0x10>
 8008348:	6801      	ldr	r1, [r0, #0]
 800834a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800834e:	6001      	str	r1, [r0, #0]
 8008350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008352:	bf00      	nop
 8008354:	e000ed88 	.word	0xe000ed88

08008358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	; 0x28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008364:	f7ff face 	bl	8007904 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008368:	4b5b      	ldr	r3, [pc, #364]	; (80084d8 <pvPortMalloc+0x180>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008370:	f000 f920 	bl	80085b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008374:	4b59      	ldr	r3, [pc, #356]	; (80084dc <pvPortMalloc+0x184>)
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4013      	ands	r3, r2
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 8093 	bne.w	80084a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01d      	beq.n	80083c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008388:	2208      	movs	r2, #8
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4413      	add	r3, r2
 800838e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	2b00      	cmp	r3, #0
 8008398:	d014      	beq.n	80083c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f023 0307 	bic.w	r3, r3, #7
 80083a0:	3308      	adds	r3, #8
 80083a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <pvPortMalloc+0x6c>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	617b      	str	r3, [r7, #20]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d06e      	beq.n	80084a8 <pvPortMalloc+0x150>
 80083ca:	4b45      	ldr	r3, [pc, #276]	; (80084e0 <pvPortMalloc+0x188>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d869      	bhi.n	80084a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083d4:	4b43      	ldr	r3, [pc, #268]	; (80084e4 <pvPortMalloc+0x18c>)
 80083d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083d8:	4b42      	ldr	r3, [pc, #264]	; (80084e4 <pvPortMalloc+0x18c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083de:	e004      	b.n	80083ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d903      	bls.n	80083fc <pvPortMalloc+0xa4>
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1f1      	bne.n	80083e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083fc:	4b36      	ldr	r3, [pc, #216]	; (80084d8 <pvPortMalloc+0x180>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008402:	429a      	cmp	r2, r3
 8008404:	d050      	beq.n	80084a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2208      	movs	r2, #8
 800840c:	4413      	add	r3, r2
 800840e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	1ad2      	subs	r2, r2, r3
 8008420:	2308      	movs	r3, #8
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	429a      	cmp	r2, r3
 8008426:	d91f      	bls.n	8008468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4413      	add	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	f003 0307 	and.w	r3, r3, #7
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <pvPortMalloc+0xf8>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	613b      	str	r3, [r7, #16]
}
 800844c:	bf00      	nop
 800844e:	e7fe      	b.n	800844e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	1ad2      	subs	r2, r2, r3
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008462:	69b8      	ldr	r0, [r7, #24]
 8008464:	f000 f908 	bl	8008678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008468:	4b1d      	ldr	r3, [pc, #116]	; (80084e0 <pvPortMalloc+0x188>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	4a1b      	ldr	r2, [pc, #108]	; (80084e0 <pvPortMalloc+0x188>)
 8008474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008476:	4b1a      	ldr	r3, [pc, #104]	; (80084e0 <pvPortMalloc+0x188>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <pvPortMalloc+0x190>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d203      	bcs.n	800848a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008482:	4b17      	ldr	r3, [pc, #92]	; (80084e0 <pvPortMalloc+0x188>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a18      	ldr	r2, [pc, #96]	; (80084e8 <pvPortMalloc+0x190>)
 8008488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	4b13      	ldr	r3, [pc, #76]	; (80084dc <pvPortMalloc+0x184>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	431a      	orrs	r2, r3
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800849e:	4b13      	ldr	r3, [pc, #76]	; (80084ec <pvPortMalloc+0x194>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	4a11      	ldr	r2, [pc, #68]	; (80084ec <pvPortMalloc+0x194>)
 80084a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084a8:	f7ff fa3a 	bl	8007920 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <pvPortMalloc+0x174>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	60fb      	str	r3, [r7, #12]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <pvPortMalloc+0x172>
	return pvReturn;
 80084cc:	69fb      	ldr	r3, [r7, #28]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3728      	adds	r7, #40	; 0x28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20004298 	.word	0x20004298
 80084dc:	200042ac 	.word	0x200042ac
 80084e0:	2000429c 	.word	0x2000429c
 80084e4:	20004290 	.word	0x20004290
 80084e8:	200042a0 	.word	0x200042a0
 80084ec:	200042a4 	.word	0x200042a4

080084f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d04d      	beq.n	800859e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008502:	2308      	movs	r3, #8
 8008504:	425b      	negs	r3, r3
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4413      	add	r3, r2
 800850a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <vPortFree+0xb8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4013      	ands	r3, r2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <vPortFree+0x44>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	60fb      	str	r3, [r7, #12]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00a      	beq.n	8008552 <vPortFree+0x62>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	60bb      	str	r3, [r7, #8]
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <vPortFree+0xb8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4013      	ands	r3, r2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d01e      	beq.n	800859e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d11a      	bne.n	800859e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <vPortFree+0xb8>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	43db      	mvns	r3, r3
 8008572:	401a      	ands	r2, r3
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008578:	f7ff f9c4 	bl	8007904 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <vPortFree+0xbc>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4413      	add	r3, r2
 8008586:	4a09      	ldr	r2, [pc, #36]	; (80085ac <vPortFree+0xbc>)
 8008588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800858a:	6938      	ldr	r0, [r7, #16]
 800858c:	f000 f874 	bl	8008678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008590:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <vPortFree+0xc0>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	4a06      	ldr	r2, [pc, #24]	; (80085b0 <vPortFree+0xc0>)
 8008598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800859a:	f7ff f9c1 	bl	8007920 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800859e:	bf00      	nop
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200042ac 	.word	0x200042ac
 80085ac:	2000429c 	.word	0x2000429c
 80085b0:	200042a8 	.word	0x200042a8

080085b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085c0:	4b27      	ldr	r3, [pc, #156]	; (8008660 <prvHeapInit+0xac>)
 80085c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00c      	beq.n	80085e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3307      	adds	r3, #7
 80085d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0307 	bic.w	r3, r3, #7
 80085da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	4a1f      	ldr	r2, [pc, #124]	; (8008660 <prvHeapInit+0xac>)
 80085e4:	4413      	add	r3, r2
 80085e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085ec:	4a1d      	ldr	r2, [pc, #116]	; (8008664 <prvHeapInit+0xb0>)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085f2:	4b1c      	ldr	r3, [pc, #112]	; (8008664 <prvHeapInit+0xb0>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	4413      	add	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008600:	2208      	movs	r2, #8
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0307 	bic.w	r3, r3, #7
 800860e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4a15      	ldr	r2, [pc, #84]	; (8008668 <prvHeapInit+0xb4>)
 8008614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008616:	4b14      	ldr	r3, [pc, #80]	; (8008668 <prvHeapInit+0xb4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2200      	movs	r2, #0
 800861c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800861e:	4b12      	ldr	r3, [pc, #72]	; (8008668 <prvHeapInit+0xb4>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <prvHeapInit+0xb4>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	4a0a      	ldr	r2, [pc, #40]	; (800866c <prvHeapInit+0xb8>)
 8008642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	4a09      	ldr	r2, [pc, #36]	; (8008670 <prvHeapInit+0xbc>)
 800864a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <prvHeapInit+0xc0>)
 800864e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008652:	601a      	str	r2, [r3, #0]
}
 8008654:	bf00      	nop
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	20000690 	.word	0x20000690
 8008664:	20004290 	.word	0x20004290
 8008668:	20004298 	.word	0x20004298
 800866c:	200042a0 	.word	0x200042a0
 8008670:	2000429c 	.word	0x2000429c
 8008674:	200042ac 	.word	0x200042ac

08008678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008680:	4b28      	ldr	r3, [pc, #160]	; (8008724 <prvInsertBlockIntoFreeList+0xac>)
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	e002      	b.n	800868c <prvInsertBlockIntoFreeList+0x14>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	429a      	cmp	r2, r3
 8008694:	d8f7      	bhi.n	8008686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4413      	add	r3, r2
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d108      	bne.n	80086ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	441a      	add	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	441a      	add	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d118      	bne.n	8008700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4b15      	ldr	r3, [pc, #84]	; (8008728 <prvInsertBlockIntoFreeList+0xb0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d00d      	beq.n	80086f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	441a      	add	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e008      	b.n	8008708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086f6:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <prvInsertBlockIntoFreeList+0xb0>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	e003      	b.n	8008708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	429a      	cmp	r2, r3
 800870e:	d002      	beq.n	8008716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008716:	bf00      	nop
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20004290 	.word	0x20004290
 8008728:	20004298 	.word	0x20004298

0800872c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008730:	2200      	movs	r2, #0
 8008732:	4912      	ldr	r1, [pc, #72]	; (800877c <MX_USB_DEVICE_Init+0x50>)
 8008734:	4812      	ldr	r0, [pc, #72]	; (8008780 <MX_USB_DEVICE_Init+0x54>)
 8008736:	f7fd fa99 	bl	8005c6c <USBD_Init>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008740:	f7f8 fdb4 	bl	80012ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008744:	490f      	ldr	r1, [pc, #60]	; (8008784 <MX_USB_DEVICE_Init+0x58>)
 8008746:	480e      	ldr	r0, [pc, #56]	; (8008780 <MX_USB_DEVICE_Init+0x54>)
 8008748:	f7fd fac0 	bl	8005ccc <USBD_RegisterClass>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008752:	f7f8 fdab 	bl	80012ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008756:	490c      	ldr	r1, [pc, #48]	; (8008788 <MX_USB_DEVICE_Init+0x5c>)
 8008758:	4809      	ldr	r0, [pc, #36]	; (8008780 <MX_USB_DEVICE_Init+0x54>)
 800875a:	f7fd f9b1 	bl	8005ac0 <USBD_CDC_RegisterInterface>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008764:	f7f8 fda2 	bl	80012ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008768:	4805      	ldr	r0, [pc, #20]	; (8008780 <MX_USB_DEVICE_Init+0x54>)
 800876a:	f7fd fae5 	bl	8005d38 <USBD_Start>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008774:	f7f8 fd9a 	bl	80012ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008778:	bf00      	nop
 800877a:	bd80      	pop	{r7, pc}
 800877c:	200000b0 	.word	0x200000b0
 8008780:	200042b0 	.word	0x200042b0
 8008784:	20000018 	.word	0x20000018
 8008788:	2000009c 	.word	0x2000009c

0800878c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008790:	2200      	movs	r2, #0
 8008792:	4905      	ldr	r1, [pc, #20]	; (80087a8 <CDC_Init_FS+0x1c>)
 8008794:	4805      	ldr	r0, [pc, #20]	; (80087ac <CDC_Init_FS+0x20>)
 8008796:	f7fd f9ad 	bl	8005af4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800879a:	4905      	ldr	r1, [pc, #20]	; (80087b0 <CDC_Init_FS+0x24>)
 800879c:	4803      	ldr	r0, [pc, #12]	; (80087ac <CDC_Init_FS+0x20>)
 800879e:	f7fd f9cb 	bl	8005b38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	20004d8c 	.word	0x20004d8c
 80087ac:	200042b0 	.word	0x200042b0
 80087b0:	2000458c 	.word	0x2000458c

080087b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80087b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	6039      	str	r1, [r7, #0]
 80087ce:	71fb      	strb	r3, [r7, #7]
 80087d0:	4613      	mov	r3, r2
 80087d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b23      	cmp	r3, #35	; 0x23
 80087d8:	d84a      	bhi.n	8008870 <CDC_Control_FS+0xac>
 80087da:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <CDC_Control_FS+0x1c>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	08008871 	.word	0x08008871
 80087e4:	08008871 	.word	0x08008871
 80087e8:	08008871 	.word	0x08008871
 80087ec:	08008871 	.word	0x08008871
 80087f0:	08008871 	.word	0x08008871
 80087f4:	08008871 	.word	0x08008871
 80087f8:	08008871 	.word	0x08008871
 80087fc:	08008871 	.word	0x08008871
 8008800:	08008871 	.word	0x08008871
 8008804:	08008871 	.word	0x08008871
 8008808:	08008871 	.word	0x08008871
 800880c:	08008871 	.word	0x08008871
 8008810:	08008871 	.word	0x08008871
 8008814:	08008871 	.word	0x08008871
 8008818:	08008871 	.word	0x08008871
 800881c:	08008871 	.word	0x08008871
 8008820:	08008871 	.word	0x08008871
 8008824:	08008871 	.word	0x08008871
 8008828:	08008871 	.word	0x08008871
 800882c:	08008871 	.word	0x08008871
 8008830:	08008871 	.word	0x08008871
 8008834:	08008871 	.word	0x08008871
 8008838:	08008871 	.word	0x08008871
 800883c:	08008871 	.word	0x08008871
 8008840:	08008871 	.word	0x08008871
 8008844:	08008871 	.word	0x08008871
 8008848:	08008871 	.word	0x08008871
 800884c:	08008871 	.word	0x08008871
 8008850:	08008871 	.word	0x08008871
 8008854:	08008871 	.word	0x08008871
 8008858:	08008871 	.word	0x08008871
 800885c:	08008871 	.word	0x08008871
 8008860:	08008871 	.word	0x08008871
 8008864:	08008871 	.word	0x08008871
 8008868:	08008871 	.word	0x08008871
 800886c:	08008871 	.word	0x08008871
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008870:	bf00      	nop
  }

  return (USBD_OK);
 8008872:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	4805      	ldr	r0, [pc, #20]	; (80088a4 <CDC_Receive_FS+0x24>)
 800888e:	f7fd f953 	bl	8005b38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008892:	4804      	ldr	r0, [pc, #16]	; (80088a4 <CDC_Receive_FS+0x24>)
 8008894:	f7fd f9b4 	bl	8005c00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008898:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	200042b0 	.word	0x200042b0

080088a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80088b8:	4b0d      	ldr	r3, [pc, #52]	; (80088f0 <CDC_Transmit_FS+0x48>)
 80088ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e00b      	b.n	80088e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80088ce:	887b      	ldrh	r3, [r7, #2]
 80088d0:	461a      	mov	r2, r3
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	4806      	ldr	r0, [pc, #24]	; (80088f0 <CDC_Transmit_FS+0x48>)
 80088d6:	f7fd f90d 	bl	8005af4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80088da:	4805      	ldr	r0, [pc, #20]	; (80088f0 <CDC_Transmit_FS+0x48>)
 80088dc:	f7fd f94a 	bl	8005b74 <USBD_CDC_TransmitPacket>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	200042b0 	.word	0x200042b0

080088f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b087      	sub	sp, #28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	4613      	mov	r3, r2
 8008900:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008906:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800890a:	4618      	mov	r0, r3
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	6039      	str	r1, [r7, #0]
 8008922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2212      	movs	r2, #18
 8008928:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800892a:	4b03      	ldr	r3, [pc, #12]	; (8008938 <USBD_FS_DeviceDescriptor+0x20>)
}
 800892c:	4618      	mov	r0, r3
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	200000cc 	.word	0x200000cc

0800893c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	6039      	str	r1, [r7, #0]
 8008946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2204      	movs	r2, #4
 800894c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800894e:	4b03      	ldr	r3, [pc, #12]	; (800895c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	200000e0 	.word	0x200000e0

08008960 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d105      	bne.n	800897e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	4907      	ldr	r1, [pc, #28]	; (8008994 <USBD_FS_ProductStrDescriptor+0x34>)
 8008976:	4808      	ldr	r0, [pc, #32]	; (8008998 <USBD_FS_ProductStrDescriptor+0x38>)
 8008978:	f7fe fb8a 	bl	8007090 <USBD_GetString>
 800897c:	e004      	b.n	8008988 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	4904      	ldr	r1, [pc, #16]	; (8008994 <USBD_FS_ProductStrDescriptor+0x34>)
 8008982:	4805      	ldr	r0, [pc, #20]	; (8008998 <USBD_FS_ProductStrDescriptor+0x38>)
 8008984:	f7fe fb84 	bl	8007090 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008988:	4b02      	ldr	r3, [pc, #8]	; (8008994 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	2000558c 	.word	0x2000558c
 8008998:	0800cd64 	.word	0x0800cd64

0800899c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	6039      	str	r1, [r7, #0]
 80089a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	4904      	ldr	r1, [pc, #16]	; (80089bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089ac:	4804      	ldr	r0, [pc, #16]	; (80089c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089ae:	f7fe fb6f 	bl	8007090 <USBD_GetString>
  return USBD_StrDesc;
 80089b2:	4b02      	ldr	r3, [pc, #8]	; (80089bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	2000558c 	.word	0x2000558c
 80089c0:	0800cd7c 	.word	0x0800cd7c

080089c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	6039      	str	r1, [r7, #0]
 80089ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	221a      	movs	r2, #26
 80089d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089d6:	f000 f843 	bl	8008a60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089da:	4b02      	ldr	r3, [pc, #8]	; (80089e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200000e4 	.word	0x200000e4

080089e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	6039      	str	r1, [r7, #0]
 80089f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d105      	bne.n	8008a06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	4907      	ldr	r1, [pc, #28]	; (8008a1c <USBD_FS_ConfigStrDescriptor+0x34>)
 80089fe:	4808      	ldr	r0, [pc, #32]	; (8008a20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a00:	f7fe fb46 	bl	8007090 <USBD_GetString>
 8008a04:	e004      	b.n	8008a10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	4904      	ldr	r1, [pc, #16]	; (8008a1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a0a:	4805      	ldr	r0, [pc, #20]	; (8008a20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a0c:	f7fe fb40 	bl	8007090 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a10:	4b02      	ldr	r3, [pc, #8]	; (8008a1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	2000558c 	.word	0x2000558c
 8008a20:	0800cd90 	.word	0x0800cd90

08008a24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d105      	bne.n	8008a42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	4907      	ldr	r1, [pc, #28]	; (8008a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a3a:	4808      	ldr	r0, [pc, #32]	; (8008a5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a3c:	f7fe fb28 	bl	8007090 <USBD_GetString>
 8008a40:	e004      	b.n	8008a4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	4904      	ldr	r1, [pc, #16]	; (8008a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a46:	4805      	ldr	r0, [pc, #20]	; (8008a5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a48:	f7fe fb22 	bl	8007090 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	2000558c 	.word	0x2000558c
 8008a5c:	0800cd9c 	.word	0x0800cd9c

08008a60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <Get_SerialNum+0x44>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a6c:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <Get_SerialNum+0x48>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a72:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <Get_SerialNum+0x4c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d009      	beq.n	8008a9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a86:	2208      	movs	r2, #8
 8008a88:	4909      	ldr	r1, [pc, #36]	; (8008ab0 <Get_SerialNum+0x50>)
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 f814 	bl	8008ab8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a90:	2204      	movs	r2, #4
 8008a92:	4908      	ldr	r1, [pc, #32]	; (8008ab4 <Get_SerialNum+0x54>)
 8008a94:	68b8      	ldr	r0, [r7, #8]
 8008a96:	f000 f80f 	bl	8008ab8 <IntToUnicode>
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	1fff7a10 	.word	0x1fff7a10
 8008aa8:	1fff7a14 	.word	0x1fff7a14
 8008aac:	1fff7a18 	.word	0x1fff7a18
 8008ab0:	200000e6 	.word	0x200000e6
 8008ab4:	200000f6 	.word	0x200000f6

08008ab8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008aca:	2300      	movs	r3, #0
 8008acc:	75fb      	strb	r3, [r7, #23]
 8008ace:	e027      	b.n	8008b20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	0f1b      	lsrs	r3, r3, #28
 8008ad4:	2b09      	cmp	r3, #9
 8008ad6:	d80b      	bhi.n	8008af0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	0f1b      	lsrs	r3, r3, #28
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	440b      	add	r3, r1
 8008ae8:	3230      	adds	r2, #48	; 0x30
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	e00a      	b.n	8008b06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	0f1b      	lsrs	r3, r3, #28
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	7dfb      	ldrb	r3, [r7, #23]
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	4619      	mov	r1, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	440b      	add	r3, r1
 8008b00:	3237      	adds	r2, #55	; 0x37
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	3301      	adds	r3, #1
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	4413      	add	r3, r2
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	75fb      	strb	r3, [r7, #23]
 8008b20:	7dfa      	ldrb	r2, [r7, #23]
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d3d3      	bcc.n	8008ad0 <IntToUnicode+0x18>
  }
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
	...

08008b38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	; 0x28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b40:	f107 0314 	add.w	r3, r7, #20
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	609a      	str	r2, [r3, #8]
 8008b4c:	60da      	str	r2, [r3, #12]
 8008b4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b58:	d13a      	bne.n	8008bd0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	4b1e      	ldr	r3, [pc, #120]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	4a1d      	ldr	r2, [pc, #116]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	6313      	str	r3, [r2, #48]	; 0x30
 8008b6a:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b80:	2300      	movs	r3, #0
 8008b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b84:	2303      	movs	r3, #3
 8008b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b88:	230a      	movs	r3, #10
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	4619      	mov	r1, r3
 8008b92:	4812      	ldr	r0, [pc, #72]	; (8008bdc <HAL_PCD_MspInit+0xa4>)
 8008b94:	f7f8 fe7e 	bl	8001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b98:	4b0f      	ldr	r3, [pc, #60]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9c:	4a0e      	ldr	r2, [pc, #56]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba2:	6353      	str	r3, [r2, #52]	; 0x34
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	4b0b      	ldr	r3, [pc, #44]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bac:	4a0a      	ldr	r2, [pc, #40]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8008bb4:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <HAL_PCD_MspInit+0xa0>)
 8008bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2105      	movs	r1, #5
 8008bc4:	2043      	movs	r0, #67	; 0x43
 8008bc6:	f7f8 fe2e 	bl	8001826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008bca:	2043      	movs	r0, #67	; 0x43
 8008bcc:	f7f8 fe47 	bl	800185e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008bd0:	bf00      	nop
 8008bd2:	3728      	adds	r7, #40	; 0x28
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	40023800 	.word	0x40023800
 8008bdc:	40020000 	.word	0x40020000

08008be0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7fd f8eb 	bl	8005dd2 <USBD_LL_SetupStage>
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c16:	78fa      	ldrb	r2, [r7, #3]
 8008c18:	6879      	ldr	r1, [r7, #4]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	f7fd f925 	bl	8005e7c <USBD_LL_DataOutStage>
}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	460b      	mov	r3, r1
 8008c44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c4c:	78fa      	ldrb	r2, [r7, #3]
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	4613      	mov	r3, r2
 8008c52:	00db      	lsls	r3, r3, #3
 8008c54:	4413      	add	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	440b      	add	r3, r1
 8008c5a:	334c      	adds	r3, #76	; 0x4c
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	78fb      	ldrb	r3, [r7, #3]
 8008c60:	4619      	mov	r1, r3
 8008c62:	f7fd f9be 	bl	8005fe2 <USBD_LL_DataInStage>
}
 8008c66:	bf00      	nop
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fd faf2 	bl	8006266 <USBD_LL_SOF>
}
 8008c82:	bf00      	nop
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c92:	2301      	movs	r3, #1
 8008c94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d001      	beq.n	8008ca2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c9e:	f7f8 fb05 	bl	80012ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ca8:	7bfa      	ldrb	r2, [r7, #15]
 8008caa:	4611      	mov	r1, r2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fd fa9c 	bl	80061ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fd fa44 	bl	8006146 <USBD_LL_Reset>
}
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fd fa97 	bl	800620a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cee:	f043 0301 	orr.w	r3, r3, #1
 8008cf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008cfc:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <HAL_PCD_SuspendCallback+0x48>)
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	4a03      	ldr	r2, [pc, #12]	; (8008d10 <HAL_PCD_SuspendCallback+0x48>)
 8008d02:	f043 0306 	orr.w	r3, r3, #6
 8008d06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	e000ed00 	.word	0xe000ed00

08008d14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fd fa87 	bl	8006236 <USBD_LL_Resume>
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fd fadf 	bl	800630a <USBD_LL_IsoOUTIncomplete>
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d66:	78fa      	ldrb	r2, [r7, #3]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fd fa9b 	bl	80062a6 <USBD_LL_IsoINIncomplete>
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fd faf1 	bl	800636e <USBD_LL_DevConnected>
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fd faee 	bl	8006384 <USBD_LL_DevDisconnected>
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d13c      	bne.n	8008e3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008dc0:	4a20      	ldr	r2, [pc, #128]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a1e      	ldr	r2, [pc, #120]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dcc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008dd0:	4b1c      	ldr	r3, [pc, #112]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008dd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008dd8:	4b1a      	ldr	r3, [pc, #104]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dda:	2204      	movs	r2, #4
 8008ddc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008dde:	4b19      	ldr	r3, [pc, #100]	; (8008e44 <USBD_LL_Init+0x94>)
 8008de0:	2202      	movs	r2, #2
 8008de2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <USBD_LL_Init+0x94>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008dea:	4b16      	ldr	r3, [pc, #88]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dec:	2202      	movs	r2, #2
 8008dee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008df0:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <USBD_LL_Init+0x94>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008df6:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <USBD_LL_Init+0x94>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008dfc:	4b11      	ldr	r3, [pc, #68]	; (8008e44 <USBD_LL_Init+0x94>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e02:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e08:	4b0e      	ldr	r3, [pc, #56]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e0e:	480d      	ldr	r0, [pc, #52]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e10:	f7f8 fef7 	bl	8001c02 <HAL_PCD_Init>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e1a:	f7f8 fa47 	bl	80012ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e1e:	2180      	movs	r1, #128	; 0x80
 8008e20:	4808      	ldr	r0, [pc, #32]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e22:	f7fa f94e 	bl	80030c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e26:	2240      	movs	r2, #64	; 0x40
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4806      	ldr	r0, [pc, #24]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e2c:	f7fa f902 	bl	8003034 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e30:	2280      	movs	r2, #128	; 0x80
 8008e32:	2101      	movs	r1, #1
 8008e34:	4803      	ldr	r0, [pc, #12]	; (8008e44 <USBD_LL_Init+0x94>)
 8008e36:	f7fa f8fd 	bl	8003034 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	2000578c 	.word	0x2000578c

08008e48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7f8 ffec 	bl	8001e3c <HAL_PCD_Start>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 f942 	bl	80090f4 <USBD_Get_USB_Status>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	4608      	mov	r0, r1
 8008e88:	4611      	mov	r1, r2
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	70fb      	strb	r3, [r7, #3]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70bb      	strb	r3, [r7, #2]
 8008e94:	4613      	mov	r3, r2
 8008e96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ea6:	78bb      	ldrb	r3, [r7, #2]
 8008ea8:	883a      	ldrh	r2, [r7, #0]
 8008eaa:	78f9      	ldrb	r1, [r7, #3]
 8008eac:	f7f9 fcbd 	bl	800282a <HAL_PCD_EP_Open>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 f91c 	bl	80090f4 <USBD_Get_USB_Status>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ee4:	78fa      	ldrb	r2, [r7, #3]
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7f9 fd06 	bl	80028fa <HAL_PCD_EP_Close>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 f8fd 	bl	80090f4 <USBD_Get_USB_Status>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f9 fdde 	bl	8002ae8 <HAL_PCD_EP_SetStall>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 f8de 	bl	80090f4 <USBD_Get_USB_Status>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	4611      	mov	r1, r2
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7f9 fe23 	bl	8002bb0 <HAL_PCD_EP_ClrStall>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f8bf 	bl	80090f4 <USBD_Get_USB_Status>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	da0b      	bge.n	8008fb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	00db      	lsls	r3, r3, #3
 8008fac:	4413      	add	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	333e      	adds	r3, #62	; 0x3e
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	e00b      	b.n	8008fd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fbe:	68f9      	ldr	r1, [r7, #12]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008fce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7f9 fbf0 	bl	80027e0 <HAL_PCD_SetAddress>
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f874 	bl	80090f4 <USBD_Get_USB_Status>
 800900c:	4603      	mov	r3, r0
 800900e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009010:	7bbb      	ldrb	r3, [r7, #14]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b086      	sub	sp, #24
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
 8009026:	460b      	mov	r3, r1
 8009028:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009038:	7af9      	ldrb	r1, [r7, #11]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	f7f9 fd09 	bl	8002a54 <HAL_PCD_EP_Transmit>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f853 	bl	80090f4 <USBD_Get_USB_Status>
 800904e:	4603      	mov	r3, r0
 8009050:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009052:	7dbb      	ldrb	r3, [r7, #22]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3718      	adds	r7, #24
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	460b      	mov	r3, r1
 800906a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800907a:	7af9      	ldrb	r1, [r7, #11]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	f7f9 fc85 	bl	800298e <HAL_PCD_EP_Receive>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f832 	bl	80090f4 <USBD_Get_USB_Status>
 8009090:	4603      	mov	r3, r0
 8009092:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009094:	7dbb      	ldrb	r3, [r7, #22]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090b0:	78fa      	ldrb	r2, [r7, #3]
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7f9 fcb5 	bl	8002a24 <HAL_PCD_EP_GetRxCount>
 80090ba:	4603      	mov	r3, r0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090cc:	4b03      	ldr	r3, [pc, #12]	; (80090dc <USBD_static_malloc+0x18>)
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	20005c98 	.word	0x20005c98

080090e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]

}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009102:	79fb      	ldrb	r3, [r7, #7]
 8009104:	2b03      	cmp	r3, #3
 8009106:	d817      	bhi.n	8009138 <USBD_Get_USB_Status+0x44>
 8009108:	a201      	add	r2, pc, #4	; (adr r2, 8009110 <USBD_Get_USB_Status+0x1c>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	08009121 	.word	0x08009121
 8009114:	08009127 	.word	0x08009127
 8009118:	0800912d 	.word	0x0800912d
 800911c:	08009133 	.word	0x08009133
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]
    break;
 8009124:	e00b      	b.n	800913e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009126:	2303      	movs	r3, #3
 8009128:	73fb      	strb	r3, [r7, #15]
    break;
 800912a:	e008      	b.n	800913e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800912c:	2301      	movs	r3, #1
 800912e:	73fb      	strb	r3, [r7, #15]
    break;
 8009130:	e005      	b.n	800913e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009132:	2303      	movs	r3, #3
 8009134:	73fb      	strb	r3, [r7, #15]
    break;
 8009136:	e002      	b.n	800913e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009138:	2303      	movs	r3, #3
 800913a:	73fb      	strb	r3, [r7, #15]
    break;
 800913c:	bf00      	nop
  }
  return usb_status;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <__cvt>:
 800914c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009150:	ec55 4b10 	vmov	r4, r5, d0
 8009154:	2d00      	cmp	r5, #0
 8009156:	460e      	mov	r6, r1
 8009158:	4619      	mov	r1, r3
 800915a:	462b      	mov	r3, r5
 800915c:	bfbb      	ittet	lt
 800915e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009162:	461d      	movlt	r5, r3
 8009164:	2300      	movge	r3, #0
 8009166:	232d      	movlt	r3, #45	; 0x2d
 8009168:	700b      	strb	r3, [r1, #0]
 800916a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800916c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009170:	4691      	mov	r9, r2
 8009172:	f023 0820 	bic.w	r8, r3, #32
 8009176:	bfbc      	itt	lt
 8009178:	4622      	movlt	r2, r4
 800917a:	4614      	movlt	r4, r2
 800917c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009180:	d005      	beq.n	800918e <__cvt+0x42>
 8009182:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009186:	d100      	bne.n	800918a <__cvt+0x3e>
 8009188:	3601      	adds	r6, #1
 800918a:	2102      	movs	r1, #2
 800918c:	e000      	b.n	8009190 <__cvt+0x44>
 800918e:	2103      	movs	r1, #3
 8009190:	ab03      	add	r3, sp, #12
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	ab02      	add	r3, sp, #8
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	ec45 4b10 	vmov	d0, r4, r5
 800919c:	4653      	mov	r3, sl
 800919e:	4632      	mov	r2, r6
 80091a0:	f000 ff5a 	bl	800a058 <_dtoa_r>
 80091a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80091a8:	4607      	mov	r7, r0
 80091aa:	d102      	bne.n	80091b2 <__cvt+0x66>
 80091ac:	f019 0f01 	tst.w	r9, #1
 80091b0:	d022      	beq.n	80091f8 <__cvt+0xac>
 80091b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80091b6:	eb07 0906 	add.w	r9, r7, r6
 80091ba:	d110      	bne.n	80091de <__cvt+0x92>
 80091bc:	783b      	ldrb	r3, [r7, #0]
 80091be:	2b30      	cmp	r3, #48	; 0x30
 80091c0:	d10a      	bne.n	80091d8 <__cvt+0x8c>
 80091c2:	2200      	movs	r2, #0
 80091c4:	2300      	movs	r3, #0
 80091c6:	4620      	mov	r0, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7f7 fc85 	bl	8000ad8 <__aeabi_dcmpeq>
 80091ce:	b918      	cbnz	r0, 80091d8 <__cvt+0x8c>
 80091d0:	f1c6 0601 	rsb	r6, r6, #1
 80091d4:	f8ca 6000 	str.w	r6, [sl]
 80091d8:	f8da 3000 	ldr.w	r3, [sl]
 80091dc:	4499      	add	r9, r3
 80091de:	2200      	movs	r2, #0
 80091e0:	2300      	movs	r3, #0
 80091e2:	4620      	mov	r0, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	f7f7 fc77 	bl	8000ad8 <__aeabi_dcmpeq>
 80091ea:	b108      	cbz	r0, 80091f0 <__cvt+0xa4>
 80091ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80091f0:	2230      	movs	r2, #48	; 0x30
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	454b      	cmp	r3, r9
 80091f6:	d307      	bcc.n	8009208 <__cvt+0xbc>
 80091f8:	9b03      	ldr	r3, [sp, #12]
 80091fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091fc:	1bdb      	subs	r3, r3, r7
 80091fe:	4638      	mov	r0, r7
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	b004      	add	sp, #16
 8009204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009208:	1c59      	adds	r1, r3, #1
 800920a:	9103      	str	r1, [sp, #12]
 800920c:	701a      	strb	r2, [r3, #0]
 800920e:	e7f0      	b.n	80091f2 <__cvt+0xa6>

08009210 <__exponent>:
 8009210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009212:	4603      	mov	r3, r0
 8009214:	2900      	cmp	r1, #0
 8009216:	bfb8      	it	lt
 8009218:	4249      	neglt	r1, r1
 800921a:	f803 2b02 	strb.w	r2, [r3], #2
 800921e:	bfb4      	ite	lt
 8009220:	222d      	movlt	r2, #45	; 0x2d
 8009222:	222b      	movge	r2, #43	; 0x2b
 8009224:	2909      	cmp	r1, #9
 8009226:	7042      	strb	r2, [r0, #1]
 8009228:	dd2a      	ble.n	8009280 <__exponent+0x70>
 800922a:	f10d 0207 	add.w	r2, sp, #7
 800922e:	4617      	mov	r7, r2
 8009230:	260a      	movs	r6, #10
 8009232:	4694      	mov	ip, r2
 8009234:	fb91 f5f6 	sdiv	r5, r1, r6
 8009238:	fb06 1415 	mls	r4, r6, r5, r1
 800923c:	3430      	adds	r4, #48	; 0x30
 800923e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009242:	460c      	mov	r4, r1
 8009244:	2c63      	cmp	r4, #99	; 0x63
 8009246:	f102 32ff 	add.w	r2, r2, #4294967295
 800924a:	4629      	mov	r1, r5
 800924c:	dcf1      	bgt.n	8009232 <__exponent+0x22>
 800924e:	3130      	adds	r1, #48	; 0x30
 8009250:	f1ac 0402 	sub.w	r4, ip, #2
 8009254:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009258:	1c41      	adds	r1, r0, #1
 800925a:	4622      	mov	r2, r4
 800925c:	42ba      	cmp	r2, r7
 800925e:	d30a      	bcc.n	8009276 <__exponent+0x66>
 8009260:	f10d 0209 	add.w	r2, sp, #9
 8009264:	eba2 020c 	sub.w	r2, r2, ip
 8009268:	42bc      	cmp	r4, r7
 800926a:	bf88      	it	hi
 800926c:	2200      	movhi	r2, #0
 800926e:	4413      	add	r3, r2
 8009270:	1a18      	subs	r0, r3, r0
 8009272:	b003      	add	sp, #12
 8009274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009276:	f812 5b01 	ldrb.w	r5, [r2], #1
 800927a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800927e:	e7ed      	b.n	800925c <__exponent+0x4c>
 8009280:	2330      	movs	r3, #48	; 0x30
 8009282:	3130      	adds	r1, #48	; 0x30
 8009284:	7083      	strb	r3, [r0, #2]
 8009286:	70c1      	strb	r1, [r0, #3]
 8009288:	1d03      	adds	r3, r0, #4
 800928a:	e7f1      	b.n	8009270 <__exponent+0x60>

0800928c <_printf_float>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	ed2d 8b02 	vpush	{d8}
 8009294:	b08d      	sub	sp, #52	; 0x34
 8009296:	460c      	mov	r4, r1
 8009298:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800929c:	4616      	mov	r6, r2
 800929e:	461f      	mov	r7, r3
 80092a0:	4605      	mov	r5, r0
 80092a2:	f000 fdc9 	bl	8009e38 <_localeconv_r>
 80092a6:	f8d0 a000 	ldr.w	sl, [r0]
 80092aa:	4650      	mov	r0, sl
 80092ac:	f7f6 ffe8 	bl	8000280 <strlen>
 80092b0:	2300      	movs	r3, #0
 80092b2:	930a      	str	r3, [sp, #40]	; 0x28
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	9305      	str	r3, [sp, #20]
 80092b8:	f8d8 3000 	ldr.w	r3, [r8]
 80092bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80092c0:	3307      	adds	r3, #7
 80092c2:	f023 0307 	bic.w	r3, r3, #7
 80092c6:	f103 0208 	add.w	r2, r3, #8
 80092ca:	f8c8 2000 	str.w	r2, [r8]
 80092ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092d6:	9307      	str	r3, [sp, #28]
 80092d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80092dc:	ee08 0a10 	vmov	s16, r0
 80092e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80092e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092e8:	4b9e      	ldr	r3, [pc, #632]	; (8009564 <_printf_float+0x2d8>)
 80092ea:	f04f 32ff 	mov.w	r2, #4294967295
 80092ee:	f7f7 fc25 	bl	8000b3c <__aeabi_dcmpun>
 80092f2:	bb88      	cbnz	r0, 8009358 <_printf_float+0xcc>
 80092f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092f8:	4b9a      	ldr	r3, [pc, #616]	; (8009564 <_printf_float+0x2d8>)
 80092fa:	f04f 32ff 	mov.w	r2, #4294967295
 80092fe:	f7f7 fbff 	bl	8000b00 <__aeabi_dcmple>
 8009302:	bb48      	cbnz	r0, 8009358 <_printf_float+0xcc>
 8009304:	2200      	movs	r2, #0
 8009306:	2300      	movs	r3, #0
 8009308:	4640      	mov	r0, r8
 800930a:	4649      	mov	r1, r9
 800930c:	f7f7 fbee 	bl	8000aec <__aeabi_dcmplt>
 8009310:	b110      	cbz	r0, 8009318 <_printf_float+0x8c>
 8009312:	232d      	movs	r3, #45	; 0x2d
 8009314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009318:	4a93      	ldr	r2, [pc, #588]	; (8009568 <_printf_float+0x2dc>)
 800931a:	4b94      	ldr	r3, [pc, #592]	; (800956c <_printf_float+0x2e0>)
 800931c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009320:	bf94      	ite	ls
 8009322:	4690      	movls	r8, r2
 8009324:	4698      	movhi	r8, r3
 8009326:	2303      	movs	r3, #3
 8009328:	6123      	str	r3, [r4, #16]
 800932a:	9b05      	ldr	r3, [sp, #20]
 800932c:	f023 0304 	bic.w	r3, r3, #4
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	f04f 0900 	mov.w	r9, #0
 8009336:	9700      	str	r7, [sp, #0]
 8009338:	4633      	mov	r3, r6
 800933a:	aa0b      	add	r2, sp, #44	; 0x2c
 800933c:	4621      	mov	r1, r4
 800933e:	4628      	mov	r0, r5
 8009340:	f000 f9da 	bl	80096f8 <_printf_common>
 8009344:	3001      	adds	r0, #1
 8009346:	f040 8090 	bne.w	800946a <_printf_float+0x1de>
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	b00d      	add	sp, #52	; 0x34
 8009350:	ecbd 8b02 	vpop	{d8}
 8009354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009358:	4642      	mov	r2, r8
 800935a:	464b      	mov	r3, r9
 800935c:	4640      	mov	r0, r8
 800935e:	4649      	mov	r1, r9
 8009360:	f7f7 fbec 	bl	8000b3c <__aeabi_dcmpun>
 8009364:	b140      	cbz	r0, 8009378 <_printf_float+0xec>
 8009366:	464b      	mov	r3, r9
 8009368:	2b00      	cmp	r3, #0
 800936a:	bfbc      	itt	lt
 800936c:	232d      	movlt	r3, #45	; 0x2d
 800936e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009372:	4a7f      	ldr	r2, [pc, #508]	; (8009570 <_printf_float+0x2e4>)
 8009374:	4b7f      	ldr	r3, [pc, #508]	; (8009574 <_printf_float+0x2e8>)
 8009376:	e7d1      	b.n	800931c <_printf_float+0x90>
 8009378:	6863      	ldr	r3, [r4, #4]
 800937a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800937e:	9206      	str	r2, [sp, #24]
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	d13f      	bne.n	8009404 <_printf_float+0x178>
 8009384:	2306      	movs	r3, #6
 8009386:	6063      	str	r3, [r4, #4]
 8009388:	9b05      	ldr	r3, [sp, #20]
 800938a:	6861      	ldr	r1, [r4, #4]
 800938c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009390:	2300      	movs	r3, #0
 8009392:	9303      	str	r3, [sp, #12]
 8009394:	ab0a      	add	r3, sp, #40	; 0x28
 8009396:	e9cd b301 	strd	fp, r3, [sp, #4]
 800939a:	ab09      	add	r3, sp, #36	; 0x24
 800939c:	ec49 8b10 	vmov	d0, r8, r9
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	6022      	str	r2, [r4, #0]
 80093a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80093a8:	4628      	mov	r0, r5
 80093aa:	f7ff fecf 	bl	800914c <__cvt>
 80093ae:	9b06      	ldr	r3, [sp, #24]
 80093b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093b2:	2b47      	cmp	r3, #71	; 0x47
 80093b4:	4680      	mov	r8, r0
 80093b6:	d108      	bne.n	80093ca <_printf_float+0x13e>
 80093b8:	1cc8      	adds	r0, r1, #3
 80093ba:	db02      	blt.n	80093c2 <_printf_float+0x136>
 80093bc:	6863      	ldr	r3, [r4, #4]
 80093be:	4299      	cmp	r1, r3
 80093c0:	dd41      	ble.n	8009446 <_printf_float+0x1ba>
 80093c2:	f1ab 0302 	sub.w	r3, fp, #2
 80093c6:	fa5f fb83 	uxtb.w	fp, r3
 80093ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093ce:	d820      	bhi.n	8009412 <_printf_float+0x186>
 80093d0:	3901      	subs	r1, #1
 80093d2:	465a      	mov	r2, fp
 80093d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80093d8:	9109      	str	r1, [sp, #36]	; 0x24
 80093da:	f7ff ff19 	bl	8009210 <__exponent>
 80093de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093e0:	1813      	adds	r3, r2, r0
 80093e2:	2a01      	cmp	r2, #1
 80093e4:	4681      	mov	r9, r0
 80093e6:	6123      	str	r3, [r4, #16]
 80093e8:	dc02      	bgt.n	80093f0 <_printf_float+0x164>
 80093ea:	6822      	ldr	r2, [r4, #0]
 80093ec:	07d2      	lsls	r2, r2, #31
 80093ee:	d501      	bpl.n	80093f4 <_printf_float+0x168>
 80093f0:	3301      	adds	r3, #1
 80093f2:	6123      	str	r3, [r4, #16]
 80093f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d09c      	beq.n	8009336 <_printf_float+0xaa>
 80093fc:	232d      	movs	r3, #45	; 0x2d
 80093fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009402:	e798      	b.n	8009336 <_printf_float+0xaa>
 8009404:	9a06      	ldr	r2, [sp, #24]
 8009406:	2a47      	cmp	r2, #71	; 0x47
 8009408:	d1be      	bne.n	8009388 <_printf_float+0xfc>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1bc      	bne.n	8009388 <_printf_float+0xfc>
 800940e:	2301      	movs	r3, #1
 8009410:	e7b9      	b.n	8009386 <_printf_float+0xfa>
 8009412:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009416:	d118      	bne.n	800944a <_printf_float+0x1be>
 8009418:	2900      	cmp	r1, #0
 800941a:	6863      	ldr	r3, [r4, #4]
 800941c:	dd0b      	ble.n	8009436 <_printf_float+0x1aa>
 800941e:	6121      	str	r1, [r4, #16]
 8009420:	b913      	cbnz	r3, 8009428 <_printf_float+0x19c>
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	07d0      	lsls	r0, r2, #31
 8009426:	d502      	bpl.n	800942e <_printf_float+0x1a2>
 8009428:	3301      	adds	r3, #1
 800942a:	440b      	add	r3, r1
 800942c:	6123      	str	r3, [r4, #16]
 800942e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009430:	f04f 0900 	mov.w	r9, #0
 8009434:	e7de      	b.n	80093f4 <_printf_float+0x168>
 8009436:	b913      	cbnz	r3, 800943e <_printf_float+0x1b2>
 8009438:	6822      	ldr	r2, [r4, #0]
 800943a:	07d2      	lsls	r2, r2, #31
 800943c:	d501      	bpl.n	8009442 <_printf_float+0x1b6>
 800943e:	3302      	adds	r3, #2
 8009440:	e7f4      	b.n	800942c <_printf_float+0x1a0>
 8009442:	2301      	movs	r3, #1
 8009444:	e7f2      	b.n	800942c <_printf_float+0x1a0>
 8009446:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800944a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800944c:	4299      	cmp	r1, r3
 800944e:	db05      	blt.n	800945c <_printf_float+0x1d0>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	6121      	str	r1, [r4, #16]
 8009454:	07d8      	lsls	r0, r3, #31
 8009456:	d5ea      	bpl.n	800942e <_printf_float+0x1a2>
 8009458:	1c4b      	adds	r3, r1, #1
 800945a:	e7e7      	b.n	800942c <_printf_float+0x1a0>
 800945c:	2900      	cmp	r1, #0
 800945e:	bfd4      	ite	le
 8009460:	f1c1 0202 	rsble	r2, r1, #2
 8009464:	2201      	movgt	r2, #1
 8009466:	4413      	add	r3, r2
 8009468:	e7e0      	b.n	800942c <_printf_float+0x1a0>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	055a      	lsls	r2, r3, #21
 800946e:	d407      	bmi.n	8009480 <_printf_float+0x1f4>
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	4642      	mov	r2, r8
 8009474:	4631      	mov	r1, r6
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	d12c      	bne.n	80094d8 <_printf_float+0x24c>
 800947e:	e764      	b.n	800934a <_printf_float+0xbe>
 8009480:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009484:	f240 80e0 	bls.w	8009648 <_printf_float+0x3bc>
 8009488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800948c:	2200      	movs	r2, #0
 800948e:	2300      	movs	r3, #0
 8009490:	f7f7 fb22 	bl	8000ad8 <__aeabi_dcmpeq>
 8009494:	2800      	cmp	r0, #0
 8009496:	d034      	beq.n	8009502 <_printf_float+0x276>
 8009498:	4a37      	ldr	r2, [pc, #220]	; (8009578 <_printf_float+0x2ec>)
 800949a:	2301      	movs	r3, #1
 800949c:	4631      	mov	r1, r6
 800949e:	4628      	mov	r0, r5
 80094a0:	47b8      	blx	r7
 80094a2:	3001      	adds	r0, #1
 80094a4:	f43f af51 	beq.w	800934a <_printf_float+0xbe>
 80094a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094ac:	429a      	cmp	r2, r3
 80094ae:	db02      	blt.n	80094b6 <_printf_float+0x22a>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	07d8      	lsls	r0, r3, #31
 80094b4:	d510      	bpl.n	80094d8 <_printf_float+0x24c>
 80094b6:	ee18 3a10 	vmov	r3, s16
 80094ba:	4652      	mov	r2, sl
 80094bc:	4631      	mov	r1, r6
 80094be:	4628      	mov	r0, r5
 80094c0:	47b8      	blx	r7
 80094c2:	3001      	adds	r0, #1
 80094c4:	f43f af41 	beq.w	800934a <_printf_float+0xbe>
 80094c8:	f04f 0800 	mov.w	r8, #0
 80094cc:	f104 091a 	add.w	r9, r4, #26
 80094d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d2:	3b01      	subs	r3, #1
 80094d4:	4543      	cmp	r3, r8
 80094d6:	dc09      	bgt.n	80094ec <_printf_float+0x260>
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	079b      	lsls	r3, r3, #30
 80094dc:	f100 8107 	bmi.w	80096ee <_printf_float+0x462>
 80094e0:	68e0      	ldr	r0, [r4, #12]
 80094e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094e4:	4298      	cmp	r0, r3
 80094e6:	bfb8      	it	lt
 80094e8:	4618      	movlt	r0, r3
 80094ea:	e730      	b.n	800934e <_printf_float+0xc2>
 80094ec:	2301      	movs	r3, #1
 80094ee:	464a      	mov	r2, r9
 80094f0:	4631      	mov	r1, r6
 80094f2:	4628      	mov	r0, r5
 80094f4:	47b8      	blx	r7
 80094f6:	3001      	adds	r0, #1
 80094f8:	f43f af27 	beq.w	800934a <_printf_float+0xbe>
 80094fc:	f108 0801 	add.w	r8, r8, #1
 8009500:	e7e6      	b.n	80094d0 <_printf_float+0x244>
 8009502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009504:	2b00      	cmp	r3, #0
 8009506:	dc39      	bgt.n	800957c <_printf_float+0x2f0>
 8009508:	4a1b      	ldr	r2, [pc, #108]	; (8009578 <_printf_float+0x2ec>)
 800950a:	2301      	movs	r3, #1
 800950c:	4631      	mov	r1, r6
 800950e:	4628      	mov	r0, r5
 8009510:	47b8      	blx	r7
 8009512:	3001      	adds	r0, #1
 8009514:	f43f af19 	beq.w	800934a <_printf_float+0xbe>
 8009518:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800951c:	4313      	orrs	r3, r2
 800951e:	d102      	bne.n	8009526 <_printf_float+0x29a>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	07d9      	lsls	r1, r3, #31
 8009524:	d5d8      	bpl.n	80094d8 <_printf_float+0x24c>
 8009526:	ee18 3a10 	vmov	r3, s16
 800952a:	4652      	mov	r2, sl
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	47b8      	blx	r7
 8009532:	3001      	adds	r0, #1
 8009534:	f43f af09 	beq.w	800934a <_printf_float+0xbe>
 8009538:	f04f 0900 	mov.w	r9, #0
 800953c:	f104 0a1a 	add.w	sl, r4, #26
 8009540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009542:	425b      	negs	r3, r3
 8009544:	454b      	cmp	r3, r9
 8009546:	dc01      	bgt.n	800954c <_printf_float+0x2c0>
 8009548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800954a:	e792      	b.n	8009472 <_printf_float+0x1e6>
 800954c:	2301      	movs	r3, #1
 800954e:	4652      	mov	r2, sl
 8009550:	4631      	mov	r1, r6
 8009552:	4628      	mov	r0, r5
 8009554:	47b8      	blx	r7
 8009556:	3001      	adds	r0, #1
 8009558:	f43f aef7 	beq.w	800934a <_printf_float+0xbe>
 800955c:	f109 0901 	add.w	r9, r9, #1
 8009560:	e7ee      	b.n	8009540 <_printf_float+0x2b4>
 8009562:	bf00      	nop
 8009564:	7fefffff 	.word	0x7fefffff
 8009568:	0800cdbc 	.word	0x0800cdbc
 800956c:	0800cdc0 	.word	0x0800cdc0
 8009570:	0800cdc4 	.word	0x0800cdc4
 8009574:	0800cdc8 	.word	0x0800cdc8
 8009578:	0800cdcc 	.word	0x0800cdcc
 800957c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800957e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009580:	429a      	cmp	r2, r3
 8009582:	bfa8      	it	ge
 8009584:	461a      	movge	r2, r3
 8009586:	2a00      	cmp	r2, #0
 8009588:	4691      	mov	r9, r2
 800958a:	dc37      	bgt.n	80095fc <_printf_float+0x370>
 800958c:	f04f 0b00 	mov.w	fp, #0
 8009590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009594:	f104 021a 	add.w	r2, r4, #26
 8009598:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800959a:	9305      	str	r3, [sp, #20]
 800959c:	eba3 0309 	sub.w	r3, r3, r9
 80095a0:	455b      	cmp	r3, fp
 80095a2:	dc33      	bgt.n	800960c <_printf_float+0x380>
 80095a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095a8:	429a      	cmp	r2, r3
 80095aa:	db3b      	blt.n	8009624 <_printf_float+0x398>
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	07da      	lsls	r2, r3, #31
 80095b0:	d438      	bmi.n	8009624 <_printf_float+0x398>
 80095b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80095b6:	eba2 0903 	sub.w	r9, r2, r3
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	1ad2      	subs	r2, r2, r3
 80095be:	4591      	cmp	r9, r2
 80095c0:	bfa8      	it	ge
 80095c2:	4691      	movge	r9, r2
 80095c4:	f1b9 0f00 	cmp.w	r9, #0
 80095c8:	dc35      	bgt.n	8009636 <_printf_float+0x3aa>
 80095ca:	f04f 0800 	mov.w	r8, #0
 80095ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095d2:	f104 0a1a 	add.w	sl, r4, #26
 80095d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	eba3 0309 	sub.w	r3, r3, r9
 80095e0:	4543      	cmp	r3, r8
 80095e2:	f77f af79 	ble.w	80094d8 <_printf_float+0x24c>
 80095e6:	2301      	movs	r3, #1
 80095e8:	4652      	mov	r2, sl
 80095ea:	4631      	mov	r1, r6
 80095ec:	4628      	mov	r0, r5
 80095ee:	47b8      	blx	r7
 80095f0:	3001      	adds	r0, #1
 80095f2:	f43f aeaa 	beq.w	800934a <_printf_float+0xbe>
 80095f6:	f108 0801 	add.w	r8, r8, #1
 80095fa:	e7ec      	b.n	80095d6 <_printf_float+0x34a>
 80095fc:	4613      	mov	r3, r2
 80095fe:	4631      	mov	r1, r6
 8009600:	4642      	mov	r2, r8
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	d1c0      	bne.n	800958c <_printf_float+0x300>
 800960a:	e69e      	b.n	800934a <_printf_float+0xbe>
 800960c:	2301      	movs	r3, #1
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	9205      	str	r2, [sp, #20]
 8009614:	47b8      	blx	r7
 8009616:	3001      	adds	r0, #1
 8009618:	f43f ae97 	beq.w	800934a <_printf_float+0xbe>
 800961c:	9a05      	ldr	r2, [sp, #20]
 800961e:	f10b 0b01 	add.w	fp, fp, #1
 8009622:	e7b9      	b.n	8009598 <_printf_float+0x30c>
 8009624:	ee18 3a10 	vmov	r3, s16
 8009628:	4652      	mov	r2, sl
 800962a:	4631      	mov	r1, r6
 800962c:	4628      	mov	r0, r5
 800962e:	47b8      	blx	r7
 8009630:	3001      	adds	r0, #1
 8009632:	d1be      	bne.n	80095b2 <_printf_float+0x326>
 8009634:	e689      	b.n	800934a <_printf_float+0xbe>
 8009636:	9a05      	ldr	r2, [sp, #20]
 8009638:	464b      	mov	r3, r9
 800963a:	4442      	add	r2, r8
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	47b8      	blx	r7
 8009642:	3001      	adds	r0, #1
 8009644:	d1c1      	bne.n	80095ca <_printf_float+0x33e>
 8009646:	e680      	b.n	800934a <_printf_float+0xbe>
 8009648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800964a:	2a01      	cmp	r2, #1
 800964c:	dc01      	bgt.n	8009652 <_printf_float+0x3c6>
 800964e:	07db      	lsls	r3, r3, #31
 8009650:	d53a      	bpl.n	80096c8 <_printf_float+0x43c>
 8009652:	2301      	movs	r3, #1
 8009654:	4642      	mov	r2, r8
 8009656:	4631      	mov	r1, r6
 8009658:	4628      	mov	r0, r5
 800965a:	47b8      	blx	r7
 800965c:	3001      	adds	r0, #1
 800965e:	f43f ae74 	beq.w	800934a <_printf_float+0xbe>
 8009662:	ee18 3a10 	vmov	r3, s16
 8009666:	4652      	mov	r2, sl
 8009668:	4631      	mov	r1, r6
 800966a:	4628      	mov	r0, r5
 800966c:	47b8      	blx	r7
 800966e:	3001      	adds	r0, #1
 8009670:	f43f ae6b 	beq.w	800934a <_printf_float+0xbe>
 8009674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009678:	2200      	movs	r2, #0
 800967a:	2300      	movs	r3, #0
 800967c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009680:	f7f7 fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009684:	b9d8      	cbnz	r0, 80096be <_printf_float+0x432>
 8009686:	f10a 33ff 	add.w	r3, sl, #4294967295
 800968a:	f108 0201 	add.w	r2, r8, #1
 800968e:	4631      	mov	r1, r6
 8009690:	4628      	mov	r0, r5
 8009692:	47b8      	blx	r7
 8009694:	3001      	adds	r0, #1
 8009696:	d10e      	bne.n	80096b6 <_printf_float+0x42a>
 8009698:	e657      	b.n	800934a <_printf_float+0xbe>
 800969a:	2301      	movs	r3, #1
 800969c:	4652      	mov	r2, sl
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	f43f ae50 	beq.w	800934a <_printf_float+0xbe>
 80096aa:	f108 0801 	add.w	r8, r8, #1
 80096ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b0:	3b01      	subs	r3, #1
 80096b2:	4543      	cmp	r3, r8
 80096b4:	dcf1      	bgt.n	800969a <_printf_float+0x40e>
 80096b6:	464b      	mov	r3, r9
 80096b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80096bc:	e6da      	b.n	8009474 <_printf_float+0x1e8>
 80096be:	f04f 0800 	mov.w	r8, #0
 80096c2:	f104 0a1a 	add.w	sl, r4, #26
 80096c6:	e7f2      	b.n	80096ae <_printf_float+0x422>
 80096c8:	2301      	movs	r3, #1
 80096ca:	4642      	mov	r2, r8
 80096cc:	e7df      	b.n	800968e <_printf_float+0x402>
 80096ce:	2301      	movs	r3, #1
 80096d0:	464a      	mov	r2, r9
 80096d2:	4631      	mov	r1, r6
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b8      	blx	r7
 80096d8:	3001      	adds	r0, #1
 80096da:	f43f ae36 	beq.w	800934a <_printf_float+0xbe>
 80096de:	f108 0801 	add.w	r8, r8, #1
 80096e2:	68e3      	ldr	r3, [r4, #12]
 80096e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096e6:	1a5b      	subs	r3, r3, r1
 80096e8:	4543      	cmp	r3, r8
 80096ea:	dcf0      	bgt.n	80096ce <_printf_float+0x442>
 80096ec:	e6f8      	b.n	80094e0 <_printf_float+0x254>
 80096ee:	f04f 0800 	mov.w	r8, #0
 80096f2:	f104 0919 	add.w	r9, r4, #25
 80096f6:	e7f4      	b.n	80096e2 <_printf_float+0x456>

080096f8 <_printf_common>:
 80096f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fc:	4616      	mov	r6, r2
 80096fe:	4699      	mov	r9, r3
 8009700:	688a      	ldr	r2, [r1, #8]
 8009702:	690b      	ldr	r3, [r1, #16]
 8009704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009708:	4293      	cmp	r3, r2
 800970a:	bfb8      	it	lt
 800970c:	4613      	movlt	r3, r2
 800970e:	6033      	str	r3, [r6, #0]
 8009710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009714:	4607      	mov	r7, r0
 8009716:	460c      	mov	r4, r1
 8009718:	b10a      	cbz	r2, 800971e <_printf_common+0x26>
 800971a:	3301      	adds	r3, #1
 800971c:	6033      	str	r3, [r6, #0]
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	0699      	lsls	r1, r3, #26
 8009722:	bf42      	ittt	mi
 8009724:	6833      	ldrmi	r3, [r6, #0]
 8009726:	3302      	addmi	r3, #2
 8009728:	6033      	strmi	r3, [r6, #0]
 800972a:	6825      	ldr	r5, [r4, #0]
 800972c:	f015 0506 	ands.w	r5, r5, #6
 8009730:	d106      	bne.n	8009740 <_printf_common+0x48>
 8009732:	f104 0a19 	add.w	sl, r4, #25
 8009736:	68e3      	ldr	r3, [r4, #12]
 8009738:	6832      	ldr	r2, [r6, #0]
 800973a:	1a9b      	subs	r3, r3, r2
 800973c:	42ab      	cmp	r3, r5
 800973e:	dc26      	bgt.n	800978e <_printf_common+0x96>
 8009740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009744:	1e13      	subs	r3, r2, #0
 8009746:	6822      	ldr	r2, [r4, #0]
 8009748:	bf18      	it	ne
 800974a:	2301      	movne	r3, #1
 800974c:	0692      	lsls	r2, r2, #26
 800974e:	d42b      	bmi.n	80097a8 <_printf_common+0xb0>
 8009750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009754:	4649      	mov	r1, r9
 8009756:	4638      	mov	r0, r7
 8009758:	47c0      	blx	r8
 800975a:	3001      	adds	r0, #1
 800975c:	d01e      	beq.n	800979c <_printf_common+0xa4>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	6922      	ldr	r2, [r4, #16]
 8009762:	f003 0306 	and.w	r3, r3, #6
 8009766:	2b04      	cmp	r3, #4
 8009768:	bf02      	ittt	eq
 800976a:	68e5      	ldreq	r5, [r4, #12]
 800976c:	6833      	ldreq	r3, [r6, #0]
 800976e:	1aed      	subeq	r5, r5, r3
 8009770:	68a3      	ldr	r3, [r4, #8]
 8009772:	bf0c      	ite	eq
 8009774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009778:	2500      	movne	r5, #0
 800977a:	4293      	cmp	r3, r2
 800977c:	bfc4      	itt	gt
 800977e:	1a9b      	subgt	r3, r3, r2
 8009780:	18ed      	addgt	r5, r5, r3
 8009782:	2600      	movs	r6, #0
 8009784:	341a      	adds	r4, #26
 8009786:	42b5      	cmp	r5, r6
 8009788:	d11a      	bne.n	80097c0 <_printf_common+0xc8>
 800978a:	2000      	movs	r0, #0
 800978c:	e008      	b.n	80097a0 <_printf_common+0xa8>
 800978e:	2301      	movs	r3, #1
 8009790:	4652      	mov	r2, sl
 8009792:	4649      	mov	r1, r9
 8009794:	4638      	mov	r0, r7
 8009796:	47c0      	blx	r8
 8009798:	3001      	adds	r0, #1
 800979a:	d103      	bne.n	80097a4 <_printf_common+0xac>
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a4:	3501      	adds	r5, #1
 80097a6:	e7c6      	b.n	8009736 <_printf_common+0x3e>
 80097a8:	18e1      	adds	r1, r4, r3
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	2030      	movs	r0, #48	; 0x30
 80097ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097b2:	4422      	add	r2, r4
 80097b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097bc:	3302      	adds	r3, #2
 80097be:	e7c7      	b.n	8009750 <_printf_common+0x58>
 80097c0:	2301      	movs	r3, #1
 80097c2:	4622      	mov	r2, r4
 80097c4:	4649      	mov	r1, r9
 80097c6:	4638      	mov	r0, r7
 80097c8:	47c0      	blx	r8
 80097ca:	3001      	adds	r0, #1
 80097cc:	d0e6      	beq.n	800979c <_printf_common+0xa4>
 80097ce:	3601      	adds	r6, #1
 80097d0:	e7d9      	b.n	8009786 <_printf_common+0x8e>
	...

080097d4 <_printf_i>:
 80097d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	7e0f      	ldrb	r7, [r1, #24]
 80097da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097dc:	2f78      	cmp	r7, #120	; 0x78
 80097de:	4691      	mov	r9, r2
 80097e0:	4680      	mov	r8, r0
 80097e2:	460c      	mov	r4, r1
 80097e4:	469a      	mov	sl, r3
 80097e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097ea:	d807      	bhi.n	80097fc <_printf_i+0x28>
 80097ec:	2f62      	cmp	r7, #98	; 0x62
 80097ee:	d80a      	bhi.n	8009806 <_printf_i+0x32>
 80097f0:	2f00      	cmp	r7, #0
 80097f2:	f000 80d4 	beq.w	800999e <_printf_i+0x1ca>
 80097f6:	2f58      	cmp	r7, #88	; 0x58
 80097f8:	f000 80c0 	beq.w	800997c <_printf_i+0x1a8>
 80097fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009804:	e03a      	b.n	800987c <_printf_i+0xa8>
 8009806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800980a:	2b15      	cmp	r3, #21
 800980c:	d8f6      	bhi.n	80097fc <_printf_i+0x28>
 800980e:	a101      	add	r1, pc, #4	; (adr r1, 8009814 <_printf_i+0x40>)
 8009810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009814:	0800986d 	.word	0x0800986d
 8009818:	08009881 	.word	0x08009881
 800981c:	080097fd 	.word	0x080097fd
 8009820:	080097fd 	.word	0x080097fd
 8009824:	080097fd 	.word	0x080097fd
 8009828:	080097fd 	.word	0x080097fd
 800982c:	08009881 	.word	0x08009881
 8009830:	080097fd 	.word	0x080097fd
 8009834:	080097fd 	.word	0x080097fd
 8009838:	080097fd 	.word	0x080097fd
 800983c:	080097fd 	.word	0x080097fd
 8009840:	08009985 	.word	0x08009985
 8009844:	080098ad 	.word	0x080098ad
 8009848:	0800993f 	.word	0x0800993f
 800984c:	080097fd 	.word	0x080097fd
 8009850:	080097fd 	.word	0x080097fd
 8009854:	080099a7 	.word	0x080099a7
 8009858:	080097fd 	.word	0x080097fd
 800985c:	080098ad 	.word	0x080098ad
 8009860:	080097fd 	.word	0x080097fd
 8009864:	080097fd 	.word	0x080097fd
 8009868:	08009947 	.word	0x08009947
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	1d1a      	adds	r2, r3, #4
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	602a      	str	r2, [r5, #0]
 8009874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800987c:	2301      	movs	r3, #1
 800987e:	e09f      	b.n	80099c0 <_printf_i+0x1ec>
 8009880:	6820      	ldr	r0, [r4, #0]
 8009882:	682b      	ldr	r3, [r5, #0]
 8009884:	0607      	lsls	r7, r0, #24
 8009886:	f103 0104 	add.w	r1, r3, #4
 800988a:	6029      	str	r1, [r5, #0]
 800988c:	d501      	bpl.n	8009892 <_printf_i+0xbe>
 800988e:	681e      	ldr	r6, [r3, #0]
 8009890:	e003      	b.n	800989a <_printf_i+0xc6>
 8009892:	0646      	lsls	r6, r0, #25
 8009894:	d5fb      	bpl.n	800988e <_printf_i+0xba>
 8009896:	f9b3 6000 	ldrsh.w	r6, [r3]
 800989a:	2e00      	cmp	r6, #0
 800989c:	da03      	bge.n	80098a6 <_printf_i+0xd2>
 800989e:	232d      	movs	r3, #45	; 0x2d
 80098a0:	4276      	negs	r6, r6
 80098a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a6:	485a      	ldr	r0, [pc, #360]	; (8009a10 <_printf_i+0x23c>)
 80098a8:	230a      	movs	r3, #10
 80098aa:	e012      	b.n	80098d2 <_printf_i+0xfe>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	6820      	ldr	r0, [r4, #0]
 80098b0:	1d19      	adds	r1, r3, #4
 80098b2:	6029      	str	r1, [r5, #0]
 80098b4:	0605      	lsls	r5, r0, #24
 80098b6:	d501      	bpl.n	80098bc <_printf_i+0xe8>
 80098b8:	681e      	ldr	r6, [r3, #0]
 80098ba:	e002      	b.n	80098c2 <_printf_i+0xee>
 80098bc:	0641      	lsls	r1, r0, #25
 80098be:	d5fb      	bpl.n	80098b8 <_printf_i+0xe4>
 80098c0:	881e      	ldrh	r6, [r3, #0]
 80098c2:	4853      	ldr	r0, [pc, #332]	; (8009a10 <_printf_i+0x23c>)
 80098c4:	2f6f      	cmp	r7, #111	; 0x6f
 80098c6:	bf0c      	ite	eq
 80098c8:	2308      	moveq	r3, #8
 80098ca:	230a      	movne	r3, #10
 80098cc:	2100      	movs	r1, #0
 80098ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098d2:	6865      	ldr	r5, [r4, #4]
 80098d4:	60a5      	str	r5, [r4, #8]
 80098d6:	2d00      	cmp	r5, #0
 80098d8:	bfa2      	ittt	ge
 80098da:	6821      	ldrge	r1, [r4, #0]
 80098dc:	f021 0104 	bicge.w	r1, r1, #4
 80098e0:	6021      	strge	r1, [r4, #0]
 80098e2:	b90e      	cbnz	r6, 80098e8 <_printf_i+0x114>
 80098e4:	2d00      	cmp	r5, #0
 80098e6:	d04b      	beq.n	8009980 <_printf_i+0x1ac>
 80098e8:	4615      	mov	r5, r2
 80098ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80098ee:	fb03 6711 	mls	r7, r3, r1, r6
 80098f2:	5dc7      	ldrb	r7, [r0, r7]
 80098f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098f8:	4637      	mov	r7, r6
 80098fa:	42bb      	cmp	r3, r7
 80098fc:	460e      	mov	r6, r1
 80098fe:	d9f4      	bls.n	80098ea <_printf_i+0x116>
 8009900:	2b08      	cmp	r3, #8
 8009902:	d10b      	bne.n	800991c <_printf_i+0x148>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	07de      	lsls	r6, r3, #31
 8009908:	d508      	bpl.n	800991c <_printf_i+0x148>
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	6861      	ldr	r1, [r4, #4]
 800990e:	4299      	cmp	r1, r3
 8009910:	bfde      	ittt	le
 8009912:	2330      	movle	r3, #48	; 0x30
 8009914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009918:	f105 35ff 	addle.w	r5, r5, #4294967295
 800991c:	1b52      	subs	r2, r2, r5
 800991e:	6122      	str	r2, [r4, #16]
 8009920:	f8cd a000 	str.w	sl, [sp]
 8009924:	464b      	mov	r3, r9
 8009926:	aa03      	add	r2, sp, #12
 8009928:	4621      	mov	r1, r4
 800992a:	4640      	mov	r0, r8
 800992c:	f7ff fee4 	bl	80096f8 <_printf_common>
 8009930:	3001      	adds	r0, #1
 8009932:	d14a      	bne.n	80099ca <_printf_i+0x1f6>
 8009934:	f04f 30ff 	mov.w	r0, #4294967295
 8009938:	b004      	add	sp, #16
 800993a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	f043 0320 	orr.w	r3, r3, #32
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	4833      	ldr	r0, [pc, #204]	; (8009a14 <_printf_i+0x240>)
 8009948:	2778      	movs	r7, #120	; 0x78
 800994a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	6829      	ldr	r1, [r5, #0]
 8009952:	061f      	lsls	r7, r3, #24
 8009954:	f851 6b04 	ldr.w	r6, [r1], #4
 8009958:	d402      	bmi.n	8009960 <_printf_i+0x18c>
 800995a:	065f      	lsls	r7, r3, #25
 800995c:	bf48      	it	mi
 800995e:	b2b6      	uxthmi	r6, r6
 8009960:	07df      	lsls	r7, r3, #31
 8009962:	bf48      	it	mi
 8009964:	f043 0320 	orrmi.w	r3, r3, #32
 8009968:	6029      	str	r1, [r5, #0]
 800996a:	bf48      	it	mi
 800996c:	6023      	strmi	r3, [r4, #0]
 800996e:	b91e      	cbnz	r6, 8009978 <_printf_i+0x1a4>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	f023 0320 	bic.w	r3, r3, #32
 8009976:	6023      	str	r3, [r4, #0]
 8009978:	2310      	movs	r3, #16
 800997a:	e7a7      	b.n	80098cc <_printf_i+0xf8>
 800997c:	4824      	ldr	r0, [pc, #144]	; (8009a10 <_printf_i+0x23c>)
 800997e:	e7e4      	b.n	800994a <_printf_i+0x176>
 8009980:	4615      	mov	r5, r2
 8009982:	e7bd      	b.n	8009900 <_printf_i+0x12c>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	6826      	ldr	r6, [r4, #0]
 8009988:	6961      	ldr	r1, [r4, #20]
 800998a:	1d18      	adds	r0, r3, #4
 800998c:	6028      	str	r0, [r5, #0]
 800998e:	0635      	lsls	r5, r6, #24
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	d501      	bpl.n	8009998 <_printf_i+0x1c4>
 8009994:	6019      	str	r1, [r3, #0]
 8009996:	e002      	b.n	800999e <_printf_i+0x1ca>
 8009998:	0670      	lsls	r0, r6, #25
 800999a:	d5fb      	bpl.n	8009994 <_printf_i+0x1c0>
 800999c:	8019      	strh	r1, [r3, #0]
 800999e:	2300      	movs	r3, #0
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	4615      	mov	r5, r2
 80099a4:	e7bc      	b.n	8009920 <_printf_i+0x14c>
 80099a6:	682b      	ldr	r3, [r5, #0]
 80099a8:	1d1a      	adds	r2, r3, #4
 80099aa:	602a      	str	r2, [r5, #0]
 80099ac:	681d      	ldr	r5, [r3, #0]
 80099ae:	6862      	ldr	r2, [r4, #4]
 80099b0:	2100      	movs	r1, #0
 80099b2:	4628      	mov	r0, r5
 80099b4:	f7f6 fc14 	bl	80001e0 <memchr>
 80099b8:	b108      	cbz	r0, 80099be <_printf_i+0x1ea>
 80099ba:	1b40      	subs	r0, r0, r5
 80099bc:	6060      	str	r0, [r4, #4]
 80099be:	6863      	ldr	r3, [r4, #4]
 80099c0:	6123      	str	r3, [r4, #16]
 80099c2:	2300      	movs	r3, #0
 80099c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c8:	e7aa      	b.n	8009920 <_printf_i+0x14c>
 80099ca:	6923      	ldr	r3, [r4, #16]
 80099cc:	462a      	mov	r2, r5
 80099ce:	4649      	mov	r1, r9
 80099d0:	4640      	mov	r0, r8
 80099d2:	47d0      	blx	sl
 80099d4:	3001      	adds	r0, #1
 80099d6:	d0ad      	beq.n	8009934 <_printf_i+0x160>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	079b      	lsls	r3, r3, #30
 80099dc:	d413      	bmi.n	8009a06 <_printf_i+0x232>
 80099de:	68e0      	ldr	r0, [r4, #12]
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	4298      	cmp	r0, r3
 80099e4:	bfb8      	it	lt
 80099e6:	4618      	movlt	r0, r3
 80099e8:	e7a6      	b.n	8009938 <_printf_i+0x164>
 80099ea:	2301      	movs	r3, #1
 80099ec:	4632      	mov	r2, r6
 80099ee:	4649      	mov	r1, r9
 80099f0:	4640      	mov	r0, r8
 80099f2:	47d0      	blx	sl
 80099f4:	3001      	adds	r0, #1
 80099f6:	d09d      	beq.n	8009934 <_printf_i+0x160>
 80099f8:	3501      	adds	r5, #1
 80099fa:	68e3      	ldr	r3, [r4, #12]
 80099fc:	9903      	ldr	r1, [sp, #12]
 80099fe:	1a5b      	subs	r3, r3, r1
 8009a00:	42ab      	cmp	r3, r5
 8009a02:	dcf2      	bgt.n	80099ea <_printf_i+0x216>
 8009a04:	e7eb      	b.n	80099de <_printf_i+0x20a>
 8009a06:	2500      	movs	r5, #0
 8009a08:	f104 0619 	add.w	r6, r4, #25
 8009a0c:	e7f5      	b.n	80099fa <_printf_i+0x226>
 8009a0e:	bf00      	nop
 8009a10:	0800cdce 	.word	0x0800cdce
 8009a14:	0800cddf 	.word	0x0800cddf

08009a18 <std>:
 8009a18:	2300      	movs	r3, #0
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a26:	6083      	str	r3, [r0, #8]
 8009a28:	8181      	strh	r1, [r0, #12]
 8009a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a2c:	81c2      	strh	r2, [r0, #14]
 8009a2e:	6183      	str	r3, [r0, #24]
 8009a30:	4619      	mov	r1, r3
 8009a32:	2208      	movs	r2, #8
 8009a34:	305c      	adds	r0, #92	; 0x5c
 8009a36:	f000 f9f7 	bl	8009e28 <memset>
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	; (8009a70 <std+0x58>)
 8009a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <std+0x5c>)
 8009a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a42:	4b0d      	ldr	r3, [pc, #52]	; (8009a78 <std+0x60>)
 8009a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a46:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <std+0x64>)
 8009a48:	6323      	str	r3, [r4, #48]	; 0x30
 8009a4a:	4b0d      	ldr	r3, [pc, #52]	; (8009a80 <std+0x68>)
 8009a4c:	6224      	str	r4, [r4, #32]
 8009a4e:	429c      	cmp	r4, r3
 8009a50:	d006      	beq.n	8009a60 <std+0x48>
 8009a52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a56:	4294      	cmp	r4, r2
 8009a58:	d002      	beq.n	8009a60 <std+0x48>
 8009a5a:	33d0      	adds	r3, #208	; 0xd0
 8009a5c:	429c      	cmp	r4, r3
 8009a5e:	d105      	bne.n	8009a6c <std+0x54>
 8009a60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a68:	f000 ba5a 	b.w	8009f20 <__retarget_lock_init_recursive>
 8009a6c:	bd10      	pop	{r4, pc}
 8009a6e:	bf00      	nop
 8009a70:	08009c79 	.word	0x08009c79
 8009a74:	08009c9b 	.word	0x08009c9b
 8009a78:	08009cd3 	.word	0x08009cd3
 8009a7c:	08009cf7 	.word	0x08009cf7
 8009a80:	20005eb8 	.word	0x20005eb8

08009a84 <stdio_exit_handler>:
 8009a84:	4a02      	ldr	r2, [pc, #8]	; (8009a90 <stdio_exit_handler+0xc>)
 8009a86:	4903      	ldr	r1, [pc, #12]	; (8009a94 <stdio_exit_handler+0x10>)
 8009a88:	4803      	ldr	r0, [pc, #12]	; (8009a98 <stdio_exit_handler+0x14>)
 8009a8a:	f000 b869 	b.w	8009b60 <_fwalk_sglue>
 8009a8e:	bf00      	nop
 8009a90:	20000100 	.word	0x20000100
 8009a94:	0800b8c9 	.word	0x0800b8c9
 8009a98:	2000010c 	.word	0x2000010c

08009a9c <cleanup_stdio>:
 8009a9c:	6841      	ldr	r1, [r0, #4]
 8009a9e:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <cleanup_stdio+0x34>)
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	b510      	push	{r4, lr}
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	d001      	beq.n	8009aac <cleanup_stdio+0x10>
 8009aa8:	f001 ff0e 	bl	800b8c8 <_fflush_r>
 8009aac:	68a1      	ldr	r1, [r4, #8]
 8009aae:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <cleanup_stdio+0x38>)
 8009ab0:	4299      	cmp	r1, r3
 8009ab2:	d002      	beq.n	8009aba <cleanup_stdio+0x1e>
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f001 ff07 	bl	800b8c8 <_fflush_r>
 8009aba:	68e1      	ldr	r1, [r4, #12]
 8009abc:	4b06      	ldr	r3, [pc, #24]	; (8009ad8 <cleanup_stdio+0x3c>)
 8009abe:	4299      	cmp	r1, r3
 8009ac0:	d004      	beq.n	8009acc <cleanup_stdio+0x30>
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ac8:	f001 befe 	b.w	800b8c8 <_fflush_r>
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	bf00      	nop
 8009ad0:	20005eb8 	.word	0x20005eb8
 8009ad4:	20005f20 	.word	0x20005f20
 8009ad8:	20005f88 	.word	0x20005f88

08009adc <global_stdio_init.part.0>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <global_stdio_init.part.0+0x30>)
 8009ae0:	4c0b      	ldr	r4, [pc, #44]	; (8009b10 <global_stdio_init.part.0+0x34>)
 8009ae2:	4a0c      	ldr	r2, [pc, #48]	; (8009b14 <global_stdio_init.part.0+0x38>)
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2104      	movs	r1, #4
 8009aec:	f7ff ff94 	bl	8009a18 <std>
 8009af0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009af4:	2201      	movs	r2, #1
 8009af6:	2109      	movs	r1, #9
 8009af8:	f7ff ff8e 	bl	8009a18 <std>
 8009afc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b00:	2202      	movs	r2, #2
 8009b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b06:	2112      	movs	r1, #18
 8009b08:	f7ff bf86 	b.w	8009a18 <std>
 8009b0c:	20005ff0 	.word	0x20005ff0
 8009b10:	20005eb8 	.word	0x20005eb8
 8009b14:	08009a85 	.word	0x08009a85

08009b18 <__sfp_lock_acquire>:
 8009b18:	4801      	ldr	r0, [pc, #4]	; (8009b20 <__sfp_lock_acquire+0x8>)
 8009b1a:	f000 ba02 	b.w	8009f22 <__retarget_lock_acquire_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20005ff9 	.word	0x20005ff9

08009b24 <__sfp_lock_release>:
 8009b24:	4801      	ldr	r0, [pc, #4]	; (8009b2c <__sfp_lock_release+0x8>)
 8009b26:	f000 b9fd 	b.w	8009f24 <__retarget_lock_release_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	20005ff9 	.word	0x20005ff9

08009b30 <__sinit>:
 8009b30:	b510      	push	{r4, lr}
 8009b32:	4604      	mov	r4, r0
 8009b34:	f7ff fff0 	bl	8009b18 <__sfp_lock_acquire>
 8009b38:	6a23      	ldr	r3, [r4, #32]
 8009b3a:	b11b      	cbz	r3, 8009b44 <__sinit+0x14>
 8009b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b40:	f7ff bff0 	b.w	8009b24 <__sfp_lock_release>
 8009b44:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <__sinit+0x28>)
 8009b46:	6223      	str	r3, [r4, #32]
 8009b48:	4b04      	ldr	r3, [pc, #16]	; (8009b5c <__sinit+0x2c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1f5      	bne.n	8009b3c <__sinit+0xc>
 8009b50:	f7ff ffc4 	bl	8009adc <global_stdio_init.part.0>
 8009b54:	e7f2      	b.n	8009b3c <__sinit+0xc>
 8009b56:	bf00      	nop
 8009b58:	08009a9d 	.word	0x08009a9d
 8009b5c:	20005ff0 	.word	0x20005ff0

08009b60 <_fwalk_sglue>:
 8009b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b64:	4607      	mov	r7, r0
 8009b66:	4688      	mov	r8, r1
 8009b68:	4614      	mov	r4, r2
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b70:	f1b9 0901 	subs.w	r9, r9, #1
 8009b74:	d505      	bpl.n	8009b82 <_fwalk_sglue+0x22>
 8009b76:	6824      	ldr	r4, [r4, #0]
 8009b78:	2c00      	cmp	r4, #0
 8009b7a:	d1f7      	bne.n	8009b6c <_fwalk_sglue+0xc>
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d907      	bls.n	8009b98 <_fwalk_sglue+0x38>
 8009b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	d003      	beq.n	8009b98 <_fwalk_sglue+0x38>
 8009b90:	4629      	mov	r1, r5
 8009b92:	4638      	mov	r0, r7
 8009b94:	47c0      	blx	r8
 8009b96:	4306      	orrs	r6, r0
 8009b98:	3568      	adds	r5, #104	; 0x68
 8009b9a:	e7e9      	b.n	8009b70 <_fwalk_sglue+0x10>

08009b9c <iprintf>:
 8009b9c:	b40f      	push	{r0, r1, r2, r3}
 8009b9e:	b507      	push	{r0, r1, r2, lr}
 8009ba0:	4906      	ldr	r1, [pc, #24]	; (8009bbc <iprintf+0x20>)
 8009ba2:	ab04      	add	r3, sp, #16
 8009ba4:	6808      	ldr	r0, [r1, #0]
 8009ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009baa:	6881      	ldr	r1, [r0, #8]
 8009bac:	9301      	str	r3, [sp, #4]
 8009bae:	f001 fceb 	bl	800b588 <_vfiprintf_r>
 8009bb2:	b003      	add	sp, #12
 8009bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bb8:	b004      	add	sp, #16
 8009bba:	4770      	bx	lr
 8009bbc:	20000158 	.word	0x20000158

08009bc0 <_puts_r>:
 8009bc0:	6a03      	ldr	r3, [r0, #32]
 8009bc2:	b570      	push	{r4, r5, r6, lr}
 8009bc4:	6884      	ldr	r4, [r0, #8]
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	460e      	mov	r6, r1
 8009bca:	b90b      	cbnz	r3, 8009bd0 <_puts_r+0x10>
 8009bcc:	f7ff ffb0 	bl	8009b30 <__sinit>
 8009bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bd2:	07db      	lsls	r3, r3, #31
 8009bd4:	d405      	bmi.n	8009be2 <_puts_r+0x22>
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	0598      	lsls	r0, r3, #22
 8009bda:	d402      	bmi.n	8009be2 <_puts_r+0x22>
 8009bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bde:	f000 f9a0 	bl	8009f22 <__retarget_lock_acquire_recursive>
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	0719      	lsls	r1, r3, #28
 8009be6:	d513      	bpl.n	8009c10 <_puts_r+0x50>
 8009be8:	6923      	ldr	r3, [r4, #16]
 8009bea:	b18b      	cbz	r3, 8009c10 <_puts_r+0x50>
 8009bec:	3e01      	subs	r6, #1
 8009bee:	68a3      	ldr	r3, [r4, #8]
 8009bf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	60a3      	str	r3, [r4, #8]
 8009bf8:	b9e9      	cbnz	r1, 8009c36 <_puts_r+0x76>
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da2e      	bge.n	8009c5c <_puts_r+0x9c>
 8009bfe:	4622      	mov	r2, r4
 8009c00:	210a      	movs	r1, #10
 8009c02:	4628      	mov	r0, r5
 8009c04:	f000 f87b 	bl	8009cfe <__swbuf_r>
 8009c08:	3001      	adds	r0, #1
 8009c0a:	d007      	beq.n	8009c1c <_puts_r+0x5c>
 8009c0c:	250a      	movs	r5, #10
 8009c0e:	e007      	b.n	8009c20 <_puts_r+0x60>
 8009c10:	4621      	mov	r1, r4
 8009c12:	4628      	mov	r0, r5
 8009c14:	f000 f8b0 	bl	8009d78 <__swsetup_r>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d0e7      	beq.n	8009bec <_puts_r+0x2c>
 8009c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8009c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c22:	07da      	lsls	r2, r3, #31
 8009c24:	d405      	bmi.n	8009c32 <_puts_r+0x72>
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	059b      	lsls	r3, r3, #22
 8009c2a:	d402      	bmi.n	8009c32 <_puts_r+0x72>
 8009c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c2e:	f000 f979 	bl	8009f24 <__retarget_lock_release_recursive>
 8009c32:	4628      	mov	r0, r5
 8009c34:	bd70      	pop	{r4, r5, r6, pc}
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	da04      	bge.n	8009c44 <_puts_r+0x84>
 8009c3a:	69a2      	ldr	r2, [r4, #24]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	dc06      	bgt.n	8009c4e <_puts_r+0x8e>
 8009c40:	290a      	cmp	r1, #10
 8009c42:	d004      	beq.n	8009c4e <_puts_r+0x8e>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	6022      	str	r2, [r4, #0]
 8009c4a:	7019      	strb	r1, [r3, #0]
 8009c4c:	e7cf      	b.n	8009bee <_puts_r+0x2e>
 8009c4e:	4622      	mov	r2, r4
 8009c50:	4628      	mov	r0, r5
 8009c52:	f000 f854 	bl	8009cfe <__swbuf_r>
 8009c56:	3001      	adds	r0, #1
 8009c58:	d1c9      	bne.n	8009bee <_puts_r+0x2e>
 8009c5a:	e7df      	b.n	8009c1c <_puts_r+0x5c>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	250a      	movs	r5, #10
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	6022      	str	r2, [r4, #0]
 8009c64:	701d      	strb	r5, [r3, #0]
 8009c66:	e7db      	b.n	8009c20 <_puts_r+0x60>

08009c68 <puts>:
 8009c68:	4b02      	ldr	r3, [pc, #8]	; (8009c74 <puts+0xc>)
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	6818      	ldr	r0, [r3, #0]
 8009c6e:	f7ff bfa7 	b.w	8009bc0 <_puts_r>
 8009c72:	bf00      	nop
 8009c74:	20000158 	.word	0x20000158

08009c78 <__sread>:
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c80:	f000 f900 	bl	8009e84 <_read_r>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	bfab      	itete	ge
 8009c88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c8c:	181b      	addge	r3, r3, r0
 8009c8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c92:	bfac      	ite	ge
 8009c94:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c96:	81a3      	strhlt	r3, [r4, #12]
 8009c98:	bd10      	pop	{r4, pc}

08009c9a <__swrite>:
 8009c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9e:	461f      	mov	r7, r3
 8009ca0:	898b      	ldrh	r3, [r1, #12]
 8009ca2:	05db      	lsls	r3, r3, #23
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	4616      	mov	r6, r2
 8009caa:	d505      	bpl.n	8009cb8 <__swrite+0x1e>
 8009cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f000 f8d4 	bl	8009e60 <_lseek_r>
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cc2:	81a3      	strh	r3, [r4, #12]
 8009cc4:	4632      	mov	r2, r6
 8009cc6:	463b      	mov	r3, r7
 8009cc8:	4628      	mov	r0, r5
 8009cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cce:	f000 b8eb 	b.w	8009ea8 <_write_r>

08009cd2 <__sseek>:
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cda:	f000 f8c1 	bl	8009e60 <_lseek_r>
 8009cde:	1c43      	adds	r3, r0, #1
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	bf15      	itete	ne
 8009ce4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cee:	81a3      	strheq	r3, [r4, #12]
 8009cf0:	bf18      	it	ne
 8009cf2:	81a3      	strhne	r3, [r4, #12]
 8009cf4:	bd10      	pop	{r4, pc}

08009cf6 <__sclose>:
 8009cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfa:	f000 b8a1 	b.w	8009e40 <_close_r>

08009cfe <__swbuf_r>:
 8009cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d00:	460e      	mov	r6, r1
 8009d02:	4614      	mov	r4, r2
 8009d04:	4605      	mov	r5, r0
 8009d06:	b118      	cbz	r0, 8009d10 <__swbuf_r+0x12>
 8009d08:	6a03      	ldr	r3, [r0, #32]
 8009d0a:	b90b      	cbnz	r3, 8009d10 <__swbuf_r+0x12>
 8009d0c:	f7ff ff10 	bl	8009b30 <__sinit>
 8009d10:	69a3      	ldr	r3, [r4, #24]
 8009d12:	60a3      	str	r3, [r4, #8]
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	071a      	lsls	r2, r3, #28
 8009d18:	d525      	bpl.n	8009d66 <__swbuf_r+0x68>
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	b31b      	cbz	r3, 8009d66 <__swbuf_r+0x68>
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	6922      	ldr	r2, [r4, #16]
 8009d22:	1a98      	subs	r0, r3, r2
 8009d24:	6963      	ldr	r3, [r4, #20]
 8009d26:	b2f6      	uxtb	r6, r6
 8009d28:	4283      	cmp	r3, r0
 8009d2a:	4637      	mov	r7, r6
 8009d2c:	dc04      	bgt.n	8009d38 <__swbuf_r+0x3a>
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4628      	mov	r0, r5
 8009d32:	f001 fdc9 	bl	800b8c8 <_fflush_r>
 8009d36:	b9e0      	cbnz	r0, 8009d72 <__swbuf_r+0x74>
 8009d38:	68a3      	ldr	r3, [r4, #8]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	60a3      	str	r3, [r4, #8]
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	1c5a      	adds	r2, r3, #1
 8009d42:	6022      	str	r2, [r4, #0]
 8009d44:	701e      	strb	r6, [r3, #0]
 8009d46:	6962      	ldr	r2, [r4, #20]
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d004      	beq.n	8009d58 <__swbuf_r+0x5a>
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	07db      	lsls	r3, r3, #31
 8009d52:	d506      	bpl.n	8009d62 <__swbuf_r+0x64>
 8009d54:	2e0a      	cmp	r6, #10
 8009d56:	d104      	bne.n	8009d62 <__swbuf_r+0x64>
 8009d58:	4621      	mov	r1, r4
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f001 fdb4 	bl	800b8c8 <_fflush_r>
 8009d60:	b938      	cbnz	r0, 8009d72 <__swbuf_r+0x74>
 8009d62:	4638      	mov	r0, r7
 8009d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d66:	4621      	mov	r1, r4
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f000 f805 	bl	8009d78 <__swsetup_r>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d0d5      	beq.n	8009d1e <__swbuf_r+0x20>
 8009d72:	f04f 37ff 	mov.w	r7, #4294967295
 8009d76:	e7f4      	b.n	8009d62 <__swbuf_r+0x64>

08009d78 <__swsetup_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4b2a      	ldr	r3, [pc, #168]	; (8009e24 <__swsetup_r+0xac>)
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	460c      	mov	r4, r1
 8009d82:	b118      	cbz	r0, 8009d8c <__swsetup_r+0x14>
 8009d84:	6a03      	ldr	r3, [r0, #32]
 8009d86:	b90b      	cbnz	r3, 8009d8c <__swsetup_r+0x14>
 8009d88:	f7ff fed2 	bl	8009b30 <__sinit>
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d92:	0718      	lsls	r0, r3, #28
 8009d94:	d422      	bmi.n	8009ddc <__swsetup_r+0x64>
 8009d96:	06d9      	lsls	r1, r3, #27
 8009d98:	d407      	bmi.n	8009daa <__swsetup_r+0x32>
 8009d9a:	2309      	movs	r3, #9
 8009d9c:	602b      	str	r3, [r5, #0]
 8009d9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	e034      	b.n	8009e14 <__swsetup_r+0x9c>
 8009daa:	0758      	lsls	r0, r3, #29
 8009dac:	d512      	bpl.n	8009dd4 <__swsetup_r+0x5c>
 8009dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009db0:	b141      	cbz	r1, 8009dc4 <__swsetup_r+0x4c>
 8009db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009db6:	4299      	cmp	r1, r3
 8009db8:	d002      	beq.n	8009dc0 <__swsetup_r+0x48>
 8009dba:	4628      	mov	r0, r5
 8009dbc:	f000 ff3e 	bl	800ac3c <_free_r>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	6363      	str	r3, [r4, #52]	; 0x34
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	6063      	str	r3, [r4, #4]
 8009dd0:	6923      	ldr	r3, [r4, #16]
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f043 0308 	orr.w	r3, r3, #8
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	b94b      	cbnz	r3, 8009df4 <__swsetup_r+0x7c>
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dea:	d003      	beq.n	8009df4 <__swsetup_r+0x7c>
 8009dec:	4621      	mov	r1, r4
 8009dee:	4628      	mov	r0, r5
 8009df0:	f001 fdb8 	bl	800b964 <__smakebuf_r>
 8009df4:	89a0      	ldrh	r0, [r4, #12]
 8009df6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dfa:	f010 0301 	ands.w	r3, r0, #1
 8009dfe:	d00a      	beq.n	8009e16 <__swsetup_r+0x9e>
 8009e00:	2300      	movs	r3, #0
 8009e02:	60a3      	str	r3, [r4, #8]
 8009e04:	6963      	ldr	r3, [r4, #20]
 8009e06:	425b      	negs	r3, r3
 8009e08:	61a3      	str	r3, [r4, #24]
 8009e0a:	6923      	ldr	r3, [r4, #16]
 8009e0c:	b943      	cbnz	r3, 8009e20 <__swsetup_r+0xa8>
 8009e0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e12:	d1c4      	bne.n	8009d9e <__swsetup_r+0x26>
 8009e14:	bd38      	pop	{r3, r4, r5, pc}
 8009e16:	0781      	lsls	r1, r0, #30
 8009e18:	bf58      	it	pl
 8009e1a:	6963      	ldrpl	r3, [r4, #20]
 8009e1c:	60a3      	str	r3, [r4, #8]
 8009e1e:	e7f4      	b.n	8009e0a <__swsetup_r+0x92>
 8009e20:	2000      	movs	r0, #0
 8009e22:	e7f7      	b.n	8009e14 <__swsetup_r+0x9c>
 8009e24:	20000158 	.word	0x20000158

08009e28 <memset>:
 8009e28:	4402      	add	r2, r0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d100      	bne.n	8009e32 <memset+0xa>
 8009e30:	4770      	bx	lr
 8009e32:	f803 1b01 	strb.w	r1, [r3], #1
 8009e36:	e7f9      	b.n	8009e2c <memset+0x4>

08009e38 <_localeconv_r>:
 8009e38:	4800      	ldr	r0, [pc, #0]	; (8009e3c <_localeconv_r+0x4>)
 8009e3a:	4770      	bx	lr
 8009e3c:	2000024c 	.word	0x2000024c

08009e40 <_close_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d06      	ldr	r5, [pc, #24]	; (8009e5c <_close_r+0x1c>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	f7f7 fad3 	bl	80013f6 <_close>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_close_r+0x1a>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_close_r+0x1a>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	20005ff4 	.word	0x20005ff4

08009e60 <_lseek_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	; (8009e80 <_lseek_r+0x20>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	602a      	str	r2, [r5, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f7f7 fae8 	bl	8001444 <_lseek>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_lseek_r+0x1e>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_lseek_r+0x1e>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	20005ff4 	.word	0x20005ff4

08009e84 <_read_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d07      	ldr	r5, [pc, #28]	; (8009ea4 <_read_r+0x20>)
 8009e88:	4604      	mov	r4, r0
 8009e8a:	4608      	mov	r0, r1
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	602a      	str	r2, [r5, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f7f7 fa92 	bl	80013bc <_read>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_read_r+0x1e>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_read_r+0x1e>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	20005ff4 	.word	0x20005ff4

08009ea8 <_write_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4d07      	ldr	r5, [pc, #28]	; (8009ec8 <_write_r+0x20>)
 8009eac:	4604      	mov	r4, r0
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	602a      	str	r2, [r5, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f7f7 f94a 	bl	8001150 <_write>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_write_r+0x1e>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_write_r+0x1e>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	20005ff4 	.word	0x20005ff4

08009ecc <__errno>:
 8009ecc:	4b01      	ldr	r3, [pc, #4]	; (8009ed4 <__errno+0x8>)
 8009ece:	6818      	ldr	r0, [r3, #0]
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20000158 	.word	0x20000158

08009ed8 <__libc_init_array>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	4d0d      	ldr	r5, [pc, #52]	; (8009f10 <__libc_init_array+0x38>)
 8009edc:	4c0d      	ldr	r4, [pc, #52]	; (8009f14 <__libc_init_array+0x3c>)
 8009ede:	1b64      	subs	r4, r4, r5
 8009ee0:	10a4      	asrs	r4, r4, #2
 8009ee2:	2600      	movs	r6, #0
 8009ee4:	42a6      	cmp	r6, r4
 8009ee6:	d109      	bne.n	8009efc <__libc_init_array+0x24>
 8009ee8:	4d0b      	ldr	r5, [pc, #44]	; (8009f18 <__libc_init_array+0x40>)
 8009eea:	4c0c      	ldr	r4, [pc, #48]	; (8009f1c <__libc_init_array+0x44>)
 8009eec:	f002 fef0 	bl	800ccd0 <_init>
 8009ef0:	1b64      	subs	r4, r4, r5
 8009ef2:	10a4      	asrs	r4, r4, #2
 8009ef4:	2600      	movs	r6, #0
 8009ef6:	42a6      	cmp	r6, r4
 8009ef8:	d105      	bne.n	8009f06 <__libc_init_array+0x2e>
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f00:	4798      	blx	r3
 8009f02:	3601      	adds	r6, #1
 8009f04:	e7ee      	b.n	8009ee4 <__libc_init_array+0xc>
 8009f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0a:	4798      	blx	r3
 8009f0c:	3601      	adds	r6, #1
 8009f0e:	e7f2      	b.n	8009ef6 <__libc_init_array+0x1e>
 8009f10:	0800d310 	.word	0x0800d310
 8009f14:	0800d310 	.word	0x0800d310
 8009f18:	0800d310 	.word	0x0800d310
 8009f1c:	0800d314 	.word	0x0800d314

08009f20 <__retarget_lock_init_recursive>:
 8009f20:	4770      	bx	lr

08009f22 <__retarget_lock_acquire_recursive>:
 8009f22:	4770      	bx	lr

08009f24 <__retarget_lock_release_recursive>:
 8009f24:	4770      	bx	lr

08009f26 <memcpy>:
 8009f26:	440a      	add	r2, r1
 8009f28:	4291      	cmp	r1, r2
 8009f2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f2e:	d100      	bne.n	8009f32 <memcpy+0xc>
 8009f30:	4770      	bx	lr
 8009f32:	b510      	push	{r4, lr}
 8009f34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f3c:	4291      	cmp	r1, r2
 8009f3e:	d1f9      	bne.n	8009f34 <memcpy+0xe>
 8009f40:	bd10      	pop	{r4, pc}

08009f42 <quorem>:
 8009f42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f46:	6903      	ldr	r3, [r0, #16]
 8009f48:	690c      	ldr	r4, [r1, #16]
 8009f4a:	42a3      	cmp	r3, r4
 8009f4c:	4607      	mov	r7, r0
 8009f4e:	db7e      	blt.n	800a04e <quorem+0x10c>
 8009f50:	3c01      	subs	r4, #1
 8009f52:	f101 0814 	add.w	r8, r1, #20
 8009f56:	f100 0514 	add.w	r5, r0, #20
 8009f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f74:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f78:	d331      	bcc.n	8009fde <quorem+0x9c>
 8009f7a:	f04f 0e00 	mov.w	lr, #0
 8009f7e:	4640      	mov	r0, r8
 8009f80:	46ac      	mov	ip, r5
 8009f82:	46f2      	mov	sl, lr
 8009f84:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f88:	b293      	uxth	r3, r2
 8009f8a:	fb06 e303 	mla	r3, r6, r3, lr
 8009f8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f92:	0c1a      	lsrs	r2, r3, #16
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	ebaa 0303 	sub.w	r3, sl, r3
 8009f9a:	f8dc a000 	ldr.w	sl, [ip]
 8009f9e:	fa13 f38a 	uxtah	r3, r3, sl
 8009fa2:	fb06 220e 	mla	r2, r6, lr, r2
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	9b00      	ldr	r3, [sp, #0]
 8009faa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fae:	b292      	uxth	r2, r2
 8009fb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009fb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009fbc:	4581      	cmp	r9, r0
 8009fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fc2:	f84c 3b04 	str.w	r3, [ip], #4
 8009fc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fca:	d2db      	bcs.n	8009f84 <quorem+0x42>
 8009fcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fd0:	b92b      	cbnz	r3, 8009fde <quorem+0x9c>
 8009fd2:	9b01      	ldr	r3, [sp, #4]
 8009fd4:	3b04      	subs	r3, #4
 8009fd6:	429d      	cmp	r5, r3
 8009fd8:	461a      	mov	r2, r3
 8009fda:	d32c      	bcc.n	800a036 <quorem+0xf4>
 8009fdc:	613c      	str	r4, [r7, #16]
 8009fde:	4638      	mov	r0, r7
 8009fe0:	f001 f9a8 	bl	800b334 <__mcmp>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	db22      	blt.n	800a02e <quorem+0xec>
 8009fe8:	3601      	adds	r6, #1
 8009fea:	4629      	mov	r1, r5
 8009fec:	2000      	movs	r0, #0
 8009fee:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ff2:	f8d1 c000 	ldr.w	ip, [r1]
 8009ff6:	b293      	uxth	r3, r2
 8009ff8:	1ac3      	subs	r3, r0, r3
 8009ffa:	0c12      	lsrs	r2, r2, #16
 8009ffc:	fa13 f38c 	uxtah	r3, r3, ip
 800a000:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a004:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a008:	b29b      	uxth	r3, r3
 800a00a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a00e:	45c1      	cmp	r9, r8
 800a010:	f841 3b04 	str.w	r3, [r1], #4
 800a014:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a018:	d2e9      	bcs.n	8009fee <quorem+0xac>
 800a01a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a01e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a022:	b922      	cbnz	r2, 800a02e <quorem+0xec>
 800a024:	3b04      	subs	r3, #4
 800a026:	429d      	cmp	r5, r3
 800a028:	461a      	mov	r2, r3
 800a02a:	d30a      	bcc.n	800a042 <quorem+0x100>
 800a02c:	613c      	str	r4, [r7, #16]
 800a02e:	4630      	mov	r0, r6
 800a030:	b003      	add	sp, #12
 800a032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a036:	6812      	ldr	r2, [r2, #0]
 800a038:	3b04      	subs	r3, #4
 800a03a:	2a00      	cmp	r2, #0
 800a03c:	d1ce      	bne.n	8009fdc <quorem+0x9a>
 800a03e:	3c01      	subs	r4, #1
 800a040:	e7c9      	b.n	8009fd6 <quorem+0x94>
 800a042:	6812      	ldr	r2, [r2, #0]
 800a044:	3b04      	subs	r3, #4
 800a046:	2a00      	cmp	r2, #0
 800a048:	d1f0      	bne.n	800a02c <quorem+0xea>
 800a04a:	3c01      	subs	r4, #1
 800a04c:	e7eb      	b.n	800a026 <quorem+0xe4>
 800a04e:	2000      	movs	r0, #0
 800a050:	e7ee      	b.n	800a030 <quorem+0xee>
 800a052:	0000      	movs	r0, r0
 800a054:	0000      	movs	r0, r0
	...

0800a058 <_dtoa_r>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	ed2d 8b04 	vpush	{d8-d9}
 800a060:	69c5      	ldr	r5, [r0, #28]
 800a062:	b093      	sub	sp, #76	; 0x4c
 800a064:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a068:	ec57 6b10 	vmov	r6, r7, d0
 800a06c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a070:	9107      	str	r1, [sp, #28]
 800a072:	4604      	mov	r4, r0
 800a074:	920a      	str	r2, [sp, #40]	; 0x28
 800a076:	930d      	str	r3, [sp, #52]	; 0x34
 800a078:	b975      	cbnz	r5, 800a098 <_dtoa_r+0x40>
 800a07a:	2010      	movs	r0, #16
 800a07c:	f000 fe2a 	bl	800acd4 <malloc>
 800a080:	4602      	mov	r2, r0
 800a082:	61e0      	str	r0, [r4, #28]
 800a084:	b920      	cbnz	r0, 800a090 <_dtoa_r+0x38>
 800a086:	4bae      	ldr	r3, [pc, #696]	; (800a340 <_dtoa_r+0x2e8>)
 800a088:	21ef      	movs	r1, #239	; 0xef
 800a08a:	48ae      	ldr	r0, [pc, #696]	; (800a344 <_dtoa_r+0x2ec>)
 800a08c:	f001 fcd8 	bl	800ba40 <__assert_func>
 800a090:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a094:	6005      	str	r5, [r0, #0]
 800a096:	60c5      	str	r5, [r0, #12]
 800a098:	69e3      	ldr	r3, [r4, #28]
 800a09a:	6819      	ldr	r1, [r3, #0]
 800a09c:	b151      	cbz	r1, 800a0b4 <_dtoa_r+0x5c>
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	604a      	str	r2, [r1, #4]
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4093      	lsls	r3, r2
 800a0a6:	608b      	str	r3, [r1, #8]
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f000 ff07 	bl	800aebc <_Bfree>
 800a0ae:	69e3      	ldr	r3, [r4, #28]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	1e3b      	subs	r3, r7, #0
 800a0b6:	bfbb      	ittet	lt
 800a0b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0bc:	9303      	strlt	r3, [sp, #12]
 800a0be:	2300      	movge	r3, #0
 800a0c0:	2201      	movlt	r2, #1
 800a0c2:	bfac      	ite	ge
 800a0c4:	f8c8 3000 	strge.w	r3, [r8]
 800a0c8:	f8c8 2000 	strlt.w	r2, [r8]
 800a0cc:	4b9e      	ldr	r3, [pc, #632]	; (800a348 <_dtoa_r+0x2f0>)
 800a0ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a0d2:	ea33 0308 	bics.w	r3, r3, r8
 800a0d6:	d11b      	bne.n	800a110 <_dtoa_r+0xb8>
 800a0d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0da:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a0e4:	4333      	orrs	r3, r6
 800a0e6:	f000 8593 	beq.w	800ac10 <_dtoa_r+0xbb8>
 800a0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ec:	b963      	cbnz	r3, 800a108 <_dtoa_r+0xb0>
 800a0ee:	4b97      	ldr	r3, [pc, #604]	; (800a34c <_dtoa_r+0x2f4>)
 800a0f0:	e027      	b.n	800a142 <_dtoa_r+0xea>
 800a0f2:	4b97      	ldr	r3, [pc, #604]	; (800a350 <_dtoa_r+0x2f8>)
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0fa:	6013      	str	r3, [r2, #0]
 800a0fc:	9800      	ldr	r0, [sp, #0]
 800a0fe:	b013      	add	sp, #76	; 0x4c
 800a100:	ecbd 8b04 	vpop	{d8-d9}
 800a104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a108:	4b90      	ldr	r3, [pc, #576]	; (800a34c <_dtoa_r+0x2f4>)
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	3303      	adds	r3, #3
 800a10e:	e7f3      	b.n	800a0f8 <_dtoa_r+0xa0>
 800a110:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a114:	2200      	movs	r2, #0
 800a116:	ec51 0b17 	vmov	r0, r1, d7
 800a11a:	eeb0 8a47 	vmov.f32	s16, s14
 800a11e:	eef0 8a67 	vmov.f32	s17, s15
 800a122:	2300      	movs	r3, #0
 800a124:	f7f6 fcd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a128:	4681      	mov	r9, r0
 800a12a:	b160      	cbz	r0, 800a146 <_dtoa_r+0xee>
 800a12c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a12e:	2301      	movs	r3, #1
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 8568 	beq.w	800ac0a <_dtoa_r+0xbb2>
 800a13a:	4b86      	ldr	r3, [pc, #536]	; (800a354 <_dtoa_r+0x2fc>)
 800a13c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	3b01      	subs	r3, #1
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	e7da      	b.n	800a0fc <_dtoa_r+0xa4>
 800a146:	aa10      	add	r2, sp, #64	; 0x40
 800a148:	a911      	add	r1, sp, #68	; 0x44
 800a14a:	4620      	mov	r0, r4
 800a14c:	eeb0 0a48 	vmov.f32	s0, s16
 800a150:	eef0 0a68 	vmov.f32	s1, s17
 800a154:	f001 f994 	bl	800b480 <__d2b>
 800a158:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a15c:	4682      	mov	sl, r0
 800a15e:	2d00      	cmp	r5, #0
 800a160:	d07f      	beq.n	800a262 <_dtoa_r+0x20a>
 800a162:	ee18 3a90 	vmov	r3, s17
 800a166:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a16a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a16e:	ec51 0b18 	vmov	r0, r1, d8
 800a172:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a17a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a17e:	4619      	mov	r1, r3
 800a180:	2200      	movs	r2, #0
 800a182:	4b75      	ldr	r3, [pc, #468]	; (800a358 <_dtoa_r+0x300>)
 800a184:	f7f6 f888 	bl	8000298 <__aeabi_dsub>
 800a188:	a367      	add	r3, pc, #412	; (adr r3, 800a328 <_dtoa_r+0x2d0>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 fa3b 	bl	8000608 <__aeabi_dmul>
 800a192:	a367      	add	r3, pc, #412	; (adr r3, 800a330 <_dtoa_r+0x2d8>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f7f6 f880 	bl	800029c <__adddf3>
 800a19c:	4606      	mov	r6, r0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	460f      	mov	r7, r1
 800a1a2:	f7f6 f9c7 	bl	8000534 <__aeabi_i2d>
 800a1a6:	a364      	add	r3, pc, #400	; (adr r3, 800a338 <_dtoa_r+0x2e0>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	f7f6 fa2c 	bl	8000608 <__aeabi_dmul>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 f870 	bl	800029c <__adddf3>
 800a1bc:	4606      	mov	r6, r0
 800a1be:	460f      	mov	r7, r1
 800a1c0:	f7f6 fcd2 	bl	8000b68 <__aeabi_d2iz>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4683      	mov	fp, r0
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 fc8d 	bl	8000aec <__aeabi_dcmplt>
 800a1d2:	b148      	cbz	r0, 800a1e8 <_dtoa_r+0x190>
 800a1d4:	4658      	mov	r0, fp
 800a1d6:	f7f6 f9ad 	bl	8000534 <__aeabi_i2d>
 800a1da:	4632      	mov	r2, r6
 800a1dc:	463b      	mov	r3, r7
 800a1de:	f7f6 fc7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1e2:	b908      	cbnz	r0, 800a1e8 <_dtoa_r+0x190>
 800a1e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1e8:	f1bb 0f16 	cmp.w	fp, #22
 800a1ec:	d857      	bhi.n	800a29e <_dtoa_r+0x246>
 800a1ee:	4b5b      	ldr	r3, [pc, #364]	; (800a35c <_dtoa_r+0x304>)
 800a1f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	ec51 0b18 	vmov	r0, r1, d8
 800a1fc:	f7f6 fc76 	bl	8000aec <__aeabi_dcmplt>
 800a200:	2800      	cmp	r0, #0
 800a202:	d04e      	beq.n	800a2a2 <_dtoa_r+0x24a>
 800a204:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a208:	2300      	movs	r3, #0
 800a20a:	930c      	str	r3, [sp, #48]	; 0x30
 800a20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a20e:	1b5b      	subs	r3, r3, r5
 800a210:	1e5a      	subs	r2, r3, #1
 800a212:	bf45      	ittet	mi
 800a214:	f1c3 0301 	rsbmi	r3, r3, #1
 800a218:	9305      	strmi	r3, [sp, #20]
 800a21a:	2300      	movpl	r3, #0
 800a21c:	2300      	movmi	r3, #0
 800a21e:	9206      	str	r2, [sp, #24]
 800a220:	bf54      	ite	pl
 800a222:	9305      	strpl	r3, [sp, #20]
 800a224:	9306      	strmi	r3, [sp, #24]
 800a226:	f1bb 0f00 	cmp.w	fp, #0
 800a22a:	db3c      	blt.n	800a2a6 <_dtoa_r+0x24e>
 800a22c:	9b06      	ldr	r3, [sp, #24]
 800a22e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a232:	445b      	add	r3, fp
 800a234:	9306      	str	r3, [sp, #24]
 800a236:	2300      	movs	r3, #0
 800a238:	9308      	str	r3, [sp, #32]
 800a23a:	9b07      	ldr	r3, [sp, #28]
 800a23c:	2b09      	cmp	r3, #9
 800a23e:	d868      	bhi.n	800a312 <_dtoa_r+0x2ba>
 800a240:	2b05      	cmp	r3, #5
 800a242:	bfc4      	itt	gt
 800a244:	3b04      	subgt	r3, #4
 800a246:	9307      	strgt	r3, [sp, #28]
 800a248:	9b07      	ldr	r3, [sp, #28]
 800a24a:	f1a3 0302 	sub.w	r3, r3, #2
 800a24e:	bfcc      	ite	gt
 800a250:	2500      	movgt	r5, #0
 800a252:	2501      	movle	r5, #1
 800a254:	2b03      	cmp	r3, #3
 800a256:	f200 8085 	bhi.w	800a364 <_dtoa_r+0x30c>
 800a25a:	e8df f003 	tbb	[pc, r3]
 800a25e:	3b2e      	.short	0x3b2e
 800a260:	5839      	.short	0x5839
 800a262:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a266:	441d      	add	r5, r3
 800a268:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a26c:	2b20      	cmp	r3, #32
 800a26e:	bfc1      	itttt	gt
 800a270:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a274:	fa08 f803 	lslgt.w	r8, r8, r3
 800a278:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a27c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a280:	bfd6      	itet	le
 800a282:	f1c3 0320 	rsble	r3, r3, #32
 800a286:	ea48 0003 	orrgt.w	r0, r8, r3
 800a28a:	fa06 f003 	lslle.w	r0, r6, r3
 800a28e:	f7f6 f941 	bl	8000514 <__aeabi_ui2d>
 800a292:	2201      	movs	r2, #1
 800a294:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a298:	3d01      	subs	r5, #1
 800a29a:	920e      	str	r2, [sp, #56]	; 0x38
 800a29c:	e76f      	b.n	800a17e <_dtoa_r+0x126>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e7b3      	b.n	800a20a <_dtoa_r+0x1b2>
 800a2a2:	900c      	str	r0, [sp, #48]	; 0x30
 800a2a4:	e7b2      	b.n	800a20c <_dtoa_r+0x1b4>
 800a2a6:	9b05      	ldr	r3, [sp, #20]
 800a2a8:	eba3 030b 	sub.w	r3, r3, fp
 800a2ac:	9305      	str	r3, [sp, #20]
 800a2ae:	f1cb 0300 	rsb	r3, fp, #0
 800a2b2:	9308      	str	r3, [sp, #32]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2b8:	e7bf      	b.n	800a23a <_dtoa_r+0x1e2>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	dc52      	bgt.n	800a36a <_dtoa_r+0x312>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	920a      	str	r2, [sp, #40]	; 0x28
 800a2ce:	e00b      	b.n	800a2e8 <_dtoa_r+0x290>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e7f3      	b.n	800a2bc <_dtoa_r+0x264>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2da:	445b      	add	r3, fp
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	bfb8      	it	lt
 800a2e6:	2301      	movlt	r3, #1
 800a2e8:	69e0      	ldr	r0, [r4, #28]
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	2204      	movs	r2, #4
 800a2ee:	f102 0614 	add.w	r6, r2, #20
 800a2f2:	429e      	cmp	r6, r3
 800a2f4:	d93d      	bls.n	800a372 <_dtoa_r+0x31a>
 800a2f6:	6041      	str	r1, [r0, #4]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 fd9f 	bl	800ae3c <_Balloc>
 800a2fe:	9000      	str	r0, [sp, #0]
 800a300:	2800      	cmp	r0, #0
 800a302:	d139      	bne.n	800a378 <_dtoa_r+0x320>
 800a304:	4b16      	ldr	r3, [pc, #88]	; (800a360 <_dtoa_r+0x308>)
 800a306:	4602      	mov	r2, r0
 800a308:	f240 11af 	movw	r1, #431	; 0x1af
 800a30c:	e6bd      	b.n	800a08a <_dtoa_r+0x32>
 800a30e:	2301      	movs	r3, #1
 800a310:	e7e1      	b.n	800a2d6 <_dtoa_r+0x27e>
 800a312:	2501      	movs	r5, #1
 800a314:	2300      	movs	r3, #0
 800a316:	9307      	str	r3, [sp, #28]
 800a318:	9509      	str	r5, [sp, #36]	; 0x24
 800a31a:	f04f 33ff 	mov.w	r3, #4294967295
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	9304      	str	r3, [sp, #16]
 800a322:	2200      	movs	r2, #0
 800a324:	2312      	movs	r3, #18
 800a326:	e7d1      	b.n	800a2cc <_dtoa_r+0x274>
 800a328:	636f4361 	.word	0x636f4361
 800a32c:	3fd287a7 	.word	0x3fd287a7
 800a330:	8b60c8b3 	.word	0x8b60c8b3
 800a334:	3fc68a28 	.word	0x3fc68a28
 800a338:	509f79fb 	.word	0x509f79fb
 800a33c:	3fd34413 	.word	0x3fd34413
 800a340:	0800cdfd 	.word	0x0800cdfd
 800a344:	0800ce14 	.word	0x0800ce14
 800a348:	7ff00000 	.word	0x7ff00000
 800a34c:	0800cdf9 	.word	0x0800cdf9
 800a350:	0800cdf0 	.word	0x0800cdf0
 800a354:	0800cdcd 	.word	0x0800cdcd
 800a358:	3ff80000 	.word	0x3ff80000
 800a35c:	0800cf00 	.word	0x0800cf00
 800a360:	0800ce6c 	.word	0x0800ce6c
 800a364:	2301      	movs	r3, #1
 800a366:	9309      	str	r3, [sp, #36]	; 0x24
 800a368:	e7d7      	b.n	800a31a <_dtoa_r+0x2c2>
 800a36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	e7ba      	b.n	800a2e8 <_dtoa_r+0x290>
 800a372:	3101      	adds	r1, #1
 800a374:	0052      	lsls	r2, r2, #1
 800a376:	e7ba      	b.n	800a2ee <_dtoa_r+0x296>
 800a378:	69e3      	ldr	r3, [r4, #28]
 800a37a:	9a00      	ldr	r2, [sp, #0]
 800a37c:	601a      	str	r2, [r3, #0]
 800a37e:	9b04      	ldr	r3, [sp, #16]
 800a380:	2b0e      	cmp	r3, #14
 800a382:	f200 80a8 	bhi.w	800a4d6 <_dtoa_r+0x47e>
 800a386:	2d00      	cmp	r5, #0
 800a388:	f000 80a5 	beq.w	800a4d6 <_dtoa_r+0x47e>
 800a38c:	f1bb 0f00 	cmp.w	fp, #0
 800a390:	dd38      	ble.n	800a404 <_dtoa_r+0x3ac>
 800a392:	4bc0      	ldr	r3, [pc, #768]	; (800a694 <_dtoa_r+0x63c>)
 800a394:	f00b 020f 	and.w	r2, fp, #15
 800a398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a39c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a3a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a3a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a3a8:	d019      	beq.n	800a3de <_dtoa_r+0x386>
 800a3aa:	4bbb      	ldr	r3, [pc, #748]	; (800a698 <_dtoa_r+0x640>)
 800a3ac:	ec51 0b18 	vmov	r0, r1, d8
 800a3b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3b4:	f7f6 fa52 	bl	800085c <__aeabi_ddiv>
 800a3b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3bc:	f008 080f 	and.w	r8, r8, #15
 800a3c0:	2503      	movs	r5, #3
 800a3c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a698 <_dtoa_r+0x640>
 800a3c6:	f1b8 0f00 	cmp.w	r8, #0
 800a3ca:	d10a      	bne.n	800a3e2 <_dtoa_r+0x38a>
 800a3cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3d0:	4632      	mov	r2, r6
 800a3d2:	463b      	mov	r3, r7
 800a3d4:	f7f6 fa42 	bl	800085c <__aeabi_ddiv>
 800a3d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3dc:	e02b      	b.n	800a436 <_dtoa_r+0x3de>
 800a3de:	2502      	movs	r5, #2
 800a3e0:	e7ef      	b.n	800a3c2 <_dtoa_r+0x36a>
 800a3e2:	f018 0f01 	tst.w	r8, #1
 800a3e6:	d008      	beq.n	800a3fa <_dtoa_r+0x3a2>
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a3f0:	f7f6 f90a 	bl	8000608 <__aeabi_dmul>
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	460f      	mov	r7, r1
 800a3fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3fe:	f109 0908 	add.w	r9, r9, #8
 800a402:	e7e0      	b.n	800a3c6 <_dtoa_r+0x36e>
 800a404:	f000 809f 	beq.w	800a546 <_dtoa_r+0x4ee>
 800a408:	f1cb 0600 	rsb	r6, fp, #0
 800a40c:	4ba1      	ldr	r3, [pc, #644]	; (800a694 <_dtoa_r+0x63c>)
 800a40e:	4fa2      	ldr	r7, [pc, #648]	; (800a698 <_dtoa_r+0x640>)
 800a410:	f006 020f 	and.w	r2, r6, #15
 800a414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	ec51 0b18 	vmov	r0, r1, d8
 800a420:	f7f6 f8f2 	bl	8000608 <__aeabi_dmul>
 800a424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a428:	1136      	asrs	r6, r6, #4
 800a42a:	2300      	movs	r3, #0
 800a42c:	2502      	movs	r5, #2
 800a42e:	2e00      	cmp	r6, #0
 800a430:	d17e      	bne.n	800a530 <_dtoa_r+0x4d8>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1d0      	bne.n	800a3d8 <_dtoa_r+0x380>
 800a436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a438:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 8084 	beq.w	800a54a <_dtoa_r+0x4f2>
 800a442:	4b96      	ldr	r3, [pc, #600]	; (800a69c <_dtoa_r+0x644>)
 800a444:	2200      	movs	r2, #0
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	f7f6 fb4f 	bl	8000aec <__aeabi_dcmplt>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d07b      	beq.n	800a54a <_dtoa_r+0x4f2>
 800a452:	9b04      	ldr	r3, [sp, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d078      	beq.n	800a54a <_dtoa_r+0x4f2>
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dd39      	ble.n	800a4d2 <_dtoa_r+0x47a>
 800a45e:	4b90      	ldr	r3, [pc, #576]	; (800a6a0 <_dtoa_r+0x648>)
 800a460:	2200      	movs	r2, #0
 800a462:	4640      	mov	r0, r8
 800a464:	4649      	mov	r1, r9
 800a466:	f7f6 f8cf 	bl	8000608 <__aeabi_dmul>
 800a46a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a46e:	9e01      	ldr	r6, [sp, #4]
 800a470:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a474:	3501      	adds	r5, #1
 800a476:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a47a:	4628      	mov	r0, r5
 800a47c:	f7f6 f85a 	bl	8000534 <__aeabi_i2d>
 800a480:	4642      	mov	r2, r8
 800a482:	464b      	mov	r3, r9
 800a484:	f7f6 f8c0 	bl	8000608 <__aeabi_dmul>
 800a488:	4b86      	ldr	r3, [pc, #536]	; (800a6a4 <_dtoa_r+0x64c>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	f7f5 ff06 	bl	800029c <__adddf3>
 800a490:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a498:	9303      	str	r3, [sp, #12]
 800a49a:	2e00      	cmp	r6, #0
 800a49c:	d158      	bne.n	800a550 <_dtoa_r+0x4f8>
 800a49e:	4b82      	ldr	r3, [pc, #520]	; (800a6a8 <_dtoa_r+0x650>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	f7f5 fef7 	bl	8000298 <__aeabi_dsub>
 800a4aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4ae:	4680      	mov	r8, r0
 800a4b0:	4689      	mov	r9, r1
 800a4b2:	f7f6 fb39 	bl	8000b28 <__aeabi_dcmpgt>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	f040 8296 	bne.w	800a9e8 <_dtoa_r+0x990>
 800a4bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	f7f6 fb10 	bl	8000aec <__aeabi_dcmplt>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f040 8289 	bne.w	800a9e4 <_dtoa_r+0x98c>
 800a4d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a4d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f2c0 814e 	blt.w	800a77a <_dtoa_r+0x722>
 800a4de:	f1bb 0f0e 	cmp.w	fp, #14
 800a4e2:	f300 814a 	bgt.w	800a77a <_dtoa_r+0x722>
 800a4e6:	4b6b      	ldr	r3, [pc, #428]	; (800a694 <_dtoa_r+0x63c>)
 800a4e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f280 80dc 	bge.w	800a6b0 <_dtoa_r+0x658>
 800a4f8:	9b04      	ldr	r3, [sp, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f300 80d8 	bgt.w	800a6b0 <_dtoa_r+0x658>
 800a500:	f040 826f 	bne.w	800a9e2 <_dtoa_r+0x98a>
 800a504:	4b68      	ldr	r3, [pc, #416]	; (800a6a8 <_dtoa_r+0x650>)
 800a506:	2200      	movs	r2, #0
 800a508:	4640      	mov	r0, r8
 800a50a:	4649      	mov	r1, r9
 800a50c:	f7f6 f87c 	bl	8000608 <__aeabi_dmul>
 800a510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a514:	f7f6 fafe 	bl	8000b14 <__aeabi_dcmpge>
 800a518:	9e04      	ldr	r6, [sp, #16]
 800a51a:	4637      	mov	r7, r6
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f040 8245 	bne.w	800a9ac <_dtoa_r+0x954>
 800a522:	9d00      	ldr	r5, [sp, #0]
 800a524:	2331      	movs	r3, #49	; 0x31
 800a526:	f805 3b01 	strb.w	r3, [r5], #1
 800a52a:	f10b 0b01 	add.w	fp, fp, #1
 800a52e:	e241      	b.n	800a9b4 <_dtoa_r+0x95c>
 800a530:	07f2      	lsls	r2, r6, #31
 800a532:	d505      	bpl.n	800a540 <_dtoa_r+0x4e8>
 800a534:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a538:	f7f6 f866 	bl	8000608 <__aeabi_dmul>
 800a53c:	3501      	adds	r5, #1
 800a53e:	2301      	movs	r3, #1
 800a540:	1076      	asrs	r6, r6, #1
 800a542:	3708      	adds	r7, #8
 800a544:	e773      	b.n	800a42e <_dtoa_r+0x3d6>
 800a546:	2502      	movs	r5, #2
 800a548:	e775      	b.n	800a436 <_dtoa_r+0x3de>
 800a54a:	9e04      	ldr	r6, [sp, #16]
 800a54c:	465f      	mov	r7, fp
 800a54e:	e792      	b.n	800a476 <_dtoa_r+0x41e>
 800a550:	9900      	ldr	r1, [sp, #0]
 800a552:	4b50      	ldr	r3, [pc, #320]	; (800a694 <_dtoa_r+0x63c>)
 800a554:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a558:	4431      	add	r1, r6
 800a55a:	9102      	str	r1, [sp, #8]
 800a55c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a55e:	eeb0 9a47 	vmov.f32	s18, s14
 800a562:	eef0 9a67 	vmov.f32	s19, s15
 800a566:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a56a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a56e:	2900      	cmp	r1, #0
 800a570:	d044      	beq.n	800a5fc <_dtoa_r+0x5a4>
 800a572:	494e      	ldr	r1, [pc, #312]	; (800a6ac <_dtoa_r+0x654>)
 800a574:	2000      	movs	r0, #0
 800a576:	f7f6 f971 	bl	800085c <__aeabi_ddiv>
 800a57a:	ec53 2b19 	vmov	r2, r3, d9
 800a57e:	f7f5 fe8b 	bl	8000298 <__aeabi_dsub>
 800a582:	9d00      	ldr	r5, [sp, #0]
 800a584:	ec41 0b19 	vmov	d9, r0, r1
 800a588:	4649      	mov	r1, r9
 800a58a:	4640      	mov	r0, r8
 800a58c:	f7f6 faec 	bl	8000b68 <__aeabi_d2iz>
 800a590:	4606      	mov	r6, r0
 800a592:	f7f5 ffcf 	bl	8000534 <__aeabi_i2d>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4640      	mov	r0, r8
 800a59c:	4649      	mov	r1, r9
 800a59e:	f7f5 fe7b 	bl	8000298 <__aeabi_dsub>
 800a5a2:	3630      	adds	r6, #48	; 0x30
 800a5a4:	f805 6b01 	strb.w	r6, [r5], #1
 800a5a8:	ec53 2b19 	vmov	r2, r3, d9
 800a5ac:	4680      	mov	r8, r0
 800a5ae:	4689      	mov	r9, r1
 800a5b0:	f7f6 fa9c 	bl	8000aec <__aeabi_dcmplt>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d164      	bne.n	800a682 <_dtoa_r+0x62a>
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	464b      	mov	r3, r9
 800a5bc:	4937      	ldr	r1, [pc, #220]	; (800a69c <_dtoa_r+0x644>)
 800a5be:	2000      	movs	r0, #0
 800a5c0:	f7f5 fe6a 	bl	8000298 <__aeabi_dsub>
 800a5c4:	ec53 2b19 	vmov	r2, r3, d9
 800a5c8:	f7f6 fa90 	bl	8000aec <__aeabi_dcmplt>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	f040 80b6 	bne.w	800a73e <_dtoa_r+0x6e6>
 800a5d2:	9b02      	ldr	r3, [sp, #8]
 800a5d4:	429d      	cmp	r5, r3
 800a5d6:	f43f af7c 	beq.w	800a4d2 <_dtoa_r+0x47a>
 800a5da:	4b31      	ldr	r3, [pc, #196]	; (800a6a0 <_dtoa_r+0x648>)
 800a5dc:	ec51 0b19 	vmov	r0, r1, d9
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f7f6 f811 	bl	8000608 <__aeabi_dmul>
 800a5e6:	4b2e      	ldr	r3, [pc, #184]	; (800a6a0 <_dtoa_r+0x648>)
 800a5e8:	ec41 0b19 	vmov	d9, r0, r1
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4640      	mov	r0, r8
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	f7f6 f809 	bl	8000608 <__aeabi_dmul>
 800a5f6:	4680      	mov	r8, r0
 800a5f8:	4689      	mov	r9, r1
 800a5fa:	e7c5      	b.n	800a588 <_dtoa_r+0x530>
 800a5fc:	ec51 0b17 	vmov	r0, r1, d7
 800a600:	f7f6 f802 	bl	8000608 <__aeabi_dmul>
 800a604:	9b02      	ldr	r3, [sp, #8]
 800a606:	9d00      	ldr	r5, [sp, #0]
 800a608:	930f      	str	r3, [sp, #60]	; 0x3c
 800a60a:	ec41 0b19 	vmov	d9, r0, r1
 800a60e:	4649      	mov	r1, r9
 800a610:	4640      	mov	r0, r8
 800a612:	f7f6 faa9 	bl	8000b68 <__aeabi_d2iz>
 800a616:	4606      	mov	r6, r0
 800a618:	f7f5 ff8c 	bl	8000534 <__aeabi_i2d>
 800a61c:	3630      	adds	r6, #48	; 0x30
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4640      	mov	r0, r8
 800a624:	4649      	mov	r1, r9
 800a626:	f7f5 fe37 	bl	8000298 <__aeabi_dsub>
 800a62a:	f805 6b01 	strb.w	r6, [r5], #1
 800a62e:	9b02      	ldr	r3, [sp, #8]
 800a630:	429d      	cmp	r5, r3
 800a632:	4680      	mov	r8, r0
 800a634:	4689      	mov	r9, r1
 800a636:	f04f 0200 	mov.w	r2, #0
 800a63a:	d124      	bne.n	800a686 <_dtoa_r+0x62e>
 800a63c:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <_dtoa_r+0x654>)
 800a63e:	ec51 0b19 	vmov	r0, r1, d9
 800a642:	f7f5 fe2b 	bl	800029c <__adddf3>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	4640      	mov	r0, r8
 800a64c:	4649      	mov	r1, r9
 800a64e:	f7f6 fa6b 	bl	8000b28 <__aeabi_dcmpgt>
 800a652:	2800      	cmp	r0, #0
 800a654:	d173      	bne.n	800a73e <_dtoa_r+0x6e6>
 800a656:	ec53 2b19 	vmov	r2, r3, d9
 800a65a:	4914      	ldr	r1, [pc, #80]	; (800a6ac <_dtoa_r+0x654>)
 800a65c:	2000      	movs	r0, #0
 800a65e:	f7f5 fe1b 	bl	8000298 <__aeabi_dsub>
 800a662:	4602      	mov	r2, r0
 800a664:	460b      	mov	r3, r1
 800a666:	4640      	mov	r0, r8
 800a668:	4649      	mov	r1, r9
 800a66a:	f7f6 fa3f 	bl	8000aec <__aeabi_dcmplt>
 800a66e:	2800      	cmp	r0, #0
 800a670:	f43f af2f 	beq.w	800a4d2 <_dtoa_r+0x47a>
 800a674:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a676:	1e6b      	subs	r3, r5, #1
 800a678:	930f      	str	r3, [sp, #60]	; 0x3c
 800a67a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a67e:	2b30      	cmp	r3, #48	; 0x30
 800a680:	d0f8      	beq.n	800a674 <_dtoa_r+0x61c>
 800a682:	46bb      	mov	fp, r7
 800a684:	e04a      	b.n	800a71c <_dtoa_r+0x6c4>
 800a686:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <_dtoa_r+0x648>)
 800a688:	f7f5 ffbe 	bl	8000608 <__aeabi_dmul>
 800a68c:	4680      	mov	r8, r0
 800a68e:	4689      	mov	r9, r1
 800a690:	e7bd      	b.n	800a60e <_dtoa_r+0x5b6>
 800a692:	bf00      	nop
 800a694:	0800cf00 	.word	0x0800cf00
 800a698:	0800ced8 	.word	0x0800ced8
 800a69c:	3ff00000 	.word	0x3ff00000
 800a6a0:	40240000 	.word	0x40240000
 800a6a4:	401c0000 	.word	0x401c0000
 800a6a8:	40140000 	.word	0x40140000
 800a6ac:	3fe00000 	.word	0x3fe00000
 800a6b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6b4:	9d00      	ldr	r5, [sp, #0]
 800a6b6:	4642      	mov	r2, r8
 800a6b8:	464b      	mov	r3, r9
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	4639      	mov	r1, r7
 800a6be:	f7f6 f8cd 	bl	800085c <__aeabi_ddiv>
 800a6c2:	f7f6 fa51 	bl	8000b68 <__aeabi_d2iz>
 800a6c6:	9001      	str	r0, [sp, #4]
 800a6c8:	f7f5 ff34 	bl	8000534 <__aeabi_i2d>
 800a6cc:	4642      	mov	r2, r8
 800a6ce:	464b      	mov	r3, r9
 800a6d0:	f7f5 ff9a 	bl	8000608 <__aeabi_dmul>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4630      	mov	r0, r6
 800a6da:	4639      	mov	r1, r7
 800a6dc:	f7f5 fddc 	bl	8000298 <__aeabi_dsub>
 800a6e0:	9e01      	ldr	r6, [sp, #4]
 800a6e2:	9f04      	ldr	r7, [sp, #16]
 800a6e4:	3630      	adds	r6, #48	; 0x30
 800a6e6:	f805 6b01 	strb.w	r6, [r5], #1
 800a6ea:	9e00      	ldr	r6, [sp, #0]
 800a6ec:	1bae      	subs	r6, r5, r6
 800a6ee:	42b7      	cmp	r7, r6
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	d134      	bne.n	800a760 <_dtoa_r+0x708>
 800a6f6:	f7f5 fdd1 	bl	800029c <__adddf3>
 800a6fa:	4642      	mov	r2, r8
 800a6fc:	464b      	mov	r3, r9
 800a6fe:	4606      	mov	r6, r0
 800a700:	460f      	mov	r7, r1
 800a702:	f7f6 fa11 	bl	8000b28 <__aeabi_dcmpgt>
 800a706:	b9c8      	cbnz	r0, 800a73c <_dtoa_r+0x6e4>
 800a708:	4642      	mov	r2, r8
 800a70a:	464b      	mov	r3, r9
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f6 f9e2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a714:	b110      	cbz	r0, 800a71c <_dtoa_r+0x6c4>
 800a716:	9b01      	ldr	r3, [sp, #4]
 800a718:	07db      	lsls	r3, r3, #31
 800a71a:	d40f      	bmi.n	800a73c <_dtoa_r+0x6e4>
 800a71c:	4651      	mov	r1, sl
 800a71e:	4620      	mov	r0, r4
 800a720:	f000 fbcc 	bl	800aebc <_Bfree>
 800a724:	2300      	movs	r3, #0
 800a726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a728:	702b      	strb	r3, [r5, #0]
 800a72a:	f10b 0301 	add.w	r3, fp, #1
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a732:	2b00      	cmp	r3, #0
 800a734:	f43f ace2 	beq.w	800a0fc <_dtoa_r+0xa4>
 800a738:	601d      	str	r5, [r3, #0]
 800a73a:	e4df      	b.n	800a0fc <_dtoa_r+0xa4>
 800a73c:	465f      	mov	r7, fp
 800a73e:	462b      	mov	r3, r5
 800a740:	461d      	mov	r5, r3
 800a742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a746:	2a39      	cmp	r2, #57	; 0x39
 800a748:	d106      	bne.n	800a758 <_dtoa_r+0x700>
 800a74a:	9a00      	ldr	r2, [sp, #0]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d1f7      	bne.n	800a740 <_dtoa_r+0x6e8>
 800a750:	9900      	ldr	r1, [sp, #0]
 800a752:	2230      	movs	r2, #48	; 0x30
 800a754:	3701      	adds	r7, #1
 800a756:	700a      	strb	r2, [r1, #0]
 800a758:	781a      	ldrb	r2, [r3, #0]
 800a75a:	3201      	adds	r2, #1
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	e790      	b.n	800a682 <_dtoa_r+0x62a>
 800a760:	4ba3      	ldr	r3, [pc, #652]	; (800a9f0 <_dtoa_r+0x998>)
 800a762:	2200      	movs	r2, #0
 800a764:	f7f5 ff50 	bl	8000608 <__aeabi_dmul>
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	4606      	mov	r6, r0
 800a76e:	460f      	mov	r7, r1
 800a770:	f7f6 f9b2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a774:	2800      	cmp	r0, #0
 800a776:	d09e      	beq.n	800a6b6 <_dtoa_r+0x65e>
 800a778:	e7d0      	b.n	800a71c <_dtoa_r+0x6c4>
 800a77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	f000 80ca 	beq.w	800a916 <_dtoa_r+0x8be>
 800a782:	9a07      	ldr	r2, [sp, #28]
 800a784:	2a01      	cmp	r2, #1
 800a786:	f300 80ad 	bgt.w	800a8e4 <_dtoa_r+0x88c>
 800a78a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a78c:	2a00      	cmp	r2, #0
 800a78e:	f000 80a5 	beq.w	800a8dc <_dtoa_r+0x884>
 800a792:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a796:	9e08      	ldr	r6, [sp, #32]
 800a798:	9d05      	ldr	r5, [sp, #20]
 800a79a:	9a05      	ldr	r2, [sp, #20]
 800a79c:	441a      	add	r2, r3
 800a79e:	9205      	str	r2, [sp, #20]
 800a7a0:	9a06      	ldr	r2, [sp, #24]
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	441a      	add	r2, r3
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	9206      	str	r2, [sp, #24]
 800a7aa:	f000 fc3d 	bl	800b028 <__i2b>
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	b165      	cbz	r5, 800a7cc <_dtoa_r+0x774>
 800a7b2:	9b06      	ldr	r3, [sp, #24]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	dd09      	ble.n	800a7cc <_dtoa_r+0x774>
 800a7b8:	42ab      	cmp	r3, r5
 800a7ba:	9a05      	ldr	r2, [sp, #20]
 800a7bc:	bfa8      	it	ge
 800a7be:	462b      	movge	r3, r5
 800a7c0:	1ad2      	subs	r2, r2, r3
 800a7c2:	9205      	str	r2, [sp, #20]
 800a7c4:	9a06      	ldr	r2, [sp, #24]
 800a7c6:	1aed      	subs	r5, r5, r3
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	9306      	str	r3, [sp, #24]
 800a7cc:	9b08      	ldr	r3, [sp, #32]
 800a7ce:	b1f3      	cbz	r3, 800a80e <_dtoa_r+0x7b6>
 800a7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 80a3 	beq.w	800a91e <_dtoa_r+0x8c6>
 800a7d8:	2e00      	cmp	r6, #0
 800a7da:	dd10      	ble.n	800a7fe <_dtoa_r+0x7a6>
 800a7dc:	4639      	mov	r1, r7
 800a7de:	4632      	mov	r2, r6
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f000 fce1 	bl	800b1a8 <__pow5mult>
 800a7e6:	4652      	mov	r2, sl
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fc31 	bl	800b054 <__multiply>
 800a7f2:	4651      	mov	r1, sl
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 fb60 	bl	800aebc <_Bfree>
 800a7fc:	46c2      	mov	sl, r8
 800a7fe:	9b08      	ldr	r3, [sp, #32]
 800a800:	1b9a      	subs	r2, r3, r6
 800a802:	d004      	beq.n	800a80e <_dtoa_r+0x7b6>
 800a804:	4651      	mov	r1, sl
 800a806:	4620      	mov	r0, r4
 800a808:	f000 fcce 	bl	800b1a8 <__pow5mult>
 800a80c:	4682      	mov	sl, r0
 800a80e:	2101      	movs	r1, #1
 800a810:	4620      	mov	r0, r4
 800a812:	f000 fc09 	bl	800b028 <__i2b>
 800a816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	4606      	mov	r6, r0
 800a81c:	f340 8081 	ble.w	800a922 <_dtoa_r+0x8ca>
 800a820:	461a      	mov	r2, r3
 800a822:	4601      	mov	r1, r0
 800a824:	4620      	mov	r0, r4
 800a826:	f000 fcbf 	bl	800b1a8 <__pow5mult>
 800a82a:	9b07      	ldr	r3, [sp, #28]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	4606      	mov	r6, r0
 800a830:	dd7a      	ble.n	800a928 <_dtoa_r+0x8d0>
 800a832:	f04f 0800 	mov.w	r8, #0
 800a836:	6933      	ldr	r3, [r6, #16]
 800a838:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a83c:	6918      	ldr	r0, [r3, #16]
 800a83e:	f000 fba5 	bl	800af8c <__hi0bits>
 800a842:	f1c0 0020 	rsb	r0, r0, #32
 800a846:	9b06      	ldr	r3, [sp, #24]
 800a848:	4418      	add	r0, r3
 800a84a:	f010 001f 	ands.w	r0, r0, #31
 800a84e:	f000 8094 	beq.w	800a97a <_dtoa_r+0x922>
 800a852:	f1c0 0320 	rsb	r3, r0, #32
 800a856:	2b04      	cmp	r3, #4
 800a858:	f340 8085 	ble.w	800a966 <_dtoa_r+0x90e>
 800a85c:	9b05      	ldr	r3, [sp, #20]
 800a85e:	f1c0 001c 	rsb	r0, r0, #28
 800a862:	4403      	add	r3, r0
 800a864:	9305      	str	r3, [sp, #20]
 800a866:	9b06      	ldr	r3, [sp, #24]
 800a868:	4403      	add	r3, r0
 800a86a:	4405      	add	r5, r0
 800a86c:	9306      	str	r3, [sp, #24]
 800a86e:	9b05      	ldr	r3, [sp, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	dd05      	ble.n	800a880 <_dtoa_r+0x828>
 800a874:	4651      	mov	r1, sl
 800a876:	461a      	mov	r2, r3
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 fcef 	bl	800b25c <__lshift>
 800a87e:	4682      	mov	sl, r0
 800a880:	9b06      	ldr	r3, [sp, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	dd05      	ble.n	800a892 <_dtoa_r+0x83a>
 800a886:	4631      	mov	r1, r6
 800a888:	461a      	mov	r2, r3
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 fce6 	bl	800b25c <__lshift>
 800a890:	4606      	mov	r6, r0
 800a892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a894:	2b00      	cmp	r3, #0
 800a896:	d072      	beq.n	800a97e <_dtoa_r+0x926>
 800a898:	4631      	mov	r1, r6
 800a89a:	4650      	mov	r0, sl
 800a89c:	f000 fd4a 	bl	800b334 <__mcmp>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	da6c      	bge.n	800a97e <_dtoa_r+0x926>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4651      	mov	r1, sl
 800a8a8:	220a      	movs	r2, #10
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 fb28 	bl	800af00 <__multadd>
 800a8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8b6:	4682      	mov	sl, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 81b0 	beq.w	800ac1e <_dtoa_r+0xbc6>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	220a      	movs	r2, #10
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 fb1b 	bl	800af00 <__multadd>
 800a8ca:	9b01      	ldr	r3, [sp, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	4607      	mov	r7, r0
 800a8d0:	f300 8096 	bgt.w	800aa00 <_dtoa_r+0x9a8>
 800a8d4:	9b07      	ldr	r3, [sp, #28]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	dc59      	bgt.n	800a98e <_dtoa_r+0x936>
 800a8da:	e091      	b.n	800aa00 <_dtoa_r+0x9a8>
 800a8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8e2:	e758      	b.n	800a796 <_dtoa_r+0x73e>
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	1e5e      	subs	r6, r3, #1
 800a8e8:	9b08      	ldr	r3, [sp, #32]
 800a8ea:	42b3      	cmp	r3, r6
 800a8ec:	bfbf      	itttt	lt
 800a8ee:	9b08      	ldrlt	r3, [sp, #32]
 800a8f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a8f2:	9608      	strlt	r6, [sp, #32]
 800a8f4:	1af3      	sublt	r3, r6, r3
 800a8f6:	bfb4      	ite	lt
 800a8f8:	18d2      	addlt	r2, r2, r3
 800a8fa:	1b9e      	subge	r6, r3, r6
 800a8fc:	9b04      	ldr	r3, [sp, #16]
 800a8fe:	bfbc      	itt	lt
 800a900:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a902:	2600      	movlt	r6, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	bfb7      	itett	lt
 800a908:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a90c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a910:	1a9d      	sublt	r5, r3, r2
 800a912:	2300      	movlt	r3, #0
 800a914:	e741      	b.n	800a79a <_dtoa_r+0x742>
 800a916:	9e08      	ldr	r6, [sp, #32]
 800a918:	9d05      	ldr	r5, [sp, #20]
 800a91a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a91c:	e748      	b.n	800a7b0 <_dtoa_r+0x758>
 800a91e:	9a08      	ldr	r2, [sp, #32]
 800a920:	e770      	b.n	800a804 <_dtoa_r+0x7ac>
 800a922:	9b07      	ldr	r3, [sp, #28]
 800a924:	2b01      	cmp	r3, #1
 800a926:	dc19      	bgt.n	800a95c <_dtoa_r+0x904>
 800a928:	9b02      	ldr	r3, [sp, #8]
 800a92a:	b9bb      	cbnz	r3, 800a95c <_dtoa_r+0x904>
 800a92c:	9b03      	ldr	r3, [sp, #12]
 800a92e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a932:	b99b      	cbnz	r3, 800a95c <_dtoa_r+0x904>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a93a:	0d1b      	lsrs	r3, r3, #20
 800a93c:	051b      	lsls	r3, r3, #20
 800a93e:	b183      	cbz	r3, 800a962 <_dtoa_r+0x90a>
 800a940:	9b05      	ldr	r3, [sp, #20]
 800a942:	3301      	adds	r3, #1
 800a944:	9305      	str	r3, [sp, #20]
 800a946:	9b06      	ldr	r3, [sp, #24]
 800a948:	3301      	adds	r3, #1
 800a94a:	9306      	str	r3, [sp, #24]
 800a94c:	f04f 0801 	mov.w	r8, #1
 800a950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a952:	2b00      	cmp	r3, #0
 800a954:	f47f af6f 	bne.w	800a836 <_dtoa_r+0x7de>
 800a958:	2001      	movs	r0, #1
 800a95a:	e774      	b.n	800a846 <_dtoa_r+0x7ee>
 800a95c:	f04f 0800 	mov.w	r8, #0
 800a960:	e7f6      	b.n	800a950 <_dtoa_r+0x8f8>
 800a962:	4698      	mov	r8, r3
 800a964:	e7f4      	b.n	800a950 <_dtoa_r+0x8f8>
 800a966:	d082      	beq.n	800a86e <_dtoa_r+0x816>
 800a968:	9a05      	ldr	r2, [sp, #20]
 800a96a:	331c      	adds	r3, #28
 800a96c:	441a      	add	r2, r3
 800a96e:	9205      	str	r2, [sp, #20]
 800a970:	9a06      	ldr	r2, [sp, #24]
 800a972:	441a      	add	r2, r3
 800a974:	441d      	add	r5, r3
 800a976:	9206      	str	r2, [sp, #24]
 800a978:	e779      	b.n	800a86e <_dtoa_r+0x816>
 800a97a:	4603      	mov	r3, r0
 800a97c:	e7f4      	b.n	800a968 <_dtoa_r+0x910>
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	dc37      	bgt.n	800a9f4 <_dtoa_r+0x99c>
 800a984:	9b07      	ldr	r3, [sp, #28]
 800a986:	2b02      	cmp	r3, #2
 800a988:	dd34      	ble.n	800a9f4 <_dtoa_r+0x99c>
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	b963      	cbnz	r3, 800a9ac <_dtoa_r+0x954>
 800a992:	4631      	mov	r1, r6
 800a994:	2205      	movs	r2, #5
 800a996:	4620      	mov	r0, r4
 800a998:	f000 fab2 	bl	800af00 <__multadd>
 800a99c:	4601      	mov	r1, r0
 800a99e:	4606      	mov	r6, r0
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	f000 fcc7 	bl	800b334 <__mcmp>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	f73f adbb 	bgt.w	800a522 <_dtoa_r+0x4ca>
 800a9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ae:	9d00      	ldr	r5, [sp, #0]
 800a9b0:	ea6f 0b03 	mvn.w	fp, r3
 800a9b4:	f04f 0800 	mov.w	r8, #0
 800a9b8:	4631      	mov	r1, r6
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 fa7e 	bl	800aebc <_Bfree>
 800a9c0:	2f00      	cmp	r7, #0
 800a9c2:	f43f aeab 	beq.w	800a71c <_dtoa_r+0x6c4>
 800a9c6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ca:	d005      	beq.n	800a9d8 <_dtoa_r+0x980>
 800a9cc:	45b8      	cmp	r8, r7
 800a9ce:	d003      	beq.n	800a9d8 <_dtoa_r+0x980>
 800a9d0:	4641      	mov	r1, r8
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 fa72 	bl	800aebc <_Bfree>
 800a9d8:	4639      	mov	r1, r7
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 fa6e 	bl	800aebc <_Bfree>
 800a9e0:	e69c      	b.n	800a71c <_dtoa_r+0x6c4>
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	4637      	mov	r7, r6
 800a9e6:	e7e1      	b.n	800a9ac <_dtoa_r+0x954>
 800a9e8:	46bb      	mov	fp, r7
 800a9ea:	4637      	mov	r7, r6
 800a9ec:	e599      	b.n	800a522 <_dtoa_r+0x4ca>
 800a9ee:	bf00      	nop
 800a9f0:	40240000 	.word	0x40240000
 800a9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f000 80c8 	beq.w	800ab8c <_dtoa_r+0xb34>
 800a9fc:	9b04      	ldr	r3, [sp, #16]
 800a9fe:	9301      	str	r3, [sp, #4]
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	dd05      	ble.n	800aa10 <_dtoa_r+0x9b8>
 800aa04:	4639      	mov	r1, r7
 800aa06:	462a      	mov	r2, r5
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fc27 	bl	800b25c <__lshift>
 800aa0e:	4607      	mov	r7, r0
 800aa10:	f1b8 0f00 	cmp.w	r8, #0
 800aa14:	d05b      	beq.n	800aace <_dtoa_r+0xa76>
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f000 fa0f 	bl	800ae3c <_Balloc>
 800aa1e:	4605      	mov	r5, r0
 800aa20:	b928      	cbnz	r0, 800aa2e <_dtoa_r+0x9d6>
 800aa22:	4b83      	ldr	r3, [pc, #524]	; (800ac30 <_dtoa_r+0xbd8>)
 800aa24:	4602      	mov	r2, r0
 800aa26:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aa2a:	f7ff bb2e 	b.w	800a08a <_dtoa_r+0x32>
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	3202      	adds	r2, #2
 800aa32:	0092      	lsls	r2, r2, #2
 800aa34:	f107 010c 	add.w	r1, r7, #12
 800aa38:	300c      	adds	r0, #12
 800aa3a:	f7ff fa74 	bl	8009f26 <memcpy>
 800aa3e:	2201      	movs	r2, #1
 800aa40:	4629      	mov	r1, r5
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 fc0a 	bl	800b25c <__lshift>
 800aa48:	9b00      	ldr	r3, [sp, #0]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa52:	4413      	add	r3, r2
 800aa54:	9308      	str	r3, [sp, #32]
 800aa56:	9b02      	ldr	r3, [sp, #8]
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	46b8      	mov	r8, r7
 800aa5e:	9306      	str	r3, [sp, #24]
 800aa60:	4607      	mov	r7, r0
 800aa62:	9b04      	ldr	r3, [sp, #16]
 800aa64:	4631      	mov	r1, r6
 800aa66:	3b01      	subs	r3, #1
 800aa68:	4650      	mov	r0, sl
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	f7ff fa69 	bl	8009f42 <quorem>
 800aa70:	4641      	mov	r1, r8
 800aa72:	9002      	str	r0, [sp, #8]
 800aa74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa78:	4650      	mov	r0, sl
 800aa7a:	f000 fc5b 	bl	800b334 <__mcmp>
 800aa7e:	463a      	mov	r2, r7
 800aa80:	9005      	str	r0, [sp, #20]
 800aa82:	4631      	mov	r1, r6
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 fc71 	bl	800b36c <__mdiff>
 800aa8a:	68c2      	ldr	r2, [r0, #12]
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	bb02      	cbnz	r2, 800aad2 <_dtoa_r+0xa7a>
 800aa90:	4601      	mov	r1, r0
 800aa92:	4650      	mov	r0, sl
 800aa94:	f000 fc4e 	bl	800b334 <__mcmp>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	9209      	str	r2, [sp, #36]	; 0x24
 800aaa0:	f000 fa0c 	bl	800aebc <_Bfree>
 800aaa4:	9b07      	ldr	r3, [sp, #28]
 800aaa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaa8:	9d04      	ldr	r5, [sp, #16]
 800aaaa:	ea43 0102 	orr.w	r1, r3, r2
 800aaae:	9b06      	ldr	r3, [sp, #24]
 800aab0:	4319      	orrs	r1, r3
 800aab2:	d110      	bne.n	800aad6 <_dtoa_r+0xa7e>
 800aab4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aab8:	d029      	beq.n	800ab0e <_dtoa_r+0xab6>
 800aaba:	9b05      	ldr	r3, [sp, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dd02      	ble.n	800aac6 <_dtoa_r+0xa6e>
 800aac0:	9b02      	ldr	r3, [sp, #8]
 800aac2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aac6:	9b01      	ldr	r3, [sp, #4]
 800aac8:	f883 9000 	strb.w	r9, [r3]
 800aacc:	e774      	b.n	800a9b8 <_dtoa_r+0x960>
 800aace:	4638      	mov	r0, r7
 800aad0:	e7ba      	b.n	800aa48 <_dtoa_r+0x9f0>
 800aad2:	2201      	movs	r2, #1
 800aad4:	e7e1      	b.n	800aa9a <_dtoa_r+0xa42>
 800aad6:	9b05      	ldr	r3, [sp, #20]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	db04      	blt.n	800aae6 <_dtoa_r+0xa8e>
 800aadc:	9907      	ldr	r1, [sp, #28]
 800aade:	430b      	orrs	r3, r1
 800aae0:	9906      	ldr	r1, [sp, #24]
 800aae2:	430b      	orrs	r3, r1
 800aae4:	d120      	bne.n	800ab28 <_dtoa_r+0xad0>
 800aae6:	2a00      	cmp	r2, #0
 800aae8:	dded      	ble.n	800aac6 <_dtoa_r+0xa6e>
 800aaea:	4651      	mov	r1, sl
 800aaec:	2201      	movs	r2, #1
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f000 fbb4 	bl	800b25c <__lshift>
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4682      	mov	sl, r0
 800aaf8:	f000 fc1c 	bl	800b334 <__mcmp>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	dc03      	bgt.n	800ab08 <_dtoa_r+0xab0>
 800ab00:	d1e1      	bne.n	800aac6 <_dtoa_r+0xa6e>
 800ab02:	f019 0f01 	tst.w	r9, #1
 800ab06:	d0de      	beq.n	800aac6 <_dtoa_r+0xa6e>
 800ab08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab0c:	d1d8      	bne.n	800aac0 <_dtoa_r+0xa68>
 800ab0e:	9a01      	ldr	r2, [sp, #4]
 800ab10:	2339      	movs	r3, #57	; 0x39
 800ab12:	7013      	strb	r3, [r2, #0]
 800ab14:	462b      	mov	r3, r5
 800ab16:	461d      	mov	r5, r3
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab1e:	2a39      	cmp	r2, #57	; 0x39
 800ab20:	d06c      	beq.n	800abfc <_dtoa_r+0xba4>
 800ab22:	3201      	adds	r2, #1
 800ab24:	701a      	strb	r2, [r3, #0]
 800ab26:	e747      	b.n	800a9b8 <_dtoa_r+0x960>
 800ab28:	2a00      	cmp	r2, #0
 800ab2a:	dd07      	ble.n	800ab3c <_dtoa_r+0xae4>
 800ab2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab30:	d0ed      	beq.n	800ab0e <_dtoa_r+0xab6>
 800ab32:	9a01      	ldr	r2, [sp, #4]
 800ab34:	f109 0301 	add.w	r3, r9, #1
 800ab38:	7013      	strb	r3, [r2, #0]
 800ab3a:	e73d      	b.n	800a9b8 <_dtoa_r+0x960>
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	9a08      	ldr	r2, [sp, #32]
 800ab40:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d043      	beq.n	800abd0 <_dtoa_r+0xb78>
 800ab48:	4651      	mov	r1, sl
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	220a      	movs	r2, #10
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f000 f9d6 	bl	800af00 <__multadd>
 800ab54:	45b8      	cmp	r8, r7
 800ab56:	4682      	mov	sl, r0
 800ab58:	f04f 0300 	mov.w	r3, #0
 800ab5c:	f04f 020a 	mov.w	r2, #10
 800ab60:	4641      	mov	r1, r8
 800ab62:	4620      	mov	r0, r4
 800ab64:	d107      	bne.n	800ab76 <_dtoa_r+0xb1e>
 800ab66:	f000 f9cb 	bl	800af00 <__multadd>
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	4607      	mov	r7, r0
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	3301      	adds	r3, #1
 800ab72:	9304      	str	r3, [sp, #16]
 800ab74:	e775      	b.n	800aa62 <_dtoa_r+0xa0a>
 800ab76:	f000 f9c3 	bl	800af00 <__multadd>
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	4680      	mov	r8, r0
 800ab7e:	2300      	movs	r3, #0
 800ab80:	220a      	movs	r2, #10
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 f9bc 	bl	800af00 <__multadd>
 800ab88:	4607      	mov	r7, r0
 800ab8a:	e7f0      	b.n	800ab6e <_dtoa_r+0xb16>
 800ab8c:	9b04      	ldr	r3, [sp, #16]
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	9d00      	ldr	r5, [sp, #0]
 800ab92:	4631      	mov	r1, r6
 800ab94:	4650      	mov	r0, sl
 800ab96:	f7ff f9d4 	bl	8009f42 <quorem>
 800ab9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab9e:	9b00      	ldr	r3, [sp, #0]
 800aba0:	f805 9b01 	strb.w	r9, [r5], #1
 800aba4:	1aea      	subs	r2, r5, r3
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	4293      	cmp	r3, r2
 800abaa:	dd07      	ble.n	800abbc <_dtoa_r+0xb64>
 800abac:	4651      	mov	r1, sl
 800abae:	2300      	movs	r3, #0
 800abb0:	220a      	movs	r2, #10
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 f9a4 	bl	800af00 <__multadd>
 800abb8:	4682      	mov	sl, r0
 800abba:	e7ea      	b.n	800ab92 <_dtoa_r+0xb3a>
 800abbc:	9b01      	ldr	r3, [sp, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	bfc8      	it	gt
 800abc2:	461d      	movgt	r5, r3
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	bfd8      	it	le
 800abc8:	2501      	movle	r5, #1
 800abca:	441d      	add	r5, r3
 800abcc:	f04f 0800 	mov.w	r8, #0
 800abd0:	4651      	mov	r1, sl
 800abd2:	2201      	movs	r2, #1
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 fb41 	bl	800b25c <__lshift>
 800abda:	4631      	mov	r1, r6
 800abdc:	4682      	mov	sl, r0
 800abde:	f000 fba9 	bl	800b334 <__mcmp>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	dc96      	bgt.n	800ab14 <_dtoa_r+0xabc>
 800abe6:	d102      	bne.n	800abee <_dtoa_r+0xb96>
 800abe8:	f019 0f01 	tst.w	r9, #1
 800abec:	d192      	bne.n	800ab14 <_dtoa_r+0xabc>
 800abee:	462b      	mov	r3, r5
 800abf0:	461d      	mov	r5, r3
 800abf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abf6:	2a30      	cmp	r2, #48	; 0x30
 800abf8:	d0fa      	beq.n	800abf0 <_dtoa_r+0xb98>
 800abfa:	e6dd      	b.n	800a9b8 <_dtoa_r+0x960>
 800abfc:	9a00      	ldr	r2, [sp, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d189      	bne.n	800ab16 <_dtoa_r+0xabe>
 800ac02:	f10b 0b01 	add.w	fp, fp, #1
 800ac06:	2331      	movs	r3, #49	; 0x31
 800ac08:	e796      	b.n	800ab38 <_dtoa_r+0xae0>
 800ac0a:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <_dtoa_r+0xbdc>)
 800ac0c:	f7ff ba99 	b.w	800a142 <_dtoa_r+0xea>
 800ac10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f47f aa6d 	bne.w	800a0f2 <_dtoa_r+0x9a>
 800ac18:	4b07      	ldr	r3, [pc, #28]	; (800ac38 <_dtoa_r+0xbe0>)
 800ac1a:	f7ff ba92 	b.w	800a142 <_dtoa_r+0xea>
 800ac1e:	9b01      	ldr	r3, [sp, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dcb5      	bgt.n	800ab90 <_dtoa_r+0xb38>
 800ac24:	9b07      	ldr	r3, [sp, #28]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	f73f aeb1 	bgt.w	800a98e <_dtoa_r+0x936>
 800ac2c:	e7b0      	b.n	800ab90 <_dtoa_r+0xb38>
 800ac2e:	bf00      	nop
 800ac30:	0800ce6c 	.word	0x0800ce6c
 800ac34:	0800cdcc 	.word	0x0800cdcc
 800ac38:	0800cdf0 	.word	0x0800cdf0

0800ac3c <_free_r>:
 800ac3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac3e:	2900      	cmp	r1, #0
 800ac40:	d044      	beq.n	800accc <_free_r+0x90>
 800ac42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac46:	9001      	str	r0, [sp, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac4e:	bfb8      	it	lt
 800ac50:	18e4      	addlt	r4, r4, r3
 800ac52:	f000 f8e7 	bl	800ae24 <__malloc_lock>
 800ac56:	4a1e      	ldr	r2, [pc, #120]	; (800acd0 <_free_r+0x94>)
 800ac58:	9801      	ldr	r0, [sp, #4]
 800ac5a:	6813      	ldr	r3, [r2, #0]
 800ac5c:	b933      	cbnz	r3, 800ac6c <_free_r+0x30>
 800ac5e:	6063      	str	r3, [r4, #4]
 800ac60:	6014      	str	r4, [r2, #0]
 800ac62:	b003      	add	sp, #12
 800ac64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac68:	f000 b8e2 	b.w	800ae30 <__malloc_unlock>
 800ac6c:	42a3      	cmp	r3, r4
 800ac6e:	d908      	bls.n	800ac82 <_free_r+0x46>
 800ac70:	6825      	ldr	r5, [r4, #0]
 800ac72:	1961      	adds	r1, r4, r5
 800ac74:	428b      	cmp	r3, r1
 800ac76:	bf01      	itttt	eq
 800ac78:	6819      	ldreq	r1, [r3, #0]
 800ac7a:	685b      	ldreq	r3, [r3, #4]
 800ac7c:	1949      	addeq	r1, r1, r5
 800ac7e:	6021      	streq	r1, [r4, #0]
 800ac80:	e7ed      	b.n	800ac5e <_free_r+0x22>
 800ac82:	461a      	mov	r2, r3
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	b10b      	cbz	r3, 800ac8c <_free_r+0x50>
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	d9fa      	bls.n	800ac82 <_free_r+0x46>
 800ac8c:	6811      	ldr	r1, [r2, #0]
 800ac8e:	1855      	adds	r5, r2, r1
 800ac90:	42a5      	cmp	r5, r4
 800ac92:	d10b      	bne.n	800acac <_free_r+0x70>
 800ac94:	6824      	ldr	r4, [r4, #0]
 800ac96:	4421      	add	r1, r4
 800ac98:	1854      	adds	r4, r2, r1
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	6011      	str	r1, [r2, #0]
 800ac9e:	d1e0      	bne.n	800ac62 <_free_r+0x26>
 800aca0:	681c      	ldr	r4, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	6053      	str	r3, [r2, #4]
 800aca6:	440c      	add	r4, r1
 800aca8:	6014      	str	r4, [r2, #0]
 800acaa:	e7da      	b.n	800ac62 <_free_r+0x26>
 800acac:	d902      	bls.n	800acb4 <_free_r+0x78>
 800acae:	230c      	movs	r3, #12
 800acb0:	6003      	str	r3, [r0, #0]
 800acb2:	e7d6      	b.n	800ac62 <_free_r+0x26>
 800acb4:	6825      	ldr	r5, [r4, #0]
 800acb6:	1961      	adds	r1, r4, r5
 800acb8:	428b      	cmp	r3, r1
 800acba:	bf04      	itt	eq
 800acbc:	6819      	ldreq	r1, [r3, #0]
 800acbe:	685b      	ldreq	r3, [r3, #4]
 800acc0:	6063      	str	r3, [r4, #4]
 800acc2:	bf04      	itt	eq
 800acc4:	1949      	addeq	r1, r1, r5
 800acc6:	6021      	streq	r1, [r4, #0]
 800acc8:	6054      	str	r4, [r2, #4]
 800acca:	e7ca      	b.n	800ac62 <_free_r+0x26>
 800accc:	b003      	add	sp, #12
 800acce:	bd30      	pop	{r4, r5, pc}
 800acd0:	20005ffc 	.word	0x20005ffc

0800acd4 <malloc>:
 800acd4:	4b02      	ldr	r3, [pc, #8]	; (800ace0 <malloc+0xc>)
 800acd6:	4601      	mov	r1, r0
 800acd8:	6818      	ldr	r0, [r3, #0]
 800acda:	f000 b823 	b.w	800ad24 <_malloc_r>
 800acde:	bf00      	nop
 800ace0:	20000158 	.word	0x20000158

0800ace4 <sbrk_aligned>:
 800ace4:	b570      	push	{r4, r5, r6, lr}
 800ace6:	4e0e      	ldr	r6, [pc, #56]	; (800ad20 <sbrk_aligned+0x3c>)
 800ace8:	460c      	mov	r4, r1
 800acea:	6831      	ldr	r1, [r6, #0]
 800acec:	4605      	mov	r5, r0
 800acee:	b911      	cbnz	r1, 800acf6 <sbrk_aligned+0x12>
 800acf0:	f000 fe96 	bl	800ba20 <_sbrk_r>
 800acf4:	6030      	str	r0, [r6, #0]
 800acf6:	4621      	mov	r1, r4
 800acf8:	4628      	mov	r0, r5
 800acfa:	f000 fe91 	bl	800ba20 <_sbrk_r>
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	d00a      	beq.n	800ad18 <sbrk_aligned+0x34>
 800ad02:	1cc4      	adds	r4, r0, #3
 800ad04:	f024 0403 	bic.w	r4, r4, #3
 800ad08:	42a0      	cmp	r0, r4
 800ad0a:	d007      	beq.n	800ad1c <sbrk_aligned+0x38>
 800ad0c:	1a21      	subs	r1, r4, r0
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f000 fe86 	bl	800ba20 <_sbrk_r>
 800ad14:	3001      	adds	r0, #1
 800ad16:	d101      	bne.n	800ad1c <sbrk_aligned+0x38>
 800ad18:	f04f 34ff 	mov.w	r4, #4294967295
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	20006000 	.word	0x20006000

0800ad24 <_malloc_r>:
 800ad24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad28:	1ccd      	adds	r5, r1, #3
 800ad2a:	f025 0503 	bic.w	r5, r5, #3
 800ad2e:	3508      	adds	r5, #8
 800ad30:	2d0c      	cmp	r5, #12
 800ad32:	bf38      	it	cc
 800ad34:	250c      	movcc	r5, #12
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	4607      	mov	r7, r0
 800ad3a:	db01      	blt.n	800ad40 <_malloc_r+0x1c>
 800ad3c:	42a9      	cmp	r1, r5
 800ad3e:	d905      	bls.n	800ad4c <_malloc_r+0x28>
 800ad40:	230c      	movs	r3, #12
 800ad42:	603b      	str	r3, [r7, #0]
 800ad44:	2600      	movs	r6, #0
 800ad46:	4630      	mov	r0, r6
 800ad48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ae20 <_malloc_r+0xfc>
 800ad50:	f000 f868 	bl	800ae24 <__malloc_lock>
 800ad54:	f8d8 3000 	ldr.w	r3, [r8]
 800ad58:	461c      	mov	r4, r3
 800ad5a:	bb5c      	cbnz	r4, 800adb4 <_malloc_r+0x90>
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4638      	mov	r0, r7
 800ad60:	f7ff ffc0 	bl	800ace4 <sbrk_aligned>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	4604      	mov	r4, r0
 800ad68:	d155      	bne.n	800ae16 <_malloc_r+0xf2>
 800ad6a:	f8d8 4000 	ldr.w	r4, [r8]
 800ad6e:	4626      	mov	r6, r4
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	d145      	bne.n	800ae00 <_malloc_r+0xdc>
 800ad74:	2c00      	cmp	r4, #0
 800ad76:	d048      	beq.n	800ae0a <_malloc_r+0xe6>
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	eb04 0903 	add.w	r9, r4, r3
 800ad82:	f000 fe4d 	bl	800ba20 <_sbrk_r>
 800ad86:	4581      	cmp	r9, r0
 800ad88:	d13f      	bne.n	800ae0a <_malloc_r+0xe6>
 800ad8a:	6821      	ldr	r1, [r4, #0]
 800ad8c:	1a6d      	subs	r5, r5, r1
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4638      	mov	r0, r7
 800ad92:	f7ff ffa7 	bl	800ace4 <sbrk_aligned>
 800ad96:	3001      	adds	r0, #1
 800ad98:	d037      	beq.n	800ae0a <_malloc_r+0xe6>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	442b      	add	r3, r5
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	f8d8 3000 	ldr.w	r3, [r8]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d038      	beq.n	800ae1a <_malloc_r+0xf6>
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	42a2      	cmp	r2, r4
 800adac:	d12b      	bne.n	800ae06 <_malloc_r+0xe2>
 800adae:	2200      	movs	r2, #0
 800adb0:	605a      	str	r2, [r3, #4]
 800adb2:	e00f      	b.n	800add4 <_malloc_r+0xb0>
 800adb4:	6822      	ldr	r2, [r4, #0]
 800adb6:	1b52      	subs	r2, r2, r5
 800adb8:	d41f      	bmi.n	800adfa <_malloc_r+0xd6>
 800adba:	2a0b      	cmp	r2, #11
 800adbc:	d917      	bls.n	800adee <_malloc_r+0xca>
 800adbe:	1961      	adds	r1, r4, r5
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	6025      	str	r5, [r4, #0]
 800adc4:	bf18      	it	ne
 800adc6:	6059      	strne	r1, [r3, #4]
 800adc8:	6863      	ldr	r3, [r4, #4]
 800adca:	bf08      	it	eq
 800adcc:	f8c8 1000 	streq.w	r1, [r8]
 800add0:	5162      	str	r2, [r4, r5]
 800add2:	604b      	str	r3, [r1, #4]
 800add4:	4638      	mov	r0, r7
 800add6:	f104 060b 	add.w	r6, r4, #11
 800adda:	f000 f829 	bl	800ae30 <__malloc_unlock>
 800adde:	f026 0607 	bic.w	r6, r6, #7
 800ade2:	1d23      	adds	r3, r4, #4
 800ade4:	1af2      	subs	r2, r6, r3
 800ade6:	d0ae      	beq.n	800ad46 <_malloc_r+0x22>
 800ade8:	1b9b      	subs	r3, r3, r6
 800adea:	50a3      	str	r3, [r4, r2]
 800adec:	e7ab      	b.n	800ad46 <_malloc_r+0x22>
 800adee:	42a3      	cmp	r3, r4
 800adf0:	6862      	ldr	r2, [r4, #4]
 800adf2:	d1dd      	bne.n	800adb0 <_malloc_r+0x8c>
 800adf4:	f8c8 2000 	str.w	r2, [r8]
 800adf8:	e7ec      	b.n	800add4 <_malloc_r+0xb0>
 800adfa:	4623      	mov	r3, r4
 800adfc:	6864      	ldr	r4, [r4, #4]
 800adfe:	e7ac      	b.n	800ad5a <_malloc_r+0x36>
 800ae00:	4634      	mov	r4, r6
 800ae02:	6876      	ldr	r6, [r6, #4]
 800ae04:	e7b4      	b.n	800ad70 <_malloc_r+0x4c>
 800ae06:	4613      	mov	r3, r2
 800ae08:	e7cc      	b.n	800ada4 <_malloc_r+0x80>
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	603b      	str	r3, [r7, #0]
 800ae0e:	4638      	mov	r0, r7
 800ae10:	f000 f80e 	bl	800ae30 <__malloc_unlock>
 800ae14:	e797      	b.n	800ad46 <_malloc_r+0x22>
 800ae16:	6025      	str	r5, [r4, #0]
 800ae18:	e7dc      	b.n	800add4 <_malloc_r+0xb0>
 800ae1a:	605b      	str	r3, [r3, #4]
 800ae1c:	deff      	udf	#255	; 0xff
 800ae1e:	bf00      	nop
 800ae20:	20005ffc 	.word	0x20005ffc

0800ae24 <__malloc_lock>:
 800ae24:	4801      	ldr	r0, [pc, #4]	; (800ae2c <__malloc_lock+0x8>)
 800ae26:	f7ff b87c 	b.w	8009f22 <__retarget_lock_acquire_recursive>
 800ae2a:	bf00      	nop
 800ae2c:	20005ff8 	.word	0x20005ff8

0800ae30 <__malloc_unlock>:
 800ae30:	4801      	ldr	r0, [pc, #4]	; (800ae38 <__malloc_unlock+0x8>)
 800ae32:	f7ff b877 	b.w	8009f24 <__retarget_lock_release_recursive>
 800ae36:	bf00      	nop
 800ae38:	20005ff8 	.word	0x20005ff8

0800ae3c <_Balloc>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	69c6      	ldr	r6, [r0, #28]
 800ae40:	4604      	mov	r4, r0
 800ae42:	460d      	mov	r5, r1
 800ae44:	b976      	cbnz	r6, 800ae64 <_Balloc+0x28>
 800ae46:	2010      	movs	r0, #16
 800ae48:	f7ff ff44 	bl	800acd4 <malloc>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	61e0      	str	r0, [r4, #28]
 800ae50:	b920      	cbnz	r0, 800ae5c <_Balloc+0x20>
 800ae52:	4b18      	ldr	r3, [pc, #96]	; (800aeb4 <_Balloc+0x78>)
 800ae54:	4818      	ldr	r0, [pc, #96]	; (800aeb8 <_Balloc+0x7c>)
 800ae56:	216b      	movs	r1, #107	; 0x6b
 800ae58:	f000 fdf2 	bl	800ba40 <__assert_func>
 800ae5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae60:	6006      	str	r6, [r0, #0]
 800ae62:	60c6      	str	r6, [r0, #12]
 800ae64:	69e6      	ldr	r6, [r4, #28]
 800ae66:	68f3      	ldr	r3, [r6, #12]
 800ae68:	b183      	cbz	r3, 800ae8c <_Balloc+0x50>
 800ae6a:	69e3      	ldr	r3, [r4, #28]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae72:	b9b8      	cbnz	r0, 800aea4 <_Balloc+0x68>
 800ae74:	2101      	movs	r1, #1
 800ae76:	fa01 f605 	lsl.w	r6, r1, r5
 800ae7a:	1d72      	adds	r2, r6, #5
 800ae7c:	0092      	lsls	r2, r2, #2
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f000 fdfc 	bl	800ba7c <_calloc_r>
 800ae84:	b160      	cbz	r0, 800aea0 <_Balloc+0x64>
 800ae86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae8a:	e00e      	b.n	800aeaa <_Balloc+0x6e>
 800ae8c:	2221      	movs	r2, #33	; 0x21
 800ae8e:	2104      	movs	r1, #4
 800ae90:	4620      	mov	r0, r4
 800ae92:	f000 fdf3 	bl	800ba7c <_calloc_r>
 800ae96:	69e3      	ldr	r3, [r4, #28]
 800ae98:	60f0      	str	r0, [r6, #12]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1e4      	bne.n	800ae6a <_Balloc+0x2e>
 800aea0:	2000      	movs	r0, #0
 800aea2:	bd70      	pop	{r4, r5, r6, pc}
 800aea4:	6802      	ldr	r2, [r0, #0]
 800aea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aeb0:	e7f7      	b.n	800aea2 <_Balloc+0x66>
 800aeb2:	bf00      	nop
 800aeb4:	0800cdfd 	.word	0x0800cdfd
 800aeb8:	0800ce7d 	.word	0x0800ce7d

0800aebc <_Bfree>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	69c6      	ldr	r6, [r0, #28]
 800aec0:	4605      	mov	r5, r0
 800aec2:	460c      	mov	r4, r1
 800aec4:	b976      	cbnz	r6, 800aee4 <_Bfree+0x28>
 800aec6:	2010      	movs	r0, #16
 800aec8:	f7ff ff04 	bl	800acd4 <malloc>
 800aecc:	4602      	mov	r2, r0
 800aece:	61e8      	str	r0, [r5, #28]
 800aed0:	b920      	cbnz	r0, 800aedc <_Bfree+0x20>
 800aed2:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <_Bfree+0x3c>)
 800aed4:	4809      	ldr	r0, [pc, #36]	; (800aefc <_Bfree+0x40>)
 800aed6:	218f      	movs	r1, #143	; 0x8f
 800aed8:	f000 fdb2 	bl	800ba40 <__assert_func>
 800aedc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aee0:	6006      	str	r6, [r0, #0]
 800aee2:	60c6      	str	r6, [r0, #12]
 800aee4:	b13c      	cbz	r4, 800aef6 <_Bfree+0x3a>
 800aee6:	69eb      	ldr	r3, [r5, #28]
 800aee8:	6862      	ldr	r2, [r4, #4]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aef0:	6021      	str	r1, [r4, #0]
 800aef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aef6:	bd70      	pop	{r4, r5, r6, pc}
 800aef8:	0800cdfd 	.word	0x0800cdfd
 800aefc:	0800ce7d 	.word	0x0800ce7d

0800af00 <__multadd>:
 800af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af04:	690d      	ldr	r5, [r1, #16]
 800af06:	4607      	mov	r7, r0
 800af08:	460c      	mov	r4, r1
 800af0a:	461e      	mov	r6, r3
 800af0c:	f101 0c14 	add.w	ip, r1, #20
 800af10:	2000      	movs	r0, #0
 800af12:	f8dc 3000 	ldr.w	r3, [ip]
 800af16:	b299      	uxth	r1, r3
 800af18:	fb02 6101 	mla	r1, r2, r1, r6
 800af1c:	0c1e      	lsrs	r6, r3, #16
 800af1e:	0c0b      	lsrs	r3, r1, #16
 800af20:	fb02 3306 	mla	r3, r2, r6, r3
 800af24:	b289      	uxth	r1, r1
 800af26:	3001      	adds	r0, #1
 800af28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af2c:	4285      	cmp	r5, r0
 800af2e:	f84c 1b04 	str.w	r1, [ip], #4
 800af32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af36:	dcec      	bgt.n	800af12 <__multadd+0x12>
 800af38:	b30e      	cbz	r6, 800af7e <__multadd+0x7e>
 800af3a:	68a3      	ldr	r3, [r4, #8]
 800af3c:	42ab      	cmp	r3, r5
 800af3e:	dc19      	bgt.n	800af74 <__multadd+0x74>
 800af40:	6861      	ldr	r1, [r4, #4]
 800af42:	4638      	mov	r0, r7
 800af44:	3101      	adds	r1, #1
 800af46:	f7ff ff79 	bl	800ae3c <_Balloc>
 800af4a:	4680      	mov	r8, r0
 800af4c:	b928      	cbnz	r0, 800af5a <__multadd+0x5a>
 800af4e:	4602      	mov	r2, r0
 800af50:	4b0c      	ldr	r3, [pc, #48]	; (800af84 <__multadd+0x84>)
 800af52:	480d      	ldr	r0, [pc, #52]	; (800af88 <__multadd+0x88>)
 800af54:	21ba      	movs	r1, #186	; 0xba
 800af56:	f000 fd73 	bl	800ba40 <__assert_func>
 800af5a:	6922      	ldr	r2, [r4, #16]
 800af5c:	3202      	adds	r2, #2
 800af5e:	f104 010c 	add.w	r1, r4, #12
 800af62:	0092      	lsls	r2, r2, #2
 800af64:	300c      	adds	r0, #12
 800af66:	f7fe ffde 	bl	8009f26 <memcpy>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4638      	mov	r0, r7
 800af6e:	f7ff ffa5 	bl	800aebc <_Bfree>
 800af72:	4644      	mov	r4, r8
 800af74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af78:	3501      	adds	r5, #1
 800af7a:	615e      	str	r6, [r3, #20]
 800af7c:	6125      	str	r5, [r4, #16]
 800af7e:	4620      	mov	r0, r4
 800af80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af84:	0800ce6c 	.word	0x0800ce6c
 800af88:	0800ce7d 	.word	0x0800ce7d

0800af8c <__hi0bits>:
 800af8c:	0c03      	lsrs	r3, r0, #16
 800af8e:	041b      	lsls	r3, r3, #16
 800af90:	b9d3      	cbnz	r3, 800afc8 <__hi0bits+0x3c>
 800af92:	0400      	lsls	r0, r0, #16
 800af94:	2310      	movs	r3, #16
 800af96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af9a:	bf04      	itt	eq
 800af9c:	0200      	lsleq	r0, r0, #8
 800af9e:	3308      	addeq	r3, #8
 800afa0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afa4:	bf04      	itt	eq
 800afa6:	0100      	lsleq	r0, r0, #4
 800afa8:	3304      	addeq	r3, #4
 800afaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afae:	bf04      	itt	eq
 800afb0:	0080      	lsleq	r0, r0, #2
 800afb2:	3302      	addeq	r3, #2
 800afb4:	2800      	cmp	r0, #0
 800afb6:	db05      	blt.n	800afc4 <__hi0bits+0x38>
 800afb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afbc:	f103 0301 	add.w	r3, r3, #1
 800afc0:	bf08      	it	eq
 800afc2:	2320      	moveq	r3, #32
 800afc4:	4618      	mov	r0, r3
 800afc6:	4770      	bx	lr
 800afc8:	2300      	movs	r3, #0
 800afca:	e7e4      	b.n	800af96 <__hi0bits+0xa>

0800afcc <__lo0bits>:
 800afcc:	6803      	ldr	r3, [r0, #0]
 800afce:	f013 0207 	ands.w	r2, r3, #7
 800afd2:	d00c      	beq.n	800afee <__lo0bits+0x22>
 800afd4:	07d9      	lsls	r1, r3, #31
 800afd6:	d422      	bmi.n	800b01e <__lo0bits+0x52>
 800afd8:	079a      	lsls	r2, r3, #30
 800afda:	bf49      	itett	mi
 800afdc:	085b      	lsrmi	r3, r3, #1
 800afde:	089b      	lsrpl	r3, r3, #2
 800afe0:	6003      	strmi	r3, [r0, #0]
 800afe2:	2201      	movmi	r2, #1
 800afe4:	bf5c      	itt	pl
 800afe6:	6003      	strpl	r3, [r0, #0]
 800afe8:	2202      	movpl	r2, #2
 800afea:	4610      	mov	r0, r2
 800afec:	4770      	bx	lr
 800afee:	b299      	uxth	r1, r3
 800aff0:	b909      	cbnz	r1, 800aff6 <__lo0bits+0x2a>
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	2210      	movs	r2, #16
 800aff6:	b2d9      	uxtb	r1, r3
 800aff8:	b909      	cbnz	r1, 800affe <__lo0bits+0x32>
 800affa:	3208      	adds	r2, #8
 800affc:	0a1b      	lsrs	r3, r3, #8
 800affe:	0719      	lsls	r1, r3, #28
 800b000:	bf04      	itt	eq
 800b002:	091b      	lsreq	r3, r3, #4
 800b004:	3204      	addeq	r2, #4
 800b006:	0799      	lsls	r1, r3, #30
 800b008:	bf04      	itt	eq
 800b00a:	089b      	lsreq	r3, r3, #2
 800b00c:	3202      	addeq	r2, #2
 800b00e:	07d9      	lsls	r1, r3, #31
 800b010:	d403      	bmi.n	800b01a <__lo0bits+0x4e>
 800b012:	085b      	lsrs	r3, r3, #1
 800b014:	f102 0201 	add.w	r2, r2, #1
 800b018:	d003      	beq.n	800b022 <__lo0bits+0x56>
 800b01a:	6003      	str	r3, [r0, #0]
 800b01c:	e7e5      	b.n	800afea <__lo0bits+0x1e>
 800b01e:	2200      	movs	r2, #0
 800b020:	e7e3      	b.n	800afea <__lo0bits+0x1e>
 800b022:	2220      	movs	r2, #32
 800b024:	e7e1      	b.n	800afea <__lo0bits+0x1e>
	...

0800b028 <__i2b>:
 800b028:	b510      	push	{r4, lr}
 800b02a:	460c      	mov	r4, r1
 800b02c:	2101      	movs	r1, #1
 800b02e:	f7ff ff05 	bl	800ae3c <_Balloc>
 800b032:	4602      	mov	r2, r0
 800b034:	b928      	cbnz	r0, 800b042 <__i2b+0x1a>
 800b036:	4b05      	ldr	r3, [pc, #20]	; (800b04c <__i2b+0x24>)
 800b038:	4805      	ldr	r0, [pc, #20]	; (800b050 <__i2b+0x28>)
 800b03a:	f240 1145 	movw	r1, #325	; 0x145
 800b03e:	f000 fcff 	bl	800ba40 <__assert_func>
 800b042:	2301      	movs	r3, #1
 800b044:	6144      	str	r4, [r0, #20]
 800b046:	6103      	str	r3, [r0, #16]
 800b048:	bd10      	pop	{r4, pc}
 800b04a:	bf00      	nop
 800b04c:	0800ce6c 	.word	0x0800ce6c
 800b050:	0800ce7d 	.word	0x0800ce7d

0800b054 <__multiply>:
 800b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b058:	4691      	mov	r9, r2
 800b05a:	690a      	ldr	r2, [r1, #16]
 800b05c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b060:	429a      	cmp	r2, r3
 800b062:	bfb8      	it	lt
 800b064:	460b      	movlt	r3, r1
 800b066:	460c      	mov	r4, r1
 800b068:	bfbc      	itt	lt
 800b06a:	464c      	movlt	r4, r9
 800b06c:	4699      	movlt	r9, r3
 800b06e:	6927      	ldr	r7, [r4, #16]
 800b070:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b074:	68a3      	ldr	r3, [r4, #8]
 800b076:	6861      	ldr	r1, [r4, #4]
 800b078:	eb07 060a 	add.w	r6, r7, sl
 800b07c:	42b3      	cmp	r3, r6
 800b07e:	b085      	sub	sp, #20
 800b080:	bfb8      	it	lt
 800b082:	3101      	addlt	r1, #1
 800b084:	f7ff feda 	bl	800ae3c <_Balloc>
 800b088:	b930      	cbnz	r0, 800b098 <__multiply+0x44>
 800b08a:	4602      	mov	r2, r0
 800b08c:	4b44      	ldr	r3, [pc, #272]	; (800b1a0 <__multiply+0x14c>)
 800b08e:	4845      	ldr	r0, [pc, #276]	; (800b1a4 <__multiply+0x150>)
 800b090:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b094:	f000 fcd4 	bl	800ba40 <__assert_func>
 800b098:	f100 0514 	add.w	r5, r0, #20
 800b09c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	4543      	cmp	r3, r8
 800b0a6:	d321      	bcc.n	800b0ec <__multiply+0x98>
 800b0a8:	f104 0314 	add.w	r3, r4, #20
 800b0ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0b0:	f109 0314 	add.w	r3, r9, #20
 800b0b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0b8:	9202      	str	r2, [sp, #8]
 800b0ba:	1b3a      	subs	r2, r7, r4
 800b0bc:	3a15      	subs	r2, #21
 800b0be:	f022 0203 	bic.w	r2, r2, #3
 800b0c2:	3204      	adds	r2, #4
 800b0c4:	f104 0115 	add.w	r1, r4, #21
 800b0c8:	428f      	cmp	r7, r1
 800b0ca:	bf38      	it	cc
 800b0cc:	2204      	movcc	r2, #4
 800b0ce:	9201      	str	r2, [sp, #4]
 800b0d0:	9a02      	ldr	r2, [sp, #8]
 800b0d2:	9303      	str	r3, [sp, #12]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d80c      	bhi.n	800b0f2 <__multiply+0x9e>
 800b0d8:	2e00      	cmp	r6, #0
 800b0da:	dd03      	ble.n	800b0e4 <__multiply+0x90>
 800b0dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d05b      	beq.n	800b19c <__multiply+0x148>
 800b0e4:	6106      	str	r6, [r0, #16]
 800b0e6:	b005      	add	sp, #20
 800b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ec:	f843 2b04 	str.w	r2, [r3], #4
 800b0f0:	e7d8      	b.n	800b0a4 <__multiply+0x50>
 800b0f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0f6:	f1ba 0f00 	cmp.w	sl, #0
 800b0fa:	d024      	beq.n	800b146 <__multiply+0xf2>
 800b0fc:	f104 0e14 	add.w	lr, r4, #20
 800b100:	46a9      	mov	r9, r5
 800b102:	f04f 0c00 	mov.w	ip, #0
 800b106:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b10a:	f8d9 1000 	ldr.w	r1, [r9]
 800b10e:	fa1f fb82 	uxth.w	fp, r2
 800b112:	b289      	uxth	r1, r1
 800b114:	fb0a 110b 	mla	r1, sl, fp, r1
 800b118:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b11c:	f8d9 2000 	ldr.w	r2, [r9]
 800b120:	4461      	add	r1, ip
 800b122:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b126:	fb0a c20b 	mla	r2, sl, fp, ip
 800b12a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b12e:	b289      	uxth	r1, r1
 800b130:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b134:	4577      	cmp	r7, lr
 800b136:	f849 1b04 	str.w	r1, [r9], #4
 800b13a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b13e:	d8e2      	bhi.n	800b106 <__multiply+0xb2>
 800b140:	9a01      	ldr	r2, [sp, #4]
 800b142:	f845 c002 	str.w	ip, [r5, r2]
 800b146:	9a03      	ldr	r2, [sp, #12]
 800b148:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b14c:	3304      	adds	r3, #4
 800b14e:	f1b9 0f00 	cmp.w	r9, #0
 800b152:	d021      	beq.n	800b198 <__multiply+0x144>
 800b154:	6829      	ldr	r1, [r5, #0]
 800b156:	f104 0c14 	add.w	ip, r4, #20
 800b15a:	46ae      	mov	lr, r5
 800b15c:	f04f 0a00 	mov.w	sl, #0
 800b160:	f8bc b000 	ldrh.w	fp, [ip]
 800b164:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b168:	fb09 220b 	mla	r2, r9, fp, r2
 800b16c:	4452      	add	r2, sl
 800b16e:	b289      	uxth	r1, r1
 800b170:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b174:	f84e 1b04 	str.w	r1, [lr], #4
 800b178:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b17c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b180:	f8be 1000 	ldrh.w	r1, [lr]
 800b184:	fb09 110a 	mla	r1, r9, sl, r1
 800b188:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b18c:	4567      	cmp	r7, ip
 800b18e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b192:	d8e5      	bhi.n	800b160 <__multiply+0x10c>
 800b194:	9a01      	ldr	r2, [sp, #4]
 800b196:	50a9      	str	r1, [r5, r2]
 800b198:	3504      	adds	r5, #4
 800b19a:	e799      	b.n	800b0d0 <__multiply+0x7c>
 800b19c:	3e01      	subs	r6, #1
 800b19e:	e79b      	b.n	800b0d8 <__multiply+0x84>
 800b1a0:	0800ce6c 	.word	0x0800ce6c
 800b1a4:	0800ce7d 	.word	0x0800ce7d

0800b1a8 <__pow5mult>:
 800b1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ac:	4615      	mov	r5, r2
 800b1ae:	f012 0203 	ands.w	r2, r2, #3
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	460f      	mov	r7, r1
 800b1b6:	d007      	beq.n	800b1c8 <__pow5mult+0x20>
 800b1b8:	4c25      	ldr	r4, [pc, #148]	; (800b250 <__pow5mult+0xa8>)
 800b1ba:	3a01      	subs	r2, #1
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1c2:	f7ff fe9d 	bl	800af00 <__multadd>
 800b1c6:	4607      	mov	r7, r0
 800b1c8:	10ad      	asrs	r5, r5, #2
 800b1ca:	d03d      	beq.n	800b248 <__pow5mult+0xa0>
 800b1cc:	69f4      	ldr	r4, [r6, #28]
 800b1ce:	b97c      	cbnz	r4, 800b1f0 <__pow5mult+0x48>
 800b1d0:	2010      	movs	r0, #16
 800b1d2:	f7ff fd7f 	bl	800acd4 <malloc>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	61f0      	str	r0, [r6, #28]
 800b1da:	b928      	cbnz	r0, 800b1e8 <__pow5mult+0x40>
 800b1dc:	4b1d      	ldr	r3, [pc, #116]	; (800b254 <__pow5mult+0xac>)
 800b1de:	481e      	ldr	r0, [pc, #120]	; (800b258 <__pow5mult+0xb0>)
 800b1e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b1e4:	f000 fc2c 	bl	800ba40 <__assert_func>
 800b1e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1ec:	6004      	str	r4, [r0, #0]
 800b1ee:	60c4      	str	r4, [r0, #12]
 800b1f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b1f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1f8:	b94c      	cbnz	r4, 800b20e <__pow5mult+0x66>
 800b1fa:	f240 2171 	movw	r1, #625	; 0x271
 800b1fe:	4630      	mov	r0, r6
 800b200:	f7ff ff12 	bl	800b028 <__i2b>
 800b204:	2300      	movs	r3, #0
 800b206:	f8c8 0008 	str.w	r0, [r8, #8]
 800b20a:	4604      	mov	r4, r0
 800b20c:	6003      	str	r3, [r0, #0]
 800b20e:	f04f 0900 	mov.w	r9, #0
 800b212:	07eb      	lsls	r3, r5, #31
 800b214:	d50a      	bpl.n	800b22c <__pow5mult+0x84>
 800b216:	4639      	mov	r1, r7
 800b218:	4622      	mov	r2, r4
 800b21a:	4630      	mov	r0, r6
 800b21c:	f7ff ff1a 	bl	800b054 <__multiply>
 800b220:	4639      	mov	r1, r7
 800b222:	4680      	mov	r8, r0
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff fe49 	bl	800aebc <_Bfree>
 800b22a:	4647      	mov	r7, r8
 800b22c:	106d      	asrs	r5, r5, #1
 800b22e:	d00b      	beq.n	800b248 <__pow5mult+0xa0>
 800b230:	6820      	ldr	r0, [r4, #0]
 800b232:	b938      	cbnz	r0, 800b244 <__pow5mult+0x9c>
 800b234:	4622      	mov	r2, r4
 800b236:	4621      	mov	r1, r4
 800b238:	4630      	mov	r0, r6
 800b23a:	f7ff ff0b 	bl	800b054 <__multiply>
 800b23e:	6020      	str	r0, [r4, #0]
 800b240:	f8c0 9000 	str.w	r9, [r0]
 800b244:	4604      	mov	r4, r0
 800b246:	e7e4      	b.n	800b212 <__pow5mult+0x6a>
 800b248:	4638      	mov	r0, r7
 800b24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24e:	bf00      	nop
 800b250:	0800cfc8 	.word	0x0800cfc8
 800b254:	0800cdfd 	.word	0x0800cdfd
 800b258:	0800ce7d 	.word	0x0800ce7d

0800b25c <__lshift>:
 800b25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b260:	460c      	mov	r4, r1
 800b262:	6849      	ldr	r1, [r1, #4]
 800b264:	6923      	ldr	r3, [r4, #16]
 800b266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b26a:	68a3      	ldr	r3, [r4, #8]
 800b26c:	4607      	mov	r7, r0
 800b26e:	4691      	mov	r9, r2
 800b270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b274:	f108 0601 	add.w	r6, r8, #1
 800b278:	42b3      	cmp	r3, r6
 800b27a:	db0b      	blt.n	800b294 <__lshift+0x38>
 800b27c:	4638      	mov	r0, r7
 800b27e:	f7ff fddd 	bl	800ae3c <_Balloc>
 800b282:	4605      	mov	r5, r0
 800b284:	b948      	cbnz	r0, 800b29a <__lshift+0x3e>
 800b286:	4602      	mov	r2, r0
 800b288:	4b28      	ldr	r3, [pc, #160]	; (800b32c <__lshift+0xd0>)
 800b28a:	4829      	ldr	r0, [pc, #164]	; (800b330 <__lshift+0xd4>)
 800b28c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b290:	f000 fbd6 	bl	800ba40 <__assert_func>
 800b294:	3101      	adds	r1, #1
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	e7ee      	b.n	800b278 <__lshift+0x1c>
 800b29a:	2300      	movs	r3, #0
 800b29c:	f100 0114 	add.w	r1, r0, #20
 800b2a0:	f100 0210 	add.w	r2, r0, #16
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	4553      	cmp	r3, sl
 800b2a8:	db33      	blt.n	800b312 <__lshift+0xb6>
 800b2aa:	6920      	ldr	r0, [r4, #16]
 800b2ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2b0:	f104 0314 	add.w	r3, r4, #20
 800b2b4:	f019 091f 	ands.w	r9, r9, #31
 800b2b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2c0:	d02b      	beq.n	800b31a <__lshift+0xbe>
 800b2c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b2c6:	468a      	mov	sl, r1
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	6818      	ldr	r0, [r3, #0]
 800b2cc:	fa00 f009 	lsl.w	r0, r0, r9
 800b2d0:	4310      	orrs	r0, r2
 800b2d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2da:	459c      	cmp	ip, r3
 800b2dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2e0:	d8f3      	bhi.n	800b2ca <__lshift+0x6e>
 800b2e2:	ebac 0304 	sub.w	r3, ip, r4
 800b2e6:	3b15      	subs	r3, #21
 800b2e8:	f023 0303 	bic.w	r3, r3, #3
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	f104 0015 	add.w	r0, r4, #21
 800b2f2:	4584      	cmp	ip, r0
 800b2f4:	bf38      	it	cc
 800b2f6:	2304      	movcc	r3, #4
 800b2f8:	50ca      	str	r2, [r1, r3]
 800b2fa:	b10a      	cbz	r2, 800b300 <__lshift+0xa4>
 800b2fc:	f108 0602 	add.w	r6, r8, #2
 800b300:	3e01      	subs	r6, #1
 800b302:	4638      	mov	r0, r7
 800b304:	612e      	str	r6, [r5, #16]
 800b306:	4621      	mov	r1, r4
 800b308:	f7ff fdd8 	bl	800aebc <_Bfree>
 800b30c:	4628      	mov	r0, r5
 800b30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b312:	f842 0f04 	str.w	r0, [r2, #4]!
 800b316:	3301      	adds	r3, #1
 800b318:	e7c5      	b.n	800b2a6 <__lshift+0x4a>
 800b31a:	3904      	subs	r1, #4
 800b31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b320:	f841 2f04 	str.w	r2, [r1, #4]!
 800b324:	459c      	cmp	ip, r3
 800b326:	d8f9      	bhi.n	800b31c <__lshift+0xc0>
 800b328:	e7ea      	b.n	800b300 <__lshift+0xa4>
 800b32a:	bf00      	nop
 800b32c:	0800ce6c 	.word	0x0800ce6c
 800b330:	0800ce7d 	.word	0x0800ce7d

0800b334 <__mcmp>:
 800b334:	b530      	push	{r4, r5, lr}
 800b336:	6902      	ldr	r2, [r0, #16]
 800b338:	690c      	ldr	r4, [r1, #16]
 800b33a:	1b12      	subs	r2, r2, r4
 800b33c:	d10e      	bne.n	800b35c <__mcmp+0x28>
 800b33e:	f100 0314 	add.w	r3, r0, #20
 800b342:	3114      	adds	r1, #20
 800b344:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b348:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b34c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b350:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b354:	42a5      	cmp	r5, r4
 800b356:	d003      	beq.n	800b360 <__mcmp+0x2c>
 800b358:	d305      	bcc.n	800b366 <__mcmp+0x32>
 800b35a:	2201      	movs	r2, #1
 800b35c:	4610      	mov	r0, r2
 800b35e:	bd30      	pop	{r4, r5, pc}
 800b360:	4283      	cmp	r3, r0
 800b362:	d3f3      	bcc.n	800b34c <__mcmp+0x18>
 800b364:	e7fa      	b.n	800b35c <__mcmp+0x28>
 800b366:	f04f 32ff 	mov.w	r2, #4294967295
 800b36a:	e7f7      	b.n	800b35c <__mcmp+0x28>

0800b36c <__mdiff>:
 800b36c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b370:	460c      	mov	r4, r1
 800b372:	4606      	mov	r6, r0
 800b374:	4611      	mov	r1, r2
 800b376:	4620      	mov	r0, r4
 800b378:	4690      	mov	r8, r2
 800b37a:	f7ff ffdb 	bl	800b334 <__mcmp>
 800b37e:	1e05      	subs	r5, r0, #0
 800b380:	d110      	bne.n	800b3a4 <__mdiff+0x38>
 800b382:	4629      	mov	r1, r5
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff fd59 	bl	800ae3c <_Balloc>
 800b38a:	b930      	cbnz	r0, 800b39a <__mdiff+0x2e>
 800b38c:	4b3a      	ldr	r3, [pc, #232]	; (800b478 <__mdiff+0x10c>)
 800b38e:	4602      	mov	r2, r0
 800b390:	f240 2137 	movw	r1, #567	; 0x237
 800b394:	4839      	ldr	r0, [pc, #228]	; (800b47c <__mdiff+0x110>)
 800b396:	f000 fb53 	bl	800ba40 <__assert_func>
 800b39a:	2301      	movs	r3, #1
 800b39c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a4:	bfa4      	itt	ge
 800b3a6:	4643      	movge	r3, r8
 800b3a8:	46a0      	movge	r8, r4
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3b0:	bfa6      	itte	ge
 800b3b2:	461c      	movge	r4, r3
 800b3b4:	2500      	movge	r5, #0
 800b3b6:	2501      	movlt	r5, #1
 800b3b8:	f7ff fd40 	bl	800ae3c <_Balloc>
 800b3bc:	b920      	cbnz	r0, 800b3c8 <__mdiff+0x5c>
 800b3be:	4b2e      	ldr	r3, [pc, #184]	; (800b478 <__mdiff+0x10c>)
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	f240 2145 	movw	r1, #581	; 0x245
 800b3c6:	e7e5      	b.n	800b394 <__mdiff+0x28>
 800b3c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3cc:	6926      	ldr	r6, [r4, #16]
 800b3ce:	60c5      	str	r5, [r0, #12]
 800b3d0:	f104 0914 	add.w	r9, r4, #20
 800b3d4:	f108 0514 	add.w	r5, r8, #20
 800b3d8:	f100 0e14 	add.w	lr, r0, #20
 800b3dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b3e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3e4:	f108 0210 	add.w	r2, r8, #16
 800b3e8:	46f2      	mov	sl, lr
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3f4:	fa11 f88b 	uxtah	r8, r1, fp
 800b3f8:	b299      	uxth	r1, r3
 800b3fa:	0c1b      	lsrs	r3, r3, #16
 800b3fc:	eba8 0801 	sub.w	r8, r8, r1
 800b400:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b404:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b408:	fa1f f888 	uxth.w	r8, r8
 800b40c:	1419      	asrs	r1, r3, #16
 800b40e:	454e      	cmp	r6, r9
 800b410:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b414:	f84a 3b04 	str.w	r3, [sl], #4
 800b418:	d8e8      	bhi.n	800b3ec <__mdiff+0x80>
 800b41a:	1b33      	subs	r3, r6, r4
 800b41c:	3b15      	subs	r3, #21
 800b41e:	f023 0303 	bic.w	r3, r3, #3
 800b422:	3304      	adds	r3, #4
 800b424:	3415      	adds	r4, #21
 800b426:	42a6      	cmp	r6, r4
 800b428:	bf38      	it	cc
 800b42a:	2304      	movcc	r3, #4
 800b42c:	441d      	add	r5, r3
 800b42e:	4473      	add	r3, lr
 800b430:	469e      	mov	lr, r3
 800b432:	462e      	mov	r6, r5
 800b434:	4566      	cmp	r6, ip
 800b436:	d30e      	bcc.n	800b456 <__mdiff+0xea>
 800b438:	f10c 0203 	add.w	r2, ip, #3
 800b43c:	1b52      	subs	r2, r2, r5
 800b43e:	f022 0203 	bic.w	r2, r2, #3
 800b442:	3d03      	subs	r5, #3
 800b444:	45ac      	cmp	ip, r5
 800b446:	bf38      	it	cc
 800b448:	2200      	movcc	r2, #0
 800b44a:	4413      	add	r3, r2
 800b44c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b450:	b17a      	cbz	r2, 800b472 <__mdiff+0x106>
 800b452:	6107      	str	r7, [r0, #16]
 800b454:	e7a4      	b.n	800b3a0 <__mdiff+0x34>
 800b456:	f856 8b04 	ldr.w	r8, [r6], #4
 800b45a:	fa11 f288 	uxtah	r2, r1, r8
 800b45e:	1414      	asrs	r4, r2, #16
 800b460:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b464:	b292      	uxth	r2, r2
 800b466:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b46a:	f84e 2b04 	str.w	r2, [lr], #4
 800b46e:	1421      	asrs	r1, r4, #16
 800b470:	e7e0      	b.n	800b434 <__mdiff+0xc8>
 800b472:	3f01      	subs	r7, #1
 800b474:	e7ea      	b.n	800b44c <__mdiff+0xe0>
 800b476:	bf00      	nop
 800b478:	0800ce6c 	.word	0x0800ce6c
 800b47c:	0800ce7d 	.word	0x0800ce7d

0800b480 <__d2b>:
 800b480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b484:	460f      	mov	r7, r1
 800b486:	2101      	movs	r1, #1
 800b488:	ec59 8b10 	vmov	r8, r9, d0
 800b48c:	4616      	mov	r6, r2
 800b48e:	f7ff fcd5 	bl	800ae3c <_Balloc>
 800b492:	4604      	mov	r4, r0
 800b494:	b930      	cbnz	r0, 800b4a4 <__d2b+0x24>
 800b496:	4602      	mov	r2, r0
 800b498:	4b24      	ldr	r3, [pc, #144]	; (800b52c <__d2b+0xac>)
 800b49a:	4825      	ldr	r0, [pc, #148]	; (800b530 <__d2b+0xb0>)
 800b49c:	f240 310f 	movw	r1, #783	; 0x30f
 800b4a0:	f000 face 	bl	800ba40 <__assert_func>
 800b4a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b4a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4ac:	bb2d      	cbnz	r5, 800b4fa <__d2b+0x7a>
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	f1b8 0300 	subs.w	r3, r8, #0
 800b4b4:	d026      	beq.n	800b504 <__d2b+0x84>
 800b4b6:	4668      	mov	r0, sp
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	f7ff fd87 	bl	800afcc <__lo0bits>
 800b4be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b4c2:	b1e8      	cbz	r0, 800b500 <__d2b+0x80>
 800b4c4:	f1c0 0320 	rsb	r3, r0, #32
 800b4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4cc:	430b      	orrs	r3, r1
 800b4ce:	40c2      	lsrs	r2, r0
 800b4d0:	6163      	str	r3, [r4, #20]
 800b4d2:	9201      	str	r2, [sp, #4]
 800b4d4:	9b01      	ldr	r3, [sp, #4]
 800b4d6:	61a3      	str	r3, [r4, #24]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	bf14      	ite	ne
 800b4dc:	2202      	movne	r2, #2
 800b4de:	2201      	moveq	r2, #1
 800b4e0:	6122      	str	r2, [r4, #16]
 800b4e2:	b1bd      	cbz	r5, 800b514 <__d2b+0x94>
 800b4e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4e8:	4405      	add	r5, r0
 800b4ea:	603d      	str	r5, [r7, #0]
 800b4ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4f0:	6030      	str	r0, [r6, #0]
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	b003      	add	sp, #12
 800b4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4fe:	e7d6      	b.n	800b4ae <__d2b+0x2e>
 800b500:	6161      	str	r1, [r4, #20]
 800b502:	e7e7      	b.n	800b4d4 <__d2b+0x54>
 800b504:	a801      	add	r0, sp, #4
 800b506:	f7ff fd61 	bl	800afcc <__lo0bits>
 800b50a:	9b01      	ldr	r3, [sp, #4]
 800b50c:	6163      	str	r3, [r4, #20]
 800b50e:	3020      	adds	r0, #32
 800b510:	2201      	movs	r2, #1
 800b512:	e7e5      	b.n	800b4e0 <__d2b+0x60>
 800b514:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b518:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b51c:	6038      	str	r0, [r7, #0]
 800b51e:	6918      	ldr	r0, [r3, #16]
 800b520:	f7ff fd34 	bl	800af8c <__hi0bits>
 800b524:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b528:	e7e2      	b.n	800b4f0 <__d2b+0x70>
 800b52a:	bf00      	nop
 800b52c:	0800ce6c 	.word	0x0800ce6c
 800b530:	0800ce7d 	.word	0x0800ce7d

0800b534 <__sfputc_r>:
 800b534:	6893      	ldr	r3, [r2, #8]
 800b536:	3b01      	subs	r3, #1
 800b538:	2b00      	cmp	r3, #0
 800b53a:	b410      	push	{r4}
 800b53c:	6093      	str	r3, [r2, #8]
 800b53e:	da08      	bge.n	800b552 <__sfputc_r+0x1e>
 800b540:	6994      	ldr	r4, [r2, #24]
 800b542:	42a3      	cmp	r3, r4
 800b544:	db01      	blt.n	800b54a <__sfputc_r+0x16>
 800b546:	290a      	cmp	r1, #10
 800b548:	d103      	bne.n	800b552 <__sfputc_r+0x1e>
 800b54a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b54e:	f7fe bbd6 	b.w	8009cfe <__swbuf_r>
 800b552:	6813      	ldr	r3, [r2, #0]
 800b554:	1c58      	adds	r0, r3, #1
 800b556:	6010      	str	r0, [r2, #0]
 800b558:	7019      	strb	r1, [r3, #0]
 800b55a:	4608      	mov	r0, r1
 800b55c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <__sfputs_r>:
 800b562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b564:	4606      	mov	r6, r0
 800b566:	460f      	mov	r7, r1
 800b568:	4614      	mov	r4, r2
 800b56a:	18d5      	adds	r5, r2, r3
 800b56c:	42ac      	cmp	r4, r5
 800b56e:	d101      	bne.n	800b574 <__sfputs_r+0x12>
 800b570:	2000      	movs	r0, #0
 800b572:	e007      	b.n	800b584 <__sfputs_r+0x22>
 800b574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b578:	463a      	mov	r2, r7
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ffda 	bl	800b534 <__sfputc_r>
 800b580:	1c43      	adds	r3, r0, #1
 800b582:	d1f3      	bne.n	800b56c <__sfputs_r+0xa>
 800b584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b588 <_vfiprintf_r>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	460d      	mov	r5, r1
 800b58e:	b09d      	sub	sp, #116	; 0x74
 800b590:	4614      	mov	r4, r2
 800b592:	4698      	mov	r8, r3
 800b594:	4606      	mov	r6, r0
 800b596:	b118      	cbz	r0, 800b5a0 <_vfiprintf_r+0x18>
 800b598:	6a03      	ldr	r3, [r0, #32]
 800b59a:	b90b      	cbnz	r3, 800b5a0 <_vfiprintf_r+0x18>
 800b59c:	f7fe fac8 	bl	8009b30 <__sinit>
 800b5a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5a2:	07d9      	lsls	r1, r3, #31
 800b5a4:	d405      	bmi.n	800b5b2 <_vfiprintf_r+0x2a>
 800b5a6:	89ab      	ldrh	r3, [r5, #12]
 800b5a8:	059a      	lsls	r2, r3, #22
 800b5aa:	d402      	bmi.n	800b5b2 <_vfiprintf_r+0x2a>
 800b5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5ae:	f7fe fcb8 	bl	8009f22 <__retarget_lock_acquire_recursive>
 800b5b2:	89ab      	ldrh	r3, [r5, #12]
 800b5b4:	071b      	lsls	r3, r3, #28
 800b5b6:	d501      	bpl.n	800b5bc <_vfiprintf_r+0x34>
 800b5b8:	692b      	ldr	r3, [r5, #16]
 800b5ba:	b99b      	cbnz	r3, 800b5e4 <_vfiprintf_r+0x5c>
 800b5bc:	4629      	mov	r1, r5
 800b5be:	4630      	mov	r0, r6
 800b5c0:	f7fe fbda 	bl	8009d78 <__swsetup_r>
 800b5c4:	b170      	cbz	r0, 800b5e4 <_vfiprintf_r+0x5c>
 800b5c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5c8:	07dc      	lsls	r4, r3, #31
 800b5ca:	d504      	bpl.n	800b5d6 <_vfiprintf_r+0x4e>
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	b01d      	add	sp, #116	; 0x74
 800b5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d6:	89ab      	ldrh	r3, [r5, #12]
 800b5d8:	0598      	lsls	r0, r3, #22
 800b5da:	d4f7      	bmi.n	800b5cc <_vfiprintf_r+0x44>
 800b5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5de:	f7fe fca1 	bl	8009f24 <__retarget_lock_release_recursive>
 800b5e2:	e7f3      	b.n	800b5cc <_vfiprintf_r+0x44>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e8:	2320      	movs	r3, #32
 800b5ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5f2:	2330      	movs	r3, #48	; 0x30
 800b5f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b7a8 <_vfiprintf_r+0x220>
 800b5f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5fc:	f04f 0901 	mov.w	r9, #1
 800b600:	4623      	mov	r3, r4
 800b602:	469a      	mov	sl, r3
 800b604:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b608:	b10a      	cbz	r2, 800b60e <_vfiprintf_r+0x86>
 800b60a:	2a25      	cmp	r2, #37	; 0x25
 800b60c:	d1f9      	bne.n	800b602 <_vfiprintf_r+0x7a>
 800b60e:	ebba 0b04 	subs.w	fp, sl, r4
 800b612:	d00b      	beq.n	800b62c <_vfiprintf_r+0xa4>
 800b614:	465b      	mov	r3, fp
 800b616:	4622      	mov	r2, r4
 800b618:	4629      	mov	r1, r5
 800b61a:	4630      	mov	r0, r6
 800b61c:	f7ff ffa1 	bl	800b562 <__sfputs_r>
 800b620:	3001      	adds	r0, #1
 800b622:	f000 80a9 	beq.w	800b778 <_vfiprintf_r+0x1f0>
 800b626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b628:	445a      	add	r2, fp
 800b62a:	9209      	str	r2, [sp, #36]	; 0x24
 800b62c:	f89a 3000 	ldrb.w	r3, [sl]
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 80a1 	beq.w	800b778 <_vfiprintf_r+0x1f0>
 800b636:	2300      	movs	r3, #0
 800b638:	f04f 32ff 	mov.w	r2, #4294967295
 800b63c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b640:	f10a 0a01 	add.w	sl, sl, #1
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	9307      	str	r3, [sp, #28]
 800b648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b64c:	931a      	str	r3, [sp, #104]	; 0x68
 800b64e:	4654      	mov	r4, sl
 800b650:	2205      	movs	r2, #5
 800b652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b656:	4854      	ldr	r0, [pc, #336]	; (800b7a8 <_vfiprintf_r+0x220>)
 800b658:	f7f4 fdc2 	bl	80001e0 <memchr>
 800b65c:	9a04      	ldr	r2, [sp, #16]
 800b65e:	b9d8      	cbnz	r0, 800b698 <_vfiprintf_r+0x110>
 800b660:	06d1      	lsls	r1, r2, #27
 800b662:	bf44      	itt	mi
 800b664:	2320      	movmi	r3, #32
 800b666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b66a:	0713      	lsls	r3, r2, #28
 800b66c:	bf44      	itt	mi
 800b66e:	232b      	movmi	r3, #43	; 0x2b
 800b670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b674:	f89a 3000 	ldrb.w	r3, [sl]
 800b678:	2b2a      	cmp	r3, #42	; 0x2a
 800b67a:	d015      	beq.n	800b6a8 <_vfiprintf_r+0x120>
 800b67c:	9a07      	ldr	r2, [sp, #28]
 800b67e:	4654      	mov	r4, sl
 800b680:	2000      	movs	r0, #0
 800b682:	f04f 0c0a 	mov.w	ip, #10
 800b686:	4621      	mov	r1, r4
 800b688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b68c:	3b30      	subs	r3, #48	; 0x30
 800b68e:	2b09      	cmp	r3, #9
 800b690:	d94d      	bls.n	800b72e <_vfiprintf_r+0x1a6>
 800b692:	b1b0      	cbz	r0, 800b6c2 <_vfiprintf_r+0x13a>
 800b694:	9207      	str	r2, [sp, #28]
 800b696:	e014      	b.n	800b6c2 <_vfiprintf_r+0x13a>
 800b698:	eba0 0308 	sub.w	r3, r0, r8
 800b69c:	fa09 f303 	lsl.w	r3, r9, r3
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	9304      	str	r3, [sp, #16]
 800b6a4:	46a2      	mov	sl, r4
 800b6a6:	e7d2      	b.n	800b64e <_vfiprintf_r+0xc6>
 800b6a8:	9b03      	ldr	r3, [sp, #12]
 800b6aa:	1d19      	adds	r1, r3, #4
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	9103      	str	r1, [sp, #12]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	bfbb      	ittet	lt
 800b6b4:	425b      	neglt	r3, r3
 800b6b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b6ba:	9307      	strge	r3, [sp, #28]
 800b6bc:	9307      	strlt	r3, [sp, #28]
 800b6be:	bfb8      	it	lt
 800b6c0:	9204      	strlt	r2, [sp, #16]
 800b6c2:	7823      	ldrb	r3, [r4, #0]
 800b6c4:	2b2e      	cmp	r3, #46	; 0x2e
 800b6c6:	d10c      	bne.n	800b6e2 <_vfiprintf_r+0x15a>
 800b6c8:	7863      	ldrb	r3, [r4, #1]
 800b6ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b6cc:	d134      	bne.n	800b738 <_vfiprintf_r+0x1b0>
 800b6ce:	9b03      	ldr	r3, [sp, #12]
 800b6d0:	1d1a      	adds	r2, r3, #4
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	9203      	str	r2, [sp, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	bfb8      	it	lt
 800b6da:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6de:	3402      	adds	r4, #2
 800b6e0:	9305      	str	r3, [sp, #20]
 800b6e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b7b8 <_vfiprintf_r+0x230>
 800b6e6:	7821      	ldrb	r1, [r4, #0]
 800b6e8:	2203      	movs	r2, #3
 800b6ea:	4650      	mov	r0, sl
 800b6ec:	f7f4 fd78 	bl	80001e0 <memchr>
 800b6f0:	b138      	cbz	r0, 800b702 <_vfiprintf_r+0x17a>
 800b6f2:	9b04      	ldr	r3, [sp, #16]
 800b6f4:	eba0 000a 	sub.w	r0, r0, sl
 800b6f8:	2240      	movs	r2, #64	; 0x40
 800b6fa:	4082      	lsls	r2, r0
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	3401      	adds	r4, #1
 800b700:	9304      	str	r3, [sp, #16]
 800b702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b706:	4829      	ldr	r0, [pc, #164]	; (800b7ac <_vfiprintf_r+0x224>)
 800b708:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b70c:	2206      	movs	r2, #6
 800b70e:	f7f4 fd67 	bl	80001e0 <memchr>
 800b712:	2800      	cmp	r0, #0
 800b714:	d03f      	beq.n	800b796 <_vfiprintf_r+0x20e>
 800b716:	4b26      	ldr	r3, [pc, #152]	; (800b7b0 <_vfiprintf_r+0x228>)
 800b718:	bb1b      	cbnz	r3, 800b762 <_vfiprintf_r+0x1da>
 800b71a:	9b03      	ldr	r3, [sp, #12]
 800b71c:	3307      	adds	r3, #7
 800b71e:	f023 0307 	bic.w	r3, r3, #7
 800b722:	3308      	adds	r3, #8
 800b724:	9303      	str	r3, [sp, #12]
 800b726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b728:	443b      	add	r3, r7
 800b72a:	9309      	str	r3, [sp, #36]	; 0x24
 800b72c:	e768      	b.n	800b600 <_vfiprintf_r+0x78>
 800b72e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b732:	460c      	mov	r4, r1
 800b734:	2001      	movs	r0, #1
 800b736:	e7a6      	b.n	800b686 <_vfiprintf_r+0xfe>
 800b738:	2300      	movs	r3, #0
 800b73a:	3401      	adds	r4, #1
 800b73c:	9305      	str	r3, [sp, #20]
 800b73e:	4619      	mov	r1, r3
 800b740:	f04f 0c0a 	mov.w	ip, #10
 800b744:	4620      	mov	r0, r4
 800b746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b74a:	3a30      	subs	r2, #48	; 0x30
 800b74c:	2a09      	cmp	r2, #9
 800b74e:	d903      	bls.n	800b758 <_vfiprintf_r+0x1d0>
 800b750:	2b00      	cmp	r3, #0
 800b752:	d0c6      	beq.n	800b6e2 <_vfiprintf_r+0x15a>
 800b754:	9105      	str	r1, [sp, #20]
 800b756:	e7c4      	b.n	800b6e2 <_vfiprintf_r+0x15a>
 800b758:	fb0c 2101 	mla	r1, ip, r1, r2
 800b75c:	4604      	mov	r4, r0
 800b75e:	2301      	movs	r3, #1
 800b760:	e7f0      	b.n	800b744 <_vfiprintf_r+0x1bc>
 800b762:	ab03      	add	r3, sp, #12
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	462a      	mov	r2, r5
 800b768:	4b12      	ldr	r3, [pc, #72]	; (800b7b4 <_vfiprintf_r+0x22c>)
 800b76a:	a904      	add	r1, sp, #16
 800b76c:	4630      	mov	r0, r6
 800b76e:	f7fd fd8d 	bl	800928c <_printf_float>
 800b772:	4607      	mov	r7, r0
 800b774:	1c78      	adds	r0, r7, #1
 800b776:	d1d6      	bne.n	800b726 <_vfiprintf_r+0x19e>
 800b778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b77a:	07d9      	lsls	r1, r3, #31
 800b77c:	d405      	bmi.n	800b78a <_vfiprintf_r+0x202>
 800b77e:	89ab      	ldrh	r3, [r5, #12]
 800b780:	059a      	lsls	r2, r3, #22
 800b782:	d402      	bmi.n	800b78a <_vfiprintf_r+0x202>
 800b784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b786:	f7fe fbcd 	bl	8009f24 <__retarget_lock_release_recursive>
 800b78a:	89ab      	ldrh	r3, [r5, #12]
 800b78c:	065b      	lsls	r3, r3, #25
 800b78e:	f53f af1d 	bmi.w	800b5cc <_vfiprintf_r+0x44>
 800b792:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b794:	e71c      	b.n	800b5d0 <_vfiprintf_r+0x48>
 800b796:	ab03      	add	r3, sp, #12
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	462a      	mov	r2, r5
 800b79c:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <_vfiprintf_r+0x22c>)
 800b79e:	a904      	add	r1, sp, #16
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7fe f817 	bl	80097d4 <_printf_i>
 800b7a6:	e7e4      	b.n	800b772 <_vfiprintf_r+0x1ea>
 800b7a8:	0800cfd4 	.word	0x0800cfd4
 800b7ac:	0800cfde 	.word	0x0800cfde
 800b7b0:	0800928d 	.word	0x0800928d
 800b7b4:	0800b563 	.word	0x0800b563
 800b7b8:	0800cfda 	.word	0x0800cfda

0800b7bc <__sflush_r>:
 800b7bc:	898a      	ldrh	r2, [r1, #12]
 800b7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c2:	4605      	mov	r5, r0
 800b7c4:	0710      	lsls	r0, r2, #28
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	d458      	bmi.n	800b87c <__sflush_r+0xc0>
 800b7ca:	684b      	ldr	r3, [r1, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	dc05      	bgt.n	800b7dc <__sflush_r+0x20>
 800b7d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	dc02      	bgt.n	800b7dc <__sflush_r+0x20>
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7de:	2e00      	cmp	r6, #0
 800b7e0:	d0f9      	beq.n	800b7d6 <__sflush_r+0x1a>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7e8:	682f      	ldr	r7, [r5, #0]
 800b7ea:	6a21      	ldr	r1, [r4, #32]
 800b7ec:	602b      	str	r3, [r5, #0]
 800b7ee:	d032      	beq.n	800b856 <__sflush_r+0x9a>
 800b7f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	075a      	lsls	r2, r3, #29
 800b7f6:	d505      	bpl.n	800b804 <__sflush_r+0x48>
 800b7f8:	6863      	ldr	r3, [r4, #4]
 800b7fa:	1ac0      	subs	r0, r0, r3
 800b7fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7fe:	b10b      	cbz	r3, 800b804 <__sflush_r+0x48>
 800b800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b802:	1ac0      	subs	r0, r0, r3
 800b804:	2300      	movs	r3, #0
 800b806:	4602      	mov	r2, r0
 800b808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b80a:	6a21      	ldr	r1, [r4, #32]
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b0      	blx	r6
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	d106      	bne.n	800b824 <__sflush_r+0x68>
 800b816:	6829      	ldr	r1, [r5, #0]
 800b818:	291d      	cmp	r1, #29
 800b81a:	d82b      	bhi.n	800b874 <__sflush_r+0xb8>
 800b81c:	4a29      	ldr	r2, [pc, #164]	; (800b8c4 <__sflush_r+0x108>)
 800b81e:	410a      	asrs	r2, r1
 800b820:	07d6      	lsls	r6, r2, #31
 800b822:	d427      	bmi.n	800b874 <__sflush_r+0xb8>
 800b824:	2200      	movs	r2, #0
 800b826:	6062      	str	r2, [r4, #4]
 800b828:	04d9      	lsls	r1, r3, #19
 800b82a:	6922      	ldr	r2, [r4, #16]
 800b82c:	6022      	str	r2, [r4, #0]
 800b82e:	d504      	bpl.n	800b83a <__sflush_r+0x7e>
 800b830:	1c42      	adds	r2, r0, #1
 800b832:	d101      	bne.n	800b838 <__sflush_r+0x7c>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b903      	cbnz	r3, 800b83a <__sflush_r+0x7e>
 800b838:	6560      	str	r0, [r4, #84]	; 0x54
 800b83a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b83c:	602f      	str	r7, [r5, #0]
 800b83e:	2900      	cmp	r1, #0
 800b840:	d0c9      	beq.n	800b7d6 <__sflush_r+0x1a>
 800b842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b846:	4299      	cmp	r1, r3
 800b848:	d002      	beq.n	800b850 <__sflush_r+0x94>
 800b84a:	4628      	mov	r0, r5
 800b84c:	f7ff f9f6 	bl	800ac3c <_free_r>
 800b850:	2000      	movs	r0, #0
 800b852:	6360      	str	r0, [r4, #52]	; 0x34
 800b854:	e7c0      	b.n	800b7d8 <__sflush_r+0x1c>
 800b856:	2301      	movs	r3, #1
 800b858:	4628      	mov	r0, r5
 800b85a:	47b0      	blx	r6
 800b85c:	1c41      	adds	r1, r0, #1
 800b85e:	d1c8      	bne.n	800b7f2 <__sflush_r+0x36>
 800b860:	682b      	ldr	r3, [r5, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0c5      	beq.n	800b7f2 <__sflush_r+0x36>
 800b866:	2b1d      	cmp	r3, #29
 800b868:	d001      	beq.n	800b86e <__sflush_r+0xb2>
 800b86a:	2b16      	cmp	r3, #22
 800b86c:	d101      	bne.n	800b872 <__sflush_r+0xb6>
 800b86e:	602f      	str	r7, [r5, #0]
 800b870:	e7b1      	b.n	800b7d6 <__sflush_r+0x1a>
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b878:	81a3      	strh	r3, [r4, #12]
 800b87a:	e7ad      	b.n	800b7d8 <__sflush_r+0x1c>
 800b87c:	690f      	ldr	r7, [r1, #16]
 800b87e:	2f00      	cmp	r7, #0
 800b880:	d0a9      	beq.n	800b7d6 <__sflush_r+0x1a>
 800b882:	0793      	lsls	r3, r2, #30
 800b884:	680e      	ldr	r6, [r1, #0]
 800b886:	bf08      	it	eq
 800b888:	694b      	ldreq	r3, [r1, #20]
 800b88a:	600f      	str	r7, [r1, #0]
 800b88c:	bf18      	it	ne
 800b88e:	2300      	movne	r3, #0
 800b890:	eba6 0807 	sub.w	r8, r6, r7
 800b894:	608b      	str	r3, [r1, #8]
 800b896:	f1b8 0f00 	cmp.w	r8, #0
 800b89a:	dd9c      	ble.n	800b7d6 <__sflush_r+0x1a>
 800b89c:	6a21      	ldr	r1, [r4, #32]
 800b89e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8a0:	4643      	mov	r3, r8
 800b8a2:	463a      	mov	r2, r7
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	47b0      	blx	r6
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	dc06      	bgt.n	800b8ba <__sflush_r+0xfe>
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8b2:	81a3      	strh	r3, [r4, #12]
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b8:	e78e      	b.n	800b7d8 <__sflush_r+0x1c>
 800b8ba:	4407      	add	r7, r0
 800b8bc:	eba8 0800 	sub.w	r8, r8, r0
 800b8c0:	e7e9      	b.n	800b896 <__sflush_r+0xda>
 800b8c2:	bf00      	nop
 800b8c4:	dfbffffe 	.word	0xdfbffffe

0800b8c8 <_fflush_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	690b      	ldr	r3, [r1, #16]
 800b8cc:	4605      	mov	r5, r0
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	b913      	cbnz	r3, 800b8d8 <_fflush_r+0x10>
 800b8d2:	2500      	movs	r5, #0
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	b118      	cbz	r0, 800b8e2 <_fflush_r+0x1a>
 800b8da:	6a03      	ldr	r3, [r0, #32]
 800b8dc:	b90b      	cbnz	r3, 800b8e2 <_fflush_r+0x1a>
 800b8de:	f7fe f927 	bl	8009b30 <__sinit>
 800b8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0f3      	beq.n	800b8d2 <_fflush_r+0xa>
 800b8ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8ec:	07d0      	lsls	r0, r2, #31
 800b8ee:	d404      	bmi.n	800b8fa <_fflush_r+0x32>
 800b8f0:	0599      	lsls	r1, r3, #22
 800b8f2:	d402      	bmi.n	800b8fa <_fflush_r+0x32>
 800b8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8f6:	f7fe fb14 	bl	8009f22 <__retarget_lock_acquire_recursive>
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	f7ff ff5d 	bl	800b7bc <__sflush_r>
 800b902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b904:	07da      	lsls	r2, r3, #31
 800b906:	4605      	mov	r5, r0
 800b908:	d4e4      	bmi.n	800b8d4 <_fflush_r+0xc>
 800b90a:	89a3      	ldrh	r3, [r4, #12]
 800b90c:	059b      	lsls	r3, r3, #22
 800b90e:	d4e1      	bmi.n	800b8d4 <_fflush_r+0xc>
 800b910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b912:	f7fe fb07 	bl	8009f24 <__retarget_lock_release_recursive>
 800b916:	e7dd      	b.n	800b8d4 <_fflush_r+0xc>

0800b918 <__swhatbuf_r>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	460c      	mov	r4, r1
 800b91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b920:	2900      	cmp	r1, #0
 800b922:	b096      	sub	sp, #88	; 0x58
 800b924:	4615      	mov	r5, r2
 800b926:	461e      	mov	r6, r3
 800b928:	da0d      	bge.n	800b946 <__swhatbuf_r+0x2e>
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b930:	f04f 0100 	mov.w	r1, #0
 800b934:	bf0c      	ite	eq
 800b936:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b93a:	2340      	movne	r3, #64	; 0x40
 800b93c:	2000      	movs	r0, #0
 800b93e:	6031      	str	r1, [r6, #0]
 800b940:	602b      	str	r3, [r5, #0]
 800b942:	b016      	add	sp, #88	; 0x58
 800b944:	bd70      	pop	{r4, r5, r6, pc}
 800b946:	466a      	mov	r2, sp
 800b948:	f000 f848 	bl	800b9dc <_fstat_r>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	dbec      	blt.n	800b92a <__swhatbuf_r+0x12>
 800b950:	9901      	ldr	r1, [sp, #4]
 800b952:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b956:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b95a:	4259      	negs	r1, r3
 800b95c:	4159      	adcs	r1, r3
 800b95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b962:	e7eb      	b.n	800b93c <__swhatbuf_r+0x24>

0800b964 <__smakebuf_r>:
 800b964:	898b      	ldrh	r3, [r1, #12]
 800b966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b968:	079d      	lsls	r5, r3, #30
 800b96a:	4606      	mov	r6, r0
 800b96c:	460c      	mov	r4, r1
 800b96e:	d507      	bpl.n	800b980 <__smakebuf_r+0x1c>
 800b970:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	6123      	str	r3, [r4, #16]
 800b978:	2301      	movs	r3, #1
 800b97a:	6163      	str	r3, [r4, #20]
 800b97c:	b002      	add	sp, #8
 800b97e:	bd70      	pop	{r4, r5, r6, pc}
 800b980:	ab01      	add	r3, sp, #4
 800b982:	466a      	mov	r2, sp
 800b984:	f7ff ffc8 	bl	800b918 <__swhatbuf_r>
 800b988:	9900      	ldr	r1, [sp, #0]
 800b98a:	4605      	mov	r5, r0
 800b98c:	4630      	mov	r0, r6
 800b98e:	f7ff f9c9 	bl	800ad24 <_malloc_r>
 800b992:	b948      	cbnz	r0, 800b9a8 <__smakebuf_r+0x44>
 800b994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b998:	059a      	lsls	r2, r3, #22
 800b99a:	d4ef      	bmi.n	800b97c <__smakebuf_r+0x18>
 800b99c:	f023 0303 	bic.w	r3, r3, #3
 800b9a0:	f043 0302 	orr.w	r3, r3, #2
 800b9a4:	81a3      	strh	r3, [r4, #12]
 800b9a6:	e7e3      	b.n	800b970 <__smakebuf_r+0xc>
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	6020      	str	r0, [r4, #0]
 800b9ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b0:	81a3      	strh	r3, [r4, #12]
 800b9b2:	9b00      	ldr	r3, [sp, #0]
 800b9b4:	6163      	str	r3, [r4, #20]
 800b9b6:	9b01      	ldr	r3, [sp, #4]
 800b9b8:	6120      	str	r0, [r4, #16]
 800b9ba:	b15b      	cbz	r3, 800b9d4 <__smakebuf_r+0x70>
 800b9bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f000 f81d 	bl	800ba00 <_isatty_r>
 800b9c6:	b128      	cbz	r0, 800b9d4 <__smakebuf_r+0x70>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f023 0303 	bic.w	r3, r3, #3
 800b9ce:	f043 0301 	orr.w	r3, r3, #1
 800b9d2:	81a3      	strh	r3, [r4, #12]
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	431d      	orrs	r5, r3
 800b9d8:	81a5      	strh	r5, [r4, #12]
 800b9da:	e7cf      	b.n	800b97c <__smakebuf_r+0x18>

0800b9dc <_fstat_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4d07      	ldr	r5, [pc, #28]	; (800b9fc <_fstat_r+0x20>)
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	4608      	mov	r0, r1
 800b9e6:	4611      	mov	r1, r2
 800b9e8:	602b      	str	r3, [r5, #0]
 800b9ea:	f7f5 fd10 	bl	800140e <_fstat>
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	d102      	bne.n	800b9f8 <_fstat_r+0x1c>
 800b9f2:	682b      	ldr	r3, [r5, #0]
 800b9f4:	b103      	cbz	r3, 800b9f8 <_fstat_r+0x1c>
 800b9f6:	6023      	str	r3, [r4, #0]
 800b9f8:	bd38      	pop	{r3, r4, r5, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20005ff4 	.word	0x20005ff4

0800ba00 <_isatty_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d06      	ldr	r5, [pc, #24]	; (800ba1c <_isatty_r+0x1c>)
 800ba04:	2300      	movs	r3, #0
 800ba06:	4604      	mov	r4, r0
 800ba08:	4608      	mov	r0, r1
 800ba0a:	602b      	str	r3, [r5, #0]
 800ba0c:	f7f5 fd0f 	bl	800142e <_isatty>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d102      	bne.n	800ba1a <_isatty_r+0x1a>
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	b103      	cbz	r3, 800ba1a <_isatty_r+0x1a>
 800ba18:	6023      	str	r3, [r4, #0]
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	20005ff4 	.word	0x20005ff4

0800ba20 <_sbrk_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d06      	ldr	r5, [pc, #24]	; (800ba3c <_sbrk_r+0x1c>)
 800ba24:	2300      	movs	r3, #0
 800ba26:	4604      	mov	r4, r0
 800ba28:	4608      	mov	r0, r1
 800ba2a:	602b      	str	r3, [r5, #0]
 800ba2c:	f7f5 fd18 	bl	8001460 <_sbrk>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_sbrk_r+0x1a>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_sbrk_r+0x1a>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	20005ff4 	.word	0x20005ff4

0800ba40 <__assert_func>:
 800ba40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba42:	4614      	mov	r4, r2
 800ba44:	461a      	mov	r2, r3
 800ba46:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <__assert_func+0x2c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	68d8      	ldr	r0, [r3, #12]
 800ba4e:	b14c      	cbz	r4, 800ba64 <__assert_func+0x24>
 800ba50:	4b07      	ldr	r3, [pc, #28]	; (800ba70 <__assert_func+0x30>)
 800ba52:	9100      	str	r1, [sp, #0]
 800ba54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba58:	4906      	ldr	r1, [pc, #24]	; (800ba74 <__assert_func+0x34>)
 800ba5a:	462b      	mov	r3, r5
 800ba5c:	f000 f844 	bl	800bae8 <fiprintf>
 800ba60:	f000 f854 	bl	800bb0c <abort>
 800ba64:	4b04      	ldr	r3, [pc, #16]	; (800ba78 <__assert_func+0x38>)
 800ba66:	461c      	mov	r4, r3
 800ba68:	e7f3      	b.n	800ba52 <__assert_func+0x12>
 800ba6a:	bf00      	nop
 800ba6c:	20000158 	.word	0x20000158
 800ba70:	0800cfef 	.word	0x0800cfef
 800ba74:	0800cffc 	.word	0x0800cffc
 800ba78:	0800d02a 	.word	0x0800d02a

0800ba7c <_calloc_r>:
 800ba7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba7e:	fba1 2402 	umull	r2, r4, r1, r2
 800ba82:	b94c      	cbnz	r4, 800ba98 <_calloc_r+0x1c>
 800ba84:	4611      	mov	r1, r2
 800ba86:	9201      	str	r2, [sp, #4]
 800ba88:	f7ff f94c 	bl	800ad24 <_malloc_r>
 800ba8c:	9a01      	ldr	r2, [sp, #4]
 800ba8e:	4605      	mov	r5, r0
 800ba90:	b930      	cbnz	r0, 800baa0 <_calloc_r+0x24>
 800ba92:	4628      	mov	r0, r5
 800ba94:	b003      	add	sp, #12
 800ba96:	bd30      	pop	{r4, r5, pc}
 800ba98:	220c      	movs	r2, #12
 800ba9a:	6002      	str	r2, [r0, #0]
 800ba9c:	2500      	movs	r5, #0
 800ba9e:	e7f8      	b.n	800ba92 <_calloc_r+0x16>
 800baa0:	4621      	mov	r1, r4
 800baa2:	f7fe f9c1 	bl	8009e28 <memset>
 800baa6:	e7f4      	b.n	800ba92 <_calloc_r+0x16>

0800baa8 <__ascii_mbtowc>:
 800baa8:	b082      	sub	sp, #8
 800baaa:	b901      	cbnz	r1, 800baae <__ascii_mbtowc+0x6>
 800baac:	a901      	add	r1, sp, #4
 800baae:	b142      	cbz	r2, 800bac2 <__ascii_mbtowc+0x1a>
 800bab0:	b14b      	cbz	r3, 800bac6 <__ascii_mbtowc+0x1e>
 800bab2:	7813      	ldrb	r3, [r2, #0]
 800bab4:	600b      	str	r3, [r1, #0]
 800bab6:	7812      	ldrb	r2, [r2, #0]
 800bab8:	1e10      	subs	r0, r2, #0
 800baba:	bf18      	it	ne
 800babc:	2001      	movne	r0, #1
 800babe:	b002      	add	sp, #8
 800bac0:	4770      	bx	lr
 800bac2:	4610      	mov	r0, r2
 800bac4:	e7fb      	b.n	800babe <__ascii_mbtowc+0x16>
 800bac6:	f06f 0001 	mvn.w	r0, #1
 800baca:	e7f8      	b.n	800babe <__ascii_mbtowc+0x16>

0800bacc <__ascii_wctomb>:
 800bacc:	b149      	cbz	r1, 800bae2 <__ascii_wctomb+0x16>
 800bace:	2aff      	cmp	r2, #255	; 0xff
 800bad0:	bf85      	ittet	hi
 800bad2:	238a      	movhi	r3, #138	; 0x8a
 800bad4:	6003      	strhi	r3, [r0, #0]
 800bad6:	700a      	strbls	r2, [r1, #0]
 800bad8:	f04f 30ff 	movhi.w	r0, #4294967295
 800badc:	bf98      	it	ls
 800bade:	2001      	movls	r0, #1
 800bae0:	4770      	bx	lr
 800bae2:	4608      	mov	r0, r1
 800bae4:	4770      	bx	lr
	...

0800bae8 <fiprintf>:
 800bae8:	b40e      	push	{r1, r2, r3}
 800baea:	b503      	push	{r0, r1, lr}
 800baec:	4601      	mov	r1, r0
 800baee:	ab03      	add	r3, sp, #12
 800baf0:	4805      	ldr	r0, [pc, #20]	; (800bb08 <fiprintf+0x20>)
 800baf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf6:	6800      	ldr	r0, [r0, #0]
 800baf8:	9301      	str	r3, [sp, #4]
 800bafa:	f7ff fd45 	bl	800b588 <_vfiprintf_r>
 800bafe:	b002      	add	sp, #8
 800bb00:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb04:	b003      	add	sp, #12
 800bb06:	4770      	bx	lr
 800bb08:	20000158 	.word	0x20000158

0800bb0c <abort>:
 800bb0c:	b508      	push	{r3, lr}
 800bb0e:	2006      	movs	r0, #6
 800bb10:	f000 f82c 	bl	800bb6c <raise>
 800bb14:	2001      	movs	r0, #1
 800bb16:	f7f5 fc47 	bl	80013a8 <_exit>

0800bb1a <_raise_r>:
 800bb1a:	291f      	cmp	r1, #31
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4604      	mov	r4, r0
 800bb20:	460d      	mov	r5, r1
 800bb22:	d904      	bls.n	800bb2e <_raise_r+0x14>
 800bb24:	2316      	movs	r3, #22
 800bb26:	6003      	str	r3, [r0, #0]
 800bb28:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2c:	bd38      	pop	{r3, r4, r5, pc}
 800bb2e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bb30:	b112      	cbz	r2, 800bb38 <_raise_r+0x1e>
 800bb32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb36:	b94b      	cbnz	r3, 800bb4c <_raise_r+0x32>
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 f831 	bl	800bba0 <_getpid_r>
 800bb3e:	462a      	mov	r2, r5
 800bb40:	4601      	mov	r1, r0
 800bb42:	4620      	mov	r0, r4
 800bb44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb48:	f000 b818 	b.w	800bb7c <_kill_r>
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d00a      	beq.n	800bb66 <_raise_r+0x4c>
 800bb50:	1c59      	adds	r1, r3, #1
 800bb52:	d103      	bne.n	800bb5c <_raise_r+0x42>
 800bb54:	2316      	movs	r3, #22
 800bb56:	6003      	str	r3, [r0, #0]
 800bb58:	2001      	movs	r0, #1
 800bb5a:	e7e7      	b.n	800bb2c <_raise_r+0x12>
 800bb5c:	2400      	movs	r4, #0
 800bb5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb62:	4628      	mov	r0, r5
 800bb64:	4798      	blx	r3
 800bb66:	2000      	movs	r0, #0
 800bb68:	e7e0      	b.n	800bb2c <_raise_r+0x12>
	...

0800bb6c <raise>:
 800bb6c:	4b02      	ldr	r3, [pc, #8]	; (800bb78 <raise+0xc>)
 800bb6e:	4601      	mov	r1, r0
 800bb70:	6818      	ldr	r0, [r3, #0]
 800bb72:	f7ff bfd2 	b.w	800bb1a <_raise_r>
 800bb76:	bf00      	nop
 800bb78:	20000158 	.word	0x20000158

0800bb7c <_kill_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4d07      	ldr	r5, [pc, #28]	; (800bb9c <_kill_r+0x20>)
 800bb80:	2300      	movs	r3, #0
 800bb82:	4604      	mov	r4, r0
 800bb84:	4608      	mov	r0, r1
 800bb86:	4611      	mov	r1, r2
 800bb88:	602b      	str	r3, [r5, #0]
 800bb8a:	f7f5 fbfd 	bl	8001388 <_kill>
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	d102      	bne.n	800bb98 <_kill_r+0x1c>
 800bb92:	682b      	ldr	r3, [r5, #0]
 800bb94:	b103      	cbz	r3, 800bb98 <_kill_r+0x1c>
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	bd38      	pop	{r3, r4, r5, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20005ff4 	.word	0x20005ff4

0800bba0 <_getpid_r>:
 800bba0:	f7f5 bbea 	b.w	8001378 <_getpid>
 800bba4:	0000      	movs	r0, r0
	...

0800bba8 <cos>:
 800bba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbaa:	ec53 2b10 	vmov	r2, r3, d0
 800bbae:	4826      	ldr	r0, [pc, #152]	; (800bc48 <cos+0xa0>)
 800bbb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bbb4:	4281      	cmp	r1, r0
 800bbb6:	dc06      	bgt.n	800bbc6 <cos+0x1e>
 800bbb8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800bc40 <cos+0x98>
 800bbbc:	b005      	add	sp, #20
 800bbbe:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbc2:	f000 b89d 	b.w	800bd00 <__kernel_cos>
 800bbc6:	4821      	ldr	r0, [pc, #132]	; (800bc4c <cos+0xa4>)
 800bbc8:	4281      	cmp	r1, r0
 800bbca:	dd09      	ble.n	800bbe0 <cos+0x38>
 800bbcc:	ee10 0a10 	vmov	r0, s0
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	f7f4 fb61 	bl	8000298 <__aeabi_dsub>
 800bbd6:	ec41 0b10 	vmov	d0, r0, r1
 800bbda:	b005      	add	sp, #20
 800bbdc:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbe0:	4668      	mov	r0, sp
 800bbe2:	f000 fa15 	bl	800c010 <__ieee754_rem_pio2>
 800bbe6:	f000 0003 	and.w	r0, r0, #3
 800bbea:	2801      	cmp	r0, #1
 800bbec:	d00b      	beq.n	800bc06 <cos+0x5e>
 800bbee:	2802      	cmp	r0, #2
 800bbf0:	d016      	beq.n	800bc20 <cos+0x78>
 800bbf2:	b9e0      	cbnz	r0, 800bc2e <cos+0x86>
 800bbf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbf8:	ed9d 0b00 	vldr	d0, [sp]
 800bbfc:	f000 f880 	bl	800bd00 <__kernel_cos>
 800bc00:	ec51 0b10 	vmov	r0, r1, d0
 800bc04:	e7e7      	b.n	800bbd6 <cos+0x2e>
 800bc06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc0a:	ed9d 0b00 	vldr	d0, [sp]
 800bc0e:	f000 f93f 	bl	800be90 <__kernel_sin>
 800bc12:	ec53 2b10 	vmov	r2, r3, d0
 800bc16:	ee10 0a10 	vmov	r0, s0
 800bc1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bc1e:	e7da      	b.n	800bbd6 <cos+0x2e>
 800bc20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc24:	ed9d 0b00 	vldr	d0, [sp]
 800bc28:	f000 f86a 	bl	800bd00 <__kernel_cos>
 800bc2c:	e7f1      	b.n	800bc12 <cos+0x6a>
 800bc2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc32:	ed9d 0b00 	vldr	d0, [sp]
 800bc36:	2001      	movs	r0, #1
 800bc38:	f000 f92a 	bl	800be90 <__kernel_sin>
 800bc3c:	e7e0      	b.n	800bc00 <cos+0x58>
 800bc3e:	bf00      	nop
	...
 800bc48:	3fe921fb 	.word	0x3fe921fb
 800bc4c:	7fefffff 	.word	0x7fefffff

0800bc50 <sin>:
 800bc50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc52:	ec53 2b10 	vmov	r2, r3, d0
 800bc56:	4828      	ldr	r0, [pc, #160]	; (800bcf8 <sin+0xa8>)
 800bc58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc5c:	4281      	cmp	r1, r0
 800bc5e:	dc07      	bgt.n	800bc70 <sin+0x20>
 800bc60:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800bcf0 <sin+0xa0>
 800bc64:	2000      	movs	r0, #0
 800bc66:	b005      	add	sp, #20
 800bc68:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc6c:	f000 b910 	b.w	800be90 <__kernel_sin>
 800bc70:	4822      	ldr	r0, [pc, #136]	; (800bcfc <sin+0xac>)
 800bc72:	4281      	cmp	r1, r0
 800bc74:	dd09      	ble.n	800bc8a <sin+0x3a>
 800bc76:	ee10 0a10 	vmov	r0, s0
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	f7f4 fb0c 	bl	8000298 <__aeabi_dsub>
 800bc80:	ec41 0b10 	vmov	d0, r0, r1
 800bc84:	b005      	add	sp, #20
 800bc86:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc8a:	4668      	mov	r0, sp
 800bc8c:	f000 f9c0 	bl	800c010 <__ieee754_rem_pio2>
 800bc90:	f000 0003 	and.w	r0, r0, #3
 800bc94:	2801      	cmp	r0, #1
 800bc96:	d00c      	beq.n	800bcb2 <sin+0x62>
 800bc98:	2802      	cmp	r0, #2
 800bc9a:	d011      	beq.n	800bcc0 <sin+0x70>
 800bc9c:	b9f0      	cbnz	r0, 800bcdc <sin+0x8c>
 800bc9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bca2:	ed9d 0b00 	vldr	d0, [sp]
 800bca6:	2001      	movs	r0, #1
 800bca8:	f000 f8f2 	bl	800be90 <__kernel_sin>
 800bcac:	ec51 0b10 	vmov	r0, r1, d0
 800bcb0:	e7e6      	b.n	800bc80 <sin+0x30>
 800bcb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bcb6:	ed9d 0b00 	vldr	d0, [sp]
 800bcba:	f000 f821 	bl	800bd00 <__kernel_cos>
 800bcbe:	e7f5      	b.n	800bcac <sin+0x5c>
 800bcc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bcc4:	ed9d 0b00 	vldr	d0, [sp]
 800bcc8:	2001      	movs	r0, #1
 800bcca:	f000 f8e1 	bl	800be90 <__kernel_sin>
 800bcce:	ec53 2b10 	vmov	r2, r3, d0
 800bcd2:	ee10 0a10 	vmov	r0, s0
 800bcd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bcda:	e7d1      	b.n	800bc80 <sin+0x30>
 800bcdc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bce0:	ed9d 0b00 	vldr	d0, [sp]
 800bce4:	f000 f80c 	bl	800bd00 <__kernel_cos>
 800bce8:	e7f1      	b.n	800bcce <sin+0x7e>
 800bcea:	bf00      	nop
 800bcec:	f3af 8000 	nop.w
	...
 800bcf8:	3fe921fb 	.word	0x3fe921fb
 800bcfc:	7fefffff 	.word	0x7fefffff

0800bd00 <__kernel_cos>:
 800bd00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	ec57 6b10 	vmov	r6, r7, d0
 800bd08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bd0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bd10:	ed8d 1b00 	vstr	d1, [sp]
 800bd14:	da07      	bge.n	800bd26 <__kernel_cos+0x26>
 800bd16:	ee10 0a10 	vmov	r0, s0
 800bd1a:	4639      	mov	r1, r7
 800bd1c:	f7f4 ff24 	bl	8000b68 <__aeabi_d2iz>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	f000 8088 	beq.w	800be36 <__kernel_cos+0x136>
 800bd26:	4632      	mov	r2, r6
 800bd28:	463b      	mov	r3, r7
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	f7f4 fc6b 	bl	8000608 <__aeabi_dmul>
 800bd32:	4b51      	ldr	r3, [pc, #324]	; (800be78 <__kernel_cos+0x178>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	4604      	mov	r4, r0
 800bd38:	460d      	mov	r5, r1
 800bd3a:	f7f4 fc65 	bl	8000608 <__aeabi_dmul>
 800bd3e:	a340      	add	r3, pc, #256	; (adr r3, 800be40 <__kernel_cos+0x140>)
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	4682      	mov	sl, r0
 800bd46:	468b      	mov	fp, r1
 800bd48:	4620      	mov	r0, r4
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	f7f4 fc5c 	bl	8000608 <__aeabi_dmul>
 800bd50:	a33d      	add	r3, pc, #244	; (adr r3, 800be48 <__kernel_cos+0x148>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	f7f4 faa1 	bl	800029c <__adddf3>
 800bd5a:	4622      	mov	r2, r4
 800bd5c:	462b      	mov	r3, r5
 800bd5e:	f7f4 fc53 	bl	8000608 <__aeabi_dmul>
 800bd62:	a33b      	add	r3, pc, #236	; (adr r3, 800be50 <__kernel_cos+0x150>)
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 fa96 	bl	8000298 <__aeabi_dsub>
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	462b      	mov	r3, r5
 800bd70:	f7f4 fc4a 	bl	8000608 <__aeabi_dmul>
 800bd74:	a338      	add	r3, pc, #224	; (adr r3, 800be58 <__kernel_cos+0x158>)
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	f7f4 fa8f 	bl	800029c <__adddf3>
 800bd7e:	4622      	mov	r2, r4
 800bd80:	462b      	mov	r3, r5
 800bd82:	f7f4 fc41 	bl	8000608 <__aeabi_dmul>
 800bd86:	a336      	add	r3, pc, #216	; (adr r3, 800be60 <__kernel_cos+0x160>)
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	f7f4 fa84 	bl	8000298 <__aeabi_dsub>
 800bd90:	4622      	mov	r2, r4
 800bd92:	462b      	mov	r3, r5
 800bd94:	f7f4 fc38 	bl	8000608 <__aeabi_dmul>
 800bd98:	a333      	add	r3, pc, #204	; (adr r3, 800be68 <__kernel_cos+0x168>)
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	f7f4 fa7d 	bl	800029c <__adddf3>
 800bda2:	4622      	mov	r2, r4
 800bda4:	462b      	mov	r3, r5
 800bda6:	f7f4 fc2f 	bl	8000608 <__aeabi_dmul>
 800bdaa:	4622      	mov	r2, r4
 800bdac:	462b      	mov	r3, r5
 800bdae:	f7f4 fc2b 	bl	8000608 <__aeabi_dmul>
 800bdb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	460d      	mov	r5, r1
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	f7f4 fc23 	bl	8000608 <__aeabi_dmul>
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f7f4 fa65 	bl	8000298 <__aeabi_dsub>
 800bdce:	4b2b      	ldr	r3, [pc, #172]	; (800be7c <__kernel_cos+0x17c>)
 800bdd0:	4598      	cmp	r8, r3
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	460f      	mov	r7, r1
 800bdd6:	dc10      	bgt.n	800bdfa <__kernel_cos+0xfa>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4650      	mov	r0, sl
 800bdde:	4659      	mov	r1, fp
 800bde0:	f7f4 fa5a 	bl	8000298 <__aeabi_dsub>
 800bde4:	460b      	mov	r3, r1
 800bde6:	4926      	ldr	r1, [pc, #152]	; (800be80 <__kernel_cos+0x180>)
 800bde8:	4602      	mov	r2, r0
 800bdea:	2000      	movs	r0, #0
 800bdec:	f7f4 fa54 	bl	8000298 <__aeabi_dsub>
 800bdf0:	ec41 0b10 	vmov	d0, r0, r1
 800bdf4:	b003      	add	sp, #12
 800bdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfa:	4b22      	ldr	r3, [pc, #136]	; (800be84 <__kernel_cos+0x184>)
 800bdfc:	4920      	ldr	r1, [pc, #128]	; (800be80 <__kernel_cos+0x180>)
 800bdfe:	4598      	cmp	r8, r3
 800be00:	bfcc      	ite	gt
 800be02:	4d21      	ldrgt	r5, [pc, #132]	; (800be88 <__kernel_cos+0x188>)
 800be04:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800be08:	2400      	movs	r4, #0
 800be0a:	4622      	mov	r2, r4
 800be0c:	462b      	mov	r3, r5
 800be0e:	2000      	movs	r0, #0
 800be10:	f7f4 fa42 	bl	8000298 <__aeabi_dsub>
 800be14:	4622      	mov	r2, r4
 800be16:	4680      	mov	r8, r0
 800be18:	4689      	mov	r9, r1
 800be1a:	462b      	mov	r3, r5
 800be1c:	4650      	mov	r0, sl
 800be1e:	4659      	mov	r1, fp
 800be20:	f7f4 fa3a 	bl	8000298 <__aeabi_dsub>
 800be24:	4632      	mov	r2, r6
 800be26:	463b      	mov	r3, r7
 800be28:	f7f4 fa36 	bl	8000298 <__aeabi_dsub>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4640      	mov	r0, r8
 800be32:	4649      	mov	r1, r9
 800be34:	e7da      	b.n	800bdec <__kernel_cos+0xec>
 800be36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800be70 <__kernel_cos+0x170>
 800be3a:	e7db      	b.n	800bdf4 <__kernel_cos+0xf4>
 800be3c:	f3af 8000 	nop.w
 800be40:	be8838d4 	.word	0xbe8838d4
 800be44:	bda8fae9 	.word	0xbda8fae9
 800be48:	bdb4b1c4 	.word	0xbdb4b1c4
 800be4c:	3e21ee9e 	.word	0x3e21ee9e
 800be50:	809c52ad 	.word	0x809c52ad
 800be54:	3e927e4f 	.word	0x3e927e4f
 800be58:	19cb1590 	.word	0x19cb1590
 800be5c:	3efa01a0 	.word	0x3efa01a0
 800be60:	16c15177 	.word	0x16c15177
 800be64:	3f56c16c 	.word	0x3f56c16c
 800be68:	5555554c 	.word	0x5555554c
 800be6c:	3fa55555 	.word	0x3fa55555
 800be70:	00000000 	.word	0x00000000
 800be74:	3ff00000 	.word	0x3ff00000
 800be78:	3fe00000 	.word	0x3fe00000
 800be7c:	3fd33332 	.word	0x3fd33332
 800be80:	3ff00000 	.word	0x3ff00000
 800be84:	3fe90000 	.word	0x3fe90000
 800be88:	3fd20000 	.word	0x3fd20000
 800be8c:	00000000 	.word	0x00000000

0800be90 <__kernel_sin>:
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	ed2d 8b04 	vpush	{d8-d9}
 800be98:	eeb0 8a41 	vmov.f32	s16, s2
 800be9c:	eef0 8a61 	vmov.f32	s17, s3
 800bea0:	ec55 4b10 	vmov	r4, r5, d0
 800bea4:	b083      	sub	sp, #12
 800bea6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800beaa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800beae:	9001      	str	r0, [sp, #4]
 800beb0:	da06      	bge.n	800bec0 <__kernel_sin+0x30>
 800beb2:	ee10 0a10 	vmov	r0, s0
 800beb6:	4629      	mov	r1, r5
 800beb8:	f7f4 fe56 	bl	8000b68 <__aeabi_d2iz>
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d051      	beq.n	800bf64 <__kernel_sin+0xd4>
 800bec0:	4622      	mov	r2, r4
 800bec2:	462b      	mov	r3, r5
 800bec4:	4620      	mov	r0, r4
 800bec6:	4629      	mov	r1, r5
 800bec8:	f7f4 fb9e 	bl	8000608 <__aeabi_dmul>
 800becc:	4682      	mov	sl, r0
 800bece:	468b      	mov	fp, r1
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4620      	mov	r0, r4
 800bed6:	4629      	mov	r1, r5
 800bed8:	f7f4 fb96 	bl	8000608 <__aeabi_dmul>
 800bedc:	a341      	add	r3, pc, #260	; (adr r3, 800bfe4 <__kernel_sin+0x154>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	4680      	mov	r8, r0
 800bee4:	4689      	mov	r9, r1
 800bee6:	4650      	mov	r0, sl
 800bee8:	4659      	mov	r1, fp
 800beea:	f7f4 fb8d 	bl	8000608 <__aeabi_dmul>
 800beee:	a33f      	add	r3, pc, #252	; (adr r3, 800bfec <__kernel_sin+0x15c>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	f7f4 f9d0 	bl	8000298 <__aeabi_dsub>
 800bef8:	4652      	mov	r2, sl
 800befa:	465b      	mov	r3, fp
 800befc:	f7f4 fb84 	bl	8000608 <__aeabi_dmul>
 800bf00:	a33c      	add	r3, pc, #240	; (adr r3, 800bff4 <__kernel_sin+0x164>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f7f4 f9c9 	bl	800029c <__adddf3>
 800bf0a:	4652      	mov	r2, sl
 800bf0c:	465b      	mov	r3, fp
 800bf0e:	f7f4 fb7b 	bl	8000608 <__aeabi_dmul>
 800bf12:	a33a      	add	r3, pc, #232	; (adr r3, 800bffc <__kernel_sin+0x16c>)
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	f7f4 f9be 	bl	8000298 <__aeabi_dsub>
 800bf1c:	4652      	mov	r2, sl
 800bf1e:	465b      	mov	r3, fp
 800bf20:	f7f4 fb72 	bl	8000608 <__aeabi_dmul>
 800bf24:	a337      	add	r3, pc, #220	; (adr r3, 800c004 <__kernel_sin+0x174>)
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	f7f4 f9b7 	bl	800029c <__adddf3>
 800bf2e:	9b01      	ldr	r3, [sp, #4]
 800bf30:	4606      	mov	r6, r0
 800bf32:	460f      	mov	r7, r1
 800bf34:	b9eb      	cbnz	r3, 800bf72 <__kernel_sin+0xe2>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4650      	mov	r0, sl
 800bf3c:	4659      	mov	r1, fp
 800bf3e:	f7f4 fb63 	bl	8000608 <__aeabi_dmul>
 800bf42:	a325      	add	r3, pc, #148	; (adr r3, 800bfd8 <__kernel_sin+0x148>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	f7f4 f9a6 	bl	8000298 <__aeabi_dsub>
 800bf4c:	4642      	mov	r2, r8
 800bf4e:	464b      	mov	r3, r9
 800bf50:	f7f4 fb5a 	bl	8000608 <__aeabi_dmul>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4620      	mov	r0, r4
 800bf5a:	4629      	mov	r1, r5
 800bf5c:	f7f4 f99e 	bl	800029c <__adddf3>
 800bf60:	4604      	mov	r4, r0
 800bf62:	460d      	mov	r5, r1
 800bf64:	ec45 4b10 	vmov	d0, r4, r5
 800bf68:	b003      	add	sp, #12
 800bf6a:	ecbd 8b04 	vpop	{d8-d9}
 800bf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf72:	4b1b      	ldr	r3, [pc, #108]	; (800bfe0 <__kernel_sin+0x150>)
 800bf74:	ec51 0b18 	vmov	r0, r1, d8
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f7f4 fb45 	bl	8000608 <__aeabi_dmul>
 800bf7e:	4632      	mov	r2, r6
 800bf80:	ec41 0b19 	vmov	d9, r0, r1
 800bf84:	463b      	mov	r3, r7
 800bf86:	4640      	mov	r0, r8
 800bf88:	4649      	mov	r1, r9
 800bf8a:	f7f4 fb3d 	bl	8000608 <__aeabi_dmul>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	ec51 0b19 	vmov	r0, r1, d9
 800bf96:	f7f4 f97f 	bl	8000298 <__aeabi_dsub>
 800bf9a:	4652      	mov	r2, sl
 800bf9c:	465b      	mov	r3, fp
 800bf9e:	f7f4 fb33 	bl	8000608 <__aeabi_dmul>
 800bfa2:	ec53 2b18 	vmov	r2, r3, d8
 800bfa6:	f7f4 f977 	bl	8000298 <__aeabi_dsub>
 800bfaa:	a30b      	add	r3, pc, #44	; (adr r3, 800bfd8 <__kernel_sin+0x148>)
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	460f      	mov	r7, r1
 800bfb4:	4640      	mov	r0, r8
 800bfb6:	4649      	mov	r1, r9
 800bfb8:	f7f4 fb26 	bl	8000608 <__aeabi_dmul>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	f7f4 f96a 	bl	800029c <__adddf3>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4620      	mov	r0, r4
 800bfce:	4629      	mov	r1, r5
 800bfd0:	f7f4 f962 	bl	8000298 <__aeabi_dsub>
 800bfd4:	e7c4      	b.n	800bf60 <__kernel_sin+0xd0>
 800bfd6:	bf00      	nop
 800bfd8:	55555549 	.word	0x55555549
 800bfdc:	3fc55555 	.word	0x3fc55555
 800bfe0:	3fe00000 	.word	0x3fe00000
 800bfe4:	5acfd57c 	.word	0x5acfd57c
 800bfe8:	3de5d93a 	.word	0x3de5d93a
 800bfec:	8a2b9ceb 	.word	0x8a2b9ceb
 800bff0:	3e5ae5e6 	.word	0x3e5ae5e6
 800bff4:	57b1fe7d 	.word	0x57b1fe7d
 800bff8:	3ec71de3 	.word	0x3ec71de3
 800bffc:	19c161d5 	.word	0x19c161d5
 800c000:	3f2a01a0 	.word	0x3f2a01a0
 800c004:	1110f8a6 	.word	0x1110f8a6
 800c008:	3f811111 	.word	0x3f811111
 800c00c:	00000000 	.word	0x00000000

0800c010 <__ieee754_rem_pio2>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	ed2d 8b02 	vpush	{d8}
 800c018:	ec55 4b10 	vmov	r4, r5, d0
 800c01c:	4bca      	ldr	r3, [pc, #808]	; (800c348 <__ieee754_rem_pio2+0x338>)
 800c01e:	b08b      	sub	sp, #44	; 0x2c
 800c020:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c024:	4598      	cmp	r8, r3
 800c026:	4682      	mov	sl, r0
 800c028:	9502      	str	r5, [sp, #8]
 800c02a:	dc08      	bgt.n	800c03e <__ieee754_rem_pio2+0x2e>
 800c02c:	2200      	movs	r2, #0
 800c02e:	2300      	movs	r3, #0
 800c030:	ed80 0b00 	vstr	d0, [r0]
 800c034:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c038:	f04f 0b00 	mov.w	fp, #0
 800c03c:	e028      	b.n	800c090 <__ieee754_rem_pio2+0x80>
 800c03e:	4bc3      	ldr	r3, [pc, #780]	; (800c34c <__ieee754_rem_pio2+0x33c>)
 800c040:	4598      	cmp	r8, r3
 800c042:	dc78      	bgt.n	800c136 <__ieee754_rem_pio2+0x126>
 800c044:	9b02      	ldr	r3, [sp, #8]
 800c046:	4ec2      	ldr	r6, [pc, #776]	; (800c350 <__ieee754_rem_pio2+0x340>)
 800c048:	2b00      	cmp	r3, #0
 800c04a:	ee10 0a10 	vmov	r0, s0
 800c04e:	a3b0      	add	r3, pc, #704	; (adr r3, 800c310 <__ieee754_rem_pio2+0x300>)
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	4629      	mov	r1, r5
 800c056:	dd39      	ble.n	800c0cc <__ieee754_rem_pio2+0xbc>
 800c058:	f7f4 f91e 	bl	8000298 <__aeabi_dsub>
 800c05c:	45b0      	cmp	r8, r6
 800c05e:	4604      	mov	r4, r0
 800c060:	460d      	mov	r5, r1
 800c062:	d01b      	beq.n	800c09c <__ieee754_rem_pio2+0x8c>
 800c064:	a3ac      	add	r3, pc, #688	; (adr r3, 800c318 <__ieee754_rem_pio2+0x308>)
 800c066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06a:	f7f4 f915 	bl	8000298 <__aeabi_dsub>
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	e9ca 2300 	strd	r2, r3, [sl]
 800c076:	4620      	mov	r0, r4
 800c078:	4629      	mov	r1, r5
 800c07a:	f7f4 f90d 	bl	8000298 <__aeabi_dsub>
 800c07e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c318 <__ieee754_rem_pio2+0x308>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f7f4 f908 	bl	8000298 <__aeabi_dsub>
 800c088:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c08c:	f04f 0b01 	mov.w	fp, #1
 800c090:	4658      	mov	r0, fp
 800c092:	b00b      	add	sp, #44	; 0x2c
 800c094:	ecbd 8b02 	vpop	{d8}
 800c098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c320 <__ieee754_rem_pio2+0x310>)
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f7f4 f8f9 	bl	8000298 <__aeabi_dsub>
 800c0a6:	a3a0      	add	r3, pc, #640	; (adr r3, 800c328 <__ieee754_rem_pio2+0x318>)
 800c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	460d      	mov	r5, r1
 800c0b0:	f7f4 f8f2 	bl	8000298 <__aeabi_dsub>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	e9ca 2300 	strd	r2, r3, [sl]
 800c0bc:	4620      	mov	r0, r4
 800c0be:	4629      	mov	r1, r5
 800c0c0:	f7f4 f8ea 	bl	8000298 <__aeabi_dsub>
 800c0c4:	a398      	add	r3, pc, #608	; (adr r3, 800c328 <__ieee754_rem_pio2+0x318>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	e7db      	b.n	800c084 <__ieee754_rem_pio2+0x74>
 800c0cc:	f7f4 f8e6 	bl	800029c <__adddf3>
 800c0d0:	45b0      	cmp	r8, r6
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	460d      	mov	r5, r1
 800c0d6:	d016      	beq.n	800c106 <__ieee754_rem_pio2+0xf6>
 800c0d8:	a38f      	add	r3, pc, #572	; (adr r3, 800c318 <__ieee754_rem_pio2+0x308>)
 800c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0de:	f7f4 f8dd 	bl	800029c <__adddf3>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	e9ca 2300 	strd	r2, r3, [sl]
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	f7f4 f8d3 	bl	8000298 <__aeabi_dsub>
 800c0f2:	a389      	add	r3, pc, #548	; (adr r3, 800c318 <__ieee754_rem_pio2+0x308>)
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	f7f4 f8d0 	bl	800029c <__adddf3>
 800c0fc:	f04f 3bff 	mov.w	fp, #4294967295
 800c100:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c104:	e7c4      	b.n	800c090 <__ieee754_rem_pio2+0x80>
 800c106:	a386      	add	r3, pc, #536	; (adr r3, 800c320 <__ieee754_rem_pio2+0x310>)
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	f7f4 f8c6 	bl	800029c <__adddf3>
 800c110:	a385      	add	r3, pc, #532	; (adr r3, 800c328 <__ieee754_rem_pio2+0x318>)
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	4604      	mov	r4, r0
 800c118:	460d      	mov	r5, r1
 800c11a:	f7f4 f8bf 	bl	800029c <__adddf3>
 800c11e:	4602      	mov	r2, r0
 800c120:	460b      	mov	r3, r1
 800c122:	e9ca 2300 	strd	r2, r3, [sl]
 800c126:	4620      	mov	r0, r4
 800c128:	4629      	mov	r1, r5
 800c12a:	f7f4 f8b5 	bl	8000298 <__aeabi_dsub>
 800c12e:	a37e      	add	r3, pc, #504	; (adr r3, 800c328 <__ieee754_rem_pio2+0x318>)
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	e7e0      	b.n	800c0f8 <__ieee754_rem_pio2+0xe8>
 800c136:	4b87      	ldr	r3, [pc, #540]	; (800c354 <__ieee754_rem_pio2+0x344>)
 800c138:	4598      	cmp	r8, r3
 800c13a:	f300 80d8 	bgt.w	800c2ee <__ieee754_rem_pio2+0x2de>
 800c13e:	f000 f96d 	bl	800c41c <fabs>
 800c142:	ec55 4b10 	vmov	r4, r5, d0
 800c146:	ee10 0a10 	vmov	r0, s0
 800c14a:	a379      	add	r3, pc, #484	; (adr r3, 800c330 <__ieee754_rem_pio2+0x320>)
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	4629      	mov	r1, r5
 800c152:	f7f4 fa59 	bl	8000608 <__aeabi_dmul>
 800c156:	4b80      	ldr	r3, [pc, #512]	; (800c358 <__ieee754_rem_pio2+0x348>)
 800c158:	2200      	movs	r2, #0
 800c15a:	f7f4 f89f 	bl	800029c <__adddf3>
 800c15e:	f7f4 fd03 	bl	8000b68 <__aeabi_d2iz>
 800c162:	4683      	mov	fp, r0
 800c164:	f7f4 f9e6 	bl	8000534 <__aeabi_i2d>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	ec43 2b18 	vmov	d8, r2, r3
 800c170:	a367      	add	r3, pc, #412	; (adr r3, 800c310 <__ieee754_rem_pio2+0x300>)
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	f7f4 fa47 	bl	8000608 <__aeabi_dmul>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	4620      	mov	r0, r4
 800c180:	4629      	mov	r1, r5
 800c182:	f7f4 f889 	bl	8000298 <__aeabi_dsub>
 800c186:	a364      	add	r3, pc, #400	; (adr r3, 800c318 <__ieee754_rem_pio2+0x308>)
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	4606      	mov	r6, r0
 800c18e:	460f      	mov	r7, r1
 800c190:	ec51 0b18 	vmov	r0, r1, d8
 800c194:	f7f4 fa38 	bl	8000608 <__aeabi_dmul>
 800c198:	f1bb 0f1f 	cmp.w	fp, #31
 800c19c:	4604      	mov	r4, r0
 800c19e:	460d      	mov	r5, r1
 800c1a0:	dc0d      	bgt.n	800c1be <__ieee754_rem_pio2+0x1ae>
 800c1a2:	4b6e      	ldr	r3, [pc, #440]	; (800c35c <__ieee754_rem_pio2+0x34c>)
 800c1a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ac:	4543      	cmp	r3, r8
 800c1ae:	d006      	beq.n	800c1be <__ieee754_rem_pio2+0x1ae>
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	462b      	mov	r3, r5
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	f7f4 f86e 	bl	8000298 <__aeabi_dsub>
 800c1bc:	e00e      	b.n	800c1dc <__ieee754_rem_pio2+0x1cc>
 800c1be:	462b      	mov	r3, r5
 800c1c0:	4622      	mov	r2, r4
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	f7f4 f867 	bl	8000298 <__aeabi_dsub>
 800c1ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c1ce:	9303      	str	r3, [sp, #12]
 800c1d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c1d4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c1d8:	2b10      	cmp	r3, #16
 800c1da:	dc02      	bgt.n	800c1e2 <__ieee754_rem_pio2+0x1d2>
 800c1dc:	e9ca 0100 	strd	r0, r1, [sl]
 800c1e0:	e039      	b.n	800c256 <__ieee754_rem_pio2+0x246>
 800c1e2:	a34f      	add	r3, pc, #316	; (adr r3, 800c320 <__ieee754_rem_pio2+0x310>)
 800c1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e8:	ec51 0b18 	vmov	r0, r1, d8
 800c1ec:	f7f4 fa0c 	bl	8000608 <__aeabi_dmul>
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	460d      	mov	r5, r1
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	f7f4 f84c 	bl	8000298 <__aeabi_dsub>
 800c200:	4602      	mov	r2, r0
 800c202:	460b      	mov	r3, r1
 800c204:	4680      	mov	r8, r0
 800c206:	4689      	mov	r9, r1
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	f7f4 f844 	bl	8000298 <__aeabi_dsub>
 800c210:	4622      	mov	r2, r4
 800c212:	462b      	mov	r3, r5
 800c214:	f7f4 f840 	bl	8000298 <__aeabi_dsub>
 800c218:	a343      	add	r3, pc, #268	; (adr r3, 800c328 <__ieee754_rem_pio2+0x318>)
 800c21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21e:	4604      	mov	r4, r0
 800c220:	460d      	mov	r5, r1
 800c222:	ec51 0b18 	vmov	r0, r1, d8
 800c226:	f7f4 f9ef 	bl	8000608 <__aeabi_dmul>
 800c22a:	4622      	mov	r2, r4
 800c22c:	462b      	mov	r3, r5
 800c22e:	f7f4 f833 	bl	8000298 <__aeabi_dsub>
 800c232:	4602      	mov	r2, r0
 800c234:	460b      	mov	r3, r1
 800c236:	4604      	mov	r4, r0
 800c238:	460d      	mov	r5, r1
 800c23a:	4640      	mov	r0, r8
 800c23c:	4649      	mov	r1, r9
 800c23e:	f7f4 f82b 	bl	8000298 <__aeabi_dsub>
 800c242:	9a03      	ldr	r2, [sp, #12]
 800c244:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	2b31      	cmp	r3, #49	; 0x31
 800c24c:	dc24      	bgt.n	800c298 <__ieee754_rem_pio2+0x288>
 800c24e:	e9ca 0100 	strd	r0, r1, [sl]
 800c252:	4646      	mov	r6, r8
 800c254:	464f      	mov	r7, r9
 800c256:	e9da 8900 	ldrd	r8, r9, [sl]
 800c25a:	4630      	mov	r0, r6
 800c25c:	4642      	mov	r2, r8
 800c25e:	464b      	mov	r3, r9
 800c260:	4639      	mov	r1, r7
 800c262:	f7f4 f819 	bl	8000298 <__aeabi_dsub>
 800c266:	462b      	mov	r3, r5
 800c268:	4622      	mov	r2, r4
 800c26a:	f7f4 f815 	bl	8000298 <__aeabi_dsub>
 800c26e:	9b02      	ldr	r3, [sp, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c276:	f6bf af0b 	bge.w	800c090 <__ieee754_rem_pio2+0x80>
 800c27a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c27e:	f8ca 3004 	str.w	r3, [sl, #4]
 800c282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c286:	f8ca 8000 	str.w	r8, [sl]
 800c28a:	f8ca 0008 	str.w	r0, [sl, #8]
 800c28e:	f8ca 300c 	str.w	r3, [sl, #12]
 800c292:	f1cb 0b00 	rsb	fp, fp, #0
 800c296:	e6fb      	b.n	800c090 <__ieee754_rem_pio2+0x80>
 800c298:	a327      	add	r3, pc, #156	; (adr r3, 800c338 <__ieee754_rem_pio2+0x328>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	ec51 0b18 	vmov	r0, r1, d8
 800c2a2:	f7f4 f9b1 	bl	8000608 <__aeabi_dmul>
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	460d      	mov	r5, r1
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	f7f3 fff1 	bl	8000298 <__aeabi_dsub>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460f      	mov	r7, r1
 800c2be:	4640      	mov	r0, r8
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	f7f3 ffe9 	bl	8000298 <__aeabi_dsub>
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	462b      	mov	r3, r5
 800c2ca:	f7f3 ffe5 	bl	8000298 <__aeabi_dsub>
 800c2ce:	a31c      	add	r3, pc, #112	; (adr r3, 800c340 <__ieee754_rem_pio2+0x330>)
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	460d      	mov	r5, r1
 800c2d8:	ec51 0b18 	vmov	r0, r1, d8
 800c2dc:	f7f4 f994 	bl	8000608 <__aeabi_dmul>
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	f7f3 ffd8 	bl	8000298 <__aeabi_dsub>
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	460d      	mov	r5, r1
 800c2ec:	e760      	b.n	800c1b0 <__ieee754_rem_pio2+0x1a0>
 800c2ee:	4b1c      	ldr	r3, [pc, #112]	; (800c360 <__ieee754_rem_pio2+0x350>)
 800c2f0:	4598      	cmp	r8, r3
 800c2f2:	dd37      	ble.n	800c364 <__ieee754_rem_pio2+0x354>
 800c2f4:	ee10 2a10 	vmov	r2, s0
 800c2f8:	462b      	mov	r3, r5
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	f7f3 ffcb 	bl	8000298 <__aeabi_dsub>
 800c302:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c306:	e9ca 0100 	strd	r0, r1, [sl]
 800c30a:	e695      	b.n	800c038 <__ieee754_rem_pio2+0x28>
 800c30c:	f3af 8000 	nop.w
 800c310:	54400000 	.word	0x54400000
 800c314:	3ff921fb 	.word	0x3ff921fb
 800c318:	1a626331 	.word	0x1a626331
 800c31c:	3dd0b461 	.word	0x3dd0b461
 800c320:	1a600000 	.word	0x1a600000
 800c324:	3dd0b461 	.word	0x3dd0b461
 800c328:	2e037073 	.word	0x2e037073
 800c32c:	3ba3198a 	.word	0x3ba3198a
 800c330:	6dc9c883 	.word	0x6dc9c883
 800c334:	3fe45f30 	.word	0x3fe45f30
 800c338:	2e000000 	.word	0x2e000000
 800c33c:	3ba3198a 	.word	0x3ba3198a
 800c340:	252049c1 	.word	0x252049c1
 800c344:	397b839a 	.word	0x397b839a
 800c348:	3fe921fb 	.word	0x3fe921fb
 800c34c:	4002d97b 	.word	0x4002d97b
 800c350:	3ff921fb 	.word	0x3ff921fb
 800c354:	413921fb 	.word	0x413921fb
 800c358:	3fe00000 	.word	0x3fe00000
 800c35c:	0800d12c 	.word	0x0800d12c
 800c360:	7fefffff 	.word	0x7fefffff
 800c364:	ea4f 5628 	mov.w	r6, r8, asr #20
 800c368:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800c36c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800c370:	4620      	mov	r0, r4
 800c372:	460d      	mov	r5, r1
 800c374:	f7f4 fbf8 	bl	8000b68 <__aeabi_d2iz>
 800c378:	f7f4 f8dc 	bl	8000534 <__aeabi_i2d>
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4620      	mov	r0, r4
 800c382:	4629      	mov	r1, r5
 800c384:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c388:	f7f3 ff86 	bl	8000298 <__aeabi_dsub>
 800c38c:	4b21      	ldr	r3, [pc, #132]	; (800c414 <__ieee754_rem_pio2+0x404>)
 800c38e:	2200      	movs	r2, #0
 800c390:	f7f4 f93a 	bl	8000608 <__aeabi_dmul>
 800c394:	460d      	mov	r5, r1
 800c396:	4604      	mov	r4, r0
 800c398:	f7f4 fbe6 	bl	8000b68 <__aeabi_d2iz>
 800c39c:	f7f4 f8ca 	bl	8000534 <__aeabi_i2d>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3ac:	f7f3 ff74 	bl	8000298 <__aeabi_dsub>
 800c3b0:	4b18      	ldr	r3, [pc, #96]	; (800c414 <__ieee754_rem_pio2+0x404>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f7f4 f928 	bl	8000608 <__aeabi_dmul>
 800c3b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c3bc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c3c0:	2703      	movs	r7, #3
 800c3c2:	2400      	movs	r4, #0
 800c3c4:	2500      	movs	r5, #0
 800c3c6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800c3ca:	4622      	mov	r2, r4
 800c3cc:	462b      	mov	r3, r5
 800c3ce:	46b9      	mov	r9, r7
 800c3d0:	3f01      	subs	r7, #1
 800c3d2:	f7f4 fb81 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d1f5      	bne.n	800c3c6 <__ieee754_rem_pio2+0x3b6>
 800c3da:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <__ieee754_rem_pio2+0x408>)
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	2302      	movs	r3, #2
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	4632      	mov	r2, r6
 800c3e4:	464b      	mov	r3, r9
 800c3e6:	4651      	mov	r1, sl
 800c3e8:	a804      	add	r0, sp, #16
 800c3ea:	f000 f821 	bl	800c430 <__kernel_rem_pio2>
 800c3ee:	9b02      	ldr	r3, [sp, #8]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	4683      	mov	fp, r0
 800c3f4:	f6bf ae4c 	bge.w	800c090 <__ieee754_rem_pio2+0x80>
 800c3f8:	e9da 2100 	ldrd	r2, r1, [sl]
 800c3fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c400:	e9ca 2300 	strd	r2, r3, [sl]
 800c404:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c408:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c40c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c410:	e73f      	b.n	800c292 <__ieee754_rem_pio2+0x282>
 800c412:	bf00      	nop
 800c414:	41700000 	.word	0x41700000
 800c418:	0800d1ac 	.word	0x0800d1ac

0800c41c <fabs>:
 800c41c:	ec51 0b10 	vmov	r0, r1, d0
 800c420:	ee10 2a10 	vmov	r2, s0
 800c424:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c428:	ec43 2b10 	vmov	d0, r2, r3
 800c42c:	4770      	bx	lr
	...

0800c430 <__kernel_rem_pio2>:
 800c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c434:	ed2d 8b02 	vpush	{d8}
 800c438:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c43c:	f112 0f14 	cmn.w	r2, #20
 800c440:	9306      	str	r3, [sp, #24]
 800c442:	9104      	str	r1, [sp, #16]
 800c444:	4bc2      	ldr	r3, [pc, #776]	; (800c750 <__kernel_rem_pio2+0x320>)
 800c446:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c448:	9009      	str	r0, [sp, #36]	; 0x24
 800c44a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	9b06      	ldr	r3, [sp, #24]
 800c452:	f103 33ff 	add.w	r3, r3, #4294967295
 800c456:	bfa8      	it	ge
 800c458:	1ed4      	subge	r4, r2, #3
 800c45a:	9305      	str	r3, [sp, #20]
 800c45c:	bfb2      	itee	lt
 800c45e:	2400      	movlt	r4, #0
 800c460:	2318      	movge	r3, #24
 800c462:	fb94 f4f3 	sdivge	r4, r4, r3
 800c466:	f06f 0317 	mvn.w	r3, #23
 800c46a:	fb04 3303 	mla	r3, r4, r3, r3
 800c46e:	eb03 0a02 	add.w	sl, r3, r2
 800c472:	9b00      	ldr	r3, [sp, #0]
 800c474:	9a05      	ldr	r2, [sp, #20]
 800c476:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800c740 <__kernel_rem_pio2+0x310>
 800c47a:	eb03 0802 	add.w	r8, r3, r2
 800c47e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c480:	1aa7      	subs	r7, r4, r2
 800c482:	ae20      	add	r6, sp, #128	; 0x80
 800c484:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c488:	2500      	movs	r5, #0
 800c48a:	4545      	cmp	r5, r8
 800c48c:	dd13      	ble.n	800c4b6 <__kernel_rem_pio2+0x86>
 800c48e:	9b06      	ldr	r3, [sp, #24]
 800c490:	aa20      	add	r2, sp, #128	; 0x80
 800c492:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c496:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c49a:	f04f 0800 	mov.w	r8, #0
 800c49e:	9b00      	ldr	r3, [sp, #0]
 800c4a0:	4598      	cmp	r8, r3
 800c4a2:	dc31      	bgt.n	800c508 <__kernel_rem_pio2+0xd8>
 800c4a4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800c740 <__kernel_rem_pio2+0x310>
 800c4a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c4ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c4b0:	462f      	mov	r7, r5
 800c4b2:	2600      	movs	r6, #0
 800c4b4:	e01b      	b.n	800c4ee <__kernel_rem_pio2+0xbe>
 800c4b6:	42ef      	cmn	r7, r5
 800c4b8:	d407      	bmi.n	800c4ca <__kernel_rem_pio2+0x9a>
 800c4ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c4be:	f7f4 f839 	bl	8000534 <__aeabi_i2d>
 800c4c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c4c6:	3501      	adds	r5, #1
 800c4c8:	e7df      	b.n	800c48a <__kernel_rem_pio2+0x5a>
 800c4ca:	ec51 0b18 	vmov	r0, r1, d8
 800c4ce:	e7f8      	b.n	800c4c2 <__kernel_rem_pio2+0x92>
 800c4d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c4d8:	f7f4 f896 	bl	8000608 <__aeabi_dmul>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4e4:	f7f3 feda 	bl	800029c <__adddf3>
 800c4e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4ec:	3601      	adds	r6, #1
 800c4ee:	9b05      	ldr	r3, [sp, #20]
 800c4f0:	429e      	cmp	r6, r3
 800c4f2:	f1a7 0708 	sub.w	r7, r7, #8
 800c4f6:	ddeb      	ble.n	800c4d0 <__kernel_rem_pio2+0xa0>
 800c4f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4fc:	f108 0801 	add.w	r8, r8, #1
 800c500:	ecab 7b02 	vstmia	fp!, {d7}
 800c504:	3508      	adds	r5, #8
 800c506:	e7ca      	b.n	800c49e <__kernel_rem_pio2+0x6e>
 800c508:	9b00      	ldr	r3, [sp, #0]
 800c50a:	aa0c      	add	r2, sp, #48	; 0x30
 800c50c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c510:	930b      	str	r3, [sp, #44]	; 0x2c
 800c512:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c514:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c518:	9c00      	ldr	r4, [sp, #0]
 800c51a:	930a      	str	r3, [sp, #40]	; 0x28
 800c51c:	00e3      	lsls	r3, r4, #3
 800c51e:	9308      	str	r3, [sp, #32]
 800c520:	ab98      	add	r3, sp, #608	; 0x260
 800c522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c526:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c52a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800c52e:	ab70      	add	r3, sp, #448	; 0x1c0
 800c530:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c534:	46c3      	mov	fp, r8
 800c536:	46a1      	mov	r9, r4
 800c538:	f1b9 0f00 	cmp.w	r9, #0
 800c53c:	f1a5 0508 	sub.w	r5, r5, #8
 800c540:	dc77      	bgt.n	800c632 <__kernel_rem_pio2+0x202>
 800c542:	ec47 6b10 	vmov	d0, r6, r7
 800c546:	4650      	mov	r0, sl
 800c548:	f000 fac2 	bl	800cad0 <scalbn>
 800c54c:	ec57 6b10 	vmov	r6, r7, d0
 800c550:	2200      	movs	r2, #0
 800c552:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c556:	ee10 0a10 	vmov	r0, s0
 800c55a:	4639      	mov	r1, r7
 800c55c:	f7f4 f854 	bl	8000608 <__aeabi_dmul>
 800c560:	ec41 0b10 	vmov	d0, r0, r1
 800c564:	f000 fb34 	bl	800cbd0 <floor>
 800c568:	4b7a      	ldr	r3, [pc, #488]	; (800c754 <__kernel_rem_pio2+0x324>)
 800c56a:	ec51 0b10 	vmov	r0, r1, d0
 800c56e:	2200      	movs	r2, #0
 800c570:	f7f4 f84a 	bl	8000608 <__aeabi_dmul>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
 800c578:	4630      	mov	r0, r6
 800c57a:	4639      	mov	r1, r7
 800c57c:	f7f3 fe8c 	bl	8000298 <__aeabi_dsub>
 800c580:	460f      	mov	r7, r1
 800c582:	4606      	mov	r6, r0
 800c584:	f7f4 faf0 	bl	8000b68 <__aeabi_d2iz>
 800c588:	9002      	str	r0, [sp, #8]
 800c58a:	f7f3 ffd3 	bl	8000534 <__aeabi_i2d>
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	4630      	mov	r0, r6
 800c594:	4639      	mov	r1, r7
 800c596:	f7f3 fe7f 	bl	8000298 <__aeabi_dsub>
 800c59a:	f1ba 0f00 	cmp.w	sl, #0
 800c59e:	4606      	mov	r6, r0
 800c5a0:	460f      	mov	r7, r1
 800c5a2:	dd6d      	ble.n	800c680 <__kernel_rem_pio2+0x250>
 800c5a4:	1e61      	subs	r1, r4, #1
 800c5a6:	ab0c      	add	r3, sp, #48	; 0x30
 800c5a8:	9d02      	ldr	r5, [sp, #8]
 800c5aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c5ae:	f1ca 0018 	rsb	r0, sl, #24
 800c5b2:	fa43 f200 	asr.w	r2, r3, r0
 800c5b6:	4415      	add	r5, r2
 800c5b8:	4082      	lsls	r2, r0
 800c5ba:	1a9b      	subs	r3, r3, r2
 800c5bc:	aa0c      	add	r2, sp, #48	; 0x30
 800c5be:	9502      	str	r5, [sp, #8]
 800c5c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c5c4:	f1ca 0217 	rsb	r2, sl, #23
 800c5c8:	fa43 fb02 	asr.w	fp, r3, r2
 800c5cc:	f1bb 0f00 	cmp.w	fp, #0
 800c5d0:	dd65      	ble.n	800c69e <__kernel_rem_pio2+0x26e>
 800c5d2:	9b02      	ldr	r3, [sp, #8]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	9302      	str	r3, [sp, #8]
 800c5da:	4615      	mov	r5, r2
 800c5dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c5e0:	4294      	cmp	r4, r2
 800c5e2:	f300 809f 	bgt.w	800c724 <__kernel_rem_pio2+0x2f4>
 800c5e6:	f1ba 0f00 	cmp.w	sl, #0
 800c5ea:	dd07      	ble.n	800c5fc <__kernel_rem_pio2+0x1cc>
 800c5ec:	f1ba 0f01 	cmp.w	sl, #1
 800c5f0:	f000 80c1 	beq.w	800c776 <__kernel_rem_pio2+0x346>
 800c5f4:	f1ba 0f02 	cmp.w	sl, #2
 800c5f8:	f000 80c7 	beq.w	800c78a <__kernel_rem_pio2+0x35a>
 800c5fc:	f1bb 0f02 	cmp.w	fp, #2
 800c600:	d14d      	bne.n	800c69e <__kernel_rem_pio2+0x26e>
 800c602:	4632      	mov	r2, r6
 800c604:	463b      	mov	r3, r7
 800c606:	4954      	ldr	r1, [pc, #336]	; (800c758 <__kernel_rem_pio2+0x328>)
 800c608:	2000      	movs	r0, #0
 800c60a:	f7f3 fe45 	bl	8000298 <__aeabi_dsub>
 800c60e:	4606      	mov	r6, r0
 800c610:	460f      	mov	r7, r1
 800c612:	2d00      	cmp	r5, #0
 800c614:	d043      	beq.n	800c69e <__kernel_rem_pio2+0x26e>
 800c616:	4650      	mov	r0, sl
 800c618:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c748 <__kernel_rem_pio2+0x318>
 800c61c:	f000 fa58 	bl	800cad0 <scalbn>
 800c620:	4630      	mov	r0, r6
 800c622:	4639      	mov	r1, r7
 800c624:	ec53 2b10 	vmov	r2, r3, d0
 800c628:	f7f3 fe36 	bl	8000298 <__aeabi_dsub>
 800c62c:	4606      	mov	r6, r0
 800c62e:	460f      	mov	r7, r1
 800c630:	e035      	b.n	800c69e <__kernel_rem_pio2+0x26e>
 800c632:	4b4a      	ldr	r3, [pc, #296]	; (800c75c <__kernel_rem_pio2+0x32c>)
 800c634:	2200      	movs	r2, #0
 800c636:	4630      	mov	r0, r6
 800c638:	4639      	mov	r1, r7
 800c63a:	f7f3 ffe5 	bl	8000608 <__aeabi_dmul>
 800c63e:	f7f4 fa93 	bl	8000b68 <__aeabi_d2iz>
 800c642:	f7f3 ff77 	bl	8000534 <__aeabi_i2d>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	ec43 2b18 	vmov	d8, r2, r3
 800c64e:	4b44      	ldr	r3, [pc, #272]	; (800c760 <__kernel_rem_pio2+0x330>)
 800c650:	2200      	movs	r2, #0
 800c652:	f7f3 ffd9 	bl	8000608 <__aeabi_dmul>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4630      	mov	r0, r6
 800c65c:	4639      	mov	r1, r7
 800c65e:	f7f3 fe1b 	bl	8000298 <__aeabi_dsub>
 800c662:	f7f4 fa81 	bl	8000b68 <__aeabi_d2iz>
 800c666:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c66a:	f84b 0b04 	str.w	r0, [fp], #4
 800c66e:	ec51 0b18 	vmov	r0, r1, d8
 800c672:	f7f3 fe13 	bl	800029c <__adddf3>
 800c676:	f109 39ff 	add.w	r9, r9, #4294967295
 800c67a:	4606      	mov	r6, r0
 800c67c:	460f      	mov	r7, r1
 800c67e:	e75b      	b.n	800c538 <__kernel_rem_pio2+0x108>
 800c680:	d106      	bne.n	800c690 <__kernel_rem_pio2+0x260>
 800c682:	1e63      	subs	r3, r4, #1
 800c684:	aa0c      	add	r2, sp, #48	; 0x30
 800c686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c68a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800c68e:	e79d      	b.n	800c5cc <__kernel_rem_pio2+0x19c>
 800c690:	4b34      	ldr	r3, [pc, #208]	; (800c764 <__kernel_rem_pio2+0x334>)
 800c692:	2200      	movs	r2, #0
 800c694:	f7f4 fa3e 	bl	8000b14 <__aeabi_dcmpge>
 800c698:	2800      	cmp	r0, #0
 800c69a:	d140      	bne.n	800c71e <__kernel_rem_pio2+0x2ee>
 800c69c:	4683      	mov	fp, r0
 800c69e:	2200      	movs	r2, #0
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	4639      	mov	r1, r7
 800c6a6:	f7f4 fa17 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	f000 80c1 	beq.w	800c832 <__kernel_rem_pio2+0x402>
 800c6b0:	1e65      	subs	r5, r4, #1
 800c6b2:	462b      	mov	r3, r5
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	9900      	ldr	r1, [sp, #0]
 800c6b8:	428b      	cmp	r3, r1
 800c6ba:	da6d      	bge.n	800c798 <__kernel_rem_pio2+0x368>
 800c6bc:	2a00      	cmp	r2, #0
 800c6be:	f000 808a 	beq.w	800c7d6 <__kernel_rem_pio2+0x3a6>
 800c6c2:	ab0c      	add	r3, sp, #48	; 0x30
 800c6c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800c6c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f000 80ae 	beq.w	800c82e <__kernel_rem_pio2+0x3fe>
 800c6d2:	4650      	mov	r0, sl
 800c6d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c748 <__kernel_rem_pio2+0x318>
 800c6d8:	f000 f9fa 	bl	800cad0 <scalbn>
 800c6dc:	1c6b      	adds	r3, r5, #1
 800c6de:	00da      	lsls	r2, r3, #3
 800c6e0:	9205      	str	r2, [sp, #20]
 800c6e2:	ec57 6b10 	vmov	r6, r7, d0
 800c6e6:	aa70      	add	r2, sp, #448	; 0x1c0
 800c6e8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800c75c <__kernel_rem_pio2+0x32c>
 800c6ec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800c6f0:	462c      	mov	r4, r5
 800c6f2:	f04f 0800 	mov.w	r8, #0
 800c6f6:	2c00      	cmp	r4, #0
 800c6f8:	f280 80d4 	bge.w	800c8a4 <__kernel_rem_pio2+0x474>
 800c6fc:	462c      	mov	r4, r5
 800c6fe:	2c00      	cmp	r4, #0
 800c700:	f2c0 8102 	blt.w	800c908 <__kernel_rem_pio2+0x4d8>
 800c704:	4b18      	ldr	r3, [pc, #96]	; (800c768 <__kernel_rem_pio2+0x338>)
 800c706:	461e      	mov	r6, r3
 800c708:	ab70      	add	r3, sp, #448	; 0x1c0
 800c70a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800c70e:	1b2b      	subs	r3, r5, r4
 800c710:	f04f 0900 	mov.w	r9, #0
 800c714:	f04f 0a00 	mov.w	sl, #0
 800c718:	2700      	movs	r7, #0
 800c71a:	9306      	str	r3, [sp, #24]
 800c71c:	e0e6      	b.n	800c8ec <__kernel_rem_pio2+0x4bc>
 800c71e:	f04f 0b02 	mov.w	fp, #2
 800c722:	e756      	b.n	800c5d2 <__kernel_rem_pio2+0x1a2>
 800c724:	f8d8 3000 	ldr.w	r3, [r8]
 800c728:	bb05      	cbnz	r5, 800c76c <__kernel_rem_pio2+0x33c>
 800c72a:	b123      	cbz	r3, 800c736 <__kernel_rem_pio2+0x306>
 800c72c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c730:	f8c8 3000 	str.w	r3, [r8]
 800c734:	2301      	movs	r3, #1
 800c736:	3201      	adds	r2, #1
 800c738:	f108 0804 	add.w	r8, r8, #4
 800c73c:	461d      	mov	r5, r3
 800c73e:	e74f      	b.n	800c5e0 <__kernel_rem_pio2+0x1b0>
	...
 800c74c:	3ff00000 	.word	0x3ff00000
 800c750:	0800d2f8 	.word	0x0800d2f8
 800c754:	40200000 	.word	0x40200000
 800c758:	3ff00000 	.word	0x3ff00000
 800c75c:	3e700000 	.word	0x3e700000
 800c760:	41700000 	.word	0x41700000
 800c764:	3fe00000 	.word	0x3fe00000
 800c768:	0800d2b8 	.word	0x0800d2b8
 800c76c:	1acb      	subs	r3, r1, r3
 800c76e:	f8c8 3000 	str.w	r3, [r8]
 800c772:	462b      	mov	r3, r5
 800c774:	e7df      	b.n	800c736 <__kernel_rem_pio2+0x306>
 800c776:	1e62      	subs	r2, r4, #1
 800c778:	ab0c      	add	r3, sp, #48	; 0x30
 800c77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c77e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c782:	a90c      	add	r1, sp, #48	; 0x30
 800c784:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c788:	e738      	b.n	800c5fc <__kernel_rem_pio2+0x1cc>
 800c78a:	1e62      	subs	r2, r4, #1
 800c78c:	ab0c      	add	r3, sp, #48	; 0x30
 800c78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c792:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c796:	e7f4      	b.n	800c782 <__kernel_rem_pio2+0x352>
 800c798:	a90c      	add	r1, sp, #48	; 0x30
 800c79a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	430a      	orrs	r2, r1
 800c7a2:	e788      	b.n	800c6b6 <__kernel_rem_pio2+0x286>
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c7aa:	2900      	cmp	r1, #0
 800c7ac:	d0fa      	beq.n	800c7a4 <__kernel_rem_pio2+0x374>
 800c7ae:	9a08      	ldr	r2, [sp, #32]
 800c7b0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800c7b4:	446a      	add	r2, sp
 800c7b6:	3a98      	subs	r2, #152	; 0x98
 800c7b8:	9208      	str	r2, [sp, #32]
 800c7ba:	9a06      	ldr	r2, [sp, #24]
 800c7bc:	a920      	add	r1, sp, #128	; 0x80
 800c7be:	18a2      	adds	r2, r4, r2
 800c7c0:	18e3      	adds	r3, r4, r3
 800c7c2:	f104 0801 	add.w	r8, r4, #1
 800c7c6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c7ca:	9302      	str	r3, [sp, #8]
 800c7cc:	9b02      	ldr	r3, [sp, #8]
 800c7ce:	4543      	cmp	r3, r8
 800c7d0:	da04      	bge.n	800c7dc <__kernel_rem_pio2+0x3ac>
 800c7d2:	461c      	mov	r4, r3
 800c7d4:	e6a2      	b.n	800c51c <__kernel_rem_pio2+0xec>
 800c7d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e7e4      	b.n	800c7a6 <__kernel_rem_pio2+0x376>
 800c7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c7e2:	f7f3 fea7 	bl	8000534 <__aeabi_i2d>
 800c7e6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ec:	46ab      	mov	fp, r5
 800c7ee:	461c      	mov	r4, r3
 800c7f0:	f04f 0900 	mov.w	r9, #0
 800c7f4:	2600      	movs	r6, #0
 800c7f6:	2700      	movs	r7, #0
 800c7f8:	9b05      	ldr	r3, [sp, #20]
 800c7fa:	4599      	cmp	r9, r3
 800c7fc:	dd06      	ble.n	800c80c <__kernel_rem_pio2+0x3dc>
 800c7fe:	9b08      	ldr	r3, [sp, #32]
 800c800:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c804:	f108 0801 	add.w	r8, r8, #1
 800c808:	9308      	str	r3, [sp, #32]
 800c80a:	e7df      	b.n	800c7cc <__kernel_rem_pio2+0x39c>
 800c80c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c810:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c814:	f7f3 fef8 	bl	8000608 <__aeabi_dmul>
 800c818:	4602      	mov	r2, r0
 800c81a:	460b      	mov	r3, r1
 800c81c:	4630      	mov	r0, r6
 800c81e:	4639      	mov	r1, r7
 800c820:	f7f3 fd3c 	bl	800029c <__adddf3>
 800c824:	f109 0901 	add.w	r9, r9, #1
 800c828:	4606      	mov	r6, r0
 800c82a:	460f      	mov	r7, r1
 800c82c:	e7e4      	b.n	800c7f8 <__kernel_rem_pio2+0x3c8>
 800c82e:	3d01      	subs	r5, #1
 800c830:	e747      	b.n	800c6c2 <__kernel_rem_pio2+0x292>
 800c832:	ec47 6b10 	vmov	d0, r6, r7
 800c836:	f1ca 0000 	rsb	r0, sl, #0
 800c83a:	f000 f949 	bl	800cad0 <scalbn>
 800c83e:	ec57 6b10 	vmov	r6, r7, d0
 800c842:	4ba0      	ldr	r3, [pc, #640]	; (800cac4 <__kernel_rem_pio2+0x694>)
 800c844:	ee10 0a10 	vmov	r0, s0
 800c848:	2200      	movs	r2, #0
 800c84a:	4639      	mov	r1, r7
 800c84c:	f7f4 f962 	bl	8000b14 <__aeabi_dcmpge>
 800c850:	b1f8      	cbz	r0, 800c892 <__kernel_rem_pio2+0x462>
 800c852:	4b9d      	ldr	r3, [pc, #628]	; (800cac8 <__kernel_rem_pio2+0x698>)
 800c854:	2200      	movs	r2, #0
 800c856:	4630      	mov	r0, r6
 800c858:	4639      	mov	r1, r7
 800c85a:	f7f3 fed5 	bl	8000608 <__aeabi_dmul>
 800c85e:	f7f4 f983 	bl	8000b68 <__aeabi_d2iz>
 800c862:	4680      	mov	r8, r0
 800c864:	f7f3 fe66 	bl	8000534 <__aeabi_i2d>
 800c868:	4b96      	ldr	r3, [pc, #600]	; (800cac4 <__kernel_rem_pio2+0x694>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	f7f3 fecc 	bl	8000608 <__aeabi_dmul>
 800c870:	460b      	mov	r3, r1
 800c872:	4602      	mov	r2, r0
 800c874:	4639      	mov	r1, r7
 800c876:	4630      	mov	r0, r6
 800c878:	f7f3 fd0e 	bl	8000298 <__aeabi_dsub>
 800c87c:	f7f4 f974 	bl	8000b68 <__aeabi_d2iz>
 800c880:	1c65      	adds	r5, r4, #1
 800c882:	ab0c      	add	r3, sp, #48	; 0x30
 800c884:	f10a 0a18 	add.w	sl, sl, #24
 800c888:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c88c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c890:	e71f      	b.n	800c6d2 <__kernel_rem_pio2+0x2a2>
 800c892:	4630      	mov	r0, r6
 800c894:	4639      	mov	r1, r7
 800c896:	f7f4 f967 	bl	8000b68 <__aeabi_d2iz>
 800c89a:	ab0c      	add	r3, sp, #48	; 0x30
 800c89c:	4625      	mov	r5, r4
 800c89e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c8a2:	e716      	b.n	800c6d2 <__kernel_rem_pio2+0x2a2>
 800c8a4:	ab0c      	add	r3, sp, #48	; 0x30
 800c8a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c8aa:	f7f3 fe43 	bl	8000534 <__aeabi_i2d>
 800c8ae:	4632      	mov	r2, r6
 800c8b0:	463b      	mov	r3, r7
 800c8b2:	f7f3 fea9 	bl	8000608 <__aeabi_dmul>
 800c8b6:	4642      	mov	r2, r8
 800c8b8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c8bc:	464b      	mov	r3, r9
 800c8be:	4630      	mov	r0, r6
 800c8c0:	4639      	mov	r1, r7
 800c8c2:	f7f3 fea1 	bl	8000608 <__aeabi_dmul>
 800c8c6:	3c01      	subs	r4, #1
 800c8c8:	4606      	mov	r6, r0
 800c8ca:	460f      	mov	r7, r1
 800c8cc:	e713      	b.n	800c6f6 <__kernel_rem_pio2+0x2c6>
 800c8ce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800c8d2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800c8d6:	f7f3 fe97 	bl	8000608 <__aeabi_dmul>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	4648      	mov	r0, r9
 800c8e0:	4651      	mov	r1, sl
 800c8e2:	f7f3 fcdb 	bl	800029c <__adddf3>
 800c8e6:	3701      	adds	r7, #1
 800c8e8:	4681      	mov	r9, r0
 800c8ea:	468a      	mov	sl, r1
 800c8ec:	9b00      	ldr	r3, [sp, #0]
 800c8ee:	429f      	cmp	r7, r3
 800c8f0:	dc02      	bgt.n	800c8f8 <__kernel_rem_pio2+0x4c8>
 800c8f2:	9b06      	ldr	r3, [sp, #24]
 800c8f4:	429f      	cmp	r7, r3
 800c8f6:	ddea      	ble.n	800c8ce <__kernel_rem_pio2+0x49e>
 800c8f8:	9a06      	ldr	r2, [sp, #24]
 800c8fa:	ab48      	add	r3, sp, #288	; 0x120
 800c8fc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800c900:	e9c6 9a00 	strd	r9, sl, [r6]
 800c904:	3c01      	subs	r4, #1
 800c906:	e6fa      	b.n	800c6fe <__kernel_rem_pio2+0x2ce>
 800c908:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	dc0b      	bgt.n	800c926 <__kernel_rem_pio2+0x4f6>
 800c90e:	2b00      	cmp	r3, #0
 800c910:	dc39      	bgt.n	800c986 <__kernel_rem_pio2+0x556>
 800c912:	d05d      	beq.n	800c9d0 <__kernel_rem_pio2+0x5a0>
 800c914:	9b02      	ldr	r3, [sp, #8]
 800c916:	f003 0007 	and.w	r0, r3, #7
 800c91a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c91e:	ecbd 8b02 	vpop	{d8}
 800c922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c926:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c928:	2b03      	cmp	r3, #3
 800c92a:	d1f3      	bne.n	800c914 <__kernel_rem_pio2+0x4e4>
 800c92c:	9b05      	ldr	r3, [sp, #20]
 800c92e:	9500      	str	r5, [sp, #0]
 800c930:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c934:	eb0d 0403 	add.w	r4, sp, r3
 800c938:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800c93c:	46a2      	mov	sl, r4
 800c93e:	9b00      	ldr	r3, [sp, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	f1aa 0a08 	sub.w	sl, sl, #8
 800c946:	dc69      	bgt.n	800ca1c <__kernel_rem_pio2+0x5ec>
 800c948:	46aa      	mov	sl, r5
 800c94a:	f1ba 0f01 	cmp.w	sl, #1
 800c94e:	f1a4 0408 	sub.w	r4, r4, #8
 800c952:	f300 8083 	bgt.w	800ca5c <__kernel_rem_pio2+0x62c>
 800c956:	9c05      	ldr	r4, [sp, #20]
 800c958:	ab48      	add	r3, sp, #288	; 0x120
 800c95a:	441c      	add	r4, r3
 800c95c:	2000      	movs	r0, #0
 800c95e:	2100      	movs	r1, #0
 800c960:	2d01      	cmp	r5, #1
 800c962:	f300 809a 	bgt.w	800ca9a <__kernel_rem_pio2+0x66a>
 800c966:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800c96a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c96e:	f1bb 0f00 	cmp.w	fp, #0
 800c972:	f040 8098 	bne.w	800caa6 <__kernel_rem_pio2+0x676>
 800c976:	9b04      	ldr	r3, [sp, #16]
 800c978:	e9c3 7800 	strd	r7, r8, [r3]
 800c97c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c980:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c984:	e7c6      	b.n	800c914 <__kernel_rem_pio2+0x4e4>
 800c986:	9e05      	ldr	r6, [sp, #20]
 800c988:	ab48      	add	r3, sp, #288	; 0x120
 800c98a:	441e      	add	r6, r3
 800c98c:	462c      	mov	r4, r5
 800c98e:	2000      	movs	r0, #0
 800c990:	2100      	movs	r1, #0
 800c992:	2c00      	cmp	r4, #0
 800c994:	da33      	bge.n	800c9fe <__kernel_rem_pio2+0x5ce>
 800c996:	f1bb 0f00 	cmp.w	fp, #0
 800c99a:	d036      	beq.n	800ca0a <__kernel_rem_pio2+0x5da>
 800c99c:	4602      	mov	r2, r0
 800c99e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9a2:	9c04      	ldr	r4, [sp, #16]
 800c9a4:	e9c4 2300 	strd	r2, r3, [r4]
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c9b0:	f7f3 fc72 	bl	8000298 <__aeabi_dsub>
 800c9b4:	ae4a      	add	r6, sp, #296	; 0x128
 800c9b6:	2401      	movs	r4, #1
 800c9b8:	42a5      	cmp	r5, r4
 800c9ba:	da29      	bge.n	800ca10 <__kernel_rem_pio2+0x5e0>
 800c9bc:	f1bb 0f00 	cmp.w	fp, #0
 800c9c0:	d002      	beq.n	800c9c8 <__kernel_rem_pio2+0x598>
 800c9c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	9b04      	ldr	r3, [sp, #16]
 800c9ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c9ce:	e7a1      	b.n	800c914 <__kernel_rem_pio2+0x4e4>
 800c9d0:	9c05      	ldr	r4, [sp, #20]
 800c9d2:	ab48      	add	r3, sp, #288	; 0x120
 800c9d4:	441c      	add	r4, r3
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	2100      	movs	r1, #0
 800c9da:	2d00      	cmp	r5, #0
 800c9dc:	da09      	bge.n	800c9f2 <__kernel_rem_pio2+0x5c2>
 800c9de:	f1bb 0f00 	cmp.w	fp, #0
 800c9e2:	d002      	beq.n	800c9ea <__kernel_rem_pio2+0x5ba>
 800c9e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	9b04      	ldr	r3, [sp, #16]
 800c9ec:	e9c3 0100 	strd	r0, r1, [r3]
 800c9f0:	e790      	b.n	800c914 <__kernel_rem_pio2+0x4e4>
 800c9f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c9f6:	f7f3 fc51 	bl	800029c <__adddf3>
 800c9fa:	3d01      	subs	r5, #1
 800c9fc:	e7ed      	b.n	800c9da <__kernel_rem_pio2+0x5aa>
 800c9fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ca02:	f7f3 fc4b 	bl	800029c <__adddf3>
 800ca06:	3c01      	subs	r4, #1
 800ca08:	e7c3      	b.n	800c992 <__kernel_rem_pio2+0x562>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	e7c8      	b.n	800c9a2 <__kernel_rem_pio2+0x572>
 800ca10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ca14:	f7f3 fc42 	bl	800029c <__adddf3>
 800ca18:	3401      	adds	r4, #1
 800ca1a:	e7cd      	b.n	800c9b8 <__kernel_rem_pio2+0x588>
 800ca1c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ca20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ca24:	9b00      	ldr	r3, [sp, #0]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	4632      	mov	r2, r6
 800ca2c:	463b      	mov	r3, r7
 800ca2e:	4640      	mov	r0, r8
 800ca30:	4649      	mov	r1, r9
 800ca32:	f7f3 fc33 	bl	800029c <__adddf3>
 800ca36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4640      	mov	r0, r8
 800ca40:	4649      	mov	r1, r9
 800ca42:	f7f3 fc29 	bl	8000298 <__aeabi_dsub>
 800ca46:	4632      	mov	r2, r6
 800ca48:	463b      	mov	r3, r7
 800ca4a:	f7f3 fc27 	bl	800029c <__adddf3>
 800ca4e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ca52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ca56:	ed8a 7b00 	vstr	d7, [sl]
 800ca5a:	e770      	b.n	800c93e <__kernel_rem_pio2+0x50e>
 800ca5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ca60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ca64:	4640      	mov	r0, r8
 800ca66:	4632      	mov	r2, r6
 800ca68:	463b      	mov	r3, r7
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	f7f3 fc16 	bl	800029c <__adddf3>
 800ca70:	e9cd 0100 	strd	r0, r1, [sp]
 800ca74:	4602      	mov	r2, r0
 800ca76:	460b      	mov	r3, r1
 800ca78:	4640      	mov	r0, r8
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	f7f3 fc0c 	bl	8000298 <__aeabi_dsub>
 800ca80:	4632      	mov	r2, r6
 800ca82:	463b      	mov	r3, r7
 800ca84:	f7f3 fc0a 	bl	800029c <__adddf3>
 800ca88:	ed9d 7b00 	vldr	d7, [sp]
 800ca8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ca90:	ed84 7b00 	vstr	d7, [r4]
 800ca94:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca98:	e757      	b.n	800c94a <__kernel_rem_pio2+0x51a>
 800ca9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ca9e:	f7f3 fbfd 	bl	800029c <__adddf3>
 800caa2:	3d01      	subs	r5, #1
 800caa4:	e75c      	b.n	800c960 <__kernel_rem_pio2+0x530>
 800caa6:	9b04      	ldr	r3, [sp, #16]
 800caa8:	9a04      	ldr	r2, [sp, #16]
 800caaa:	601f      	str	r7, [r3, #0]
 800caac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800cab0:	605c      	str	r4, [r3, #4]
 800cab2:	609d      	str	r5, [r3, #8]
 800cab4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cab8:	60d3      	str	r3, [r2, #12]
 800caba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cabe:	6110      	str	r0, [r2, #16]
 800cac0:	6153      	str	r3, [r2, #20]
 800cac2:	e727      	b.n	800c914 <__kernel_rem_pio2+0x4e4>
 800cac4:	41700000 	.word	0x41700000
 800cac8:	3e700000 	.word	0x3e700000
 800cacc:	00000000 	.word	0x00000000

0800cad0 <scalbn>:
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	ec55 4b10 	vmov	r4, r5, d0
 800cad6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cada:	4606      	mov	r6, r0
 800cadc:	462b      	mov	r3, r5
 800cade:	b999      	cbnz	r1, 800cb08 <scalbn+0x38>
 800cae0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cae4:	4323      	orrs	r3, r4
 800cae6:	d03f      	beq.n	800cb68 <scalbn+0x98>
 800cae8:	4b35      	ldr	r3, [pc, #212]	; (800cbc0 <scalbn+0xf0>)
 800caea:	4629      	mov	r1, r5
 800caec:	ee10 0a10 	vmov	r0, s0
 800caf0:	2200      	movs	r2, #0
 800caf2:	f7f3 fd89 	bl	8000608 <__aeabi_dmul>
 800caf6:	4b33      	ldr	r3, [pc, #204]	; (800cbc4 <scalbn+0xf4>)
 800caf8:	429e      	cmp	r6, r3
 800cafa:	4604      	mov	r4, r0
 800cafc:	460d      	mov	r5, r1
 800cafe:	da10      	bge.n	800cb22 <scalbn+0x52>
 800cb00:	a327      	add	r3, pc, #156	; (adr r3, 800cba0 <scalbn+0xd0>)
 800cb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb06:	e01f      	b.n	800cb48 <scalbn+0x78>
 800cb08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cb0c:	4291      	cmp	r1, r2
 800cb0e:	d10c      	bne.n	800cb2a <scalbn+0x5a>
 800cb10:	ee10 2a10 	vmov	r2, s0
 800cb14:	4620      	mov	r0, r4
 800cb16:	4629      	mov	r1, r5
 800cb18:	f7f3 fbc0 	bl	800029c <__adddf3>
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	460d      	mov	r5, r1
 800cb20:	e022      	b.n	800cb68 <scalbn+0x98>
 800cb22:	460b      	mov	r3, r1
 800cb24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cb28:	3936      	subs	r1, #54	; 0x36
 800cb2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cb2e:	4296      	cmp	r6, r2
 800cb30:	dd0d      	ble.n	800cb4e <scalbn+0x7e>
 800cb32:	2d00      	cmp	r5, #0
 800cb34:	a11c      	add	r1, pc, #112	; (adr r1, 800cba8 <scalbn+0xd8>)
 800cb36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb3a:	da02      	bge.n	800cb42 <scalbn+0x72>
 800cb3c:	a11c      	add	r1, pc, #112	; (adr r1, 800cbb0 <scalbn+0xe0>)
 800cb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb42:	a319      	add	r3, pc, #100	; (adr r3, 800cba8 <scalbn+0xd8>)
 800cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb48:	f7f3 fd5e 	bl	8000608 <__aeabi_dmul>
 800cb4c:	e7e6      	b.n	800cb1c <scalbn+0x4c>
 800cb4e:	1872      	adds	r2, r6, r1
 800cb50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cb54:	428a      	cmp	r2, r1
 800cb56:	dcec      	bgt.n	800cb32 <scalbn+0x62>
 800cb58:	2a00      	cmp	r2, #0
 800cb5a:	dd08      	ble.n	800cb6e <scalbn+0x9e>
 800cb5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cb68:	ec45 4b10 	vmov	d0, r4, r5
 800cb6c:	bd70      	pop	{r4, r5, r6, pc}
 800cb6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cb72:	da08      	bge.n	800cb86 <scalbn+0xb6>
 800cb74:	2d00      	cmp	r5, #0
 800cb76:	a10a      	add	r1, pc, #40	; (adr r1, 800cba0 <scalbn+0xd0>)
 800cb78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb7c:	dac0      	bge.n	800cb00 <scalbn+0x30>
 800cb7e:	a10e      	add	r1, pc, #56	; (adr r1, 800cbb8 <scalbn+0xe8>)
 800cb80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb84:	e7bc      	b.n	800cb00 <scalbn+0x30>
 800cb86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb8a:	3236      	adds	r2, #54	; 0x36
 800cb8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cb94:	4620      	mov	r0, r4
 800cb96:	4b0c      	ldr	r3, [pc, #48]	; (800cbc8 <scalbn+0xf8>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	e7d5      	b.n	800cb48 <scalbn+0x78>
 800cb9c:	f3af 8000 	nop.w
 800cba0:	c2f8f359 	.word	0xc2f8f359
 800cba4:	01a56e1f 	.word	0x01a56e1f
 800cba8:	8800759c 	.word	0x8800759c
 800cbac:	7e37e43c 	.word	0x7e37e43c
 800cbb0:	8800759c 	.word	0x8800759c
 800cbb4:	fe37e43c 	.word	0xfe37e43c
 800cbb8:	c2f8f359 	.word	0xc2f8f359
 800cbbc:	81a56e1f 	.word	0x81a56e1f
 800cbc0:	43500000 	.word	0x43500000
 800cbc4:	ffff3cb0 	.word	0xffff3cb0
 800cbc8:	3c900000 	.word	0x3c900000
 800cbcc:	00000000 	.word	0x00000000

0800cbd0 <floor>:
 800cbd0:	ec51 0b10 	vmov	r0, r1, d0
 800cbd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbdc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800cbe0:	2e13      	cmp	r6, #19
 800cbe2:	ee10 5a10 	vmov	r5, s0
 800cbe6:	ee10 8a10 	vmov	r8, s0
 800cbea:	460c      	mov	r4, r1
 800cbec:	dc31      	bgt.n	800cc52 <floor+0x82>
 800cbee:	2e00      	cmp	r6, #0
 800cbf0:	da14      	bge.n	800cc1c <floor+0x4c>
 800cbf2:	a333      	add	r3, pc, #204	; (adr r3, 800ccc0 <floor+0xf0>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 fb50 	bl	800029c <__adddf3>
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f7f3 ff92 	bl	8000b28 <__aeabi_dcmpgt>
 800cc04:	b138      	cbz	r0, 800cc16 <floor+0x46>
 800cc06:	2c00      	cmp	r4, #0
 800cc08:	da53      	bge.n	800ccb2 <floor+0xe2>
 800cc0a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800cc0e:	4325      	orrs	r5, r4
 800cc10:	d052      	beq.n	800ccb8 <floor+0xe8>
 800cc12:	4c2d      	ldr	r4, [pc, #180]	; (800ccc8 <floor+0xf8>)
 800cc14:	2500      	movs	r5, #0
 800cc16:	4621      	mov	r1, r4
 800cc18:	4628      	mov	r0, r5
 800cc1a:	e024      	b.n	800cc66 <floor+0x96>
 800cc1c:	4f2b      	ldr	r7, [pc, #172]	; (800cccc <floor+0xfc>)
 800cc1e:	4137      	asrs	r7, r6
 800cc20:	ea01 0307 	and.w	r3, r1, r7
 800cc24:	4303      	orrs	r3, r0
 800cc26:	d01e      	beq.n	800cc66 <floor+0x96>
 800cc28:	a325      	add	r3, pc, #148	; (adr r3, 800ccc0 <floor+0xf0>)
 800cc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2e:	f7f3 fb35 	bl	800029c <__adddf3>
 800cc32:	2200      	movs	r2, #0
 800cc34:	2300      	movs	r3, #0
 800cc36:	f7f3 ff77 	bl	8000b28 <__aeabi_dcmpgt>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d0eb      	beq.n	800cc16 <floor+0x46>
 800cc3e:	2c00      	cmp	r4, #0
 800cc40:	bfbe      	ittt	lt
 800cc42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cc46:	4133      	asrlt	r3, r6
 800cc48:	18e4      	addlt	r4, r4, r3
 800cc4a:	ea24 0407 	bic.w	r4, r4, r7
 800cc4e:	2500      	movs	r5, #0
 800cc50:	e7e1      	b.n	800cc16 <floor+0x46>
 800cc52:	2e33      	cmp	r6, #51	; 0x33
 800cc54:	dd0b      	ble.n	800cc6e <floor+0x9e>
 800cc56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cc5a:	d104      	bne.n	800cc66 <floor+0x96>
 800cc5c:	ee10 2a10 	vmov	r2, s0
 800cc60:	460b      	mov	r3, r1
 800cc62:	f7f3 fb1b 	bl	800029c <__adddf3>
 800cc66:	ec41 0b10 	vmov	d0, r0, r1
 800cc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc6e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800cc72:	f04f 37ff 	mov.w	r7, #4294967295
 800cc76:	40df      	lsrs	r7, r3
 800cc78:	4238      	tst	r0, r7
 800cc7a:	d0f4      	beq.n	800cc66 <floor+0x96>
 800cc7c:	a310      	add	r3, pc, #64	; (adr r3, 800ccc0 <floor+0xf0>)
 800cc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc82:	f7f3 fb0b 	bl	800029c <__adddf3>
 800cc86:	2200      	movs	r2, #0
 800cc88:	2300      	movs	r3, #0
 800cc8a:	f7f3 ff4d 	bl	8000b28 <__aeabi_dcmpgt>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d0c1      	beq.n	800cc16 <floor+0x46>
 800cc92:	2c00      	cmp	r4, #0
 800cc94:	da0a      	bge.n	800ccac <floor+0xdc>
 800cc96:	2e14      	cmp	r6, #20
 800cc98:	d101      	bne.n	800cc9e <floor+0xce>
 800cc9a:	3401      	adds	r4, #1
 800cc9c:	e006      	b.n	800ccac <floor+0xdc>
 800cc9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cca2:	2301      	movs	r3, #1
 800cca4:	40b3      	lsls	r3, r6
 800cca6:	441d      	add	r5, r3
 800cca8:	45a8      	cmp	r8, r5
 800ccaa:	d8f6      	bhi.n	800cc9a <floor+0xca>
 800ccac:	ea25 0507 	bic.w	r5, r5, r7
 800ccb0:	e7b1      	b.n	800cc16 <floor+0x46>
 800ccb2:	2500      	movs	r5, #0
 800ccb4:	462c      	mov	r4, r5
 800ccb6:	e7ae      	b.n	800cc16 <floor+0x46>
 800ccb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ccbc:	e7ab      	b.n	800cc16 <floor+0x46>
 800ccbe:	bf00      	nop
 800ccc0:	8800759c 	.word	0x8800759c
 800ccc4:	7e37e43c 	.word	0x7e37e43c
 800ccc8:	bff00000 	.word	0xbff00000
 800cccc:	000fffff 	.word	0x000fffff

0800ccd0 <_init>:
 800ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd2:	bf00      	nop
 800ccd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccd6:	bc08      	pop	{r3}
 800ccd8:	469e      	mov	lr, r3
 800ccda:	4770      	bx	lr

0800ccdc <_fini>:
 800ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccde:	bf00      	nop
 800cce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cce2:	bc08      	pop	{r3}
 800cce4:	469e      	mov	lr, r3
 800cce6:	4770      	bx	lr
